
build/kernel/kernel：     文件格式 elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 00 11 00       	mov    $0x110000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc 60 33 13 80       	mov    $0x80133360,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 20 2f 10 80       	mov    $0x80102f20,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax
80100034:	66 90                	xchg   %ax,%ax
80100036:	66 90                	xchg   %ax,%ax
80100038:	66 90                	xchg   %ax,%ax
8010003a:	66 90                	xchg   %ax,%ax
8010003c:	66 90                	xchg   %ax,%ax
8010003e:	66 90                	xchg   %ax,%ax

80100040 <binit>:
  struct buf head;
} bcache;

void
binit(void)
{
80100040:	f3 0f 1e fb          	endbr32 
80100044:	55                   	push   %ebp
80100045:	89 e5                	mov    %esp,%ebp
80100047:	53                   	push   %ebx

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
  bcache.head.next = &bcache.head;
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100048:	bb 94 33 13 80       	mov    $0x80133394,%ebx
{
8010004d:	83 ec 0c             	sub    $0xc,%esp
  initlock(&bcache.lock, "bcache");
80100050:	68 00 d0 10 80       	push   $0x8010d000
80100055:	68 60 33 13 80       	push   $0x80133360
8010005a:	e8 d1 4e 00 00       	call   80104f30 <initlock>
  bcache.head.next = &bcache.head;
8010005f:	83 c4 10             	add    $0x10,%esp
80100062:	b8 5c b6 13 80       	mov    $0x8013b65c,%eax
  bcache.head.prev = &bcache.head;
80100067:	c7 05 ac b6 13 80 5c 	movl   $0x8013b65c,0x8013b6ac
8010006e:	b6 13 80 
  bcache.head.next = &bcache.head;
80100071:	c7 05 b0 b6 13 80 5c 	movl   $0x8013b65c,0x8013b6b0
80100078:	b6 13 80 
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
8010007b:	eb 05                	jmp    80100082 <binit+0x42>
8010007d:	8d 76 00             	lea    0x0(%esi),%esi
80100080:	89 d3                	mov    %edx,%ebx
    b->next = bcache.head.next;
80100082:	89 43 54             	mov    %eax,0x54(%ebx)
    b->prev = &bcache.head;
    initsleeplock(&b->lock, "buffer");
80100085:	83 ec 08             	sub    $0x8,%esp
80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
    b->prev = &bcache.head;
8010008b:	c7 43 50 5c b6 13 80 	movl   $0x8013b65c,0x50(%ebx)
    initsleeplock(&b->lock, "buffer");
80100092:	68 07 d0 10 80       	push   $0x8010d007
80100097:	50                   	push   %eax
80100098:	e8 53 4d 00 00       	call   80104df0 <initsleeplock>
    bcache.head.next->prev = b;
8010009d:	a1 b0 b6 13 80       	mov    0x8013b6b0,%eax
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
801000a2:	8d 93 5c 04 00 00    	lea    0x45c(%ebx),%edx
801000a8:	83 c4 10             	add    $0x10,%esp
    bcache.head.next->prev = b;
801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
    bcache.head.next = b;
801000ae:	89 d8                	mov    %ebx,%eax
801000b0:	89 1d b0 b6 13 80    	mov    %ebx,0x8013b6b0
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
801000b6:	81 fb 00 b2 13 80    	cmp    $0x8013b200,%ebx
801000bc:	75 c2                	jne    80100080 <binit+0x40>
  }
}
801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801000c1:	c9                   	leave  
801000c2:	c3                   	ret    
801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801000d0 <bread>:
}

// Return a locked buf with the contents of the indicated block.
struct buf*
bread(uint dev, uint blockno)
{
801000d0:	f3 0f 1e fb          	endbr32 
801000d4:	55                   	push   %ebp
801000d5:	89 e5                	mov    %esp,%ebp
801000d7:	57                   	push   %edi
801000d8:	56                   	push   %esi
801000d9:	53                   	push   %ebx
801000da:	83 ec 18             	sub    $0x18,%esp
801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
  acquire(&bcache.lock);
801000e3:	68 60 33 13 80       	push   $0x80133360
801000e8:	e8 c3 4f 00 00       	call   801050b0 <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
801000ed:	8b 1d b0 b6 13 80    	mov    0x8013b6b0,%ebx
801000f3:	83 c4 10             	add    $0x10,%esp
801000f6:	81 fb 5c b6 13 80    	cmp    $0x8013b65c,%ebx
801000fc:	75 0d                	jne    8010010b <bread+0x3b>
801000fe:	eb 20                	jmp    80100120 <bread+0x50>
80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
80100103:	81 fb 5c b6 13 80    	cmp    $0x8013b65c,%ebx
80100109:	74 15                	je     80100120 <bread+0x50>
    if(b->dev == dev && b->blockno == blockno){
8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
8010010e:	75 f0                	jne    80100100 <bread+0x30>
80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
80100113:	75 eb                	jne    80100100 <bread+0x30>
      b->refcnt++;
80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
      release(&bcache.lock);
80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010011f:	90                   	nop
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100120:	8b 1d ac b6 13 80    	mov    0x8013b6ac,%ebx
80100126:	81 fb 5c b6 13 80    	cmp    $0x8013b65c,%ebx
8010012c:	75 0d                	jne    8010013b <bread+0x6b>
8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
80100133:	81 fb 5c b6 13 80    	cmp    $0x8013b65c,%ebx
80100139:	74 65                	je     801001a0 <bread+0xd0>
    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
8010013e:	85 c0                	test   %eax,%eax
80100140:	75 ee                	jne    80100130 <bread+0x60>
80100142:	f6 03 04             	testb  $0x4,(%ebx)
80100145:	75 e9                	jne    80100130 <bread+0x60>
      b->dev = dev;
80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
      b->blockno = blockno;
8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
      b->flags = 0;
8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
      b->refcnt = 1;
80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
      release(&bcache.lock);
8010015a:	83 ec 0c             	sub    $0xc,%esp
8010015d:	68 60 33 13 80       	push   $0x80133360
80100162:	e8 09 50 00 00       	call   80105170 <release>
      acquiresleep(&b->lock);
80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
8010016a:	89 04 24             	mov    %eax,(%esp)
8010016d:	e8 be 4c 00 00       	call   80104e30 <acquiresleep>
      return b;
80100172:	83 c4 10             	add    $0x10,%esp
  struct buf *b;

  b = bget(dev, blockno);
  if((b->flags & B_VALID) == 0) {
80100175:	f6 03 02             	testb  $0x2,(%ebx)
80100178:	74 0e                	je     80100188 <bread+0xb8>
    iderw(b);
  }
  return b;
}
8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010017d:	89 d8                	mov    %ebx,%eax
8010017f:	5b                   	pop    %ebx
80100180:	5e                   	pop    %esi
80100181:	5f                   	pop    %edi
80100182:	5d                   	pop    %ebp
80100183:	c3                   	ret    
80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    iderw(b);
80100188:	83 ec 0c             	sub    $0xc,%esp
8010018b:	53                   	push   %ebx
8010018c:	e8 cf 1f 00 00       	call   80102160 <iderw>
80100191:	83 c4 10             	add    $0x10,%esp
}
80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100197:	89 d8                	mov    %ebx,%eax
80100199:	5b                   	pop    %ebx
8010019a:	5e                   	pop    %esi
8010019b:	5f                   	pop    %edi
8010019c:	5d                   	pop    %ebp
8010019d:	c3                   	ret    
8010019e:	66 90                	xchg   %ax,%ax
  panic("bget: no buffers");
801001a0:	83 ec 0c             	sub    $0xc,%esp
801001a3:	68 0e d0 10 80       	push   $0x8010d00e
801001a8:	e8 73 02 00 00       	call   80100420 <panic>
801001ad:	8d 76 00             	lea    0x0(%esi),%esi

801001b0 <bwrite>:

// Write b's contents to disk.  Must be locked.
void
bwrite(struct buf *b)
{
801001b0:	f3 0f 1e fb          	endbr32 
801001b4:	55                   	push   %ebp
801001b5:	89 e5                	mov    %esp,%ebp
801001b7:	53                   	push   %ebx
801001b8:	83 ec 10             	sub    $0x10,%esp
801001bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(!holdingsleep(&b->lock))
801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
801001c1:	50                   	push   %eax
801001c2:	e8 09 4d 00 00       	call   80104ed0 <holdingsleep>
801001c7:	83 c4 10             	add    $0x10,%esp
801001ca:	85 c0                	test   %eax,%eax
801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
    panic("bwrite");
  b->flags |= B_DIRTY;
801001ce:	83 0b 04             	orl    $0x4,(%ebx)
  iderw(b);
801001d1:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801001d7:	c9                   	leave  
  iderw(b);
801001d8:	e9 83 1f 00 00       	jmp    80102160 <iderw>
    panic("bwrite");
801001dd:	83 ec 0c             	sub    $0xc,%esp
801001e0:	68 1f d0 10 80       	push   $0x8010d01f
801001e5:	e8 36 02 00 00       	call   80100420 <panic>
801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801001f0 <brelse>:

// Release a locked buffer.
// Move to the head of the MRU list.
void
brelse(struct buf *b)
{
801001f0:	f3 0f 1e fb          	endbr32 
801001f4:	55                   	push   %ebp
801001f5:	89 e5                	mov    %esp,%ebp
801001f7:	56                   	push   %esi
801001f8:	53                   	push   %ebx
801001f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(!holdingsleep(&b->lock))
801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
801001ff:	83 ec 0c             	sub    $0xc,%esp
80100202:	56                   	push   %esi
80100203:	e8 c8 4c 00 00       	call   80104ed0 <holdingsleep>
80100208:	83 c4 10             	add    $0x10,%esp
8010020b:	85 c0                	test   %eax,%eax
8010020d:	74 66                	je     80100275 <brelse+0x85>
    panic("brelse");

  releasesleep(&b->lock);
8010020f:	83 ec 0c             	sub    $0xc,%esp
80100212:	56                   	push   %esi
80100213:	e8 78 4c 00 00       	call   80104e90 <releasesleep>

  acquire(&bcache.lock);
80100218:	c7 04 24 60 33 13 80 	movl   $0x80133360,(%esp)
8010021f:	e8 8c 4e 00 00       	call   801050b0 <acquire>
  b->refcnt--;
80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
  if (b->refcnt == 0) {
80100227:	83 c4 10             	add    $0x10,%esp
  b->refcnt--;
8010022a:	83 e8 01             	sub    $0x1,%eax
8010022d:	89 43 4c             	mov    %eax,0x4c(%ebx)
  if (b->refcnt == 0) {
80100230:	85 c0                	test   %eax,%eax
80100232:	75 2f                	jne    80100263 <brelse+0x73>
    // no one is waiting for it.
    b->next->prev = b->prev;
80100234:	8b 43 54             	mov    0x54(%ebx),%eax
80100237:	8b 53 50             	mov    0x50(%ebx),%edx
8010023a:	89 50 50             	mov    %edx,0x50(%eax)
    b->prev->next = b->next;
8010023d:	8b 43 50             	mov    0x50(%ebx),%eax
80100240:	8b 53 54             	mov    0x54(%ebx),%edx
80100243:	89 50 54             	mov    %edx,0x54(%eax)
    b->next = bcache.head.next;
80100246:	a1 b0 b6 13 80       	mov    0x8013b6b0,%eax
    b->prev = &bcache.head;
8010024b:	c7 43 50 5c b6 13 80 	movl   $0x8013b65c,0x50(%ebx)
    b->next = bcache.head.next;
80100252:	89 43 54             	mov    %eax,0x54(%ebx)
    bcache.head.next->prev = b;
80100255:	a1 b0 b6 13 80       	mov    0x8013b6b0,%eax
8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
    bcache.head.next = b;
8010025d:	89 1d b0 b6 13 80    	mov    %ebx,0x8013b6b0
  }
  
  release(&bcache.lock);
80100263:	c7 45 08 60 33 13 80 	movl   $0x80133360,0x8(%ebp)
}
8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010026d:	5b                   	pop    %ebx
8010026e:	5e                   	pop    %esi
8010026f:	5d                   	pop    %ebp
  release(&bcache.lock);
80100270:	e9 fb 4e 00 00       	jmp    80105170 <release>
    panic("brelse");
80100275:	83 ec 0c             	sub    $0xc,%esp
80100278:	68 26 d0 10 80       	push   $0x8010d026
8010027d:	e8 9e 01 00 00       	call   80100420 <panic>
80100282:	66 90                	xchg   %ax,%ax
80100284:	66 90                	xchg   %ax,%ax
80100286:	66 90                	xchg   %ax,%ax
80100288:	66 90                	xchg   %ax,%ax
8010028a:	66 90                	xchg   %ax,%ax
8010028c:	66 90                	xchg   %ax,%ax
8010028e:	66 90                	xchg   %ax,%ax

80100290 <consoleread>:
  }
}

int
consoleread(struct inode *ip, char *dst, int n)
{
80100290:	f3 0f 1e fb          	endbr32 
80100294:	55                   	push   %ebp
80100295:	89 e5                	mov    %esp,%ebp
80100297:	57                   	push   %edi
80100298:	56                   	push   %esi
80100299:	53                   	push   %ebx
8010029a:	83 ec 18             	sub    $0x18,%esp
  uint target;
  int c;

  iunlock(ip);
8010029d:	ff 75 08             	pushl  0x8(%ebp)
{
801002a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
  target = n;
801002a3:	89 de                	mov    %ebx,%esi
  iunlock(ip);
801002a5:	e8 76 14 00 00       	call   80101720 <iunlock>
  acquire(&cons.lock);
801002aa:	c7 04 24 60 15 11 80 	movl   $0x80111560,(%esp)
801002b1:	e8 fa 4d 00 00       	call   801050b0 <acquire>
        // caller gets a 0-byte result.
        input.r--;
      }
      break;
    }
    *dst++ = c;
801002b6:	8b 7d 0c             	mov    0xc(%ebp),%edi
  while(n > 0){
801002b9:	83 c4 10             	add    $0x10,%esp
    *dst++ = c;
801002bc:	01 df                	add    %ebx,%edi
  while(n > 0){
801002be:	85 db                	test   %ebx,%ebx
801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
    while(input.r == input.w){
801002c6:	a1 40 bb 13 80       	mov    0x8013bb40,%eax
801002cb:	3b 05 44 bb 13 80    	cmp    0x8013bb44,%eax
801002d1:	74 27                	je     801002fa <consoleread+0x6a>
801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
801002d5:	8d 76 00             	lea    0x0(%esi),%esi
      sleep(&input.r, &cons.lock);
801002d8:	83 ec 08             	sub    $0x8,%esp
801002db:	68 60 15 11 80       	push   $0x80111560
801002e0:	68 40 bb 13 80       	push   $0x8013bb40
801002e5:	e8 86 47 00 00       	call   80104a70 <sleep>
    while(input.r == input.w){
801002ea:	a1 40 bb 13 80       	mov    0x8013bb40,%eax
801002ef:	83 c4 10             	add    $0x10,%esp
801002f2:	3b 05 44 bb 13 80    	cmp    0x8013bb44,%eax
801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
      if(myproc()->killed){
801002fa:	e8 b1 41 00 00       	call   801044b0 <myproc>
801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
80100302:	85 c9                	test   %ecx,%ecx
80100304:	74 d2                	je     801002d8 <consoleread+0x48>
        release(&cons.lock);
80100306:	83 ec 0c             	sub    $0xc,%esp
80100309:	68 60 15 11 80       	push   $0x80111560
8010030e:	e8 5d 4e 00 00       	call   80105170 <release>
        ilock(ip);
80100313:	5a                   	pop    %edx
80100314:	ff 75 08             	pushl  0x8(%ebp)
80100317:	e8 24 13 00 00       	call   80101640 <ilock>
        return -1;
8010031c:	83 c4 10             	add    $0x10,%esp
  }
  release(&cons.lock);
  ilock(ip);

  return target - n;
}
8010031f:	8d 65 f4             	lea    -0xc(%ebp),%esp
        return -1;
80100322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80100327:	5b                   	pop    %ebx
80100328:	5e                   	pop    %esi
80100329:	5f                   	pop    %edi
8010032a:	5d                   	pop    %ebp
8010032b:	c3                   	ret    
8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c = input.buf[input.r++ % INPUT_BUF];
80100330:	8d 50 01             	lea    0x1(%eax),%edx
80100333:	89 15 40 bb 13 80    	mov    %edx,0x8013bb40
80100339:	89 c2                	mov    %eax,%edx
8010033b:	83 e2 7f             	and    $0x7f,%edx
8010033e:	0f be 8a c0 ba 13 80 	movsbl -0x7fec4540(%edx),%ecx
    if(c == C('D')){  // EOF
80100345:	80 f9 04             	cmp    $0x4,%cl
80100348:	74 38                	je     80100382 <consoleread+0xf2>
    *dst++ = c;
8010034a:	89 d8                	mov    %ebx,%eax
    --n;
8010034c:	83 eb 01             	sub    $0x1,%ebx
    *dst++ = c;
8010034f:	f7 d8                	neg    %eax
80100351:	88 0c 07             	mov    %cl,(%edi,%eax,1)
    if(c == '\n')
80100354:	83 f9 0a             	cmp    $0xa,%ecx
80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
  release(&cons.lock);
8010035d:	83 ec 0c             	sub    $0xc,%esp
80100360:	68 60 15 11 80       	push   $0x80111560
80100365:	e8 06 4e 00 00       	call   80105170 <release>
  ilock(ip);
8010036a:	58                   	pop    %eax
8010036b:	ff 75 08             	pushl  0x8(%ebp)
8010036e:	e8 cd 12 00 00       	call   80101640 <ilock>
  return target - n;
80100373:	89 f0                	mov    %esi,%eax
80100375:	83 c4 10             	add    $0x10,%esp
}
80100378:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return target - n;
8010037b:	29 d8                	sub    %ebx,%eax
}
8010037d:	5b                   	pop    %ebx
8010037e:	5e                   	pop    %esi
8010037f:	5f                   	pop    %edi
80100380:	5d                   	pop    %ebp
80100381:	c3                   	ret    
      if(n < target){
80100382:	39 f3                	cmp    %esi,%ebx
80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
        input.r--;
80100386:	a3 40 bb 13 80       	mov    %eax,0x8013bb40
8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
8010038d:	8d 76 00             	lea    0x0(%esi),%esi

80100390 <cprintf>:
{
80100390:	f3 0f 1e fb          	endbr32 
80100394:	55                   	push   %ebp
80100395:	89 e5                	mov    %esp,%ebp
80100397:	83 ec 28             	sub    $0x28,%esp
    if(locking)
8010039a:	a1 94 15 11 80       	mov    0x80111594,%eax
8010039f:	85 c0                	test   %eax,%eax
801003a1:	75 2d                	jne    801003d0 <cprintf+0x40>
    va_start(ap, fmt);
801003a3:	8d 45 0c             	lea    0xc(%ebp),%eax
    int cnt = 0;
801003a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)putch, &cnt, fmt, ap);
801003ad:	50                   	push   %eax
801003ae:	8d 45 f4             	lea    -0xc(%ebp),%eax
801003b1:	ff 75 08             	pushl  0x8(%ebp)
801003b4:	50                   	push   %eax
801003b5:	68 30 06 10 80       	push   $0x80100630
801003ba:	e8 e1 39 00 00       	call   80103da0 <vprintfmt>
    return cnt;
801003bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if(locking)
801003c2:	83 c4 10             	add    $0x10,%esp
}
801003c5:	c9                   	leave  
801003c6:	c3                   	ret    
801003c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801003ce:	66 90                	xchg   %ax,%ax
        acquire(&cons.lock);
801003d0:	83 ec 0c             	sub    $0xc,%esp
801003d3:	68 60 15 11 80       	push   $0x80111560
801003d8:	e8 d3 4c 00 00       	call   801050b0 <acquire>
    va_start(ap, fmt);
801003dd:	8d 45 0c             	lea    0xc(%ebp),%eax
    int cnt = 0;
801003e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)putch, &cnt, fmt, ap);
801003e7:	50                   	push   %eax
801003e8:	8d 45 f4             	lea    -0xc(%ebp),%eax
801003eb:	ff 75 08             	pushl  0x8(%ebp)
801003ee:	50                   	push   %eax
801003ef:	68 30 06 10 80       	push   $0x80100630
801003f4:	e8 a7 39 00 00       	call   80103da0 <vprintfmt>
        release(&cons.lock);
801003f9:	83 c4 14             	add    $0x14,%esp
    return cnt;
801003fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
        release(&cons.lock);
801003ff:	68 60 15 11 80       	push   $0x80111560
    return cnt;
80100404:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        release(&cons.lock);
80100407:	e8 64 4d 00 00       	call   80105170 <release>
    return cnt;
8010040c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
        release(&cons.lock);
8010040f:	83 c4 10             	add    $0x10,%esp
}
80100412:	c9                   	leave  
80100413:	c3                   	ret    
80100414:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010041b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010041f:	90                   	nop

80100420 <panic>:
{
80100420:	f3 0f 1e fb          	endbr32 
80100424:	55                   	push   %ebp
80100425:	89 e5                	mov    %esp,%ebp
80100427:	56                   	push   %esi
80100428:	53                   	push   %ebx
80100429:	83 ec 30             	sub    $0x30,%esp
}

static inline void
cli(void)
{
  asm volatile("cli");
8010042c:	fa                   	cli    
  cons.locking = 0;
8010042d:	c7 05 94 15 11 80 00 	movl   $0x0,0x80111594
80100434:	00 00 00 
  getcallerpcs(&s, pcs);
80100437:	8d 5d d0             	lea    -0x30(%ebp),%ebx
8010043a:	8d 75 f8             	lea    -0x8(%ebp),%esi
  cprintf("lapicid %d: panic: ", lapicid());
8010043d:	e8 3e 23 00 00       	call   80102780 <lapicid>
80100442:	83 ec 08             	sub    $0x8,%esp
80100445:	50                   	push   %eax
80100446:	68 2d d0 10 80       	push   $0x8010d02d
8010044b:	e8 40 ff ff ff       	call   80100390 <cprintf>
  cprintf(s);
80100450:	58                   	pop    %eax
80100451:	ff 75 08             	pushl  0x8(%ebp)
80100454:	e8 37 ff ff ff       	call   80100390 <cprintf>
  cprintf("\n");
80100459:	c7 04 24 99 e5 10 80 	movl   $0x8010e599,(%esp)
80100460:	e8 2b ff ff ff       	call   80100390 <cprintf>
  getcallerpcs(&s, pcs);
80100465:	8d 45 08             	lea    0x8(%ebp),%eax
80100468:	5a                   	pop    %edx
80100469:	59                   	pop    %ecx
8010046a:	53                   	push   %ebx
8010046b:	50                   	push   %eax
8010046c:	e8 df 4a 00 00       	call   80104f50 <getcallerpcs>
  for(i=0; i<10; i++)
80100471:	83 c4 10             	add    $0x10,%esp
    cprintf(" %p", pcs[i]);
80100474:	83 ec 08             	sub    $0x8,%esp
80100477:	ff 33                	pushl  (%ebx)
80100479:	83 c3 04             	add    $0x4,%ebx
8010047c:	68 41 d0 10 80       	push   $0x8010d041
80100481:	e8 0a ff ff ff       	call   80100390 <cprintf>
  for(i=0; i<10; i++)
80100486:	83 c4 10             	add    $0x10,%esp
80100489:	39 f3                	cmp    %esi,%ebx
8010048b:	75 e7                	jne    80100474 <panic+0x54>
  panicked = 1; // freeze other CPU
8010048d:	c7 05 98 15 11 80 01 	movl   $0x1,0x80111598
80100494:	00 00 00 
  for(;;)
80100497:	eb fe                	jmp    80100497 <panic+0x77>
80100499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801004a0 <consputc.part.0>:
consputc(int c)
801004a0:	55                   	push   %ebp
801004a1:	89 e5                	mov    %esp,%ebp
801004a3:	57                   	push   %edi
801004a4:	56                   	push   %esi
801004a5:	53                   	push   %ebx
801004a6:	89 c3                	mov    %eax,%ebx
801004a8:	83 ec 1c             	sub    $0x1c,%esp
  if(c == BACKSPACE){
801004ab:	3d 00 01 00 00       	cmp    $0x100,%eax
801004b0:	0f 84 ea 00 00 00    	je     801005a0 <consputc.part.0+0x100>
    uartputc(c);
801004b6:	83 ec 0c             	sub    $0xc,%esp
801004b9:	50                   	push   %eax
801004ba:	e8 21 66 00 00       	call   80106ae0 <uartputc>
801004bf:	83 c4 10             	add    $0x10,%esp
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801004c2:	bf d4 03 00 00       	mov    $0x3d4,%edi
801004c7:	b8 0e 00 00 00       	mov    $0xe,%eax
801004cc:	89 fa                	mov    %edi,%edx
801004ce:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801004cf:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
801004d4:	89 ca                	mov    %ecx,%edx
801004d6:	ec                   	in     (%dx),%al
  pos = inb(CRTPORT+1) << 8;
801004d7:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801004da:	89 fa                	mov    %edi,%edx
801004dc:	c1 e0 08             	shl    $0x8,%eax
801004df:	89 c6                	mov    %eax,%esi
801004e1:	b8 0f 00 00 00       	mov    $0xf,%eax
801004e6:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801004e7:	89 ca                	mov    %ecx,%edx
801004e9:	ec                   	in     (%dx),%al
  pos |= inb(CRTPORT+1);
801004ea:	0f b6 c0             	movzbl %al,%eax
801004ed:	09 f0                	or     %esi,%eax
  if(c == '\n')
801004ef:	83 fb 0a             	cmp    $0xa,%ebx
801004f2:	0f 84 90 00 00 00    	je     80100588 <consputc.part.0+0xe8>
  else if(c == BACKSPACE){
801004f8:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
801004fe:	74 70                	je     80100570 <consputc.part.0+0xd0>
    crt[pos++] = (c&0xff) | 0x0700;  // black on white
80100500:	0f b6 db             	movzbl %bl,%ebx
80100503:	8d 70 01             	lea    0x1(%eax),%esi
80100506:	80 cf 07             	or     $0x7,%bh
80100509:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
80100510:	80 
  if(pos < 0 || pos > 25*80)
80100511:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
80100517:	0f 8f f9 00 00 00    	jg     80100616 <consputc.part.0+0x176>
  if((pos/80) >= 24){  // Scroll up.
8010051d:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
80100523:	0f 8f a7 00 00 00    	jg     801005d0 <consputc.part.0+0x130>
80100529:	89 f0                	mov    %esi,%eax
8010052b:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
80100532:	88 45 e7             	mov    %al,-0x19(%ebp)
80100535:	0f b6 fc             	movzbl %ah,%edi
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100538:	bb d4 03 00 00       	mov    $0x3d4,%ebx
8010053d:	b8 0e 00 00 00       	mov    $0xe,%eax
80100542:	89 da                	mov    %ebx,%edx
80100544:	ee                   	out    %al,(%dx)
80100545:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
8010054a:	89 f8                	mov    %edi,%eax
8010054c:	89 ca                	mov    %ecx,%edx
8010054e:	ee                   	out    %al,(%dx)
8010054f:	b8 0f 00 00 00       	mov    $0xf,%eax
80100554:	89 da                	mov    %ebx,%edx
80100556:	ee                   	out    %al,(%dx)
80100557:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
8010055b:	89 ca                	mov    %ecx,%edx
8010055d:	ee                   	out    %al,(%dx)
  crt[pos] = ' ' | 0x0700;
8010055e:	b8 20 07 00 00       	mov    $0x720,%eax
80100563:	66 89 06             	mov    %ax,(%esi)
}
80100566:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100569:	5b                   	pop    %ebx
8010056a:	5e                   	pop    %esi
8010056b:	5f                   	pop    %edi
8010056c:	5d                   	pop    %ebp
8010056d:	c3                   	ret    
8010056e:	66 90                	xchg   %ax,%ax
    if(pos > 0) --pos;
80100570:	8d 70 ff             	lea    -0x1(%eax),%esi
80100573:	85 c0                	test   %eax,%eax
80100575:	75 9a                	jne    80100511 <consputc.part.0+0x71>
80100577:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
8010057b:	be 00 80 0b 80       	mov    $0x800b8000,%esi
80100580:	31 ff                	xor    %edi,%edi
80100582:	eb b4                	jmp    80100538 <consputc.part.0+0x98>
80100584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    pos += 80 - pos%80;
80100588:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
8010058d:	f7 e2                	mul    %edx
8010058f:	c1 ea 06             	shr    $0x6,%edx
80100592:	8d 04 92             	lea    (%edx,%edx,4),%eax
80100595:	c1 e0 04             	shl    $0x4,%eax
80100598:	8d 70 50             	lea    0x50(%eax),%esi
8010059b:	e9 71 ff ff ff       	jmp    80100511 <consputc.part.0+0x71>
    uartputc('\b'); uartputc(' '); uartputc('\b');
801005a0:	83 ec 0c             	sub    $0xc,%esp
801005a3:	6a 08                	push   $0x8
801005a5:	e8 36 65 00 00       	call   80106ae0 <uartputc>
801005aa:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
801005b1:	e8 2a 65 00 00       	call   80106ae0 <uartputc>
801005b6:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
801005bd:	e8 1e 65 00 00       	call   80106ae0 <uartputc>
801005c2:	83 c4 10             	add    $0x10,%esp
801005c5:	e9 f8 fe ff ff       	jmp    801004c2 <consputc.part.0+0x22>
801005ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    memmove(crt, crt+80, sizeof(crt[0])*23*80);
801005d0:	83 ec 04             	sub    $0x4,%esp
    pos -= 80;
801005d3:	8d 5e b0             	lea    -0x50(%esi),%ebx
    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
801005d6:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
801005dd:	bf 07 00 00 00       	mov    $0x7,%edi
    memmove(crt, crt+80, sizeof(crt[0])*23*80);
801005e2:	68 60 0e 00 00       	push   $0xe60
801005e7:	68 a0 80 0b 80       	push   $0x800b80a0
801005ec:	68 00 80 0b 80       	push   $0x800b8000
801005f1:	e8 6a 4c 00 00       	call   80105260 <memmove>
    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
801005f6:	b8 80 07 00 00       	mov    $0x780,%eax
801005fb:	83 c4 0c             	add    $0xc,%esp
801005fe:	29 d8                	sub    %ebx,%eax
80100600:	01 c0                	add    %eax,%eax
80100602:	50                   	push   %eax
80100603:	6a 00                	push   $0x0
80100605:	56                   	push   %esi
80100606:	e8 b5 4b 00 00       	call   801051c0 <memset>
8010060b:	88 5d e7             	mov    %bl,-0x19(%ebp)
8010060e:	83 c4 10             	add    $0x10,%esp
80100611:	e9 22 ff ff ff       	jmp    80100538 <consputc.part.0+0x98>
    panic("pos under/overflow");
80100616:	83 ec 0c             	sub    $0xc,%esp
80100619:	68 45 d0 10 80       	push   $0x8010d045
8010061e:	e8 fd fd ff ff       	call   80100420 <panic>
80100623:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010062a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80100630 <putch>:
{
80100630:	f3 0f 1e fb          	endbr32 
80100634:	55                   	push   %ebp
  if(panicked){
80100635:	8b 15 98 15 11 80    	mov    0x80111598,%edx
{
8010063b:	89 e5                	mov    %esp,%ebp
8010063d:	8b 45 08             	mov    0x8(%ebp),%eax
  if(panicked){
80100640:	85 d2                	test   %edx,%edx
80100642:	74 0c                	je     80100650 <putch+0x20>
  asm volatile("cli");
80100644:	fa                   	cli    
    for(;;)
80100645:	eb fe                	jmp    80100645 <putch+0x15>
80100647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010064e:	66 90                	xchg   %ax,%ax
}
80100650:	5d                   	pop    %ebp
80100651:	e9 4a fe ff ff       	jmp    801004a0 <consputc.part.0>
80100656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010065d:	8d 76 00             	lea    0x0(%esi),%esi

80100660 <consolewrite>:

int
consolewrite(struct inode *ip, char *buf, int n)
{
80100660:	f3 0f 1e fb          	endbr32 
80100664:	55                   	push   %ebp
80100665:	89 e5                	mov    %esp,%ebp
80100667:	57                   	push   %edi
80100668:	56                   	push   %esi
80100669:	53                   	push   %ebx
8010066a:	83 ec 18             	sub    $0x18,%esp
  int i;

  iunlock(ip);
8010066d:	ff 75 08             	pushl  0x8(%ebp)
{
80100670:	8b 5d 10             	mov    0x10(%ebp),%ebx
  iunlock(ip);
80100673:	e8 a8 10 00 00       	call   80101720 <iunlock>
  acquire(&cons.lock);
80100678:	c7 04 24 60 15 11 80 	movl   $0x80111560,(%esp)
8010067f:	e8 2c 4a 00 00       	call   801050b0 <acquire>
  for(i = 0; i < n; i++)
80100684:	83 c4 10             	add    $0x10,%esp
80100687:	85 db                	test   %ebx,%ebx
80100689:	7e 24                	jle    801006af <consolewrite+0x4f>
8010068b:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010068e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
  if(panicked){
80100691:	8b 15 98 15 11 80    	mov    0x80111598,%edx
80100697:	85 d2                	test   %edx,%edx
80100699:	74 05                	je     801006a0 <consolewrite+0x40>
8010069b:	fa                   	cli    
    for(;;)
8010069c:	eb fe                	jmp    8010069c <consolewrite+0x3c>
8010069e:	66 90                	xchg   %ax,%ax
    consputc(buf[i] & 0xff);
801006a0:	0f b6 07             	movzbl (%edi),%eax
801006a3:	83 c7 01             	add    $0x1,%edi
801006a6:	e8 f5 fd ff ff       	call   801004a0 <consputc.part.0>
  for(i = 0; i < n; i++)
801006ab:	39 fe                	cmp    %edi,%esi
801006ad:	75 e2                	jne    80100691 <consolewrite+0x31>
  release(&cons.lock);
801006af:	83 ec 0c             	sub    $0xc,%esp
801006b2:	68 60 15 11 80       	push   $0x80111560
801006b7:	e8 b4 4a 00 00       	call   80105170 <release>
  ilock(ip);
801006bc:	58                   	pop    %eax
801006bd:	ff 75 08             	pushl  0x8(%ebp)
801006c0:	e8 7b 0f 00 00       	call   80101640 <ilock>

  return n;
}
801006c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801006c8:	89 d8                	mov    %ebx,%eax
801006ca:	5b                   	pop    %ebx
801006cb:	5e                   	pop    %esi
801006cc:	5f                   	pop    %edi
801006cd:	5d                   	pop    %ebp
801006ce:	c3                   	ret    
801006cf:	90                   	nop

801006d0 <consoleintr>:
{
801006d0:	f3 0f 1e fb          	endbr32 
801006d4:	55                   	push   %ebp
801006d5:	89 e5                	mov    %esp,%ebp
801006d7:	57                   	push   %edi
801006d8:	56                   	push   %esi
  int c, doprocdump = 0;
801006d9:	31 f6                	xor    %esi,%esi
{
801006db:	53                   	push   %ebx
801006dc:	83 ec 18             	sub    $0x18,%esp
801006df:	8b 7d 08             	mov    0x8(%ebp),%edi
  acquire(&cons.lock);
801006e2:	68 60 15 11 80       	push   $0x80111560
801006e7:	e8 c4 49 00 00       	call   801050b0 <acquire>
  while((c = getc()) >= 0){
801006ec:	83 c4 10             	add    $0x10,%esp
801006ef:	eb 17                	jmp    80100708 <consoleintr+0x38>
    switch(c){
801006f1:	83 fb 08             	cmp    $0x8,%ebx
801006f4:	0f 84 f6 00 00 00    	je     801007f0 <consoleintr+0x120>
801006fa:	83 fb 10             	cmp    $0x10,%ebx
801006fd:	0f 85 15 01 00 00    	jne    80100818 <consoleintr+0x148>
80100703:	be 01 00 00 00       	mov    $0x1,%esi
  while((c = getc()) >= 0){
80100708:	ff d7                	call   *%edi
8010070a:	89 c3                	mov    %eax,%ebx
8010070c:	85 c0                	test   %eax,%eax
8010070e:	0f 88 23 01 00 00    	js     80100837 <consoleintr+0x167>
    switch(c){
80100714:	83 fb 15             	cmp    $0x15,%ebx
80100717:	74 77                	je     80100790 <consoleintr+0xc0>
80100719:	7e d6                	jle    801006f1 <consoleintr+0x21>
8010071b:	83 fb 7f             	cmp    $0x7f,%ebx
8010071e:	0f 84 cc 00 00 00    	je     801007f0 <consoleintr+0x120>
      if(c != 0 && input.e-input.r < INPUT_BUF){
80100724:	a1 48 bb 13 80       	mov    0x8013bb48,%eax
80100729:	89 c2                	mov    %eax,%edx
8010072b:	2b 15 40 bb 13 80    	sub    0x8013bb40,%edx
80100731:	83 fa 7f             	cmp    $0x7f,%edx
80100734:	77 d2                	ja     80100708 <consoleintr+0x38>
        c = (c == '\r') ? '\n' : c;
80100736:	8d 48 01             	lea    0x1(%eax),%ecx
80100739:	8b 15 98 15 11 80    	mov    0x80111598,%edx
8010073f:	83 e0 7f             	and    $0x7f,%eax
        input.buf[input.e++ % INPUT_BUF] = c;
80100742:	89 0d 48 bb 13 80    	mov    %ecx,0x8013bb48
        c = (c == '\r') ? '\n' : c;
80100748:	83 fb 0d             	cmp    $0xd,%ebx
8010074b:	0f 84 02 01 00 00    	je     80100853 <consoleintr+0x183>
        input.buf[input.e++ % INPUT_BUF] = c;
80100751:	88 98 c0 ba 13 80    	mov    %bl,-0x7fec4540(%eax)
  if(panicked){
80100757:	85 d2                	test   %edx,%edx
80100759:	0f 85 ff 00 00 00    	jne    8010085e <consoleintr+0x18e>
8010075f:	89 d8                	mov    %ebx,%eax
80100761:	e8 3a fd ff ff       	call   801004a0 <consputc.part.0>
        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
80100766:	83 fb 0a             	cmp    $0xa,%ebx
80100769:	0f 84 0f 01 00 00    	je     8010087e <consoleintr+0x1ae>
8010076f:	83 fb 04             	cmp    $0x4,%ebx
80100772:	0f 84 06 01 00 00    	je     8010087e <consoleintr+0x1ae>
80100778:	a1 40 bb 13 80       	mov    0x8013bb40,%eax
8010077d:	83 e8 80             	sub    $0xffffff80,%eax
80100780:	39 05 48 bb 13 80    	cmp    %eax,0x8013bb48
80100786:	75 80                	jne    80100708 <consoleintr+0x38>
80100788:	e9 f6 00 00 00       	jmp    80100883 <consoleintr+0x1b3>
8010078d:	8d 76 00             	lea    0x0(%esi),%esi
      while(input.e != input.w &&
80100790:	a1 48 bb 13 80       	mov    0x8013bb48,%eax
80100795:	39 05 44 bb 13 80    	cmp    %eax,0x8013bb44
8010079b:	0f 84 67 ff ff ff    	je     80100708 <consoleintr+0x38>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
801007a1:	83 e8 01             	sub    $0x1,%eax
801007a4:	89 c2                	mov    %eax,%edx
801007a6:	83 e2 7f             	and    $0x7f,%edx
      while(input.e != input.w &&
801007a9:	80 ba c0 ba 13 80 0a 	cmpb   $0xa,-0x7fec4540(%edx)
801007b0:	0f 84 52 ff ff ff    	je     80100708 <consoleintr+0x38>
  if(panicked){
801007b6:	8b 15 98 15 11 80    	mov    0x80111598,%edx
        input.e--;
801007bc:	a3 48 bb 13 80       	mov    %eax,0x8013bb48
  if(panicked){
801007c1:	85 d2                	test   %edx,%edx
801007c3:	74 0b                	je     801007d0 <consoleintr+0x100>
801007c5:	fa                   	cli    
    for(;;)
801007c6:	eb fe                	jmp    801007c6 <consoleintr+0xf6>
801007c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801007cf:	90                   	nop
801007d0:	b8 00 01 00 00       	mov    $0x100,%eax
801007d5:	e8 c6 fc ff ff       	call   801004a0 <consputc.part.0>
      while(input.e != input.w &&
801007da:	a1 48 bb 13 80       	mov    0x8013bb48,%eax
801007df:	3b 05 44 bb 13 80    	cmp    0x8013bb44,%eax
801007e5:	75 ba                	jne    801007a1 <consoleintr+0xd1>
801007e7:	e9 1c ff ff ff       	jmp    80100708 <consoleintr+0x38>
801007ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      if(input.e != input.w){
801007f0:	a1 48 bb 13 80       	mov    0x8013bb48,%eax
801007f5:	3b 05 44 bb 13 80    	cmp    0x8013bb44,%eax
801007fb:	0f 84 07 ff ff ff    	je     80100708 <consoleintr+0x38>
        input.e--;
80100801:	83 e8 01             	sub    $0x1,%eax
80100804:	a3 48 bb 13 80       	mov    %eax,0x8013bb48
  if(panicked){
80100809:	a1 98 15 11 80       	mov    0x80111598,%eax
8010080e:	85 c0                	test   %eax,%eax
80100810:	74 16                	je     80100828 <consoleintr+0x158>
80100812:	fa                   	cli    
    for(;;)
80100813:	eb fe                	jmp    80100813 <consoleintr+0x143>
80100815:	8d 76 00             	lea    0x0(%esi),%esi
      if(c != 0 && input.e-input.r < INPUT_BUF){
80100818:	85 db                	test   %ebx,%ebx
8010081a:	0f 84 e8 fe ff ff    	je     80100708 <consoleintr+0x38>
80100820:	e9 ff fe ff ff       	jmp    80100724 <consoleintr+0x54>
80100825:	8d 76 00             	lea    0x0(%esi),%esi
80100828:	b8 00 01 00 00       	mov    $0x100,%eax
8010082d:	e8 6e fc ff ff       	call   801004a0 <consputc.part.0>
80100832:	e9 d1 fe ff ff       	jmp    80100708 <consoleintr+0x38>
  release(&cons.lock);
80100837:	83 ec 0c             	sub    $0xc,%esp
8010083a:	68 60 15 11 80       	push   $0x80111560
8010083f:	e8 2c 49 00 00       	call   80105170 <release>
  if(doprocdump) {
80100844:	83 c4 10             	add    $0x10,%esp
80100847:	85 f6                	test   %esi,%esi
80100849:	75 1d                	jne    80100868 <consoleintr+0x198>
}
8010084b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010084e:	5b                   	pop    %ebx
8010084f:	5e                   	pop    %esi
80100850:	5f                   	pop    %edi
80100851:	5d                   	pop    %ebp
80100852:	c3                   	ret    
        input.buf[input.e++ % INPUT_BUF] = c;
80100853:	c6 80 c0 ba 13 80 0a 	movb   $0xa,-0x7fec4540(%eax)
  if(panicked){
8010085a:	85 d2                	test   %edx,%edx
8010085c:	74 16                	je     80100874 <consoleintr+0x1a4>
8010085e:	fa                   	cli    
    for(;;)
8010085f:	eb fe                	jmp    8010085f <consoleintr+0x18f>
80100861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}
80100868:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010086b:	5b                   	pop    %ebx
8010086c:	5e                   	pop    %esi
8010086d:	5f                   	pop    %edi
8010086e:	5d                   	pop    %ebp
    procdump();  // now call procdump() wo. cons.lock held
8010086f:	e9 ac 44 00 00       	jmp    80104d20 <procdump>
80100874:	b8 0a 00 00 00       	mov    $0xa,%eax
80100879:	e8 22 fc ff ff       	call   801004a0 <consputc.part.0>
        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
8010087e:	a1 48 bb 13 80       	mov    0x8013bb48,%eax
          wakeup(&input.r);
80100883:	83 ec 0c             	sub    $0xc,%esp
          input.w = input.e;
80100886:	a3 44 bb 13 80       	mov    %eax,0x8013bb44
          wakeup(&input.r);
8010088b:	68 40 bb 13 80       	push   $0x8013bb40
80100890:	e8 9b 43 00 00       	call   80104c30 <wakeup>
80100895:	83 c4 10             	add    $0x10,%esp
80100898:	e9 6b fe ff ff       	jmp    80100708 <consoleintr+0x38>
8010089d:	8d 76 00             	lea    0x0(%esi),%esi

801008a0 <consoleinit>:

void
consoleinit(void)
{
801008a0:	f3 0f 1e fb          	endbr32 
801008a4:	55                   	push   %ebp
801008a5:	89 e5                	mov    %esp,%ebp
801008a7:	83 ec 10             	sub    $0x10,%esp
  initlock(&cons.lock, "console");
801008aa:	68 58 d0 10 80       	push   $0x8010d058
801008af:	68 60 15 11 80       	push   $0x80111560
801008b4:	e8 77 46 00 00       	call   80104f30 <initlock>

  devsw[CONSOLE].write = consolewrite;
  devsw[CONSOLE].read = consoleread;
  cons.locking = 1;

  ioapicenable(IRQ_KBD, 0);
801008b9:	58                   	pop    %eax
801008ba:	5a                   	pop    %edx
801008bb:	6a 00                	push   $0x0
801008bd:	6a 01                	push   $0x1
  devsw[CONSOLE].write = consolewrite;
801008bf:	c7 05 ac c6 13 80 60 	movl   $0x80100660,0x8013c6ac
801008c6:	06 10 80 
  devsw[CONSOLE].read = consoleread;
801008c9:	c7 05 a8 c6 13 80 90 	movl   $0x80100290,0x8013c6a8
801008d0:	02 10 80 
  cons.locking = 1;
801008d3:	c7 05 94 15 11 80 01 	movl   $0x1,0x80111594
801008da:	00 00 00 
  ioapicenable(IRQ_KBD, 0);
801008dd:	e8 2e 1a 00 00       	call   80102310 <ioapicenable>
}
801008e2:	83 c4 10             	add    $0x10,%esp
801008e5:	c9                   	leave  
801008e6:	c3                   	ret    
801008e7:	66 90                	xchg   %ax,%ax
801008e9:	66 90                	xchg   %ax,%ax
801008eb:	66 90                	xchg   %ax,%ax
801008ed:	66 90                	xchg   %ax,%ax
801008ef:	90                   	nop

801008f0 <exec>:
#include "x86.h"
#include "elf.h"

int
exec(char *path, char **argv)
{
801008f0:	f3 0f 1e fb          	endbr32 
801008f4:	55                   	push   %ebp
801008f5:	89 e5                	mov    %esp,%ebp
801008f7:	57                   	push   %edi
801008f8:	56                   	push   %esi
801008f9:	53                   	push   %ebx
801008fa:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
  uint argc, sz, sp, ustack[3+MAXARG+1];
  struct elfhdr elf;
  struct inode *ip;
  struct proghdr ph;
  pde_t *pgdir, *oldpgdir;
  struct proc *curproc = myproc();
80100900:	e8 ab 3b 00 00       	call   801044b0 <myproc>
80100905:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)

  begin_op();
8010090b:	e8 00 23 00 00       	call   80102c10 <begin_op>

  if((ip = namei(path)) == 0){
80100910:	83 ec 0c             	sub    $0xc,%esp
80100913:	ff 75 08             	pushl  0x8(%ebp)
80100916:	e8 f5 15 00 00       	call   80101f10 <namei>
8010091b:	83 c4 10             	add    $0x10,%esp
8010091e:	85 c0                	test   %eax,%eax
80100920:	0f 84 fe 02 00 00    	je     80100c24 <exec+0x334>
    end_op();
    cprintf("exec: fail\n");
    return -1;
  }
  ilock(ip);
80100926:	83 ec 0c             	sub    $0xc,%esp
80100929:	89 c3                	mov    %eax,%ebx
8010092b:	50                   	push   %eax
8010092c:	e8 0f 0d 00 00       	call   80101640 <ilock>
  pgdir = 0;

  // Check ELF header
  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
80100931:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
80100937:	6a 34                	push   $0x34
80100939:	6a 00                	push   $0x0
8010093b:	50                   	push   %eax
8010093c:	53                   	push   %ebx
8010093d:	e8 fe 0f 00 00       	call   80101940 <readi>
80100942:	83 c4 20             	add    $0x20,%esp
80100945:	83 f8 34             	cmp    $0x34,%eax
80100948:	74 26                	je     80100970 <exec+0x80>

 bad:
  if(pgdir)
    freevm(pgdir);
  if(ip){
    iunlockput(ip);
8010094a:	83 ec 0c             	sub    $0xc,%esp
8010094d:	53                   	push   %ebx
8010094e:	e8 8d 0f 00 00       	call   801018e0 <iunlockput>
    end_op();
80100953:	e8 28 23 00 00       	call   80102c80 <end_op>
80100958:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
8010095b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80100960:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100963:	5b                   	pop    %ebx
80100964:	5e                   	pop    %esi
80100965:	5f                   	pop    %edi
80100966:	5d                   	pop    %ebp
80100967:	c3                   	ret    
80100968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010096f:	90                   	nop
  if(elf.magic != ELF_MAGIC)
80100970:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
80100977:	45 4c 46 
8010097a:	75 ce                	jne    8010094a <exec+0x5a>
  if((pgdir = setupkvm()) == 0)
8010097c:	e8 cf 72 00 00       	call   80107c50 <setupkvm>
80100981:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
80100987:	85 c0                	test   %eax,%eax
80100989:	74 bf                	je     8010094a <exec+0x5a>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
8010098b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
80100992:	00 
80100993:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
80100999:	0f 84 a4 02 00 00    	je     80100c43 <exec+0x353>
  sz = 0;
8010099f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
801009a6:	00 00 00 
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
801009a9:	31 ff                	xor    %edi,%edi
801009ab:	e9 86 00 00 00       	jmp    80100a36 <exec+0x146>
    if(ph.type != ELF_PROG_LOAD)
801009b0:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
801009b7:	75 6c                	jne    80100a25 <exec+0x135>
    if(ph.memsz < ph.filesz)
801009b9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
801009bf:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
801009c5:	0f 82 87 00 00 00    	jb     80100a52 <exec+0x162>
    if(ph.vaddr + ph.memsz < ph.vaddr)
801009cb:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
801009d1:	72 7f                	jb     80100a52 <exec+0x162>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
801009d3:	83 ec 04             	sub    $0x4,%esp
801009d6:	50                   	push   %eax
801009d7:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
801009dd:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
801009e3:	e8 88 70 00 00       	call   80107a70 <allocuvm>
801009e8:	83 c4 10             	add    $0x10,%esp
801009eb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
801009f1:	85 c0                	test   %eax,%eax
801009f3:	74 5d                	je     80100a52 <exec+0x162>
    if(ph.vaddr % PGSIZE != 0)
801009f5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
801009fb:	a9 ff 0f 00 00       	test   $0xfff,%eax
80100a00:	75 50                	jne    80100a52 <exec+0x162>
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
80100a02:	83 ec 0c             	sub    $0xc,%esp
80100a05:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
80100a0b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
80100a11:	53                   	push   %ebx
80100a12:	50                   	push   %eax
80100a13:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80100a19:	e8 82 6f 00 00       	call   801079a0 <loaduvm>
80100a1e:	83 c4 20             	add    $0x20,%esp
80100a21:	85 c0                	test   %eax,%eax
80100a23:	78 2d                	js     80100a52 <exec+0x162>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
80100a25:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
80100a2c:	83 c7 01             	add    $0x1,%edi
80100a2f:	83 c6 20             	add    $0x20,%esi
80100a32:	39 f8                	cmp    %edi,%eax
80100a34:	7e 3a                	jle    80100a70 <exec+0x180>
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
80100a36:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
80100a3c:	6a 20                	push   $0x20
80100a3e:	56                   	push   %esi
80100a3f:	50                   	push   %eax
80100a40:	53                   	push   %ebx
80100a41:	e8 fa 0e 00 00       	call   80101940 <readi>
80100a46:	83 c4 10             	add    $0x10,%esp
80100a49:	83 f8 20             	cmp    $0x20,%eax
80100a4c:	0f 84 5e ff ff ff    	je     801009b0 <exec+0xc0>
    freevm(pgdir);
80100a52:	83 ec 0c             	sub    $0xc,%esp
80100a55:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80100a5b:	e8 70 71 00 00       	call   80107bd0 <freevm>
  if(ip){
80100a60:	83 c4 10             	add    $0x10,%esp
80100a63:	e9 e2 fe ff ff       	jmp    8010094a <exec+0x5a>
80100a68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100a6f:	90                   	nop
80100a70:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
80100a76:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
80100a7c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
80100a82:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
  iunlockput(ip);
80100a88:	83 ec 0c             	sub    $0xc,%esp
80100a8b:	53                   	push   %ebx
80100a8c:	e8 4f 0e 00 00       	call   801018e0 <iunlockput>
  end_op();
80100a91:	e8 ea 21 00 00       	call   80102c80 <end_op>
  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
80100a96:	83 c4 0c             	add    $0xc,%esp
80100a99:	56                   	push   %esi
80100a9a:	57                   	push   %edi
80100a9b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
80100aa1:	57                   	push   %edi
80100aa2:	e8 c9 6f 00 00       	call   80107a70 <allocuvm>
80100aa7:	83 c4 10             	add    $0x10,%esp
80100aaa:	89 c6                	mov    %eax,%esi
80100aac:	85 c0                	test   %eax,%eax
80100aae:	0f 84 94 00 00 00    	je     80100b48 <exec+0x258>
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
80100ab4:	83 ec 08             	sub    $0x8,%esp
80100ab7:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
  for(argc = 0; argv[argc]; argc++) {
80100abd:	89 f3                	mov    %esi,%ebx
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
80100abf:	50                   	push   %eax
80100ac0:	57                   	push   %edi
  for(argc = 0; argv[argc]; argc++) {
80100ac1:	31 ff                	xor    %edi,%edi
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
80100ac3:	e8 28 72 00 00       	call   80107cf0 <clearpteu>
  for(argc = 0; argv[argc]; argc++) {
80100ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
80100acb:	83 c4 10             	add    $0x10,%esp
80100ace:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
80100ad4:	8b 00                	mov    (%eax),%eax
80100ad6:	85 c0                	test   %eax,%eax
80100ad8:	0f 84 8b 00 00 00    	je     80100b69 <exec+0x279>
80100ade:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
80100ae4:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
80100aea:	eb 23                	jmp    80100b0f <exec+0x21f>
80100aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100af0:	8b 45 0c             	mov    0xc(%ebp),%eax
    ustack[3+argc] = sp;
80100af3:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
  for(argc = 0; argv[argc]; argc++) {
80100afa:	83 c7 01             	add    $0x1,%edi
    ustack[3+argc] = sp;
80100afd:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
  for(argc = 0; argv[argc]; argc++) {
80100b03:	8b 04 b8             	mov    (%eax,%edi,4),%eax
80100b06:	85 c0                	test   %eax,%eax
80100b08:	74 59                	je     80100b63 <exec+0x273>
    if(argc >= MAXARG)
80100b0a:	83 ff 20             	cmp    $0x20,%edi
80100b0d:	74 39                	je     80100b48 <exec+0x258>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80100b0f:	83 ec 0c             	sub    $0xc,%esp
80100b12:	50                   	push   %eax
80100b13:	e8 a8 48 00 00       	call   801053c0 <strlen>
80100b18:	f7 d0                	not    %eax
80100b1a:	01 c3                	add    %eax,%ebx
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80100b1c:	58                   	pop    %eax
80100b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80100b20:	83 e3 fc             	and    $0xfffffffc,%ebx
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80100b23:	ff 34 b8             	pushl  (%eax,%edi,4)
80100b26:	e8 95 48 00 00       	call   801053c0 <strlen>
80100b2b:	83 c0 01             	add    $0x1,%eax
80100b2e:	50                   	push   %eax
80100b2f:	8b 45 0c             	mov    0xc(%ebp),%eax
80100b32:	ff 34 b8             	pushl  (%eax,%edi,4)
80100b35:	53                   	push   %ebx
80100b36:	56                   	push   %esi
80100b37:	e8 14 73 00 00       	call   80107e50 <copyout>
80100b3c:	83 c4 20             	add    $0x20,%esp
80100b3f:	85 c0                	test   %eax,%eax
80100b41:	79 ad                	jns    80100af0 <exec+0x200>
80100b43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100b47:	90                   	nop
    freevm(pgdir);
80100b48:	83 ec 0c             	sub    $0xc,%esp
80100b4b:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80100b51:	e8 7a 70 00 00       	call   80107bd0 <freevm>
80100b56:	83 c4 10             	add    $0x10,%esp
  return -1;
80100b59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100b5e:	e9 fd fd ff ff       	jmp    80100960 <exec+0x70>
80100b63:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
  ustack[2] = sp - (argc+1)*4;  // argv pointer
80100b69:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
80100b70:	89 d9                	mov    %ebx,%ecx
  ustack[3+argc] = 0;
80100b72:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
80100b79:	00 00 00 00 
  ustack[2] = sp - (argc+1)*4;  // argv pointer
80100b7d:	29 c1                	sub    %eax,%ecx
  sp -= (3+argc+1) * 4;
80100b7f:	83 c0 0c             	add    $0xc,%eax
  ustack[1] = argc;
80100b82:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
  sp -= (3+argc+1) * 4;
80100b88:	29 c3                	sub    %eax,%ebx
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
80100b8a:	50                   	push   %eax
80100b8b:	52                   	push   %edx
80100b8c:	53                   	push   %ebx
80100b8d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
  ustack[0] = 0xffffffff;  // fake return PC
80100b93:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
80100b9a:	ff ff ff 
  ustack[2] = sp - (argc+1)*4;  // argv pointer
80100b9d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
80100ba3:	e8 a8 72 00 00       	call   80107e50 <copyout>
80100ba8:	83 c4 10             	add    $0x10,%esp
80100bab:	85 c0                	test   %eax,%eax
80100bad:	78 99                	js     80100b48 <exec+0x258>
  for(last=s=path; *s; s++)
80100baf:	8b 45 08             	mov    0x8(%ebp),%eax
80100bb2:	8b 55 08             	mov    0x8(%ebp),%edx
80100bb5:	0f b6 00             	movzbl (%eax),%eax
80100bb8:	84 c0                	test   %al,%al
80100bba:	74 13                	je     80100bcf <exec+0x2df>
80100bbc:	89 d1                	mov    %edx,%ecx
80100bbe:	66 90                	xchg   %ax,%ax
    if(*s == '/')
80100bc0:	83 c1 01             	add    $0x1,%ecx
80100bc3:	3c 2f                	cmp    $0x2f,%al
  for(last=s=path; *s; s++)
80100bc5:	0f b6 01             	movzbl (%ecx),%eax
    if(*s == '/')
80100bc8:	0f 44 d1             	cmove  %ecx,%edx
  for(last=s=path; *s; s++)
80100bcb:	84 c0                	test   %al,%al
80100bcd:	75 f1                	jne    80100bc0 <exec+0x2d0>
  safestrcpy(curproc->name, last, sizeof(curproc->name));
80100bcf:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
80100bd5:	83 ec 04             	sub    $0x4,%esp
80100bd8:	6a 10                	push   $0x10
80100bda:	89 f8                	mov    %edi,%eax
80100bdc:	52                   	push   %edx
80100bdd:	83 c0 6c             	add    $0x6c,%eax
80100be0:	50                   	push   %eax
80100be1:	e8 9a 47 00 00       	call   80105380 <safestrcpy>
  curproc->pgdir = pgdir;
80100be6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
  oldpgdir = curproc->pgdir;
80100bec:	89 f8                	mov    %edi,%eax
80100bee:	8b 7f 04             	mov    0x4(%edi),%edi
  curproc->sz = sz;
80100bf1:	89 30                	mov    %esi,(%eax)
  curproc->pgdir = pgdir;
80100bf3:	89 48 04             	mov    %ecx,0x4(%eax)
  curproc->tf->eip = elf.entry;  // main
80100bf6:	89 c1                	mov    %eax,%ecx
80100bf8:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
80100bfe:	8b 40 18             	mov    0x18(%eax),%eax
80100c01:	89 50 38             	mov    %edx,0x38(%eax)
  curproc->tf->esp = sp;
80100c04:	8b 41 18             	mov    0x18(%ecx),%eax
80100c07:	89 58 44             	mov    %ebx,0x44(%eax)
  switchuvm(curproc);
80100c0a:	89 0c 24             	mov    %ecx,(%esp)
80100c0d:	e8 fe 6b 00 00       	call   80107810 <switchuvm>
  freevm(oldpgdir);
80100c12:	89 3c 24             	mov    %edi,(%esp)
80100c15:	e8 b6 6f 00 00       	call   80107bd0 <freevm>
  return 0;
80100c1a:	83 c4 10             	add    $0x10,%esp
80100c1d:	31 c0                	xor    %eax,%eax
80100c1f:	e9 3c fd ff ff       	jmp    80100960 <exec+0x70>
    end_op();
80100c24:	e8 57 20 00 00       	call   80102c80 <end_op>
    cprintf("exec: fail\n");
80100c29:	83 ec 0c             	sub    $0xc,%esp
80100c2c:	68 60 d0 10 80       	push   $0x8010d060
80100c31:	e8 5a f7 ff ff       	call   80100390 <cprintf>
    return -1;
80100c36:	83 c4 10             	add    $0x10,%esp
80100c39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100c3e:	e9 1d fd ff ff       	jmp    80100960 <exec+0x70>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
80100c43:	31 ff                	xor    %edi,%edi
80100c45:	be 00 20 00 00       	mov    $0x2000,%esi
80100c4a:	e9 39 fe ff ff       	jmp    80100a88 <exec+0x198>
80100c4f:	90                   	nop

80100c50 <fileinit>:
  struct file file[NFILE];
} ftable;

void
fileinit(void)
{
80100c50:	f3 0f 1e fb          	endbr32 
80100c54:	55                   	push   %ebp
80100c55:	89 e5                	mov    %esp,%ebp
80100c57:	83 ec 10             	sub    $0x10,%esp
  initlock(&ftable.lock, "ftable");
80100c5a:	68 6c d0 10 80       	push   $0x8010d06c
80100c5f:	68 60 bb 13 80       	push   $0x8013bb60
80100c64:	e8 c7 42 00 00       	call   80104f30 <initlock>
}
80100c69:	83 c4 10             	add    $0x10,%esp
80100c6c:	c9                   	leave  
80100c6d:	c3                   	ret    
80100c6e:	66 90                	xchg   %ax,%ax

80100c70 <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
80100c70:	f3 0f 1e fb          	endbr32 
80100c74:	55                   	push   %ebp
80100c75:	89 e5                	mov    %esp,%ebp
80100c77:	53                   	push   %ebx
  struct file *f;

  acquire(&ftable.lock);
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80100c78:	bb 94 bb 13 80       	mov    $0x8013bb94,%ebx
{
80100c7d:	83 ec 10             	sub    $0x10,%esp
  acquire(&ftable.lock);
80100c80:	68 60 bb 13 80       	push   $0x8013bb60
80100c85:	e8 26 44 00 00       	call   801050b0 <acquire>
80100c8a:	83 c4 10             	add    $0x10,%esp
80100c8d:	eb 0c                	jmp    80100c9b <filealloc+0x2b>
80100c8f:	90                   	nop
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80100c90:	83 c3 1c             	add    $0x1c,%ebx
80100c93:	81 fb 84 c6 13 80    	cmp    $0x8013c684,%ebx
80100c99:	74 25                	je     80100cc0 <filealloc+0x50>
    if(f->ref == 0){
80100c9b:	8b 43 04             	mov    0x4(%ebx),%eax
80100c9e:	85 c0                	test   %eax,%eax
80100ca0:	75 ee                	jne    80100c90 <filealloc+0x20>
      f->ref = 1;
      release(&ftable.lock);
80100ca2:	83 ec 0c             	sub    $0xc,%esp
      f->ref = 1;
80100ca5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
      release(&ftable.lock);
80100cac:	68 60 bb 13 80       	push   $0x8013bb60
80100cb1:	e8 ba 44 00 00       	call   80105170 <release>
      return f;
    }
  }
  release(&ftable.lock);
  return 0;
}
80100cb6:	89 d8                	mov    %ebx,%eax
      return f;
80100cb8:	83 c4 10             	add    $0x10,%esp
}
80100cbb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100cbe:	c9                   	leave  
80100cbf:	c3                   	ret    
  release(&ftable.lock);
80100cc0:	83 ec 0c             	sub    $0xc,%esp
  return 0;
80100cc3:	31 db                	xor    %ebx,%ebx
  release(&ftable.lock);
80100cc5:	68 60 bb 13 80       	push   $0x8013bb60
80100cca:	e8 a1 44 00 00       	call   80105170 <release>
}
80100ccf:	89 d8                	mov    %ebx,%eax
  return 0;
80100cd1:	83 c4 10             	add    $0x10,%esp
}
80100cd4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100cd7:	c9                   	leave  
80100cd8:	c3                   	ret    
80100cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80100ce0 <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
80100ce0:	f3 0f 1e fb          	endbr32 
80100ce4:	55                   	push   %ebp
80100ce5:	89 e5                	mov    %esp,%ebp
80100ce7:	53                   	push   %ebx
80100ce8:	83 ec 10             	sub    $0x10,%esp
80100ceb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&ftable.lock);
80100cee:	68 60 bb 13 80       	push   $0x8013bb60
80100cf3:	e8 b8 43 00 00       	call   801050b0 <acquire>
  if(f->ref < 1)
80100cf8:	8b 43 04             	mov    0x4(%ebx),%eax
80100cfb:	83 c4 10             	add    $0x10,%esp
80100cfe:	85 c0                	test   %eax,%eax
80100d00:	7e 1a                	jle    80100d1c <filedup+0x3c>
    panic("filedup");
  f->ref++;
80100d02:	83 c0 01             	add    $0x1,%eax
  release(&ftable.lock);
80100d05:	83 ec 0c             	sub    $0xc,%esp
  f->ref++;
80100d08:	89 43 04             	mov    %eax,0x4(%ebx)
  release(&ftable.lock);
80100d0b:	68 60 bb 13 80       	push   $0x8013bb60
80100d10:	e8 5b 44 00 00       	call   80105170 <release>
  return f;
}
80100d15:	89 d8                	mov    %ebx,%eax
80100d17:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100d1a:	c9                   	leave  
80100d1b:	c3                   	ret    
    panic("filedup");
80100d1c:	83 ec 0c             	sub    $0xc,%esp
80100d1f:	68 73 d0 10 80       	push   $0x8010d073
80100d24:	e8 f7 f6 ff ff       	call   80100420 <panic>
80100d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80100d30 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
80100d30:	f3 0f 1e fb          	endbr32 
80100d34:	55                   	push   %ebp
80100d35:	89 e5                	mov    %esp,%ebp
80100d37:	57                   	push   %edi
80100d38:	56                   	push   %esi
80100d39:	53                   	push   %ebx
80100d3a:	83 ec 28             	sub    $0x28,%esp
80100d3d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct file ff;

  acquire(&ftable.lock);
80100d40:	68 60 bb 13 80       	push   $0x8013bb60
80100d45:	e8 66 43 00 00       	call   801050b0 <acquire>
  if(f->ref < 1)
80100d4a:	8b 53 04             	mov    0x4(%ebx),%edx
80100d4d:	83 c4 10             	add    $0x10,%esp
80100d50:	85 d2                	test   %edx,%edx
80100d52:	0f 8e ba 00 00 00    	jle    80100e12 <fileclose+0xe2>
    panic("fileclose");
  if(--f->ref > 0){
80100d58:	83 ea 01             	sub    $0x1,%edx
80100d5b:	89 53 04             	mov    %edx,0x4(%ebx)
80100d5e:	75 48                	jne    80100da8 <fileclose+0x78>
    release(&ftable.lock);
    return;
  }
  ff = *f;
80100d60:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
  f->ref = 0;
  f->type = FD_NONE;
  release(&ftable.lock);
80100d64:	83 ec 0c             	sub    $0xc,%esp
  ff = *f;
80100d67:	8b 3b                	mov    (%ebx),%edi
  f->type = FD_NONE;
80100d69:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  ff = *f;
80100d6f:	8b 73 0c             	mov    0xc(%ebx),%esi
80100d72:	88 45 e7             	mov    %al,-0x19(%ebp)
80100d75:	8b 43 10             	mov    0x10(%ebx),%eax
80100d78:	89 45 e0             	mov    %eax,-0x20(%ebp)
80100d7b:	8b 43 14             	mov    0x14(%ebx),%eax
  release(&ftable.lock);
80100d7e:	68 60 bb 13 80       	push   $0x8013bb60
  ff = *f;
80100d83:	89 45 dc             	mov    %eax,-0x24(%ebp)
  release(&ftable.lock);
80100d86:	e8 e5 43 00 00       	call   80105170 <release>

  if(ff.type == FD_PIPE)
80100d8b:	83 c4 10             	add    $0x10,%esp
80100d8e:	83 ff 01             	cmp    $0x1,%edi
80100d91:	74 4d                	je     80100de0 <fileclose+0xb0>
    pipeclose(ff.pipe, ff.writable);
  else if(ff.type == FD_INODE){
80100d93:	83 ff 02             	cmp    $0x2,%edi
80100d96:	74 28                	je     80100dc0 <fileclose+0x90>
    begin_op();
    iput(ff.ip);
    end_op();
  }
  else if(ff.type == FD_SOCKET){
80100d98:	83 ff 03             	cmp    $0x3,%edi
80100d9b:	74 63                	je     80100e00 <fileclose+0xd0>
    socketclose(ff.socket);
  }
}
80100d9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100da0:	5b                   	pop    %ebx
80100da1:	5e                   	pop    %esi
80100da2:	5f                   	pop    %edi
80100da3:	5d                   	pop    %ebp
80100da4:	c3                   	ret    
80100da5:	8d 76 00             	lea    0x0(%esi),%esi
    release(&ftable.lock);
80100da8:	c7 45 08 60 bb 13 80 	movl   $0x8013bb60,0x8(%ebp)
}
80100daf:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100db2:	5b                   	pop    %ebx
80100db3:	5e                   	pop    %esi
80100db4:	5f                   	pop    %edi
80100db5:	5d                   	pop    %ebp
    release(&ftable.lock);
80100db6:	e9 b5 43 00 00       	jmp    80105170 <release>
80100dbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100dbf:	90                   	nop
    begin_op();
80100dc0:	e8 4b 1e 00 00       	call   80102c10 <begin_op>
    iput(ff.ip);
80100dc5:	83 ec 0c             	sub    $0xc,%esp
80100dc8:	ff 75 e0             	pushl  -0x20(%ebp)
80100dcb:	e8 a0 09 00 00       	call   80101770 <iput>
    end_op();
80100dd0:	83 c4 10             	add    $0x10,%esp
}
80100dd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100dd6:	5b                   	pop    %ebx
80100dd7:	5e                   	pop    %esi
80100dd8:	5f                   	pop    %edi
80100dd9:	5d                   	pop    %ebp
    end_op();
80100dda:	e9 a1 1e 00 00       	jmp    80102c80 <end_op>
80100ddf:	90                   	nop
    pipeclose(ff.pipe, ff.writable);
80100de0:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
80100de4:	83 ec 08             	sub    $0x8,%esp
80100de7:	53                   	push   %ebx
80100de8:	56                   	push   %esi
80100de9:	e8 02 2c 00 00       	call   801039f0 <pipeclose>
80100dee:	83 c4 10             	add    $0x10,%esp
}
80100df1:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100df4:	5b                   	pop    %ebx
80100df5:	5e                   	pop    %esi
80100df6:	5f                   	pop    %edi
80100df7:	5d                   	pop    %ebp
80100df8:	c3                   	ret    
80100df9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    socketclose(ff.socket);
80100e00:	8b 45 dc             	mov    -0x24(%ebp),%eax
80100e03:	89 45 08             	mov    %eax,0x8(%ebp)
}
80100e06:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100e09:	5b                   	pop    %ebx
80100e0a:	5e                   	pop    %esi
80100e0b:	5f                   	pop    %edi
80100e0c:	5d                   	pop    %ebp
    socketclose(ff.socket);
80100e0d:	e9 3e 99 00 00       	jmp    8010a750 <socketclose>
    panic("fileclose");
80100e12:	83 ec 0c             	sub    $0xc,%esp
80100e15:	68 7b d0 10 80       	push   $0x8010d07b
80100e1a:	e8 01 f6 ff ff       	call   80100420 <panic>
80100e1f:	90                   	nop

80100e20 <filestat>:

// Get metadata about file f.
int
filestat(struct file *f, struct stat *st)
{
80100e20:	f3 0f 1e fb          	endbr32 
80100e24:	55                   	push   %ebp
80100e25:	89 e5                	mov    %esp,%ebp
80100e27:	53                   	push   %ebx
80100e28:	83 ec 04             	sub    $0x4,%esp
80100e2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(f->type == FD_INODE){
80100e2e:	83 3b 02             	cmpl   $0x2,(%ebx)
80100e31:	75 2d                	jne    80100e60 <filestat+0x40>
    ilock(f->ip);
80100e33:	83 ec 0c             	sub    $0xc,%esp
80100e36:	ff 73 10             	pushl  0x10(%ebx)
80100e39:	e8 02 08 00 00       	call   80101640 <ilock>
    stati(f->ip, st);
80100e3e:	58                   	pop    %eax
80100e3f:	5a                   	pop    %edx
80100e40:	ff 75 0c             	pushl  0xc(%ebp)
80100e43:	ff 73 10             	pushl  0x10(%ebx)
80100e46:	e8 c5 0a 00 00       	call   80101910 <stati>
    iunlock(f->ip);
80100e4b:	59                   	pop    %ecx
80100e4c:	ff 73 10             	pushl  0x10(%ebx)
80100e4f:	e8 cc 08 00 00       	call   80101720 <iunlock>
    return 0;
  }
  return -1;
}
80100e54:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    return 0;
80100e57:	83 c4 10             	add    $0x10,%esp
80100e5a:	31 c0                	xor    %eax,%eax
}
80100e5c:	c9                   	leave  
80100e5d:	c3                   	ret    
80100e5e:	66 90                	xchg   %ax,%ax
80100e60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  return -1;
80100e63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80100e68:	c9                   	leave  
80100e69:	c3                   	ret    
80100e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80100e70 <fileread>:

// Read from file f.
int
fileread(struct file *f, char *addr, int n)
{
80100e70:	f3 0f 1e fb          	endbr32 
80100e74:	55                   	push   %ebp
80100e75:	89 e5                	mov    %esp,%ebp
80100e77:	57                   	push   %edi
80100e78:	56                   	push   %esi
80100e79:	53                   	push   %ebx
80100e7a:	83 ec 0c             	sub    $0xc,%esp
80100e7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
80100e80:	8b 75 0c             	mov    0xc(%ebp),%esi
80100e83:	8b 7d 10             	mov    0x10(%ebp),%edi
  int r;

  if(f->readable == 0)
80100e86:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
80100e8a:	74 7c                	je     80100f08 <fileread+0x98>
    return -1;
  if(f->type == FD_PIPE)
80100e8c:	8b 03                	mov    (%ebx),%eax
80100e8e:	83 f8 01             	cmp    $0x1,%eax
80100e91:	74 1d                	je     80100eb0 <fileread+0x40>
    return piperead(f->pipe, addr, n);
  if(f->type == FD_INODE){
80100e93:	83 f8 02             	cmp    $0x2,%eax
80100e96:	74 30                	je     80100ec8 <fileread+0x58>
    if((r = readi(f->ip, addr, f->off, n)) > 0)
      f->off += r;
    iunlock(f->ip);
    return r;
  }
  if(f->type == FD_SOCKET)
80100e98:	83 f8 03             	cmp    $0x3,%eax
80100e9b:	75 72                	jne    80100f0f <fileread+0x9f>
    return socketread(f->socket, addr, n);
80100e9d:	8b 43 14             	mov    0x14(%ebx),%eax
80100ea0:	89 45 08             	mov    %eax,0x8(%ebp)
  panic("fileread");
}
80100ea3:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100ea6:	5b                   	pop    %ebx
80100ea7:	5e                   	pop    %esi
80100ea8:	5f                   	pop    %edi
80100ea9:	5d                   	pop    %ebp
    return socketread(f->socket, addr, n);
80100eaa:	e9 11 9a 00 00       	jmp    8010a8c0 <socketread>
80100eaf:	90                   	nop
    return piperead(f->pipe, addr, n);
80100eb0:	8b 43 0c             	mov    0xc(%ebx),%eax
80100eb3:	89 45 08             	mov    %eax,0x8(%ebp)
}
80100eb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100eb9:	5b                   	pop    %ebx
80100eba:	5e                   	pop    %esi
80100ebb:	5f                   	pop    %edi
80100ebc:	5d                   	pop    %ebp
    return piperead(f->pipe, addr, n);
80100ebd:	e9 ce 2c 00 00       	jmp    80103b90 <piperead>
80100ec2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ilock(f->ip);
80100ec8:	83 ec 0c             	sub    $0xc,%esp
80100ecb:	ff 73 10             	pushl  0x10(%ebx)
80100ece:	e8 6d 07 00 00       	call   80101640 <ilock>
    if((r = readi(f->ip, addr, f->off, n)) > 0)
80100ed3:	57                   	push   %edi
80100ed4:	ff 73 18             	pushl  0x18(%ebx)
80100ed7:	56                   	push   %esi
80100ed8:	ff 73 10             	pushl  0x10(%ebx)
80100edb:	e8 60 0a 00 00       	call   80101940 <readi>
80100ee0:	83 c4 20             	add    $0x20,%esp
80100ee3:	89 c6                	mov    %eax,%esi
80100ee5:	85 c0                	test   %eax,%eax
80100ee7:	7e 03                	jle    80100eec <fileread+0x7c>
      f->off += r;
80100ee9:	01 43 18             	add    %eax,0x18(%ebx)
    iunlock(f->ip);
80100eec:	83 ec 0c             	sub    $0xc,%esp
80100eef:	ff 73 10             	pushl  0x10(%ebx)
80100ef2:	e8 29 08 00 00       	call   80101720 <iunlock>
    return r;
80100ef7:	83 c4 10             	add    $0x10,%esp
}
80100efa:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100efd:	89 f0                	mov    %esi,%eax
80100eff:	5b                   	pop    %ebx
80100f00:	5e                   	pop    %esi
80100f01:	5f                   	pop    %edi
80100f02:	5d                   	pop    %ebp
80100f03:	c3                   	ret    
80100f04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    return -1;
80100f08:	be ff ff ff ff       	mov    $0xffffffff,%esi
80100f0d:	eb eb                	jmp    80100efa <fileread+0x8a>
  panic("fileread");
80100f0f:	83 ec 0c             	sub    $0xc,%esp
80100f12:	68 85 d0 10 80       	push   $0x8010d085
80100f17:	e8 04 f5 ff ff       	call   80100420 <panic>
80100f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80100f20 <filewrite>:

//PAGEBREAK!
// Write to file f.
int
filewrite(struct file *f, char *addr, int n)
{
80100f20:	f3 0f 1e fb          	endbr32 
80100f24:	55                   	push   %ebp
80100f25:	89 e5                	mov    %esp,%ebp
80100f27:	57                   	push   %edi
80100f28:	56                   	push   %esi
80100f29:	53                   	push   %ebx
80100f2a:	83 ec 1c             	sub    $0x1c,%esp
80100f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
80100f30:	8b 5d 08             	mov    0x8(%ebp),%ebx
80100f33:	89 45 dc             	mov    %eax,-0x24(%ebp)
80100f36:	8b 45 10             	mov    0x10(%ebp),%eax
  int r;

  if(f->writable == 0)
80100f39:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
{
80100f3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if(f->writable == 0)
80100f40:	0f 84 e1 00 00 00    	je     80101027 <filewrite+0x107>
    return -1;
  if(f->type == FD_PIPE)
80100f46:	8b 03                	mov    (%ebx),%eax
80100f48:	83 f8 01             	cmp    $0x1,%eax
80100f4b:	0f 84 e7 00 00 00    	je     80101038 <filewrite+0x118>
    return pipewrite(f->pipe, addr, n);
  if(f->type == FD_INODE){
80100f51:	83 f8 02             	cmp    $0x2,%eax
80100f54:	74 22                	je     80100f78 <filewrite+0x58>
        panic("short filewrite");
      i += r;
    }
    return i == n ? n : -1;
  }
  if(f->type == FD_SOCKET)
80100f56:	83 f8 03             	cmp    $0x3,%eax
80100f59:	0f 85 eb 00 00 00    	jne    8010104a <filewrite+0x12a>
    return socketwrite(f->socket, addr, n);
80100f5f:	8b 43 14             	mov    0x14(%ebx),%eax
80100f62:	89 45 08             	mov    %eax,0x8(%ebp)
  panic("filewrite");
}
80100f65:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100f68:	5b                   	pop    %ebx
80100f69:	5e                   	pop    %esi
80100f6a:	5f                   	pop    %edi
80100f6b:	5d                   	pop    %ebp
    return socketwrite(f->socket, addr, n);
80100f6c:	e9 7f 99 00 00       	jmp    8010a8f0 <socketwrite>
80100f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    while(i < n){
80100f78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    int i = 0;
80100f7b:	31 ff                	xor    %edi,%edi
    while(i < n){
80100f7d:	85 c0                	test   %eax,%eax
80100f7f:	7f 36                	jg     80100fb7 <filewrite+0x97>
80100f81:	e9 9a 00 00 00       	jmp    80101020 <filewrite+0x100>
80100f86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100f8d:	8d 76 00             	lea    0x0(%esi),%esi
        f->off += r;
80100f90:	01 43 18             	add    %eax,0x18(%ebx)
      iunlock(f->ip);
80100f93:	83 ec 0c             	sub    $0xc,%esp
80100f96:	ff 73 10             	pushl  0x10(%ebx)
        f->off += r;
80100f99:	89 45 e0             	mov    %eax,-0x20(%ebp)
      iunlock(f->ip);
80100f9c:	e8 7f 07 00 00       	call   80101720 <iunlock>
      end_op();
80100fa1:	e8 da 1c 00 00       	call   80102c80 <end_op>
      if(r != n1)
80100fa6:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100fa9:	83 c4 10             	add    $0x10,%esp
80100fac:	39 c6                	cmp    %eax,%esi
80100fae:	75 60                	jne    80101010 <filewrite+0xf0>
      i += r;
80100fb0:	01 f7                	add    %esi,%edi
    while(i < n){
80100fb2:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
80100fb5:	7e 69                	jle    80101020 <filewrite+0x100>
      int n1 = n - i;
80100fb7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
80100fba:	b8 00 06 00 00       	mov    $0x600,%eax
80100fbf:	29 fe                	sub    %edi,%esi
      if(n1 > max)
80100fc1:	81 fe 00 06 00 00    	cmp    $0x600,%esi
80100fc7:	0f 4f f0             	cmovg  %eax,%esi
      begin_op();
80100fca:	e8 41 1c 00 00       	call   80102c10 <begin_op>
      ilock(f->ip);
80100fcf:	83 ec 0c             	sub    $0xc,%esp
80100fd2:	ff 73 10             	pushl  0x10(%ebx)
80100fd5:	e8 66 06 00 00       	call   80101640 <ilock>
      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
80100fda:	8b 45 dc             	mov    -0x24(%ebp),%eax
80100fdd:	56                   	push   %esi
80100fde:	ff 73 18             	pushl  0x18(%ebx)
80100fe1:	01 f8                	add    %edi,%eax
80100fe3:	50                   	push   %eax
80100fe4:	ff 73 10             	pushl  0x10(%ebx)
80100fe7:	e8 54 0a 00 00       	call   80101a40 <writei>
80100fec:	83 c4 20             	add    $0x20,%esp
80100fef:	85 c0                	test   %eax,%eax
80100ff1:	7f 9d                	jg     80100f90 <filewrite+0x70>
      iunlock(f->ip);
80100ff3:	83 ec 0c             	sub    $0xc,%esp
80100ff6:	ff 73 10             	pushl  0x10(%ebx)
80100ff9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80100ffc:	e8 1f 07 00 00       	call   80101720 <iunlock>
      end_op();
80101001:	e8 7a 1c 00 00       	call   80102c80 <end_op>
      if(r < 0)
80101006:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101009:	83 c4 10             	add    $0x10,%esp
8010100c:	85 c0                	test   %eax,%eax
8010100e:	75 17                	jne    80101027 <filewrite+0x107>
        panic("short filewrite");
80101010:	83 ec 0c             	sub    $0xc,%esp
80101013:	68 8e d0 10 80       	push   $0x8010d08e
80101018:	e8 03 f4 ff ff       	call   80100420 <panic>
8010101d:	8d 76 00             	lea    0x0(%esi),%esi
    return i == n ? n : -1;
80101020:	89 f8                	mov    %edi,%eax
80101022:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
80101025:	74 05                	je     8010102c <filewrite+0x10c>
80101027:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010102c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010102f:	5b                   	pop    %ebx
80101030:	5e                   	pop    %esi
80101031:	5f                   	pop    %edi
80101032:	5d                   	pop    %ebp
80101033:	c3                   	ret    
80101034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    return pipewrite(f->pipe, addr, n);
80101038:	8b 43 0c             	mov    0xc(%ebx),%eax
8010103b:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010103e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101041:	5b                   	pop    %ebx
80101042:	5e                   	pop    %esi
80101043:	5f                   	pop    %edi
80101044:	5d                   	pop    %ebp
    return pipewrite(f->pipe, addr, n);
80101045:	e9 46 2a 00 00       	jmp    80103a90 <pipewrite>
  panic("filewrite");
8010104a:	83 ec 0c             	sub    $0xc,%esp
8010104d:	68 94 d0 10 80       	push   $0x8010d094
80101052:	e8 c9 f3 ff ff       	call   80100420 <panic>
80101057:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010105e:	66 90                	xchg   %ax,%ax

80101060 <fileioctl>:

int
fileioctl(struct file *f, int req, void *arg)
{
80101060:	f3 0f 1e fb          	endbr32 
80101064:	55                   	push   %ebp
80101065:	89 e5                	mov    %esp,%ebp
80101067:	8b 45 08             	mov    0x8(%ebp),%eax
  if(f->type == FD_SOCKET)
8010106a:	83 38 03             	cmpl   $0x3,(%eax)
8010106d:	75 11                	jne    80101080 <fileioctl+0x20>
    return socketioctl(f->socket, req, arg);
8010106f:	8b 40 14             	mov    0x14(%eax),%eax
80101072:	89 45 08             	mov    %eax,0x8(%ebp)
  return -1;
}
80101075:	5d                   	pop    %ebp
    return socketioctl(f->socket, req, arg);
80101076:	e9 05 99 00 00       	jmp    8010a980 <socketioctl>
8010107b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010107f:	90                   	nop
}
80101080:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101085:	5d                   	pop    %ebp
80101086:	c3                   	ret    
80101087:	66 90                	xchg   %ax,%ax
80101089:	66 90                	xchg   %ax,%ax
8010108b:	66 90                	xchg   %ax,%ax
8010108d:	66 90                	xchg   %ax,%ax
8010108f:	90                   	nop

80101090 <bfree>:
}

// Free a disk block.
static void
bfree(int dev, uint b)
{
80101090:	55                   	push   %ebp
80101091:	89 c1                	mov    %eax,%ecx
  struct buf *bp;
  int bi, m;

  bp = bread(dev, BBLOCK(b, sb));
80101093:	89 d0                	mov    %edx,%eax
80101095:	c1 e8 0d             	shr    $0xd,%eax
80101098:	03 05 18 c7 13 80    	add    0x8013c718,%eax
{
8010109e:	89 e5                	mov    %esp,%ebp
801010a0:	56                   	push   %esi
801010a1:	53                   	push   %ebx
801010a2:	89 d3                	mov    %edx,%ebx
  bp = bread(dev, BBLOCK(b, sb));
801010a4:	83 ec 08             	sub    $0x8,%esp
801010a7:	50                   	push   %eax
801010a8:	51                   	push   %ecx
801010a9:	e8 22 f0 ff ff       	call   801000d0 <bread>
  bi = b % BPB;
  m = 1 << (bi % 8);
801010ae:	89 d9                	mov    %ebx,%ecx
  if((bp->data[bi/8] & m) == 0)
801010b0:	c1 fb 03             	sar    $0x3,%ebx
  m = 1 << (bi % 8);
801010b3:	ba 01 00 00 00       	mov    $0x1,%edx
801010b8:	83 e1 07             	and    $0x7,%ecx
  if((bp->data[bi/8] & m) == 0)
801010bb:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
801010c1:	83 c4 10             	add    $0x10,%esp
  m = 1 << (bi % 8);
801010c4:	d3 e2                	shl    %cl,%edx
  if((bp->data[bi/8] & m) == 0)
801010c6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
801010cb:	85 d1                	test   %edx,%ecx
801010cd:	74 25                	je     801010f4 <bfree+0x64>
    panic("freeing free block");
  bp->data[bi/8] &= ~m;
801010cf:	f7 d2                	not    %edx
  log_write(bp);
801010d1:	83 ec 0c             	sub    $0xc,%esp
801010d4:	89 c6                	mov    %eax,%esi
  bp->data[bi/8] &= ~m;
801010d6:	21 ca                	and    %ecx,%edx
801010d8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
  log_write(bp);
801010dc:	50                   	push   %eax
801010dd:	e8 0e 1d 00 00       	call   80102df0 <log_write>
  brelse(bp);
801010e2:	89 34 24             	mov    %esi,(%esp)
801010e5:	e8 06 f1 ff ff       	call   801001f0 <brelse>
}
801010ea:	83 c4 10             	add    $0x10,%esp
801010ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
801010f0:	5b                   	pop    %ebx
801010f1:	5e                   	pop    %esi
801010f2:	5d                   	pop    %ebp
801010f3:	c3                   	ret    
    panic("freeing free block");
801010f4:	83 ec 0c             	sub    $0xc,%esp
801010f7:	68 9e d0 10 80       	push   $0x8010d09e
801010fc:	e8 1f f3 ff ff       	call   80100420 <panic>
80101101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101108:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010110f:	90                   	nop

80101110 <balloc>:
{
80101110:	55                   	push   %ebp
80101111:	89 e5                	mov    %esp,%ebp
80101113:	57                   	push   %edi
80101114:	56                   	push   %esi
80101115:	53                   	push   %ebx
80101116:	83 ec 1c             	sub    $0x1c,%esp
  for(b = 0; b < sb.size; b += BPB){
80101119:	8b 0d 00 c7 13 80    	mov    0x8013c700,%ecx
{
8010111f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  for(b = 0; b < sb.size; b += BPB){
80101122:	85 c9                	test   %ecx,%ecx
80101124:	0f 84 87 00 00 00    	je     801011b1 <balloc+0xa1>
8010112a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    bp = bread(dev, BBLOCK(b, sb));
80101131:	8b 75 dc             	mov    -0x24(%ebp),%esi
80101134:	83 ec 08             	sub    $0x8,%esp
80101137:	89 f0                	mov    %esi,%eax
80101139:	c1 f8 0d             	sar    $0xd,%eax
8010113c:	03 05 18 c7 13 80    	add    0x8013c718,%eax
80101142:	50                   	push   %eax
80101143:	ff 75 d8             	pushl  -0x28(%ebp)
80101146:	e8 85 ef ff ff       	call   801000d0 <bread>
8010114b:	83 c4 10             	add    $0x10,%esp
8010114e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
80101151:	a1 00 c7 13 80       	mov    0x8013c700,%eax
80101156:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101159:	31 c0                	xor    %eax,%eax
8010115b:	eb 2f                	jmp    8010118c <balloc+0x7c>
8010115d:	8d 76 00             	lea    0x0(%esi),%esi
      m = 1 << (bi % 8);
80101160:	89 c1                	mov    %eax,%ecx
80101162:	bb 01 00 00 00       	mov    $0x1,%ebx
      if((bp->data[bi/8] & m) == 0){  // Is block free?
80101167:	8b 55 e4             	mov    -0x1c(%ebp),%edx
      m = 1 << (bi % 8);
8010116a:	83 e1 07             	and    $0x7,%ecx
8010116d:	d3 e3                	shl    %cl,%ebx
      if((bp->data[bi/8] & m) == 0){  // Is block free?
8010116f:	89 c1                	mov    %eax,%ecx
80101171:	c1 f9 03             	sar    $0x3,%ecx
80101174:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
80101179:	89 fa                	mov    %edi,%edx
8010117b:	85 df                	test   %ebx,%edi
8010117d:	74 41                	je     801011c0 <balloc+0xb0>
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
8010117f:	83 c0 01             	add    $0x1,%eax
80101182:	83 c6 01             	add    $0x1,%esi
80101185:	3d 00 20 00 00       	cmp    $0x2000,%eax
8010118a:	74 05                	je     80101191 <balloc+0x81>
8010118c:	39 75 e0             	cmp    %esi,-0x20(%ebp)
8010118f:	77 cf                	ja     80101160 <balloc+0x50>
    brelse(bp);
80101191:	83 ec 0c             	sub    $0xc,%esp
80101194:	ff 75 e4             	pushl  -0x1c(%ebp)
80101197:	e8 54 f0 ff ff       	call   801001f0 <brelse>
  for(b = 0; b < sb.size; b += BPB){
8010119c:	81 45 dc 00 20 00 00 	addl   $0x2000,-0x24(%ebp)
801011a3:	83 c4 10             	add    $0x10,%esp
801011a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
801011a9:	39 05 00 c7 13 80    	cmp    %eax,0x8013c700
801011af:	77 80                	ja     80101131 <balloc+0x21>
  panic("balloc: out of blocks");
801011b1:	83 ec 0c             	sub    $0xc,%esp
801011b4:	68 b1 d0 10 80       	push   $0x8010d0b1
801011b9:	e8 62 f2 ff ff       	call   80100420 <panic>
801011be:	66 90                	xchg   %ax,%ax
        bp->data[bi/8] |= m;  // Mark block in use.
801011c0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
        log_write(bp);
801011c3:	83 ec 0c             	sub    $0xc,%esp
        bp->data[bi/8] |= m;  // Mark block in use.
801011c6:	09 da                	or     %ebx,%edx
801011c8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
        log_write(bp);
801011cc:	57                   	push   %edi
801011cd:	e8 1e 1c 00 00       	call   80102df0 <log_write>
        brelse(bp);
801011d2:	89 3c 24             	mov    %edi,(%esp)
801011d5:	e8 16 f0 ff ff       	call   801001f0 <brelse>
  bp = bread(dev, bno);
801011da:	58                   	pop    %eax
801011db:	5a                   	pop    %edx
801011dc:	56                   	push   %esi
801011dd:	ff 75 d8             	pushl  -0x28(%ebp)
801011e0:	e8 eb ee ff ff       	call   801000d0 <bread>
  memset(bp->data, 0, BSIZE);
801011e5:	83 c4 0c             	add    $0xc,%esp
  bp = bread(dev, bno);
801011e8:	89 c3                	mov    %eax,%ebx
  memset(bp->data, 0, BSIZE);
801011ea:	8d 40 5c             	lea    0x5c(%eax),%eax
801011ed:	68 00 04 00 00       	push   $0x400
801011f2:	6a 00                	push   $0x0
801011f4:	50                   	push   %eax
801011f5:	e8 c6 3f 00 00       	call   801051c0 <memset>
  log_write(bp);
801011fa:	89 1c 24             	mov    %ebx,(%esp)
801011fd:	e8 ee 1b 00 00       	call   80102df0 <log_write>
  brelse(bp);
80101202:	89 1c 24             	mov    %ebx,(%esp)
80101205:	e8 e6 ef ff ff       	call   801001f0 <brelse>
}
8010120a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010120d:	89 f0                	mov    %esi,%eax
8010120f:	5b                   	pop    %ebx
80101210:	5e                   	pop    %esi
80101211:	5f                   	pop    %edi
80101212:	5d                   	pop    %ebp
80101213:	c3                   	ret    
80101214:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010121b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010121f:	90                   	nop

80101220 <iget>:
// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode*
iget(uint dev, uint inum)
{
80101220:	55                   	push   %ebp
80101221:	89 e5                	mov    %esp,%ebp
80101223:	57                   	push   %edi
80101224:	89 c7                	mov    %eax,%edi
80101226:	56                   	push   %esi
  struct inode *ip, *empty;

  acquire(&icache.lock);

  // Is the inode already cached?
  empty = 0;
80101227:	31 f6                	xor    %esi,%esi
{
80101229:	53                   	push   %ebx
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
8010122a:	bb 54 c7 13 80       	mov    $0x8013c754,%ebx
{
8010122f:	83 ec 28             	sub    $0x28,%esp
80101232:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  acquire(&icache.lock);
80101235:	68 20 c7 13 80       	push   $0x8013c720
8010123a:	e8 71 3e 00 00       	call   801050b0 <acquire>
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
8010123f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  acquire(&icache.lock);
80101242:	83 c4 10             	add    $0x10,%esp
80101245:	eb 1b                	jmp    80101262 <iget+0x42>
80101247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010124e:	66 90                	xchg   %ax,%ax
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
80101250:	39 3b                	cmp    %edi,(%ebx)
80101252:	74 6c                	je     801012c0 <iget+0xa0>
80101254:	81 c3 90 00 00 00    	add    $0x90,%ebx
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
8010125a:	81 fb 74 e3 13 80    	cmp    $0x8013e374,%ebx
80101260:	73 26                	jae    80101288 <iget+0x68>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
80101262:	8b 4b 08             	mov    0x8(%ebx),%ecx
80101265:	85 c9                	test   %ecx,%ecx
80101267:	7f e7                	jg     80101250 <iget+0x30>
      ip->ref++;
      release(&icache.lock);
      return ip;
    }
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
80101269:	85 f6                	test   %esi,%esi
8010126b:	75 e7                	jne    80101254 <iget+0x34>
8010126d:	89 d8                	mov    %ebx,%eax
8010126f:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101275:	85 c9                	test   %ecx,%ecx
80101277:	75 6e                	jne    801012e7 <iget+0xc7>
80101279:	89 c6                	mov    %eax,%esi
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
8010127b:	81 fb 74 e3 13 80    	cmp    $0x8013e374,%ebx
80101281:	72 df                	jb     80101262 <iget+0x42>
80101283:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101287:	90                   	nop
      empty = ip;
  }

  // Recycle an inode cache entry.
  if(empty == 0)
80101288:	85 f6                	test   %esi,%esi
8010128a:	74 73                	je     801012ff <iget+0xdf>
  ip = empty;
  ip->dev = dev;
  ip->inum = inum;
  ip->ref = 1;
  ip->valid = 0;
  release(&icache.lock);
8010128c:	83 ec 0c             	sub    $0xc,%esp
  ip->dev = dev;
8010128f:	89 3e                	mov    %edi,(%esi)
  ip->inum = inum;
80101291:	89 56 04             	mov    %edx,0x4(%esi)
  ip->ref = 1;
80101294:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
  ip->valid = 0;
8010129b:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
  release(&icache.lock);
801012a2:	68 20 c7 13 80       	push   $0x8013c720
801012a7:	e8 c4 3e 00 00       	call   80105170 <release>

  return ip;
801012ac:	83 c4 10             	add    $0x10,%esp
}
801012af:	8d 65 f4             	lea    -0xc(%ebp),%esp
801012b2:	89 f0                	mov    %esi,%eax
801012b4:	5b                   	pop    %ebx
801012b5:	5e                   	pop    %esi
801012b6:	5f                   	pop    %edi
801012b7:	5d                   	pop    %ebp
801012b8:	c3                   	ret    
801012b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
801012c0:	39 53 04             	cmp    %edx,0x4(%ebx)
801012c3:	75 8f                	jne    80101254 <iget+0x34>
      release(&icache.lock);
801012c5:	83 ec 0c             	sub    $0xc,%esp
      ip->ref++;
801012c8:	83 c1 01             	add    $0x1,%ecx
      return ip;
801012cb:	89 de                	mov    %ebx,%esi
      release(&icache.lock);
801012cd:	68 20 c7 13 80       	push   $0x8013c720
      ip->ref++;
801012d2:	89 4b 08             	mov    %ecx,0x8(%ebx)
      release(&icache.lock);
801012d5:	e8 96 3e 00 00       	call   80105170 <release>
      return ip;
801012da:	83 c4 10             	add    $0x10,%esp
}
801012dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
801012e0:	89 f0                	mov    %esi,%eax
801012e2:	5b                   	pop    %ebx
801012e3:	5e                   	pop    %esi
801012e4:	5f                   	pop    %edi
801012e5:	5d                   	pop    %ebp
801012e6:	c3                   	ret    
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
801012e7:	81 fb 74 e3 13 80    	cmp    $0x8013e374,%ebx
801012ed:	73 10                	jae    801012ff <iget+0xdf>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
801012ef:	8b 4b 08             	mov    0x8(%ebx),%ecx
801012f2:	85 c9                	test   %ecx,%ecx
801012f4:	0f 8f 56 ff ff ff    	jg     80101250 <iget+0x30>
801012fa:	e9 6e ff ff ff       	jmp    8010126d <iget+0x4d>
    panic("iget: no inodes");
801012ff:	83 ec 0c             	sub    $0xc,%esp
80101302:	68 c7 d0 10 80       	push   $0x8010d0c7
80101307:	e8 14 f1 ff ff       	call   80100420 <panic>
8010130c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101310 <bmap>:

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint
bmap(struct inode *ip, uint bn)
{
80101310:	55                   	push   %ebp
80101311:	89 e5                	mov    %esp,%ebp
80101313:	57                   	push   %edi
80101314:	56                   	push   %esi
80101315:	89 c6                	mov    %eax,%esi
80101317:	53                   	push   %ebx
80101318:	83 ec 1c             	sub    $0x1c,%esp
  uint addr, *a;
  struct buf *bp;

  if(bn < NDIRECT){
8010131b:	83 fa 0b             	cmp    $0xb,%edx
8010131e:	0f 86 84 00 00 00    	jbe    801013a8 <bmap+0x98>
    if((addr = ip->addrs[bn]) == 0)
      ip->addrs[bn] = addr = balloc(ip->dev);
    return addr;
  }
  bn -= NDIRECT;
80101324:	8d 5a f4             	lea    -0xc(%edx),%ebx

  if(bn < NINDIRECT){
80101327:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
8010132d:	0f 87 95 00 00 00    	ja     801013c8 <bmap+0xb8>
    // Load indirect block, allocating if necessary.
    if((addr = ip->addrs[NDIRECT]) == 0)
80101333:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80101339:	8b 16                	mov    (%esi),%edx
8010133b:	85 c0                	test   %eax,%eax
8010133d:	74 51                	je     80101390 <bmap+0x80>
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
    bp = bread(ip->dev, addr);
8010133f:	83 ec 08             	sub    $0x8,%esp
80101342:	50                   	push   %eax
80101343:	52                   	push   %edx
80101344:	e8 87 ed ff ff       	call   801000d0 <bread>
    a = (uint*)bp->data;
    if((addr = a[bn]) == 0){
80101349:	83 c4 10             	add    $0x10,%esp
8010134c:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
    bp = bread(ip->dev, addr);
80101350:	89 c7                	mov    %eax,%edi
    if((addr = a[bn]) == 0){
80101352:	8b 1a                	mov    (%edx),%ebx
80101354:	85 db                	test   %ebx,%ebx
80101356:	74 18                	je     80101370 <bmap+0x60>
      a[bn] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);
80101358:	83 ec 0c             	sub    $0xc,%esp
8010135b:	57                   	push   %edi
8010135c:	e8 8f ee ff ff       	call   801001f0 <brelse>
    return addr;
80101361:	83 c4 10             	add    $0x10,%esp
  }

  panic("bmap: out of range");
}
80101364:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101367:	89 d8                	mov    %ebx,%eax
80101369:	5b                   	pop    %ebx
8010136a:	5e                   	pop    %esi
8010136b:	5f                   	pop    %edi
8010136c:	5d                   	pop    %ebp
8010136d:	c3                   	ret    
8010136e:	66 90                	xchg   %ax,%ax
      a[bn] = addr = balloc(ip->dev);
80101370:	8b 06                	mov    (%esi),%eax
80101372:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101375:	e8 96 fd ff ff       	call   80101110 <balloc>
8010137a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
      log_write(bp);
8010137d:	83 ec 0c             	sub    $0xc,%esp
      a[bn] = addr = balloc(ip->dev);
80101380:	89 c3                	mov    %eax,%ebx
80101382:	89 02                	mov    %eax,(%edx)
      log_write(bp);
80101384:	57                   	push   %edi
80101385:	e8 66 1a 00 00       	call   80102df0 <log_write>
8010138a:	83 c4 10             	add    $0x10,%esp
8010138d:	eb c9                	jmp    80101358 <bmap+0x48>
8010138f:	90                   	nop
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
80101390:	89 d0                	mov    %edx,%eax
80101392:	e8 79 fd ff ff       	call   80101110 <balloc>
80101397:	8b 16                	mov    (%esi),%edx
80101399:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
8010139f:	eb 9e                	jmp    8010133f <bmap+0x2f>
801013a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    if((addr = ip->addrs[bn]) == 0)
801013a8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
801013ab:	8b 5f 5c             	mov    0x5c(%edi),%ebx
801013ae:	85 db                	test   %ebx,%ebx
801013b0:	75 b2                	jne    80101364 <bmap+0x54>
      ip->addrs[bn] = addr = balloc(ip->dev);
801013b2:	8b 00                	mov    (%eax),%eax
801013b4:	e8 57 fd ff ff       	call   80101110 <balloc>
801013b9:	89 47 5c             	mov    %eax,0x5c(%edi)
801013bc:	89 c3                	mov    %eax,%ebx
}
801013be:	8d 65 f4             	lea    -0xc(%ebp),%esp
801013c1:	89 d8                	mov    %ebx,%eax
801013c3:	5b                   	pop    %ebx
801013c4:	5e                   	pop    %esi
801013c5:	5f                   	pop    %edi
801013c6:	5d                   	pop    %ebp
801013c7:	c3                   	ret    
  panic("bmap: out of range");
801013c8:	83 ec 0c             	sub    $0xc,%esp
801013cb:	68 d7 d0 10 80       	push   $0x8010d0d7
801013d0:	e8 4b f0 ff ff       	call   80100420 <panic>
801013d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801013dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801013e0 <readsb>:
{
801013e0:	f3 0f 1e fb          	endbr32 
801013e4:	55                   	push   %ebp
801013e5:	89 e5                	mov    %esp,%ebp
801013e7:	56                   	push   %esi
801013e8:	53                   	push   %ebx
801013e9:	8b 75 0c             	mov    0xc(%ebp),%esi
  bp = bread(dev, 1);
801013ec:	83 ec 08             	sub    $0x8,%esp
801013ef:	6a 01                	push   $0x1
801013f1:	ff 75 08             	pushl  0x8(%ebp)
801013f4:	e8 d7 ec ff ff       	call   801000d0 <bread>
  memmove(sb, bp->data, sizeof(*sb));
801013f9:	83 c4 0c             	add    $0xc,%esp
  bp = bread(dev, 1);
801013fc:	89 c3                	mov    %eax,%ebx
  memmove(sb, bp->data, sizeof(*sb));
801013fe:	8d 40 5c             	lea    0x5c(%eax),%eax
80101401:	6a 1c                	push   $0x1c
80101403:	50                   	push   %eax
80101404:	56                   	push   %esi
80101405:	e8 56 3e 00 00       	call   80105260 <memmove>
  brelse(bp);
8010140a:	89 5d 08             	mov    %ebx,0x8(%ebp)
8010140d:	83 c4 10             	add    $0x10,%esp
}
80101410:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101413:	5b                   	pop    %ebx
80101414:	5e                   	pop    %esi
80101415:	5d                   	pop    %ebp
  brelse(bp);
80101416:	e9 d5 ed ff ff       	jmp    801001f0 <brelse>
8010141b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010141f:	90                   	nop

80101420 <iinit>:
{
80101420:	f3 0f 1e fb          	endbr32 
80101424:	55                   	push   %ebp
80101425:	89 e5                	mov    %esp,%ebp
80101427:	53                   	push   %ebx
80101428:	bb 60 c7 13 80       	mov    $0x8013c760,%ebx
8010142d:	83 ec 0c             	sub    $0xc,%esp
  initlock(&icache.lock, "icache");
80101430:	68 ea d0 10 80       	push   $0x8010d0ea
80101435:	68 20 c7 13 80       	push   $0x8013c720
8010143a:	e8 f1 3a 00 00       	call   80104f30 <initlock>
  for(i = 0; i < NINODE; i++) {
8010143f:	83 c4 10             	add    $0x10,%esp
80101442:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    initsleeplock(&icache.inode[i].lock, "inode");
80101448:	83 ec 08             	sub    $0x8,%esp
8010144b:	68 f1 d0 10 80       	push   $0x8010d0f1
80101450:	53                   	push   %ebx
80101451:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101457:	e8 94 39 00 00       	call   80104df0 <initsleeplock>
  for(i = 0; i < NINODE; i++) {
8010145c:	83 c4 10             	add    $0x10,%esp
8010145f:	81 fb 80 e3 13 80    	cmp    $0x8013e380,%ebx
80101465:	75 e1                	jne    80101448 <iinit+0x28>
  readsb(dev, &sb);
80101467:	83 ec 08             	sub    $0x8,%esp
8010146a:	68 00 c7 13 80       	push   $0x8013c700
8010146f:	ff 75 08             	pushl  0x8(%ebp)
80101472:	e8 69 ff ff ff       	call   801013e0 <readsb>
  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
80101477:	ff 35 18 c7 13 80    	pushl  0x8013c718
8010147d:	ff 35 14 c7 13 80    	pushl  0x8013c714
80101483:	ff 35 10 c7 13 80    	pushl  0x8013c710
80101489:	ff 35 0c c7 13 80    	pushl  0x8013c70c
8010148f:	ff 35 08 c7 13 80    	pushl  0x8013c708
80101495:	ff 35 04 c7 13 80    	pushl  0x8013c704
8010149b:	ff 35 00 c7 13 80    	pushl  0x8013c700
801014a1:	68 54 d1 10 80       	push   $0x8010d154
801014a6:	e8 e5 ee ff ff       	call   80100390 <cprintf>
}
801014ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801014ae:	83 c4 30             	add    $0x30,%esp
801014b1:	c9                   	leave  
801014b2:	c3                   	ret    
801014b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801014ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801014c0 <ialloc>:
{
801014c0:	f3 0f 1e fb          	endbr32 
801014c4:	55                   	push   %ebp
801014c5:	89 e5                	mov    %esp,%ebp
801014c7:	57                   	push   %edi
801014c8:	56                   	push   %esi
801014c9:	53                   	push   %ebx
801014ca:	83 ec 1c             	sub    $0x1c,%esp
801014cd:	8b 45 0c             	mov    0xc(%ebp),%eax
  for(inum = 1; inum < sb.ninodes; inum++){
801014d0:	83 3d 08 c7 13 80 01 	cmpl   $0x1,0x8013c708
{
801014d7:	8b 75 08             	mov    0x8(%ebp),%esi
801014da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  for(inum = 1; inum < sb.ninodes; inum++){
801014dd:	0f 86 8d 00 00 00    	jbe    80101570 <ialloc+0xb0>
801014e3:	bf 01 00 00 00       	mov    $0x1,%edi
801014e8:	eb 1d                	jmp    80101507 <ialloc+0x47>
801014ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    brelse(bp);
801014f0:	83 ec 0c             	sub    $0xc,%esp
  for(inum = 1; inum < sb.ninodes; inum++){
801014f3:	83 c7 01             	add    $0x1,%edi
    brelse(bp);
801014f6:	53                   	push   %ebx
801014f7:	e8 f4 ec ff ff       	call   801001f0 <brelse>
  for(inum = 1; inum < sb.ninodes; inum++){
801014fc:	83 c4 10             	add    $0x10,%esp
801014ff:	3b 3d 08 c7 13 80    	cmp    0x8013c708,%edi
80101505:	73 69                	jae    80101570 <ialloc+0xb0>
    bp = bread(dev, IBLOCK(inum, sb));
80101507:	89 f8                	mov    %edi,%eax
80101509:	83 ec 08             	sub    $0x8,%esp
8010150c:	c1 e8 04             	shr    $0x4,%eax
8010150f:	03 05 14 c7 13 80    	add    0x8013c714,%eax
80101515:	50                   	push   %eax
80101516:	56                   	push   %esi
80101517:	e8 b4 eb ff ff       	call   801000d0 <bread>
    if(dip->type == 0){  // a free inode
8010151c:	83 c4 10             	add    $0x10,%esp
    bp = bread(dev, IBLOCK(inum, sb));
8010151f:	89 c3                	mov    %eax,%ebx
    dip = (struct dinode*)bp->data + inum%IPB;
80101521:	89 f8                	mov    %edi,%eax
80101523:	83 e0 0f             	and    $0xf,%eax
80101526:	c1 e0 06             	shl    $0x6,%eax
80101529:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
    if(dip->type == 0){  // a free inode
8010152d:	66 83 39 00          	cmpw   $0x0,(%ecx)
80101531:	75 bd                	jne    801014f0 <ialloc+0x30>
      memset(dip, 0, sizeof(*dip));
80101533:	83 ec 04             	sub    $0x4,%esp
80101536:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80101539:	6a 40                	push   $0x40
8010153b:	6a 00                	push   $0x0
8010153d:	51                   	push   %ecx
8010153e:	e8 7d 3c 00 00       	call   801051c0 <memset>
      dip->type = type;
80101543:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
80101547:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010154a:	66 89 01             	mov    %ax,(%ecx)
      log_write(bp);   // mark it allocated on the disk
8010154d:	89 1c 24             	mov    %ebx,(%esp)
80101550:	e8 9b 18 00 00       	call   80102df0 <log_write>
      brelse(bp);
80101555:	89 1c 24             	mov    %ebx,(%esp)
80101558:	e8 93 ec ff ff       	call   801001f0 <brelse>
      return iget(dev, inum);
8010155d:	83 c4 10             	add    $0x10,%esp
}
80101560:	8d 65 f4             	lea    -0xc(%ebp),%esp
      return iget(dev, inum);
80101563:	89 fa                	mov    %edi,%edx
}
80101565:	5b                   	pop    %ebx
      return iget(dev, inum);
80101566:	89 f0                	mov    %esi,%eax
}
80101568:	5e                   	pop    %esi
80101569:	5f                   	pop    %edi
8010156a:	5d                   	pop    %ebp
      return iget(dev, inum);
8010156b:	e9 b0 fc ff ff       	jmp    80101220 <iget>
  panic("ialloc: no inodes");
80101570:	83 ec 0c             	sub    $0xc,%esp
80101573:	68 f7 d0 10 80       	push   $0x8010d0f7
80101578:	e8 a3 ee ff ff       	call   80100420 <panic>
8010157d:	8d 76 00             	lea    0x0(%esi),%esi

80101580 <iupdate>:
{
80101580:	f3 0f 1e fb          	endbr32 
80101584:	55                   	push   %ebp
80101585:	89 e5                	mov    %esp,%ebp
80101587:	56                   	push   %esi
80101588:	53                   	push   %ebx
80101589:	8b 5d 08             	mov    0x8(%ebp),%ebx
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
8010158c:	8b 43 04             	mov    0x4(%ebx),%eax
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
8010158f:	83 c3 5c             	add    $0x5c,%ebx
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101592:	83 ec 08             	sub    $0x8,%esp
80101595:	c1 e8 04             	shr    $0x4,%eax
80101598:	03 05 14 c7 13 80    	add    0x8013c714,%eax
8010159e:	50                   	push   %eax
8010159f:	ff 73 a4             	pushl  -0x5c(%ebx)
801015a2:	e8 29 eb ff ff       	call   801000d0 <bread>
  dip->type = ip->type;
801015a7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
801015ab:	83 c4 0c             	add    $0xc,%esp
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
801015ae:	89 c6                	mov    %eax,%esi
  dip = (struct dinode*)bp->data + ip->inum%IPB;
801015b0:	8b 43 a8             	mov    -0x58(%ebx),%eax
801015b3:	83 e0 0f             	and    $0xf,%eax
801015b6:	c1 e0 06             	shl    $0x6,%eax
801015b9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
  dip->type = ip->type;
801015bd:	66 89 10             	mov    %dx,(%eax)
  dip->major = ip->major;
801015c0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
801015c4:	83 c0 0c             	add    $0xc,%eax
  dip->major = ip->major;
801015c7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
  dip->minor = ip->minor;
801015cb:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
801015cf:	66 89 50 f8          	mov    %dx,-0x8(%eax)
  dip->nlink = ip->nlink;
801015d3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
801015d7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
  dip->size = ip->size;
801015db:	8b 53 fc             	mov    -0x4(%ebx),%edx
801015de:	89 50 fc             	mov    %edx,-0x4(%eax)
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
801015e1:	6a 34                	push   $0x34
801015e3:	53                   	push   %ebx
801015e4:	50                   	push   %eax
801015e5:	e8 76 3c 00 00       	call   80105260 <memmove>
  log_write(bp);
801015ea:	89 34 24             	mov    %esi,(%esp)
801015ed:	e8 fe 17 00 00       	call   80102df0 <log_write>
  brelse(bp);
801015f2:	89 75 08             	mov    %esi,0x8(%ebp)
801015f5:	83 c4 10             	add    $0x10,%esp
}
801015f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
801015fb:	5b                   	pop    %ebx
801015fc:	5e                   	pop    %esi
801015fd:	5d                   	pop    %ebp
  brelse(bp);
801015fe:	e9 ed eb ff ff       	jmp    801001f0 <brelse>
80101603:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010160a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101610 <idup>:
{
80101610:	f3 0f 1e fb          	endbr32 
80101614:	55                   	push   %ebp
80101615:	89 e5                	mov    %esp,%ebp
80101617:	53                   	push   %ebx
80101618:	83 ec 10             	sub    $0x10,%esp
8010161b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&icache.lock);
8010161e:	68 20 c7 13 80       	push   $0x8013c720
80101623:	e8 88 3a 00 00       	call   801050b0 <acquire>
  ip->ref++;
80101628:	83 43 08 01          	addl   $0x1,0x8(%ebx)
  release(&icache.lock);
8010162c:	c7 04 24 20 c7 13 80 	movl   $0x8013c720,(%esp)
80101633:	e8 38 3b 00 00       	call   80105170 <release>
}
80101638:	89 d8                	mov    %ebx,%eax
8010163a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010163d:	c9                   	leave  
8010163e:	c3                   	ret    
8010163f:	90                   	nop

80101640 <ilock>:
{
80101640:	f3 0f 1e fb          	endbr32 
80101644:	55                   	push   %ebp
80101645:	89 e5                	mov    %esp,%ebp
80101647:	56                   	push   %esi
80101648:	53                   	push   %ebx
80101649:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(ip == 0 || ip->ref < 1)
8010164c:	85 db                	test   %ebx,%ebx
8010164e:	0f 84 b3 00 00 00    	je     80101707 <ilock+0xc7>
80101654:	8b 53 08             	mov    0x8(%ebx),%edx
80101657:	85 d2                	test   %edx,%edx
80101659:	0f 8e a8 00 00 00    	jle    80101707 <ilock+0xc7>
  acquiresleep(&ip->lock);
8010165f:	83 ec 0c             	sub    $0xc,%esp
80101662:	8d 43 0c             	lea    0xc(%ebx),%eax
80101665:	50                   	push   %eax
80101666:	e8 c5 37 00 00       	call   80104e30 <acquiresleep>
  if(ip->valid == 0){
8010166b:	8b 43 4c             	mov    0x4c(%ebx),%eax
8010166e:	83 c4 10             	add    $0x10,%esp
80101671:	85 c0                	test   %eax,%eax
80101673:	74 0b                	je     80101680 <ilock+0x40>
}
80101675:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101678:	5b                   	pop    %ebx
80101679:	5e                   	pop    %esi
8010167a:	5d                   	pop    %ebp
8010167b:	c3                   	ret    
8010167c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101680:	8b 43 04             	mov    0x4(%ebx),%eax
80101683:	83 ec 08             	sub    $0x8,%esp
80101686:	c1 e8 04             	shr    $0x4,%eax
80101689:	03 05 14 c7 13 80    	add    0x8013c714,%eax
8010168f:	50                   	push   %eax
80101690:	ff 33                	pushl  (%ebx)
80101692:	e8 39 ea ff ff       	call   801000d0 <bread>
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80101697:	83 c4 0c             	add    $0xc,%esp
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
8010169a:	89 c6                	mov    %eax,%esi
    dip = (struct dinode*)bp->data + ip->inum%IPB;
8010169c:	8b 43 04             	mov    0x4(%ebx),%eax
8010169f:	83 e0 0f             	and    $0xf,%eax
801016a2:	c1 e0 06             	shl    $0x6,%eax
801016a5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
    ip->type = dip->type;
801016a9:	0f b7 10             	movzwl (%eax),%edx
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
801016ac:	83 c0 0c             	add    $0xc,%eax
    ip->type = dip->type;
801016af:	66 89 53 50          	mov    %dx,0x50(%ebx)
    ip->major = dip->major;
801016b3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
801016b7:	66 89 53 52          	mov    %dx,0x52(%ebx)
    ip->minor = dip->minor;
801016bb:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
801016bf:	66 89 53 54          	mov    %dx,0x54(%ebx)
    ip->nlink = dip->nlink;
801016c3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
801016c7:	66 89 53 56          	mov    %dx,0x56(%ebx)
    ip->size = dip->size;
801016cb:	8b 50 fc             	mov    -0x4(%eax),%edx
801016ce:	89 53 58             	mov    %edx,0x58(%ebx)
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
801016d1:	6a 34                	push   $0x34
801016d3:	50                   	push   %eax
801016d4:	8d 43 5c             	lea    0x5c(%ebx),%eax
801016d7:	50                   	push   %eax
801016d8:	e8 83 3b 00 00       	call   80105260 <memmove>
    brelse(bp);
801016dd:	89 34 24             	mov    %esi,(%esp)
801016e0:	e8 0b eb ff ff       	call   801001f0 <brelse>
    if(ip->type == 0)
801016e5:	83 c4 10             	add    $0x10,%esp
801016e8:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
    ip->valid = 1;
801016ed:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
    if(ip->type == 0)
801016f4:	0f 85 7b ff ff ff    	jne    80101675 <ilock+0x35>
      panic("ilock: no type");
801016fa:	83 ec 0c             	sub    $0xc,%esp
801016fd:	68 0f d1 10 80       	push   $0x8010d10f
80101702:	e8 19 ed ff ff       	call   80100420 <panic>
    panic("ilock");
80101707:	83 ec 0c             	sub    $0xc,%esp
8010170a:	68 09 d1 10 80       	push   $0x8010d109
8010170f:	e8 0c ed ff ff       	call   80100420 <panic>
80101714:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010171b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010171f:	90                   	nop

80101720 <iunlock>:
{
80101720:	f3 0f 1e fb          	endbr32 
80101724:	55                   	push   %ebp
80101725:	89 e5                	mov    %esp,%ebp
80101727:	56                   	push   %esi
80101728:	53                   	push   %ebx
80101729:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
8010172c:	85 db                	test   %ebx,%ebx
8010172e:	74 28                	je     80101758 <iunlock+0x38>
80101730:	83 ec 0c             	sub    $0xc,%esp
80101733:	8d 73 0c             	lea    0xc(%ebx),%esi
80101736:	56                   	push   %esi
80101737:	e8 94 37 00 00       	call   80104ed0 <holdingsleep>
8010173c:	83 c4 10             	add    $0x10,%esp
8010173f:	85 c0                	test   %eax,%eax
80101741:	74 15                	je     80101758 <iunlock+0x38>
80101743:	8b 43 08             	mov    0x8(%ebx),%eax
80101746:	85 c0                	test   %eax,%eax
80101748:	7e 0e                	jle    80101758 <iunlock+0x38>
  releasesleep(&ip->lock);
8010174a:	89 75 08             	mov    %esi,0x8(%ebp)
}
8010174d:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101750:	5b                   	pop    %ebx
80101751:	5e                   	pop    %esi
80101752:	5d                   	pop    %ebp
  releasesleep(&ip->lock);
80101753:	e9 38 37 00 00       	jmp    80104e90 <releasesleep>
    panic("iunlock");
80101758:	83 ec 0c             	sub    $0xc,%esp
8010175b:	68 1e d1 10 80       	push   $0x8010d11e
80101760:	e8 bb ec ff ff       	call   80100420 <panic>
80101765:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010176c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101770 <iput>:
{
80101770:	f3 0f 1e fb          	endbr32 
80101774:	55                   	push   %ebp
80101775:	89 e5                	mov    %esp,%ebp
80101777:	57                   	push   %edi
80101778:	56                   	push   %esi
80101779:	53                   	push   %ebx
8010177a:	83 ec 28             	sub    $0x28,%esp
8010177d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquiresleep(&ip->lock);
80101780:	8d 7b 0c             	lea    0xc(%ebx),%edi
80101783:	57                   	push   %edi
80101784:	e8 a7 36 00 00       	call   80104e30 <acquiresleep>
  if(ip->valid && ip->nlink == 0){
80101789:	8b 53 4c             	mov    0x4c(%ebx),%edx
8010178c:	83 c4 10             	add    $0x10,%esp
8010178f:	85 d2                	test   %edx,%edx
80101791:	74 07                	je     8010179a <iput+0x2a>
80101793:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
80101798:	74 36                	je     801017d0 <iput+0x60>
  releasesleep(&ip->lock);
8010179a:	83 ec 0c             	sub    $0xc,%esp
8010179d:	57                   	push   %edi
8010179e:	e8 ed 36 00 00       	call   80104e90 <releasesleep>
  acquire(&icache.lock);
801017a3:	c7 04 24 20 c7 13 80 	movl   $0x8013c720,(%esp)
801017aa:	e8 01 39 00 00       	call   801050b0 <acquire>
  ip->ref--;
801017af:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
  release(&icache.lock);
801017b3:	83 c4 10             	add    $0x10,%esp
801017b6:	c7 45 08 20 c7 13 80 	movl   $0x8013c720,0x8(%ebp)
}
801017bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
801017c0:	5b                   	pop    %ebx
801017c1:	5e                   	pop    %esi
801017c2:	5f                   	pop    %edi
801017c3:	5d                   	pop    %ebp
  release(&icache.lock);
801017c4:	e9 a7 39 00 00       	jmp    80105170 <release>
801017c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    acquire(&icache.lock);
801017d0:	83 ec 0c             	sub    $0xc,%esp
801017d3:	68 20 c7 13 80       	push   $0x8013c720
801017d8:	e8 d3 38 00 00       	call   801050b0 <acquire>
    int r = ip->ref;
801017dd:	8b 73 08             	mov    0x8(%ebx),%esi
    release(&icache.lock);
801017e0:	c7 04 24 20 c7 13 80 	movl   $0x8013c720,(%esp)
801017e7:	e8 84 39 00 00       	call   80105170 <release>
    if(r == 1){
801017ec:	83 c4 10             	add    $0x10,%esp
801017ef:	83 fe 01             	cmp    $0x1,%esi
801017f2:	75 a6                	jne    8010179a <iput+0x2a>
801017f4:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
801017fa:	89 7d e4             	mov    %edi,-0x1c(%ebp)
801017fd:	8d 73 5c             	lea    0x5c(%ebx),%esi
80101800:	89 cf                	mov    %ecx,%edi
80101802:	eb 0b                	jmp    8010180f <iput+0x9f>
80101804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
{
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
80101808:	83 c6 04             	add    $0x4,%esi
8010180b:	39 fe                	cmp    %edi,%esi
8010180d:	74 19                	je     80101828 <iput+0xb8>
    if(ip->addrs[i]){
8010180f:	8b 16                	mov    (%esi),%edx
80101811:	85 d2                	test   %edx,%edx
80101813:	74 f3                	je     80101808 <iput+0x98>
      bfree(ip->dev, ip->addrs[i]);
80101815:	8b 03                	mov    (%ebx),%eax
80101817:	e8 74 f8 ff ff       	call   80101090 <bfree>
      ip->addrs[i] = 0;
8010181c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
80101822:	eb e4                	jmp    80101808 <iput+0x98>
80101824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    }
  }

  if(ip->addrs[NDIRECT]){
80101828:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
8010182e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80101831:	85 c0                	test   %eax,%eax
80101833:	75 33                	jne    80101868 <iput+0xf8>
    bfree(ip->dev, ip->addrs[NDIRECT]);
    ip->addrs[NDIRECT] = 0;
  }

  ip->size = 0;
  iupdate(ip);
80101835:	83 ec 0c             	sub    $0xc,%esp
  ip->size = 0;
80101838:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
  iupdate(ip);
8010183f:	53                   	push   %ebx
80101840:	e8 3b fd ff ff       	call   80101580 <iupdate>
      ip->type = 0;
80101845:	31 c0                	xor    %eax,%eax
80101847:	66 89 43 50          	mov    %ax,0x50(%ebx)
      iupdate(ip);
8010184b:	89 1c 24             	mov    %ebx,(%esp)
8010184e:	e8 2d fd ff ff       	call   80101580 <iupdate>
      ip->valid = 0;
80101853:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
8010185a:	83 c4 10             	add    $0x10,%esp
8010185d:	e9 38 ff ff ff       	jmp    8010179a <iput+0x2a>
80101862:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
80101868:	83 ec 08             	sub    $0x8,%esp
8010186b:	50                   	push   %eax
8010186c:	ff 33                	pushl  (%ebx)
8010186e:	e8 5d e8 ff ff       	call   801000d0 <bread>
80101873:	89 7d e0             	mov    %edi,-0x20(%ebp)
80101876:	83 c4 10             	add    $0x10,%esp
80101879:	8d 88 5c 04 00 00    	lea    0x45c(%eax),%ecx
8010187f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for(j = 0; j < NINDIRECT; j++){
80101882:	8d 70 5c             	lea    0x5c(%eax),%esi
80101885:	89 cf                	mov    %ecx,%edi
80101887:	eb 0e                	jmp    80101897 <iput+0x127>
80101889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101890:	83 c6 04             	add    $0x4,%esi
80101893:	39 f7                	cmp    %esi,%edi
80101895:	74 19                	je     801018b0 <iput+0x140>
      if(a[j])
80101897:	8b 16                	mov    (%esi),%edx
80101899:	85 d2                	test   %edx,%edx
8010189b:	74 f3                	je     80101890 <iput+0x120>
        bfree(ip->dev, a[j]);
8010189d:	8b 03                	mov    (%ebx),%eax
8010189f:	e8 ec f7 ff ff       	call   80101090 <bfree>
801018a4:	eb ea                	jmp    80101890 <iput+0x120>
801018a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801018ad:	8d 76 00             	lea    0x0(%esi),%esi
    brelse(bp);
801018b0:	83 ec 0c             	sub    $0xc,%esp
801018b3:	ff 75 e4             	pushl  -0x1c(%ebp)
801018b6:	8b 7d e0             	mov    -0x20(%ebp),%edi
801018b9:	e8 32 e9 ff ff       	call   801001f0 <brelse>
    bfree(ip->dev, ip->addrs[NDIRECT]);
801018be:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
801018c4:	8b 03                	mov    (%ebx),%eax
801018c6:	e8 c5 f7 ff ff       	call   80101090 <bfree>
    ip->addrs[NDIRECT] = 0;
801018cb:	83 c4 10             	add    $0x10,%esp
801018ce:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
801018d5:	00 00 00 
801018d8:	e9 58 ff ff ff       	jmp    80101835 <iput+0xc5>
801018dd:	8d 76 00             	lea    0x0(%esi),%esi

801018e0 <iunlockput>:
{
801018e0:	f3 0f 1e fb          	endbr32 
801018e4:	55                   	push   %ebp
801018e5:	89 e5                	mov    %esp,%ebp
801018e7:	53                   	push   %ebx
801018e8:	83 ec 10             	sub    $0x10,%esp
801018eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  iunlock(ip);
801018ee:	53                   	push   %ebx
801018ef:	e8 2c fe ff ff       	call   80101720 <iunlock>
  iput(ip);
801018f4:	89 5d 08             	mov    %ebx,0x8(%ebp)
801018f7:	83 c4 10             	add    $0x10,%esp
}
801018fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801018fd:	c9                   	leave  
  iput(ip);
801018fe:	e9 6d fe ff ff       	jmp    80101770 <iput>
80101903:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010190a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101910 <stati>:

// Copy stat information from inode.
// Caller must hold ip->lock.
void
stati(struct inode *ip, struct stat *st)
{
80101910:	f3 0f 1e fb          	endbr32 
80101914:	55                   	push   %ebp
80101915:	89 e5                	mov    %esp,%ebp
80101917:	8b 55 08             	mov    0x8(%ebp),%edx
8010191a:	8b 45 0c             	mov    0xc(%ebp),%eax
  st->dev = ip->dev;
8010191d:	8b 0a                	mov    (%edx),%ecx
8010191f:	89 48 04             	mov    %ecx,0x4(%eax)
  st->ino = ip->inum;
80101922:	8b 4a 04             	mov    0x4(%edx),%ecx
80101925:	89 48 08             	mov    %ecx,0x8(%eax)
  st->type = ip->type;
80101928:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
8010192c:	66 89 08             	mov    %cx,(%eax)
  st->nlink = ip->nlink;
8010192f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
80101933:	66 89 48 0c          	mov    %cx,0xc(%eax)
  st->size = ip->size;
80101937:	8b 52 58             	mov    0x58(%edx),%edx
8010193a:	89 50 10             	mov    %edx,0x10(%eax)
}
8010193d:	5d                   	pop    %ebp
8010193e:	c3                   	ret    
8010193f:	90                   	nop

80101940 <readi>:
//PAGEBREAK!
// Read data from inode.
// Caller must hold ip->lock.
int
readi(struct inode *ip, char *dst, uint off, uint n)
{
80101940:	f3 0f 1e fb          	endbr32 
80101944:	55                   	push   %ebp
80101945:	89 e5                	mov    %esp,%ebp
80101947:	57                   	push   %edi
80101948:	56                   	push   %esi
80101949:	53                   	push   %ebx
8010194a:	83 ec 1c             	sub    $0x1c,%esp
8010194d:	8b 7d 0c             	mov    0xc(%ebp),%edi
80101950:	8b 45 08             	mov    0x8(%ebp),%eax
80101953:	8b 75 10             	mov    0x10(%ebp),%esi
80101956:	89 7d e0             	mov    %edi,-0x20(%ebp)
80101959:	8b 7d 14             	mov    0x14(%ebp),%edi
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
8010195c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
{
80101961:	89 45 d8             	mov    %eax,-0x28(%ebp)
80101964:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  if(ip->type == T_DEV){
80101967:	0f 84 a3 00 00 00    	je     80101a10 <readi+0xd0>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
      return -1;
    return devsw[ip->major].read(ip, dst, n);
  }

  if(off > ip->size || off + n < off)
8010196d:	8b 45 d8             	mov    -0x28(%ebp),%eax
80101970:	8b 40 58             	mov    0x58(%eax),%eax
80101973:	39 c6                	cmp    %eax,%esi
80101975:	0f 87 b6 00 00 00    	ja     80101a31 <readi+0xf1>
8010197b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
8010197e:	31 c9                	xor    %ecx,%ecx
80101980:	89 da                	mov    %ebx,%edx
80101982:	01 f2                	add    %esi,%edx
80101984:	0f 92 c1             	setb   %cl
80101987:	89 cf                	mov    %ecx,%edi
80101989:	0f 82 a2 00 00 00    	jb     80101a31 <readi+0xf1>
    return -1;
  if(off + n > ip->size)
    n = ip->size - off;
8010198f:	89 c1                	mov    %eax,%ecx
80101991:	29 f1                	sub    %esi,%ecx
80101993:	39 d0                	cmp    %edx,%eax
80101995:	0f 43 cb             	cmovae %ebx,%ecx
80101998:	89 4d e4             	mov    %ecx,-0x1c(%ebp)

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
8010199b:	85 c9                	test   %ecx,%ecx
8010199d:	74 63                	je     80101a02 <readi+0xc2>
8010199f:	90                   	nop
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
801019a0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
801019a3:	89 f2                	mov    %esi,%edx
801019a5:	c1 ea 0a             	shr    $0xa,%edx
801019a8:	89 d8                	mov    %ebx,%eax
801019aa:	e8 61 f9 ff ff       	call   80101310 <bmap>
801019af:	83 ec 08             	sub    $0x8,%esp
801019b2:	50                   	push   %eax
801019b3:	ff 33                	pushl  (%ebx)
801019b5:	e8 16 e7 ff ff       	call   801000d0 <bread>
    m = min(n - tot, BSIZE - off%BSIZE);
801019ba:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
801019bd:	b9 00 04 00 00       	mov    $0x400,%ecx
801019c2:	83 c4 0c             	add    $0xc,%esp
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
801019c5:	89 c2                	mov    %eax,%edx
    m = min(n - tot, BSIZE - off%BSIZE);
801019c7:	89 f0                	mov    %esi,%eax
801019c9:	25 ff 03 00 00       	and    $0x3ff,%eax
801019ce:	29 fb                	sub    %edi,%ebx
    memmove(dst, bp->data + off%BSIZE, m);
801019d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
    m = min(n - tot, BSIZE - off%BSIZE);
801019d3:	29 c1                	sub    %eax,%ecx
    memmove(dst, bp->data + off%BSIZE, m);
801019d5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
    m = min(n - tot, BSIZE - off%BSIZE);
801019d9:	39 d9                	cmp    %ebx,%ecx
801019db:	0f 46 d9             	cmovbe %ecx,%ebx
    memmove(dst, bp->data + off%BSIZE, m);
801019de:	53                   	push   %ebx
  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
801019df:	01 df                	add    %ebx,%edi
801019e1:	01 de                	add    %ebx,%esi
    memmove(dst, bp->data + off%BSIZE, m);
801019e3:	50                   	push   %eax
801019e4:	ff 75 e0             	pushl  -0x20(%ebp)
801019e7:	e8 74 38 00 00       	call   80105260 <memmove>
    brelse(bp);
801019ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
801019ef:	89 14 24             	mov    %edx,(%esp)
801019f2:	e8 f9 e7 ff ff       	call   801001f0 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
801019f7:	01 5d e0             	add    %ebx,-0x20(%ebp)
801019fa:	83 c4 10             	add    $0x10,%esp
801019fd:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
80101a00:	77 9e                	ja     801019a0 <readi+0x60>
  }
  return n;
80101a02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
80101a05:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a08:	5b                   	pop    %ebx
80101a09:	5e                   	pop    %esi
80101a0a:	5f                   	pop    %edi
80101a0b:	5d                   	pop    %ebp
80101a0c:	c3                   	ret    
80101a0d:	8d 76 00             	lea    0x0(%esi),%esi
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
80101a10:	0f bf 40 52          	movswl 0x52(%eax),%eax
80101a14:	66 83 f8 09          	cmp    $0x9,%ax
80101a18:	77 17                	ja     80101a31 <readi+0xf1>
80101a1a:	8b 04 c5 a0 c6 13 80 	mov    -0x7fec3960(,%eax,8),%eax
80101a21:	85 c0                	test   %eax,%eax
80101a23:	74 0c                	je     80101a31 <readi+0xf1>
    return devsw[ip->major].read(ip, dst, n);
80101a25:	89 7d 10             	mov    %edi,0x10(%ebp)
}
80101a28:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a2b:	5b                   	pop    %ebx
80101a2c:	5e                   	pop    %esi
80101a2d:	5f                   	pop    %edi
80101a2e:	5d                   	pop    %ebp
    return devsw[ip->major].read(ip, dst, n);
80101a2f:	ff e0                	jmp    *%eax
      return -1;
80101a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101a36:	eb cd                	jmp    80101a05 <readi+0xc5>
80101a38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101a3f:	90                   	nop

80101a40 <writei>:
// PAGEBREAK!
// Write data to inode.
// Caller must hold ip->lock.
int
writei(struct inode *ip, char *src, uint off, uint n)
{
80101a40:	f3 0f 1e fb          	endbr32 
80101a44:	55                   	push   %ebp
80101a45:	89 e5                	mov    %esp,%ebp
80101a47:	57                   	push   %edi
80101a48:	56                   	push   %esi
80101a49:	53                   	push   %ebx
80101a4a:	83 ec 1c             	sub    $0x1c,%esp
80101a4d:	8b 45 08             	mov    0x8(%ebp),%eax
80101a50:	8b 75 0c             	mov    0xc(%ebp),%esi
80101a53:	8b 7d 14             	mov    0x14(%ebp),%edi
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80101a56:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
{
80101a5b:	89 75 dc             	mov    %esi,-0x24(%ebp)
80101a5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
80101a61:	8b 75 10             	mov    0x10(%ebp),%esi
80101a64:	89 7d e0             	mov    %edi,-0x20(%ebp)
  if(ip->type == T_DEV){
80101a67:	0f 84 b3 00 00 00    	je     80101b20 <writei+0xe0>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
      return -1;
    return devsw[ip->major].write(ip, src, n);
  }

  if(off > ip->size || off + n < off)
80101a6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
80101a70:	39 70 58             	cmp    %esi,0x58(%eax)
80101a73:	0f 82 e3 00 00 00    	jb     80101b5c <writei+0x11c>
    return -1;
  if(off + n > MAXFILE*BSIZE)
80101a79:	8b 7d e0             	mov    -0x20(%ebp),%edi
80101a7c:	89 f8                	mov    %edi,%eax
80101a7e:	01 f0                	add    %esi,%eax
80101a80:	0f 82 d6 00 00 00    	jb     80101b5c <writei+0x11c>
80101a86:	3d 00 30 04 00       	cmp    $0x43000,%eax
80101a8b:	0f 87 cb 00 00 00    	ja     80101b5c <writei+0x11c>
    return -1;

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80101a91:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80101a98:	85 ff                	test   %edi,%edi
80101a9a:	74 75                	je     80101b11 <writei+0xd1>
80101a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
80101aa0:	8b 7d d8             	mov    -0x28(%ebp),%edi
80101aa3:	89 f2                	mov    %esi,%edx
80101aa5:	c1 ea 0a             	shr    $0xa,%edx
80101aa8:	89 f8                	mov    %edi,%eax
80101aaa:	e8 61 f8 ff ff       	call   80101310 <bmap>
80101aaf:	83 ec 08             	sub    $0x8,%esp
80101ab2:	50                   	push   %eax
80101ab3:	ff 37                	pushl  (%edi)
80101ab5:	e8 16 e6 ff ff       	call   801000d0 <bread>
    m = min(n - tot, BSIZE - off%BSIZE);
80101aba:	b9 00 04 00 00       	mov    $0x400,%ecx
80101abf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80101ac2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
80101ac5:	89 c7                	mov    %eax,%edi
    m = min(n - tot, BSIZE - off%BSIZE);
80101ac7:	89 f0                	mov    %esi,%eax
80101ac9:	83 c4 0c             	add    $0xc,%esp
80101acc:	25 ff 03 00 00       	and    $0x3ff,%eax
80101ad1:	29 c1                	sub    %eax,%ecx
    memmove(bp->data + off%BSIZE, src, m);
80101ad3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
    m = min(n - tot, BSIZE - off%BSIZE);
80101ad7:	39 d9                	cmp    %ebx,%ecx
80101ad9:	0f 46 d9             	cmovbe %ecx,%ebx
    memmove(bp->data + off%BSIZE, src, m);
80101adc:	53                   	push   %ebx
  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80101add:	01 de                	add    %ebx,%esi
    memmove(bp->data + off%BSIZE, src, m);
80101adf:	ff 75 dc             	pushl  -0x24(%ebp)
80101ae2:	50                   	push   %eax
80101ae3:	e8 78 37 00 00       	call   80105260 <memmove>
    log_write(bp);
80101ae8:	89 3c 24             	mov    %edi,(%esp)
80101aeb:	e8 00 13 00 00       	call   80102df0 <log_write>
    brelse(bp);
80101af0:	89 3c 24             	mov    %edi,(%esp)
80101af3:	e8 f8 e6 ff ff       	call   801001f0 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80101af8:	01 5d e4             	add    %ebx,-0x1c(%ebp)
80101afb:	83 c4 10             	add    $0x10,%esp
80101afe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101b01:	01 5d dc             	add    %ebx,-0x24(%ebp)
80101b04:	39 45 e0             	cmp    %eax,-0x20(%ebp)
80101b07:	77 97                	ja     80101aa0 <writei+0x60>
  }

  if(n > 0 && off > ip->size){
80101b09:	8b 45 d8             	mov    -0x28(%ebp),%eax
80101b0c:	3b 70 58             	cmp    0x58(%eax),%esi
80101b0f:	77 37                	ja     80101b48 <writei+0x108>
    ip->size = off;
    iupdate(ip);
  }
  return n;
80101b11:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
80101b14:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b17:	5b                   	pop    %ebx
80101b18:	5e                   	pop    %esi
80101b19:	5f                   	pop    %edi
80101b1a:	5d                   	pop    %ebp
80101b1b:	c3                   	ret    
80101b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
80101b20:	0f bf 40 52          	movswl 0x52(%eax),%eax
80101b24:	66 83 f8 09          	cmp    $0x9,%ax
80101b28:	77 32                	ja     80101b5c <writei+0x11c>
80101b2a:	8b 04 c5 a4 c6 13 80 	mov    -0x7fec395c(,%eax,8),%eax
80101b31:	85 c0                	test   %eax,%eax
80101b33:	74 27                	je     80101b5c <writei+0x11c>
    return devsw[ip->major].write(ip, src, n);
80101b35:	89 7d 10             	mov    %edi,0x10(%ebp)
}
80101b38:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b3b:	5b                   	pop    %ebx
80101b3c:	5e                   	pop    %esi
80101b3d:	5f                   	pop    %edi
80101b3e:	5d                   	pop    %ebp
    return devsw[ip->major].write(ip, src, n);
80101b3f:	ff e0                	jmp    *%eax
80101b41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    ip->size = off;
80101b48:	8b 45 d8             	mov    -0x28(%ebp),%eax
    iupdate(ip);
80101b4b:	83 ec 0c             	sub    $0xc,%esp
    ip->size = off;
80101b4e:	89 70 58             	mov    %esi,0x58(%eax)
    iupdate(ip);
80101b51:	50                   	push   %eax
80101b52:	e8 29 fa ff ff       	call   80101580 <iupdate>
80101b57:	83 c4 10             	add    $0x10,%esp
80101b5a:	eb b5                	jmp    80101b11 <writei+0xd1>
      return -1;
80101b5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101b61:	eb b1                	jmp    80101b14 <writei+0xd4>
80101b63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101b70 <namecmp>:
//PAGEBREAK!
// Directories

int
namecmp(const char *s, const char *t)
{
80101b70:	f3 0f 1e fb          	endbr32 
80101b74:	55                   	push   %ebp
80101b75:	89 e5                	mov    %esp,%ebp
80101b77:	83 ec 0c             	sub    $0xc,%esp
  return strncmp(s, t, DIRSIZ);
80101b7a:	6a 0e                	push   $0xe
80101b7c:	ff 75 0c             	pushl  0xc(%ebp)
80101b7f:	ff 75 08             	pushl  0x8(%ebp)
80101b82:	e8 49 37 00 00       	call   801052d0 <strncmp>
}
80101b87:	c9                   	leave  
80101b88:	c3                   	ret    
80101b89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80101b90 <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode*
dirlookup(struct inode *dp, char *name, uint *poff)
{
80101b90:	f3 0f 1e fb          	endbr32 
80101b94:	55                   	push   %ebp
80101b95:	89 e5                	mov    %esp,%ebp
80101b97:	57                   	push   %edi
80101b98:	56                   	push   %esi
80101b99:	53                   	push   %ebx
80101b9a:	83 ec 1c             	sub    $0x1c,%esp
80101b9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  uint off, inum;
  struct dirent de;

  if(dp->type != T_DIR)
80101ba0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80101ba5:	0f 85 89 00 00 00    	jne    80101c34 <dirlookup+0xa4>
    panic("dirlookup not DIR");

  for(off = 0; off < dp->size; off += sizeof(de)){
80101bab:	8b 53 58             	mov    0x58(%ebx),%edx
80101bae:	31 ff                	xor    %edi,%edi
80101bb0:	8d 75 d8             	lea    -0x28(%ebp),%esi
80101bb3:	85 d2                	test   %edx,%edx
80101bb5:	74 42                	je     80101bf9 <dirlookup+0x69>
80101bb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101bbe:	66 90                	xchg   %ax,%ax
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80101bc0:	6a 10                	push   $0x10
80101bc2:	57                   	push   %edi
80101bc3:	56                   	push   %esi
80101bc4:	53                   	push   %ebx
80101bc5:	e8 76 fd ff ff       	call   80101940 <readi>
80101bca:	83 c4 10             	add    $0x10,%esp
80101bcd:	83 f8 10             	cmp    $0x10,%eax
80101bd0:	75 55                	jne    80101c27 <dirlookup+0x97>
      panic("dirlookup read");
    if(de.inum == 0)
80101bd2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80101bd7:	74 18                	je     80101bf1 <dirlookup+0x61>
  return strncmp(s, t, DIRSIZ);
80101bd9:	83 ec 04             	sub    $0x4,%esp
80101bdc:	8d 45 da             	lea    -0x26(%ebp),%eax
80101bdf:	6a 0e                	push   $0xe
80101be1:	50                   	push   %eax
80101be2:	ff 75 0c             	pushl  0xc(%ebp)
80101be5:	e8 e6 36 00 00       	call   801052d0 <strncmp>
      continue;
    if(namecmp(name, de.name) == 0){
80101bea:	83 c4 10             	add    $0x10,%esp
80101bed:	85 c0                	test   %eax,%eax
80101bef:	74 17                	je     80101c08 <dirlookup+0x78>
  for(off = 0; off < dp->size; off += sizeof(de)){
80101bf1:	83 c7 10             	add    $0x10,%edi
80101bf4:	3b 7b 58             	cmp    0x58(%ebx),%edi
80101bf7:	72 c7                	jb     80101bc0 <dirlookup+0x30>
      return iget(dp->dev, inum);
    }
  }

  return 0;
}
80101bf9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
80101bfc:	31 c0                	xor    %eax,%eax
}
80101bfe:	5b                   	pop    %ebx
80101bff:	5e                   	pop    %esi
80101c00:	5f                   	pop    %edi
80101c01:	5d                   	pop    %ebp
80101c02:	c3                   	ret    
80101c03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101c07:	90                   	nop
      if(poff)
80101c08:	8b 45 10             	mov    0x10(%ebp),%eax
80101c0b:	85 c0                	test   %eax,%eax
80101c0d:	74 05                	je     80101c14 <dirlookup+0x84>
        *poff = off;
80101c0f:	8b 45 10             	mov    0x10(%ebp),%eax
80101c12:	89 38                	mov    %edi,(%eax)
      inum = de.inum;
80101c14:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
      return iget(dp->dev, inum);
80101c18:	8b 03                	mov    (%ebx),%eax
80101c1a:	e8 01 f6 ff ff       	call   80101220 <iget>
}
80101c1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101c22:	5b                   	pop    %ebx
80101c23:	5e                   	pop    %esi
80101c24:	5f                   	pop    %edi
80101c25:	5d                   	pop    %ebp
80101c26:	c3                   	ret    
      panic("dirlookup read");
80101c27:	83 ec 0c             	sub    $0xc,%esp
80101c2a:	68 38 d1 10 80       	push   $0x8010d138
80101c2f:	e8 ec e7 ff ff       	call   80100420 <panic>
    panic("dirlookup not DIR");
80101c34:	83 ec 0c             	sub    $0xc,%esp
80101c37:	68 26 d1 10 80       	push   $0x8010d126
80101c3c:	e8 df e7 ff ff       	call   80100420 <panic>
80101c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101c48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101c4f:	90                   	nop

80101c50 <namex>:
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
// Must be called inside a transaction since it calls iput().
static struct inode*
namex(char *path, int nameiparent, char *name)
{
80101c50:	55                   	push   %ebp
80101c51:	89 e5                	mov    %esp,%ebp
80101c53:	57                   	push   %edi
80101c54:	56                   	push   %esi
80101c55:	53                   	push   %ebx
80101c56:	89 c3                	mov    %eax,%ebx
80101c58:	83 ec 1c             	sub    $0x1c,%esp
  struct inode *ip, *next;

  if(*path == '/')
80101c5b:	80 38 2f             	cmpb   $0x2f,(%eax)
{
80101c5e:	89 55 e0             	mov    %edx,-0x20(%ebp)
80101c61:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  if(*path == '/')
80101c64:	0f 84 86 01 00 00    	je     80101df0 <namex+0x1a0>
    ip = iget(ROOTDEV, ROOTINO);
  else
    ip = idup(myproc()->cwd);
80101c6a:	e8 41 28 00 00       	call   801044b0 <myproc>
  acquire(&icache.lock);
80101c6f:	83 ec 0c             	sub    $0xc,%esp
80101c72:	89 df                	mov    %ebx,%edi
    ip = idup(myproc()->cwd);
80101c74:	8b 70 68             	mov    0x68(%eax),%esi
  acquire(&icache.lock);
80101c77:	68 20 c7 13 80       	push   $0x8013c720
80101c7c:	e8 2f 34 00 00       	call   801050b0 <acquire>
  ip->ref++;
80101c81:	83 46 08 01          	addl   $0x1,0x8(%esi)
  release(&icache.lock);
80101c85:	c7 04 24 20 c7 13 80 	movl   $0x8013c720,(%esp)
80101c8c:	e8 df 34 00 00       	call   80105170 <release>
80101c91:	83 c4 10             	add    $0x10,%esp
80101c94:	eb 0d                	jmp    80101ca3 <namex+0x53>
80101c96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101c9d:	8d 76 00             	lea    0x0(%esi),%esi
    path++;
80101ca0:	83 c7 01             	add    $0x1,%edi
  while(*path == '/')
80101ca3:	0f b6 07             	movzbl (%edi),%eax
80101ca6:	3c 2f                	cmp    $0x2f,%al
80101ca8:	74 f6                	je     80101ca0 <namex+0x50>
  if(*path == 0)
80101caa:	84 c0                	test   %al,%al
80101cac:	0f 84 ee 00 00 00    	je     80101da0 <namex+0x150>
  while(*path != '/' && *path != 0)
80101cb2:	0f b6 07             	movzbl (%edi),%eax
80101cb5:	84 c0                	test   %al,%al
80101cb7:	0f 84 fb 00 00 00    	je     80101db8 <namex+0x168>
80101cbd:	89 fb                	mov    %edi,%ebx
80101cbf:	3c 2f                	cmp    $0x2f,%al
80101cc1:	0f 84 f1 00 00 00    	je     80101db8 <namex+0x168>
80101cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101cce:	66 90                	xchg   %ax,%ax
80101cd0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
    path++;
80101cd4:	83 c3 01             	add    $0x1,%ebx
  while(*path != '/' && *path != 0)
80101cd7:	3c 2f                	cmp    $0x2f,%al
80101cd9:	74 04                	je     80101cdf <namex+0x8f>
80101cdb:	84 c0                	test   %al,%al
80101cdd:	75 f1                	jne    80101cd0 <namex+0x80>
  len = path - s;
80101cdf:	89 d8                	mov    %ebx,%eax
80101ce1:	29 f8                	sub    %edi,%eax
  if(len >= DIRSIZ)
80101ce3:	83 f8 0d             	cmp    $0xd,%eax
80101ce6:	0f 8e 84 00 00 00    	jle    80101d70 <namex+0x120>
    memmove(name, s, DIRSIZ);
80101cec:	83 ec 04             	sub    $0x4,%esp
80101cef:	6a 0e                	push   $0xe
80101cf1:	57                   	push   %edi
    path++;
80101cf2:	89 df                	mov    %ebx,%edi
    memmove(name, s, DIRSIZ);
80101cf4:	ff 75 e4             	pushl  -0x1c(%ebp)
80101cf7:	e8 64 35 00 00       	call   80105260 <memmove>
80101cfc:	83 c4 10             	add    $0x10,%esp
  while(*path == '/')
80101cff:	80 3b 2f             	cmpb   $0x2f,(%ebx)
80101d02:	75 0c                	jne    80101d10 <namex+0xc0>
80101d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    path++;
80101d08:	83 c7 01             	add    $0x1,%edi
  while(*path == '/')
80101d0b:	80 3f 2f             	cmpb   $0x2f,(%edi)
80101d0e:	74 f8                	je     80101d08 <namex+0xb8>

  while((path = skipelem(path, name)) != 0){
    ilock(ip);
80101d10:	83 ec 0c             	sub    $0xc,%esp
80101d13:	56                   	push   %esi
80101d14:	e8 27 f9 ff ff       	call   80101640 <ilock>
    if(ip->type != T_DIR){
80101d19:	83 c4 10             	add    $0x10,%esp
80101d1c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
80101d21:	0f 85 a1 00 00 00    	jne    80101dc8 <namex+0x178>
      iunlockput(ip);
      return 0;
    }
    if(nameiparent && *path == '\0'){
80101d27:	8b 55 e0             	mov    -0x20(%ebp),%edx
80101d2a:	85 d2                	test   %edx,%edx
80101d2c:	74 09                	je     80101d37 <namex+0xe7>
80101d2e:	80 3f 00             	cmpb   $0x0,(%edi)
80101d31:	0f 84 d9 00 00 00    	je     80101e10 <namex+0x1c0>
      // Stop one level early.
      iunlock(ip);
      return ip;
    }
    if((next = dirlookup(ip, name, 0)) == 0){
80101d37:	83 ec 04             	sub    $0x4,%esp
80101d3a:	6a 00                	push   $0x0
80101d3c:	ff 75 e4             	pushl  -0x1c(%ebp)
80101d3f:	56                   	push   %esi
80101d40:	e8 4b fe ff ff       	call   80101b90 <dirlookup>
80101d45:	83 c4 10             	add    $0x10,%esp
80101d48:	89 c3                	mov    %eax,%ebx
80101d4a:	85 c0                	test   %eax,%eax
80101d4c:	74 7a                	je     80101dc8 <namex+0x178>
  iunlock(ip);
80101d4e:	83 ec 0c             	sub    $0xc,%esp
80101d51:	56                   	push   %esi
80101d52:	e8 c9 f9 ff ff       	call   80101720 <iunlock>
  iput(ip);
80101d57:	89 34 24             	mov    %esi,(%esp)
80101d5a:	89 de                	mov    %ebx,%esi
80101d5c:	e8 0f fa ff ff       	call   80101770 <iput>
80101d61:	83 c4 10             	add    $0x10,%esp
80101d64:	e9 3a ff ff ff       	jmp    80101ca3 <namex+0x53>
80101d69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101d70:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101d73:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
80101d76:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    memmove(name, s, len);
80101d79:	83 ec 04             	sub    $0x4,%esp
80101d7c:	50                   	push   %eax
80101d7d:	57                   	push   %edi
    name[len] = 0;
80101d7e:	89 df                	mov    %ebx,%edi
    memmove(name, s, len);
80101d80:	ff 75 e4             	pushl  -0x1c(%ebp)
80101d83:	e8 d8 34 00 00       	call   80105260 <memmove>
    name[len] = 0;
80101d88:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101d8b:	83 c4 10             	add    $0x10,%esp
80101d8e:	c6 00 00             	movb   $0x0,(%eax)
80101d91:	e9 69 ff ff ff       	jmp    80101cff <namex+0xaf>
80101d96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101d9d:	8d 76 00             	lea    0x0(%esi),%esi
      return 0;
    }
    iunlockput(ip);
    ip = next;
  }
  if(nameiparent){
80101da0:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101da3:	85 c0                	test   %eax,%eax
80101da5:	0f 85 85 00 00 00    	jne    80101e30 <namex+0x1e0>
    iput(ip);
    return 0;
  }
  return ip;
}
80101dab:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101dae:	89 f0                	mov    %esi,%eax
80101db0:	5b                   	pop    %ebx
80101db1:	5e                   	pop    %esi
80101db2:	5f                   	pop    %edi
80101db3:	5d                   	pop    %ebp
80101db4:	c3                   	ret    
80101db5:	8d 76 00             	lea    0x0(%esi),%esi
  while(*path != '/' && *path != 0)
80101db8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101dbb:	89 fb                	mov    %edi,%ebx
80101dbd:	89 45 dc             	mov    %eax,-0x24(%ebp)
80101dc0:	31 c0                	xor    %eax,%eax
80101dc2:	eb b5                	jmp    80101d79 <namex+0x129>
80101dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  iunlock(ip);
80101dc8:	83 ec 0c             	sub    $0xc,%esp
80101dcb:	56                   	push   %esi
80101dcc:	e8 4f f9 ff ff       	call   80101720 <iunlock>
  iput(ip);
80101dd1:	89 34 24             	mov    %esi,(%esp)
      return 0;
80101dd4:	31 f6                	xor    %esi,%esi
  iput(ip);
80101dd6:	e8 95 f9 ff ff       	call   80101770 <iput>
      return 0;
80101ddb:	83 c4 10             	add    $0x10,%esp
}
80101dde:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101de1:	89 f0                	mov    %esi,%eax
80101de3:	5b                   	pop    %ebx
80101de4:	5e                   	pop    %esi
80101de5:	5f                   	pop    %edi
80101de6:	5d                   	pop    %ebp
80101de7:	c3                   	ret    
80101de8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101def:	90                   	nop
    ip = iget(ROOTDEV, ROOTINO);
80101df0:	ba 01 00 00 00       	mov    $0x1,%edx
80101df5:	b8 01 00 00 00       	mov    $0x1,%eax
80101dfa:	89 df                	mov    %ebx,%edi
80101dfc:	e8 1f f4 ff ff       	call   80101220 <iget>
80101e01:	89 c6                	mov    %eax,%esi
80101e03:	e9 9b fe ff ff       	jmp    80101ca3 <namex+0x53>
80101e08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101e0f:	90                   	nop
      iunlock(ip);
80101e10:	83 ec 0c             	sub    $0xc,%esp
80101e13:	56                   	push   %esi
80101e14:	e8 07 f9 ff ff       	call   80101720 <iunlock>
      return ip;
80101e19:	83 c4 10             	add    $0x10,%esp
}
80101e1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101e1f:	89 f0                	mov    %esi,%eax
80101e21:	5b                   	pop    %ebx
80101e22:	5e                   	pop    %esi
80101e23:	5f                   	pop    %edi
80101e24:	5d                   	pop    %ebp
80101e25:	c3                   	ret    
80101e26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101e2d:	8d 76 00             	lea    0x0(%esi),%esi
    iput(ip);
80101e30:	83 ec 0c             	sub    $0xc,%esp
80101e33:	56                   	push   %esi
    return 0;
80101e34:	31 f6                	xor    %esi,%esi
    iput(ip);
80101e36:	e8 35 f9 ff ff       	call   80101770 <iput>
    return 0;
80101e3b:	83 c4 10             	add    $0x10,%esp
80101e3e:	e9 68 ff ff ff       	jmp    80101dab <namex+0x15b>
80101e43:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101e50 <dirlink>:
{
80101e50:	f3 0f 1e fb          	endbr32 
80101e54:	55                   	push   %ebp
80101e55:	89 e5                	mov    %esp,%ebp
80101e57:	57                   	push   %edi
80101e58:	56                   	push   %esi
80101e59:	53                   	push   %ebx
80101e5a:	83 ec 20             	sub    $0x20,%esp
80101e5d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if((ip = dirlookup(dp, name, 0)) != 0){
80101e60:	6a 00                	push   $0x0
80101e62:	ff 75 0c             	pushl  0xc(%ebp)
80101e65:	53                   	push   %ebx
80101e66:	e8 25 fd ff ff       	call   80101b90 <dirlookup>
80101e6b:	83 c4 10             	add    $0x10,%esp
80101e6e:	85 c0                	test   %eax,%eax
80101e70:	75 6b                	jne    80101edd <dirlink+0x8d>
  for(off = 0; off < dp->size; off += sizeof(de)){
80101e72:	8b 7b 58             	mov    0x58(%ebx),%edi
80101e75:	8d 75 d8             	lea    -0x28(%ebp),%esi
80101e78:	85 ff                	test   %edi,%edi
80101e7a:	74 2d                	je     80101ea9 <dirlink+0x59>
80101e7c:	31 ff                	xor    %edi,%edi
80101e7e:	8d 75 d8             	lea    -0x28(%ebp),%esi
80101e81:	eb 0d                	jmp    80101e90 <dirlink+0x40>
80101e83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101e87:	90                   	nop
80101e88:	83 c7 10             	add    $0x10,%edi
80101e8b:	3b 7b 58             	cmp    0x58(%ebx),%edi
80101e8e:	73 19                	jae    80101ea9 <dirlink+0x59>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80101e90:	6a 10                	push   $0x10
80101e92:	57                   	push   %edi
80101e93:	56                   	push   %esi
80101e94:	53                   	push   %ebx
80101e95:	e8 a6 fa ff ff       	call   80101940 <readi>
80101e9a:	83 c4 10             	add    $0x10,%esp
80101e9d:	83 f8 10             	cmp    $0x10,%eax
80101ea0:	75 4e                	jne    80101ef0 <dirlink+0xa0>
    if(de.inum == 0)
80101ea2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80101ea7:	75 df                	jne    80101e88 <dirlink+0x38>
  strncpy(de.name, name, DIRSIZ);
80101ea9:	83 ec 04             	sub    $0x4,%esp
80101eac:	8d 45 da             	lea    -0x26(%ebp),%eax
80101eaf:	6a 0e                	push   $0xe
80101eb1:	ff 75 0c             	pushl  0xc(%ebp)
80101eb4:	50                   	push   %eax
80101eb5:	e8 66 34 00 00       	call   80105320 <strncpy>
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80101eba:	6a 10                	push   $0x10
  de.inum = inum;
80101ebc:	8b 45 10             	mov    0x10(%ebp),%eax
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80101ebf:	57                   	push   %edi
80101ec0:	56                   	push   %esi
80101ec1:	53                   	push   %ebx
  de.inum = inum;
80101ec2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80101ec6:	e8 75 fb ff ff       	call   80101a40 <writei>
80101ecb:	83 c4 20             	add    $0x20,%esp
80101ece:	83 f8 10             	cmp    $0x10,%eax
80101ed1:	75 2a                	jne    80101efd <dirlink+0xad>
  return 0;
80101ed3:	31 c0                	xor    %eax,%eax
}
80101ed5:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101ed8:	5b                   	pop    %ebx
80101ed9:	5e                   	pop    %esi
80101eda:	5f                   	pop    %edi
80101edb:	5d                   	pop    %ebp
80101edc:	c3                   	ret    
    iput(ip);
80101edd:	83 ec 0c             	sub    $0xc,%esp
80101ee0:	50                   	push   %eax
80101ee1:	e8 8a f8 ff ff       	call   80101770 <iput>
    return -1;
80101ee6:	83 c4 10             	add    $0x10,%esp
80101ee9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101eee:	eb e5                	jmp    80101ed5 <dirlink+0x85>
      panic("dirlink read");
80101ef0:	83 ec 0c             	sub    $0xc,%esp
80101ef3:	68 47 d1 10 80       	push   $0x8010d147
80101ef8:	e8 23 e5 ff ff       	call   80100420 <panic>
    panic("dirlink");
80101efd:	83 ec 0c             	sub    $0xc,%esp
80101f00:	68 26 dd 10 80       	push   $0x8010dd26
80101f05:	e8 16 e5 ff ff       	call   80100420 <panic>
80101f0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101f10 <namei>:

struct inode*
namei(char *path)
{
80101f10:	f3 0f 1e fb          	endbr32 
80101f14:	55                   	push   %ebp
  char name[DIRSIZ];
  return namex(path, 0, name);
80101f15:	31 d2                	xor    %edx,%edx
{
80101f17:	89 e5                	mov    %esp,%ebp
80101f19:	83 ec 18             	sub    $0x18,%esp
  return namex(path, 0, name);
80101f1c:	8b 45 08             	mov    0x8(%ebp),%eax
80101f1f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
80101f22:	e8 29 fd ff ff       	call   80101c50 <namex>
}
80101f27:	c9                   	leave  
80101f28:	c3                   	ret    
80101f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80101f30 <nameiparent>:

struct inode*
nameiparent(char *path, char *name)
{
80101f30:	f3 0f 1e fb          	endbr32 
80101f34:	55                   	push   %ebp
  return namex(path, 1, name);
80101f35:	ba 01 00 00 00       	mov    $0x1,%edx
{
80101f3a:	89 e5                	mov    %esp,%ebp
  return namex(path, 1, name);
80101f3c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80101f3f:	8b 45 08             	mov    0x8(%ebp),%eax
}
80101f42:	5d                   	pop    %ebp
  return namex(path, 1, name);
80101f43:	e9 08 fd ff ff       	jmp    80101c50 <namex>
80101f48:	66 90                	xchg   %ax,%ax
80101f4a:	66 90                	xchg   %ax,%ax
80101f4c:	66 90                	xchg   %ax,%ax
80101f4e:	66 90                	xchg   %ax,%ax

80101f50 <idestart>:
}

// Start the request for b.  Caller must hold idelock.
static void
idestart(struct buf *b)
{
80101f50:	55                   	push   %ebp
80101f51:	89 e5                	mov    %esp,%ebp
80101f53:	57                   	push   %edi
80101f54:	56                   	push   %esi
80101f55:	53                   	push   %ebx
80101f56:	83 ec 0c             	sub    $0xc,%esp
  if(b == 0)
80101f59:	85 c0                	test   %eax,%eax
80101f5b:	0f 84 b4 00 00 00    	je     80102015 <idestart+0xc5>
    panic("idestart");
  if(b->blockno >= FSSIZE)
80101f61:	8b 70 08             	mov    0x8(%eax),%esi
80101f64:	89 c3                	mov    %eax,%ebx
80101f66:	81 fe cf 07 00 00    	cmp    $0x7cf,%esi
80101f6c:	0f 87 96 00 00 00    	ja     80102008 <idestart+0xb8>
    panic("incorrect blockno");
  int sector_per_block =  BSIZE/SECTOR_SIZE;
  int sector = b->blockno * sector_per_block;
80101f72:	01 f6                	add    %esi,%esi
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80101f74:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
80101f79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101f80:	89 ca                	mov    %ecx,%edx
80101f82:	ec                   	in     (%dx),%al
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
80101f83:	83 e0 c0             	and    $0xffffffc0,%eax
80101f86:	3c 40                	cmp    $0x40,%al
80101f88:	75 f6                	jne    80101f80 <idestart+0x30>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80101f8a:	31 ff                	xor    %edi,%edi
80101f8c:	ba f6 03 00 00       	mov    $0x3f6,%edx
80101f91:	89 f8                	mov    %edi,%eax
80101f93:	ee                   	out    %al,(%dx)
80101f94:	b8 02 00 00 00       	mov    $0x2,%eax
80101f99:	ba f2 01 00 00       	mov    $0x1f2,%edx
80101f9e:	ee                   	out    %al,(%dx)
80101f9f:	ba f3 01 00 00       	mov    $0x1f3,%edx
80101fa4:	89 f0                	mov    %esi,%eax
80101fa6:	ee                   	out    %al,(%dx)

  idewait(0);
  outb(0x3f6, 0);  // generate interrupt
  outb(0x1f2, sector_per_block);  // number of sectors
  outb(0x1f3, sector & 0xff);
  outb(0x1f4, (sector >> 8) & 0xff);
80101fa7:	89 f0                	mov    %esi,%eax
80101fa9:	ba f4 01 00 00       	mov    $0x1f4,%edx
80101fae:	c1 f8 08             	sar    $0x8,%eax
80101fb1:	ee                   	out    %al,(%dx)
80101fb2:	ba f5 01 00 00       	mov    $0x1f5,%edx
80101fb7:	89 f8                	mov    %edi,%eax
80101fb9:	ee                   	out    %al,(%dx)
  outb(0x1f5, (sector >> 16) & 0xff);
  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
80101fba:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
80101fbe:	ba f6 01 00 00       	mov    $0x1f6,%edx
80101fc3:	c1 e0 04             	shl    $0x4,%eax
80101fc6:	83 e0 10             	and    $0x10,%eax
80101fc9:	83 c8 e0             	or     $0xffffffe0,%eax
80101fcc:	ee                   	out    %al,(%dx)
  if(b->flags & B_DIRTY){
80101fcd:	f6 03 04             	testb  $0x4,(%ebx)
80101fd0:	75 16                	jne    80101fe8 <idestart+0x98>
80101fd2:	b8 c4 ff ff ff       	mov    $0xffffffc4,%eax
80101fd7:	89 ca                	mov    %ecx,%edx
80101fd9:	ee                   	out    %al,(%dx)
    outb(0x1f7, write_cmd);
    outsl(0x1f0, b->data, BSIZE/4);
  } else {
    outb(0x1f7, read_cmd);
  }
}
80101fda:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101fdd:	5b                   	pop    %ebx
80101fde:	5e                   	pop    %esi
80101fdf:	5f                   	pop    %edi
80101fe0:	5d                   	pop    %ebp
80101fe1:	c3                   	ret    
80101fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101fe8:	b8 c5 ff ff ff       	mov    $0xffffffc5,%eax
80101fed:	89 ca                	mov    %ecx,%edx
80101fef:	ee                   	out    %al,(%dx)
  asm volatile("cld; rep outsl" :
80101ff0:	b9 00 01 00 00       	mov    $0x100,%ecx
    outsl(0x1f0, b->data, BSIZE/4);
80101ff5:	8d 73 5c             	lea    0x5c(%ebx),%esi
80101ff8:	ba f0 01 00 00       	mov    $0x1f0,%edx
80101ffd:	fc                   	cld    
80101ffe:	f3 6f                	rep outsl %ds:(%esi),(%dx)
}
80102000:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102003:	5b                   	pop    %ebx
80102004:	5e                   	pop    %esi
80102005:	5f                   	pop    %edi
80102006:	5d                   	pop    %ebp
80102007:	c3                   	ret    
    panic("incorrect blockno");
80102008:	83 ec 0c             	sub    $0xc,%esp
8010200b:	68 b0 d1 10 80       	push   $0x8010d1b0
80102010:	e8 0b e4 ff ff       	call   80100420 <panic>
    panic("idestart");
80102015:	83 ec 0c             	sub    $0xc,%esp
80102018:	68 a7 d1 10 80       	push   $0x8010d1a7
8010201d:	e8 fe e3 ff ff       	call   80100420 <panic>
80102022:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102030 <ideinit>:
{
80102030:	f3 0f 1e fb          	endbr32 
80102034:	55                   	push   %ebp
80102035:	89 e5                	mov    %esp,%ebp
80102037:	83 ec 10             	sub    $0x10,%esp
  initlock(&idelock, "ide");
8010203a:	68 c2 d1 10 80       	push   $0x8010d1c2
8010203f:	68 c0 15 11 80       	push   $0x801115c0
80102044:	e8 e7 2e 00 00       	call   80104f30 <initlock>
  ioapicenable(IRQ_IDE, ncpu - 1);
80102049:	58                   	pop    %eax
8010204a:	a1 40 ea 13 80       	mov    0x8013ea40,%eax
8010204f:	5a                   	pop    %edx
80102050:	83 e8 01             	sub    $0x1,%eax
80102053:	50                   	push   %eax
80102054:	6a 0e                	push   $0xe
80102056:	e8 b5 02 00 00       	call   80102310 <ioapicenable>
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
8010205b:	83 c4 10             	add    $0x10,%esp
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010205e:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102063:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102067:	90                   	nop
80102068:	ec                   	in     (%dx),%al
80102069:	83 e0 c0             	and    $0xffffffc0,%eax
8010206c:	3c 40                	cmp    $0x40,%al
8010206e:	75 f8                	jne    80102068 <ideinit+0x38>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102070:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
80102075:	ba f6 01 00 00       	mov    $0x1f6,%edx
8010207a:	ee                   	out    %al,(%dx)
8010207b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102080:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102085:	eb 0e                	jmp    80102095 <ideinit+0x65>
80102087:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010208e:	66 90                	xchg   %ax,%ax
  for(i=0; i<1000; i++){
80102090:	83 e9 01             	sub    $0x1,%ecx
80102093:	74 0f                	je     801020a4 <ideinit+0x74>
80102095:	ec                   	in     (%dx),%al
    if(inb(0x1f7) != 0){
80102096:	84 c0                	test   %al,%al
80102098:	74 f6                	je     80102090 <ideinit+0x60>
      havedisk1 = 1;
8010209a:	c7 05 a0 15 11 80 01 	movl   $0x1,0x801115a0
801020a1:	00 00 00 
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801020a4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
801020a9:	ba f6 01 00 00       	mov    $0x1f6,%edx
801020ae:	ee                   	out    %al,(%dx)
}
801020af:	c9                   	leave  
801020b0:	c3                   	ret    
801020b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801020b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801020bf:	90                   	nop

801020c0 <ideintr>:

// Interrupt handler.
void
ideintr(void)
{
801020c0:	f3 0f 1e fb          	endbr32 
801020c4:	55                   	push   %ebp
801020c5:	89 e5                	mov    %esp,%ebp
801020c7:	57                   	push   %edi
801020c8:	56                   	push   %esi
801020c9:	53                   	push   %ebx
801020ca:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  // First queued buffer is the active request.
  acquire(&idelock);
801020cd:	68 c0 15 11 80       	push   $0x801115c0
801020d2:	e8 d9 2f 00 00       	call   801050b0 <acquire>

  if((b = idequeue) == 0){
801020d7:	8b 1d a4 15 11 80    	mov    0x801115a4,%ebx
801020dd:	83 c4 10             	add    $0x10,%esp
801020e0:	85 db                	test   %ebx,%ebx
801020e2:	74 5f                	je     80102143 <ideintr+0x83>
    release(&idelock);
    return;
  }
  idequeue = b->qnext;
801020e4:	8b 43 58             	mov    0x58(%ebx),%eax
801020e7:	a3 a4 15 11 80       	mov    %eax,0x801115a4

  // Read data if needed.
  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
801020ec:	8b 33                	mov    (%ebx),%esi
801020ee:	f7 c6 04 00 00 00    	test   $0x4,%esi
801020f4:	75 2b                	jne    80102121 <ideintr+0x61>
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801020f6:	ba f7 01 00 00       	mov    $0x1f7,%edx
801020fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801020ff:	90                   	nop
80102100:	ec                   	in     (%dx),%al
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
80102101:	89 c1                	mov    %eax,%ecx
80102103:	83 e1 c0             	and    $0xffffffc0,%ecx
80102106:	80 f9 40             	cmp    $0x40,%cl
80102109:	75 f5                	jne    80102100 <ideintr+0x40>
  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
8010210b:	a8 21                	test   $0x21,%al
8010210d:	75 12                	jne    80102121 <ideintr+0x61>
    insl(0x1f0, b->data, BSIZE/4);
8010210f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
  asm volatile("cld; rep insl" :
80102112:	b9 00 01 00 00       	mov    $0x100,%ecx
80102117:	ba f0 01 00 00       	mov    $0x1f0,%edx
8010211c:	fc                   	cld    
8010211d:	f3 6d                	rep insl (%dx),%es:(%edi)
8010211f:	8b 33                	mov    (%ebx),%esi

  // Wake process waiting for this buf.
  b->flags |= B_VALID;
  b->flags &= ~B_DIRTY;
80102121:	83 e6 fb             	and    $0xfffffffb,%esi
  wakeup(b);
80102124:	83 ec 0c             	sub    $0xc,%esp
  b->flags &= ~B_DIRTY;
80102127:	83 ce 02             	or     $0x2,%esi
8010212a:	89 33                	mov    %esi,(%ebx)
  wakeup(b);
8010212c:	53                   	push   %ebx
8010212d:	e8 fe 2a 00 00       	call   80104c30 <wakeup>

  // Start disk on next buf in queue.
  if(idequeue != 0)
80102132:	a1 a4 15 11 80       	mov    0x801115a4,%eax
80102137:	83 c4 10             	add    $0x10,%esp
8010213a:	85 c0                	test   %eax,%eax
8010213c:	74 05                	je     80102143 <ideintr+0x83>
    idestart(idequeue);
8010213e:	e8 0d fe ff ff       	call   80101f50 <idestart>
    release(&idelock);
80102143:	83 ec 0c             	sub    $0xc,%esp
80102146:	68 c0 15 11 80       	push   $0x801115c0
8010214b:	e8 20 30 00 00       	call   80105170 <release>

  release(&idelock);
}
80102150:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102153:	5b                   	pop    %ebx
80102154:	5e                   	pop    %esi
80102155:	5f                   	pop    %edi
80102156:	5d                   	pop    %ebp
80102157:	c3                   	ret    
80102158:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010215f:	90                   	nop

80102160 <iderw>:
// Sync buf with disk.
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void
iderw(struct buf *b)
{
80102160:	f3 0f 1e fb          	endbr32 
80102164:	55                   	push   %ebp
80102165:	89 e5                	mov    %esp,%ebp
80102167:	53                   	push   %ebx
80102168:	83 ec 10             	sub    $0x10,%esp
8010216b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct buf **pp;

  if(!holdingsleep(&b->lock))
8010216e:	8d 43 0c             	lea    0xc(%ebx),%eax
80102171:	50                   	push   %eax
80102172:	e8 59 2d 00 00       	call   80104ed0 <holdingsleep>
80102177:	83 c4 10             	add    $0x10,%esp
8010217a:	85 c0                	test   %eax,%eax
8010217c:	0f 84 cf 00 00 00    	je     80102251 <iderw+0xf1>
    panic("iderw: buf not locked");
  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
80102182:	8b 03                	mov    (%ebx),%eax
80102184:	83 e0 06             	and    $0x6,%eax
80102187:	83 f8 02             	cmp    $0x2,%eax
8010218a:	0f 84 b4 00 00 00    	je     80102244 <iderw+0xe4>
    panic("iderw: nothing to do");
  if(b->dev != 0 && !havedisk1)
80102190:	8b 53 04             	mov    0x4(%ebx),%edx
80102193:	85 d2                	test   %edx,%edx
80102195:	74 0d                	je     801021a4 <iderw+0x44>
80102197:	a1 a0 15 11 80       	mov    0x801115a0,%eax
8010219c:	85 c0                	test   %eax,%eax
8010219e:	0f 84 93 00 00 00    	je     80102237 <iderw+0xd7>
    panic("iderw: ide disk 1 not present");

  acquire(&idelock);  //DOC:acquire-lock
801021a4:	83 ec 0c             	sub    $0xc,%esp
801021a7:	68 c0 15 11 80       	push   $0x801115c0
801021ac:	e8 ff 2e 00 00       	call   801050b0 <acquire>

  // Append b to idequeue.
  b->qnext = 0;
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
801021b1:	a1 a4 15 11 80       	mov    0x801115a4,%eax
  b->qnext = 0;
801021b6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
801021bd:	83 c4 10             	add    $0x10,%esp
801021c0:	85 c0                	test   %eax,%eax
801021c2:	74 6c                	je     80102230 <iderw+0xd0>
801021c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801021c8:	89 c2                	mov    %eax,%edx
801021ca:	8b 40 58             	mov    0x58(%eax),%eax
801021cd:	85 c0                	test   %eax,%eax
801021cf:	75 f7                	jne    801021c8 <iderw+0x68>
801021d1:	83 c2 58             	add    $0x58,%edx
    ;
  *pp = b;
801021d4:	89 1a                	mov    %ebx,(%edx)

  // Start disk if necessary.
  if(idequeue == b)
801021d6:	39 1d a4 15 11 80    	cmp    %ebx,0x801115a4
801021dc:	74 42                	je     80102220 <iderw+0xc0>
    idestart(b);

  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
801021de:	8b 03                	mov    (%ebx),%eax
801021e0:	83 e0 06             	and    $0x6,%eax
801021e3:	83 f8 02             	cmp    $0x2,%eax
801021e6:	74 23                	je     8010220b <iderw+0xab>
801021e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801021ef:	90                   	nop
    sleep(b, &idelock);
801021f0:	83 ec 08             	sub    $0x8,%esp
801021f3:	68 c0 15 11 80       	push   $0x801115c0
801021f8:	53                   	push   %ebx
801021f9:	e8 72 28 00 00       	call   80104a70 <sleep>
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
801021fe:	8b 03                	mov    (%ebx),%eax
80102200:	83 c4 10             	add    $0x10,%esp
80102203:	83 e0 06             	and    $0x6,%eax
80102206:	83 f8 02             	cmp    $0x2,%eax
80102209:	75 e5                	jne    801021f0 <iderw+0x90>
  }


  release(&idelock);
8010220b:	c7 45 08 c0 15 11 80 	movl   $0x801115c0,0x8(%ebp)
}
80102212:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102215:	c9                   	leave  
  release(&idelock);
80102216:	e9 55 2f 00 00       	jmp    80105170 <release>
8010221b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010221f:	90                   	nop
    idestart(b);
80102220:	89 d8                	mov    %ebx,%eax
80102222:	e8 29 fd ff ff       	call   80101f50 <idestart>
80102227:	eb b5                	jmp    801021de <iderw+0x7e>
80102229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
80102230:	ba a4 15 11 80       	mov    $0x801115a4,%edx
80102235:	eb 9d                	jmp    801021d4 <iderw+0x74>
    panic("iderw: ide disk 1 not present");
80102237:	83 ec 0c             	sub    $0xc,%esp
8010223a:	68 f1 d1 10 80       	push   $0x8010d1f1
8010223f:	e8 dc e1 ff ff       	call   80100420 <panic>
    panic("iderw: nothing to do");
80102244:	83 ec 0c             	sub    $0xc,%esp
80102247:	68 dc d1 10 80       	push   $0x8010d1dc
8010224c:	e8 cf e1 ff ff       	call   80100420 <panic>
    panic("iderw: buf not locked");
80102251:	83 ec 0c             	sub    $0xc,%esp
80102254:	68 c6 d1 10 80       	push   $0x8010d1c6
80102259:	e8 c2 e1 ff ff       	call   80100420 <panic>
8010225e:	66 90                	xchg   %ax,%ax

80102260 <ioapicinit>:
  ioapic->data = data;
}

void
ioapicinit(void)
{
80102260:	f3 0f 1e fb          	endbr32 
80102264:	55                   	push   %ebp
  int i, id, maxintr;

  ioapic = (volatile struct ioapic*)IOAPIC;
80102265:	c7 05 74 e3 13 80 00 	movl   $0xfec00000,0x8013e374
8010226c:	00 c0 fe 
{
8010226f:	89 e5                	mov    %esp,%ebp
80102271:	56                   	push   %esi
80102272:	53                   	push   %ebx
  ioapic->reg = reg;
80102273:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
8010227a:	00 00 00 
  return ioapic->data;
8010227d:	8b 15 74 e3 13 80    	mov    0x8013e374,%edx
80102283:	8b 72 10             	mov    0x10(%edx),%esi
  ioapic->reg = reg;
80102286:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  return ioapic->data;
8010228c:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
  id = ioapicread(REG_ID) >> 24;
  if(id != ioapicid)
80102292:	0f b6 15 a0 e4 13 80 	movzbl 0x8013e4a0,%edx
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
80102299:	c1 ee 10             	shr    $0x10,%esi
8010229c:	89 f0                	mov    %esi,%eax
8010229e:	0f b6 f0             	movzbl %al,%esi
  return ioapic->data;
801022a1:	8b 41 10             	mov    0x10(%ecx),%eax
  id = ioapicread(REG_ID) >> 24;
801022a4:	c1 e8 18             	shr    $0x18,%eax
  if(id != ioapicid)
801022a7:	39 c2                	cmp    %eax,%edx
801022a9:	74 16                	je     801022c1 <ioapicinit+0x61>
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
801022ab:	83 ec 0c             	sub    $0xc,%esp
801022ae:	68 10 d2 10 80       	push   $0x8010d210
801022b3:	e8 d8 e0 ff ff       	call   80100390 <cprintf>
801022b8:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
801022be:	83 c4 10             	add    $0x10,%esp
801022c1:	83 c6 21             	add    $0x21,%esi
{
801022c4:	ba 10 00 00 00       	mov    $0x10,%edx
801022c9:	b8 20 00 00 00       	mov    $0x20,%eax
801022ce:	66 90                	xchg   %ax,%ax
  ioapic->reg = reg;
801022d0:	89 11                	mov    %edx,(%ecx)

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
801022d2:	89 c3                	mov    %eax,%ebx
  ioapic->data = data;
801022d4:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
801022da:	83 c0 01             	add    $0x1,%eax
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
801022dd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
  ioapic->data = data;
801022e3:	89 59 10             	mov    %ebx,0x10(%ecx)
  ioapic->reg = reg;
801022e6:	8d 5a 01             	lea    0x1(%edx),%ebx
801022e9:	83 c2 02             	add    $0x2,%edx
801022ec:	89 19                	mov    %ebx,(%ecx)
  ioapic->data = data;
801022ee:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
801022f4:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
  for(i = 0; i <= maxintr; i++){
801022fb:	39 f0                	cmp    %esi,%eax
801022fd:	75 d1                	jne    801022d0 <ioapicinit+0x70>
    ioapicwrite(REG_TABLE+2*i+1, 0);
  }
}
801022ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102302:	5b                   	pop    %ebx
80102303:	5e                   	pop    %esi
80102304:	5d                   	pop    %ebp
80102305:	c3                   	ret    
80102306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010230d:	8d 76 00             	lea    0x0(%esi),%esi

80102310 <ioapicenable>:

void
ioapicenable(int irq, int cpunum)
{
80102310:	f3 0f 1e fb          	endbr32 
80102314:	55                   	push   %ebp
  ioapic->reg = reg;
80102315:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
{
8010231b:	89 e5                	mov    %esp,%ebp
8010231d:	8b 45 08             	mov    0x8(%ebp),%eax
  // Mark interrupt edge-triggered, active high,
  // enabled, and routed to the given cpunum,
  // which happens to be that cpu's APIC ID.
  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
80102320:	8d 50 20             	lea    0x20(%eax),%edx
80102323:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
  ioapic->reg = reg;
80102327:	89 01                	mov    %eax,(%ecx)
  ioapic->data = data;
80102329:	8b 0d 74 e3 13 80    	mov    0x8013e374,%ecx
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
8010232f:	83 c0 01             	add    $0x1,%eax
  ioapic->data = data;
80102332:	89 51 10             	mov    %edx,0x10(%ecx)
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
80102335:	8b 55 0c             	mov    0xc(%ebp),%edx
  ioapic->reg = reg;
80102338:	89 01                	mov    %eax,(%ecx)
  ioapic->data = data;
8010233a:	a1 74 e3 13 80       	mov    0x8013e374,%eax
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
8010233f:	c1 e2 18             	shl    $0x18,%edx
  ioapic->data = data;
80102342:	89 50 10             	mov    %edx,0x10(%eax)
}
80102345:	5d                   	pop    %ebp
80102346:	c3                   	ret    
80102347:	66 90                	xchg   %ax,%ax
80102349:	66 90                	xchg   %ax,%ax
8010234b:	66 90                	xchg   %ax,%ax
8010234d:	66 90                	xchg   %ax,%ax
8010234f:	90                   	nop

80102350 <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
80102350:	f3 0f 1e fb          	endbr32 
80102354:	55                   	push   %ebp
80102355:	89 e5                	mov    %esp,%ebp
80102357:	53                   	push   %ebx
80102358:	83 ec 04             	sub    $0x4,%esp
8010235b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct run *r;

  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
8010235e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
80102364:	75 7a                	jne    801023e0 <kfree+0x90>
80102366:	81 fb 40 17 15 80    	cmp    $0x80151740,%ebx
8010236c:	72 72                	jb     801023e0 <kfree+0x90>
8010236e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80102374:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80102379:	77 65                	ja     801023e0 <kfree+0x90>
    panic("kfree");

  // Fill with junk to catch dangling refs.
  memset(v, 1, PGSIZE);
8010237b:	83 ec 04             	sub    $0x4,%esp
8010237e:	68 00 10 00 00       	push   $0x1000
80102383:	6a 01                	push   $0x1
80102385:	53                   	push   %ebx
80102386:	e8 35 2e 00 00       	call   801051c0 <memset>

  if(kmem.use_lock)
8010238b:	8b 15 b4 e3 13 80    	mov    0x8013e3b4,%edx
80102391:	83 c4 10             	add    $0x10,%esp
80102394:	85 d2                	test   %edx,%edx
80102396:	75 20                	jne    801023b8 <kfree+0x68>
    acquire(&kmem.lock);
  r = (struct run*)v;
  r->next = kmem.freelist;
80102398:	a1 b8 e3 13 80       	mov    0x8013e3b8,%eax
8010239d:	89 03                	mov    %eax,(%ebx)
  kmem.freelist = r;
  if(kmem.use_lock)
8010239f:	a1 b4 e3 13 80       	mov    0x8013e3b4,%eax
  kmem.freelist = r;
801023a4:	89 1d b8 e3 13 80    	mov    %ebx,0x8013e3b8
  if(kmem.use_lock)
801023aa:	85 c0                	test   %eax,%eax
801023ac:	75 22                	jne    801023d0 <kfree+0x80>
    release(&kmem.lock);
}
801023ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801023b1:	c9                   	leave  
801023b2:	c3                   	ret    
801023b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801023b7:	90                   	nop
    acquire(&kmem.lock);
801023b8:	83 ec 0c             	sub    $0xc,%esp
801023bb:	68 80 e3 13 80       	push   $0x8013e380
801023c0:	e8 eb 2c 00 00       	call   801050b0 <acquire>
801023c5:	83 c4 10             	add    $0x10,%esp
801023c8:	eb ce                	jmp    80102398 <kfree+0x48>
801023ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    release(&kmem.lock);
801023d0:	c7 45 08 80 e3 13 80 	movl   $0x8013e380,0x8(%ebp)
}
801023d7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801023da:	c9                   	leave  
    release(&kmem.lock);
801023db:	e9 90 2d 00 00       	jmp    80105170 <release>
    panic("kfree");
801023e0:	83 ec 0c             	sub    $0xc,%esp
801023e3:	68 42 d2 10 80       	push   $0x8010d242
801023e8:	e8 33 e0 ff ff       	call   80100420 <panic>
801023ed:	8d 76 00             	lea    0x0(%esi),%esi

801023f0 <freerange>:
{
801023f0:	f3 0f 1e fb          	endbr32 
801023f4:	55                   	push   %ebp
801023f5:	89 e5                	mov    %esp,%ebp
801023f7:	56                   	push   %esi
  p = (char*)PGROUNDUP((uint)vstart);
801023f8:	8b 45 08             	mov    0x8(%ebp),%eax
{
801023fb:	8b 75 0c             	mov    0xc(%ebp),%esi
801023fe:	53                   	push   %ebx
  p = (char*)PGROUNDUP((uint)vstart);
801023ff:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102405:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
8010240b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102411:	39 de                	cmp    %ebx,%esi
80102413:	72 1f                	jb     80102434 <freerange+0x44>
80102415:	8d 76 00             	lea    0x0(%esi),%esi
    kfree(p);
80102418:	83 ec 0c             	sub    $0xc,%esp
8010241b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102421:	81 c3 00 10 00 00    	add    $0x1000,%ebx
    kfree(p);
80102427:	50                   	push   %eax
80102428:	e8 23 ff ff ff       	call   80102350 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
8010242d:	83 c4 10             	add    $0x10,%esp
80102430:	39 f3                	cmp    %esi,%ebx
80102432:	76 e4                	jbe    80102418 <freerange+0x28>
}
80102434:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102437:	5b                   	pop    %ebx
80102438:	5e                   	pop    %esi
80102439:	5d                   	pop    %ebp
8010243a:	c3                   	ret    
8010243b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010243f:	90                   	nop

80102440 <kinit1>:
{
80102440:	f3 0f 1e fb          	endbr32 
80102444:	55                   	push   %ebp
80102445:	89 e5                	mov    %esp,%ebp
80102447:	56                   	push   %esi
80102448:	53                   	push   %ebx
80102449:	8b 75 0c             	mov    0xc(%ebp),%esi
  initlock(&kmem.lock, "kmem");
8010244c:	83 ec 08             	sub    $0x8,%esp
8010244f:	68 48 d2 10 80       	push   $0x8010d248
80102454:	68 80 e3 13 80       	push   $0x8013e380
80102459:	e8 d2 2a 00 00       	call   80104f30 <initlock>
  p = (char*)PGROUNDUP((uint)vstart);
8010245e:	8b 45 08             	mov    0x8(%ebp),%eax
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102461:	83 c4 10             	add    $0x10,%esp
  kmem.use_lock = 0;
80102464:	c7 05 b4 e3 13 80 00 	movl   $0x0,0x8013e3b4
8010246b:	00 00 00 
  p = (char*)PGROUNDUP((uint)vstart);
8010246e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102474:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
8010247a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102480:	39 de                	cmp    %ebx,%esi
80102482:	72 20                	jb     801024a4 <kinit1+0x64>
80102484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    kfree(p);
80102488:	83 ec 0c             	sub    $0xc,%esp
8010248b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102491:	81 c3 00 10 00 00    	add    $0x1000,%ebx
    kfree(p);
80102497:	50                   	push   %eax
80102498:	e8 b3 fe ff ff       	call   80102350 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
8010249d:	83 c4 10             	add    $0x10,%esp
801024a0:	39 de                	cmp    %ebx,%esi
801024a2:	73 e4                	jae    80102488 <kinit1+0x48>
}
801024a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
801024a7:	5b                   	pop    %ebx
801024a8:	5e                   	pop    %esi
801024a9:	5d                   	pop    %ebp
801024aa:	c3                   	ret    
801024ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801024af:	90                   	nop

801024b0 <kinit2>:
{
801024b0:	f3 0f 1e fb          	endbr32 
801024b4:	55                   	push   %ebp
801024b5:	89 e5                	mov    %esp,%ebp
801024b7:	56                   	push   %esi
  p = (char*)PGROUNDUP((uint)vstart);
801024b8:	8b 45 08             	mov    0x8(%ebp),%eax
{
801024bb:	8b 75 0c             	mov    0xc(%ebp),%esi
801024be:	53                   	push   %ebx
  p = (char*)PGROUNDUP((uint)vstart);
801024bf:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
801024c5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
801024cb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
801024d1:	39 de                	cmp    %ebx,%esi
801024d3:	72 1f                	jb     801024f4 <kinit2+0x44>
801024d5:	8d 76 00             	lea    0x0(%esi),%esi
    kfree(p);
801024d8:	83 ec 0c             	sub    $0xc,%esp
801024db:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
801024e1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
    kfree(p);
801024e7:	50                   	push   %eax
801024e8:	e8 63 fe ff ff       	call   80102350 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
801024ed:	83 c4 10             	add    $0x10,%esp
801024f0:	39 de                	cmp    %ebx,%esi
801024f2:	73 e4                	jae    801024d8 <kinit2+0x28>
  kmem.use_lock = 1;
801024f4:	c7 05 b4 e3 13 80 01 	movl   $0x1,0x8013e3b4
801024fb:	00 00 00 
}
801024fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102501:	5b                   	pop    %ebx
80102502:	5e                   	pop    %esi
80102503:	5d                   	pop    %ebp
80102504:	c3                   	ret    
80102505:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010250c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80102510 <kalloc>:
// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char*
kalloc(void)
{
80102510:	f3 0f 1e fb          	endbr32 
  struct run *r;

  if(kmem.use_lock)
80102514:	a1 b4 e3 13 80       	mov    0x8013e3b4,%eax
80102519:	85 c0                	test   %eax,%eax
8010251b:	75 1b                	jne    80102538 <kalloc+0x28>
    acquire(&kmem.lock);
  r = kmem.freelist;
8010251d:	a1 b8 e3 13 80       	mov    0x8013e3b8,%eax
  if(r)
80102522:	85 c0                	test   %eax,%eax
80102524:	74 0a                	je     80102530 <kalloc+0x20>
    kmem.freelist = r->next;
80102526:	8b 10                	mov    (%eax),%edx
80102528:	89 15 b8 e3 13 80    	mov    %edx,0x8013e3b8
  if(kmem.use_lock)
8010252e:	c3                   	ret    
8010252f:	90                   	nop
    release(&kmem.lock);
  return (char*)r;
}
80102530:	c3                   	ret    
80102531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
{
80102538:	55                   	push   %ebp
80102539:	89 e5                	mov    %esp,%ebp
8010253b:	83 ec 24             	sub    $0x24,%esp
    acquire(&kmem.lock);
8010253e:	68 80 e3 13 80       	push   $0x8013e380
80102543:	e8 68 2b 00 00       	call   801050b0 <acquire>
  r = kmem.freelist;
80102548:	a1 b8 e3 13 80       	mov    0x8013e3b8,%eax
  if(r)
8010254d:	8b 15 b4 e3 13 80    	mov    0x8013e3b4,%edx
80102553:	83 c4 10             	add    $0x10,%esp
80102556:	85 c0                	test   %eax,%eax
80102558:	74 08                	je     80102562 <kalloc+0x52>
    kmem.freelist = r->next;
8010255a:	8b 08                	mov    (%eax),%ecx
8010255c:	89 0d b8 e3 13 80    	mov    %ecx,0x8013e3b8
  if(kmem.use_lock)
80102562:	85 d2                	test   %edx,%edx
80102564:	74 16                	je     8010257c <kalloc+0x6c>
    release(&kmem.lock);
80102566:	83 ec 0c             	sub    $0xc,%esp
80102569:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010256c:	68 80 e3 13 80       	push   $0x8013e380
80102571:	e8 fa 2b 00 00       	call   80105170 <release>
  return (char*)r;
80102576:	8b 45 f4             	mov    -0xc(%ebp),%eax
    release(&kmem.lock);
80102579:	83 c4 10             	add    $0x10,%esp
}
8010257c:	c9                   	leave  
8010257d:	c3                   	ret    
8010257e:	66 90                	xchg   %ax,%ax

80102580 <kbdgetc>:
#include "defs.h"
#include "kbd.h"

int
kbdgetc(void)
{
80102580:	f3 0f 1e fb          	endbr32 
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102584:	ba 64 00 00 00       	mov    $0x64,%edx
80102589:	ec                   	in     (%dx),%al
    normalmap, shiftmap, ctlmap, ctlmap
  };
  uint st, data, c;

  st = inb(KBSTATP);
  if((st & KBS_DIB) == 0)
8010258a:	a8 01                	test   $0x1,%al
8010258c:	0f 84 be 00 00 00    	je     80102650 <kbdgetc+0xd0>
{
80102592:	55                   	push   %ebp
80102593:	ba 60 00 00 00       	mov    $0x60,%edx
80102598:	89 e5                	mov    %esp,%ebp
8010259a:	53                   	push   %ebx
8010259b:	ec                   	in     (%dx),%al
  return data;
8010259c:	8b 1d f4 15 11 80    	mov    0x801115f4,%ebx
    return -1;
  data = inb(KBDATAP);
801025a2:	0f b6 d0             	movzbl %al,%edx

  if(data == 0xE0){
801025a5:	3c e0                	cmp    $0xe0,%al
801025a7:	74 57                	je     80102600 <kbdgetc+0x80>
    shift |= E0ESC;
    return 0;
  } else if(data & 0x80){
801025a9:	89 d9                	mov    %ebx,%ecx
801025ab:	83 e1 40             	and    $0x40,%ecx
801025ae:	84 c0                	test   %al,%al
801025b0:	78 5e                	js     80102610 <kbdgetc+0x90>
    // Key released
    data = (shift & E0ESC ? data : data & 0x7F);
    shift &= ~(shiftcode[data] | E0ESC);
    return 0;
  } else if(shift & E0ESC){
801025b2:	85 c9                	test   %ecx,%ecx
801025b4:	74 09                	je     801025bf <kbdgetc+0x3f>
    // Last character was an E0 escape; or with 0x80
    data |= 0x80;
801025b6:	83 c8 80             	or     $0xffffff80,%eax
    shift &= ~E0ESC;
801025b9:	83 e3 bf             	and    $0xffffffbf,%ebx
    data |= 0x80;
801025bc:	0f b6 d0             	movzbl %al,%edx
  }

  shift |= shiftcode[data];
801025bf:	0f b6 8a 80 d3 10 80 	movzbl -0x7fef2c80(%edx),%ecx
  shift ^= togglecode[data];
801025c6:	0f b6 82 80 d2 10 80 	movzbl -0x7fef2d80(%edx),%eax
  shift |= shiftcode[data];
801025cd:	09 d9                	or     %ebx,%ecx
  shift ^= togglecode[data];
801025cf:	31 c1                	xor    %eax,%ecx
  c = charcode[shift & (CTL | SHIFT)][data];
801025d1:	89 c8                	mov    %ecx,%eax
  shift ^= togglecode[data];
801025d3:	89 0d f4 15 11 80    	mov    %ecx,0x801115f4
  c = charcode[shift & (CTL | SHIFT)][data];
801025d9:	83 e0 03             	and    $0x3,%eax
  if(shift & CAPSLOCK){
801025dc:	83 e1 08             	and    $0x8,%ecx
  c = charcode[shift & (CTL | SHIFT)][data];
801025df:	8b 04 85 60 d2 10 80 	mov    -0x7fef2da0(,%eax,4),%eax
801025e6:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
  if(shift & CAPSLOCK){
801025ea:	74 0b                	je     801025f7 <kbdgetc+0x77>
    if('a' <= c && c <= 'z')
801025ec:	8d 50 9f             	lea    -0x61(%eax),%edx
801025ef:	83 fa 19             	cmp    $0x19,%edx
801025f2:	77 44                	ja     80102638 <kbdgetc+0xb8>
      c += 'A' - 'a';
801025f4:	83 e8 20             	sub    $0x20,%eax
    else if('A' <= c && c <= 'Z')
      c += 'a' - 'A';
  }
  return c;
}
801025f7:	5b                   	pop    %ebx
801025f8:	5d                   	pop    %ebp
801025f9:	c3                   	ret    
801025fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    shift |= E0ESC;
80102600:	83 cb 40             	or     $0x40,%ebx
    return 0;
80102603:	31 c0                	xor    %eax,%eax
    shift |= E0ESC;
80102605:	89 1d f4 15 11 80    	mov    %ebx,0x801115f4
}
8010260b:	5b                   	pop    %ebx
8010260c:	5d                   	pop    %ebp
8010260d:	c3                   	ret    
8010260e:	66 90                	xchg   %ax,%ax
    data = (shift & E0ESC ? data : data & 0x7F);
80102610:	83 e0 7f             	and    $0x7f,%eax
80102613:	85 c9                	test   %ecx,%ecx
80102615:	0f 44 d0             	cmove  %eax,%edx
    return 0;
80102618:	31 c0                	xor    %eax,%eax
    shift &= ~(shiftcode[data] | E0ESC);
8010261a:	0f b6 8a 80 d3 10 80 	movzbl -0x7fef2c80(%edx),%ecx
80102621:	83 c9 40             	or     $0x40,%ecx
80102624:	0f b6 c9             	movzbl %cl,%ecx
80102627:	f7 d1                	not    %ecx
80102629:	21 d9                	and    %ebx,%ecx
}
8010262b:	5b                   	pop    %ebx
8010262c:	5d                   	pop    %ebp
    shift &= ~(shiftcode[data] | E0ESC);
8010262d:	89 0d f4 15 11 80    	mov    %ecx,0x801115f4
}
80102633:	c3                   	ret    
80102634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    else if('A' <= c && c <= 'Z')
80102638:	8d 48 bf             	lea    -0x41(%eax),%ecx
      c += 'a' - 'A';
8010263b:	8d 50 20             	lea    0x20(%eax),%edx
}
8010263e:	5b                   	pop    %ebx
8010263f:	5d                   	pop    %ebp
      c += 'a' - 'A';
80102640:	83 f9 1a             	cmp    $0x1a,%ecx
80102643:	0f 42 c2             	cmovb  %edx,%eax
}
80102646:	c3                   	ret    
80102647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010264e:	66 90                	xchg   %ax,%ax
    return -1;
80102650:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80102655:	c3                   	ret    
80102656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010265d:	8d 76 00             	lea    0x0(%esi),%esi

80102660 <kbdintr>:

void
kbdintr(void)
{
80102660:	f3 0f 1e fb          	endbr32 
80102664:	55                   	push   %ebp
80102665:	89 e5                	mov    %esp,%ebp
80102667:	83 ec 14             	sub    $0x14,%esp
  consoleintr(kbdgetc);
8010266a:	68 80 25 10 80       	push   $0x80102580
8010266f:	e8 5c e0 ff ff       	call   801006d0 <consoleintr>
}
80102674:	83 c4 10             	add    $0x10,%esp
80102677:	c9                   	leave  
80102678:	c3                   	ret    
80102679:	66 90                	xchg   %ax,%ax
8010267b:	66 90                	xchg   %ax,%ax
8010267d:	66 90                	xchg   %ax,%ax
8010267f:	90                   	nop

80102680 <lapicinit>:
  lapic[ID];  // wait for write to finish, by reading
}

void
lapicinit(void)
{
80102680:	f3 0f 1e fb          	endbr32 
  if(!lapic)
80102684:	a1 bc e3 13 80       	mov    0x8013e3bc,%eax
80102689:	85 c0                	test   %eax,%eax
8010268b:	0f 84 c7 00 00 00    	je     80102758 <lapicinit+0xd8>
  lapic[index] = value;
80102691:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
80102698:	01 00 00 
  lapic[ID];  // wait for write to finish, by reading
8010269b:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
8010269e:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
801026a5:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
801026a8:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
801026ab:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
801026b2:	00 02 00 
  lapic[ID];  // wait for write to finish, by reading
801026b5:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
801026b8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
801026bf:	96 98 00 
  lapic[ID];  // wait for write to finish, by reading
801026c2:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
801026c5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
801026cc:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
801026cf:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
801026d2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
801026d9:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
801026dc:	8b 50 20             	mov    0x20(%eax),%edx
  lapicw(LINT0, MASKED);
  lapicw(LINT1, MASKED);

  // Disable performance counter overflow interrupts
  // on machines that provide that interrupt entry.
  if(((lapic[VER]>>16) & 0xFF) >= 4)
801026df:	8b 50 30             	mov    0x30(%eax),%edx
801026e2:	c1 ea 10             	shr    $0x10,%edx
801026e5:	81 e2 fc 00 00 00    	and    $0xfc,%edx
801026eb:	75 73                	jne    80102760 <lapicinit+0xe0>
  lapic[index] = value;
801026ed:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
801026f4:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
801026f7:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
801026fa:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
80102701:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102704:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102707:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
8010270e:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102711:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102714:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
8010271b:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
8010271e:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102721:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
80102728:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
8010272b:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
8010272e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
80102735:	85 08 00 
  lapic[ID];  // wait for write to finish, by reading
80102738:	8b 50 20             	mov    0x20(%eax),%edx
8010273b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010273f:	90                   	nop
  lapicw(EOI, 0);

  // Send an Init Level De-Assert to synchronise arbitration ID's.
  lapicw(ICRHI, 0);
  lapicw(ICRLO, BCAST | INIT | LEVEL);
  while(lapic[ICRLO] & DELIVS)
80102740:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
80102746:	80 e6 10             	and    $0x10,%dh
80102749:	75 f5                	jne    80102740 <lapicinit+0xc0>
  lapic[index] = value;
8010274b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
80102752:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102755:	8b 40 20             	mov    0x20(%eax),%eax
    ;

  // Enable interrupts on the APIC (but not on the processor).
  lapicw(TPR, 0);
}
80102758:	c3                   	ret    
80102759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  lapic[index] = value;
80102760:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
80102767:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
8010276a:	8b 50 20             	mov    0x20(%eax),%edx
}
8010276d:	e9 7b ff ff ff       	jmp    801026ed <lapicinit+0x6d>
80102772:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102780 <lapicid>:

int
lapicid(void)
{
80102780:	f3 0f 1e fb          	endbr32 
  if (!lapic)
80102784:	a1 bc e3 13 80       	mov    0x8013e3bc,%eax
80102789:	85 c0                	test   %eax,%eax
8010278b:	74 0b                	je     80102798 <lapicid+0x18>
    return 0;
  return lapic[ID] >> 24;
8010278d:	8b 40 20             	mov    0x20(%eax),%eax
80102790:	c1 e8 18             	shr    $0x18,%eax
80102793:	c3                   	ret    
80102794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    return 0;
80102798:	31 c0                	xor    %eax,%eax
}
8010279a:	c3                   	ret    
8010279b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010279f:	90                   	nop

801027a0 <lapiceoi>:

// Acknowledge interrupt.
void
lapiceoi(void)
{
801027a0:	f3 0f 1e fb          	endbr32 
  if(lapic)
801027a4:	a1 bc e3 13 80       	mov    0x8013e3bc,%eax
801027a9:	85 c0                	test   %eax,%eax
801027ab:	74 0d                	je     801027ba <lapiceoi+0x1a>
  lapic[index] = value;
801027ad:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
801027b4:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
801027b7:	8b 40 20             	mov    0x20(%eax),%eax
    lapicw(EOI, 0);
}
801027ba:	c3                   	ret    
801027bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801027bf:	90                   	nop

801027c0 <microdelay>:

// Spin for a given number of microseconds.
// On real hardware would want to tune this dynamically.
void
microdelay(int us)
{
801027c0:	f3 0f 1e fb          	endbr32 
}
801027c4:	c3                   	ret    
801027c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801027cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801027d0 <lapicstartap>:

// Start additional processor running entry code at addr.
// See Appendix B of MultiProcessor Specification.
void
lapicstartap(uchar apicid, uint addr)
{
801027d0:	f3 0f 1e fb          	endbr32 
801027d4:	55                   	push   %ebp
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801027d5:	b8 0f 00 00 00       	mov    $0xf,%eax
801027da:	ba 70 00 00 00       	mov    $0x70,%edx
801027df:	89 e5                	mov    %esp,%ebp
801027e1:	53                   	push   %ebx
801027e2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801027e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
801027e8:	ee                   	out    %al,(%dx)
801027e9:	b8 0a 00 00 00       	mov    $0xa,%eax
801027ee:	ba 71 00 00 00       	mov    $0x71,%edx
801027f3:	ee                   	out    %al,(%dx)
  // and the warm reset vector (DWORD based at 40:67) to point at
  // the AP startup code prior to the [universal startup algorithm]."
  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
  outb(CMOS_PORT+1, 0x0A);
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
  wrv[0] = 0;
801027f4:	31 c0                	xor    %eax,%eax
  wrv[1] = addr >> 4;

  // "Universal startup algorithm."
  // Send INIT (level-triggered) interrupt to reset other CPU.
  lapicw(ICRHI, apicid<<24);
801027f6:	c1 e3 18             	shl    $0x18,%ebx
  wrv[0] = 0;
801027f9:	66 a3 67 04 00 80    	mov    %ax,0x80000467
  wrv[1] = addr >> 4;
801027ff:	89 c8                	mov    %ecx,%eax
  // when it is in the halted state due to an INIT.  So the second
  // should be ignored, but it is part of the official Intel algorithm.
  // Bochs complains about the second one.  Too bad for Bochs.
  for(i = 0; i < 2; i++){
    lapicw(ICRHI, apicid<<24);
    lapicw(ICRLO, STARTUP | (addr>>12));
80102801:	c1 e9 0c             	shr    $0xc,%ecx
  lapicw(ICRHI, apicid<<24);
80102804:	89 da                	mov    %ebx,%edx
  wrv[1] = addr >> 4;
80102806:	c1 e8 04             	shr    $0x4,%eax
    lapicw(ICRLO, STARTUP | (addr>>12));
80102809:	80 cd 06             	or     $0x6,%ch
  wrv[1] = addr >> 4;
8010280c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
  lapic[index] = value;
80102812:	a1 bc e3 13 80       	mov    0x8013e3bc,%eax
80102817:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
8010281d:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102820:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
80102827:	c5 00 00 
  lapic[ID];  // wait for write to finish, by reading
8010282a:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
8010282d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
80102834:	85 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102837:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
8010283a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102840:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102843:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102849:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
8010284c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102852:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102855:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
    microdelay(200);
  }
}
8010285b:	5b                   	pop    %ebx
  lapic[ID];  // wait for write to finish, by reading
8010285c:	8b 40 20             	mov    0x20(%eax),%eax
}
8010285f:	5d                   	pop    %ebp
80102860:	c3                   	ret    
80102861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010286f:	90                   	nop

80102870 <cmostime>:
}

// qemu seems to use 24-hour GWT and the values are BCD encoded
void
cmostime(struct rtcdate *r)
{
80102870:	f3 0f 1e fb          	endbr32 
80102874:	55                   	push   %ebp
80102875:	b8 0b 00 00 00       	mov    $0xb,%eax
8010287a:	ba 70 00 00 00       	mov    $0x70,%edx
8010287f:	89 e5                	mov    %esp,%ebp
80102881:	57                   	push   %edi
80102882:	56                   	push   %esi
80102883:	53                   	push   %ebx
80102884:	83 ec 4c             	sub    $0x4c,%esp
80102887:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102888:	ba 71 00 00 00       	mov    $0x71,%edx
8010288d:	ec                   	in     (%dx),%al
  struct rtcdate t1, t2;
  int sb, bcd;

  sb = cmos_read(CMOS_STATB);

  bcd = (sb & (1 << 2)) == 0;
8010288e:	83 e0 04             	and    $0x4,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102891:	bb 70 00 00 00       	mov    $0x70,%ebx
80102896:	88 45 b3             	mov    %al,-0x4d(%ebp)
80102899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801028a0:	31 c0                	xor    %eax,%eax
801028a2:	89 da                	mov    %ebx,%edx
801028a4:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028a5:	b9 71 00 00 00       	mov    $0x71,%ecx
801028aa:	89 ca                	mov    %ecx,%edx
801028ac:	ec                   	in     (%dx),%al
801028ad:	88 45 b7             	mov    %al,-0x49(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028b0:	89 da                	mov    %ebx,%edx
801028b2:	b8 02 00 00 00       	mov    $0x2,%eax
801028b7:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028b8:	89 ca                	mov    %ecx,%edx
801028ba:	ec                   	in     (%dx),%al
801028bb:	88 45 b6             	mov    %al,-0x4a(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028be:	89 da                	mov    %ebx,%edx
801028c0:	b8 04 00 00 00       	mov    $0x4,%eax
801028c5:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028c6:	89 ca                	mov    %ecx,%edx
801028c8:	ec                   	in     (%dx),%al
801028c9:	88 45 b5             	mov    %al,-0x4b(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028cc:	89 da                	mov    %ebx,%edx
801028ce:	b8 07 00 00 00       	mov    $0x7,%eax
801028d3:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028d4:	89 ca                	mov    %ecx,%edx
801028d6:	ec                   	in     (%dx),%al
801028d7:	88 45 b4             	mov    %al,-0x4c(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028da:	89 da                	mov    %ebx,%edx
801028dc:	b8 08 00 00 00       	mov    $0x8,%eax
801028e1:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028e2:	89 ca                	mov    %ecx,%edx
801028e4:	ec                   	in     (%dx),%al
801028e5:	89 c7                	mov    %eax,%edi
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028e7:	89 da                	mov    %ebx,%edx
801028e9:	b8 09 00 00 00       	mov    $0x9,%eax
801028ee:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028ef:	89 ca                	mov    %ecx,%edx
801028f1:	ec                   	in     (%dx),%al
801028f2:	89 c6                	mov    %eax,%esi
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801028f4:	89 da                	mov    %ebx,%edx
801028f6:	b8 0a 00 00 00       	mov    $0xa,%eax
801028fb:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028fc:	89 ca                	mov    %ecx,%edx
801028fe:	ec                   	in     (%dx),%al

  // make sure CMOS doesn't modify time while we read it
  for(;;) {
    fill_rtcdate(&t1);
    if(cmos_read(CMOS_STATA) & CMOS_UIP)
801028ff:	84 c0                	test   %al,%al
80102901:	78 9d                	js     801028a0 <cmostime+0x30>
  return inb(CMOS_RETURN);
80102903:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
80102907:	89 fa                	mov    %edi,%edx
80102909:	0f b6 fa             	movzbl %dl,%edi
8010290c:	89 f2                	mov    %esi,%edx
8010290e:	89 45 b8             	mov    %eax,-0x48(%ebp)
80102911:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
80102915:	0f b6 f2             	movzbl %dl,%esi
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102918:	89 da                	mov    %ebx,%edx
8010291a:	89 7d c8             	mov    %edi,-0x38(%ebp)
8010291d:	89 45 bc             	mov    %eax,-0x44(%ebp)
80102920:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
80102924:	89 75 cc             	mov    %esi,-0x34(%ebp)
80102927:	89 45 c0             	mov    %eax,-0x40(%ebp)
8010292a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
8010292e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
80102931:	31 c0                	xor    %eax,%eax
80102933:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102934:	89 ca                	mov    %ecx,%edx
80102936:	ec                   	in     (%dx),%al
80102937:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010293a:	89 da                	mov    %ebx,%edx
8010293c:	89 45 d0             	mov    %eax,-0x30(%ebp)
8010293f:	b8 02 00 00 00       	mov    $0x2,%eax
80102944:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102945:	89 ca                	mov    %ecx,%edx
80102947:	ec                   	in     (%dx),%al
80102948:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010294b:	89 da                	mov    %ebx,%edx
8010294d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80102950:	b8 04 00 00 00       	mov    $0x4,%eax
80102955:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102956:	89 ca                	mov    %ecx,%edx
80102958:	ec                   	in     (%dx),%al
80102959:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010295c:	89 da                	mov    %ebx,%edx
8010295e:	89 45 d8             	mov    %eax,-0x28(%ebp)
80102961:	b8 07 00 00 00       	mov    $0x7,%eax
80102966:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102967:	89 ca                	mov    %ecx,%edx
80102969:	ec                   	in     (%dx),%al
8010296a:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010296d:	89 da                	mov    %ebx,%edx
8010296f:	89 45 dc             	mov    %eax,-0x24(%ebp)
80102972:	b8 08 00 00 00       	mov    $0x8,%eax
80102977:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102978:	89 ca                	mov    %ecx,%edx
8010297a:	ec                   	in     (%dx),%al
8010297b:	0f b6 c0             	movzbl %al,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010297e:	89 da                	mov    %ebx,%edx
80102980:	89 45 e0             	mov    %eax,-0x20(%ebp)
80102983:	b8 09 00 00 00       	mov    $0x9,%eax
80102988:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102989:	89 ca                	mov    %ecx,%edx
8010298b:	ec                   	in     (%dx),%al
8010298c:	0f b6 c0             	movzbl %al,%eax
        continue;
    fill_rtcdate(&t2);
    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
8010298f:	83 ec 04             	sub    $0x4,%esp
  return inb(CMOS_RETURN);
80102992:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
80102995:	8d 45 d0             	lea    -0x30(%ebp),%eax
80102998:	6a 18                	push   $0x18
8010299a:	50                   	push   %eax
8010299b:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010299e:	50                   	push   %eax
8010299f:	e8 6c 28 00 00       	call   80105210 <memcmp>
801029a4:	83 c4 10             	add    $0x10,%esp
801029a7:	85 c0                	test   %eax,%eax
801029a9:	0f 85 f1 fe ff ff    	jne    801028a0 <cmostime+0x30>
      break;
  }

  // convert
  if(bcd) {
801029af:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
801029b3:	75 78                	jne    80102a2d <cmostime+0x1bd>
#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
    CONV(second);
801029b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
801029b8:	89 c2                	mov    %eax,%edx
801029ba:	83 e0 0f             	and    $0xf,%eax
801029bd:	c1 ea 04             	shr    $0x4,%edx
801029c0:	8d 14 92             	lea    (%edx,%edx,4),%edx
801029c3:	8d 04 50             	lea    (%eax,%edx,2),%eax
801029c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
    CONV(minute);
801029c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
801029cc:	89 c2                	mov    %eax,%edx
801029ce:	83 e0 0f             	and    $0xf,%eax
801029d1:	c1 ea 04             	shr    $0x4,%edx
801029d4:	8d 14 92             	lea    (%edx,%edx,4),%edx
801029d7:	8d 04 50             	lea    (%eax,%edx,2),%eax
801029da:	89 45 bc             	mov    %eax,-0x44(%ebp)
    CONV(hour  );
801029dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
801029e0:	89 c2                	mov    %eax,%edx
801029e2:	83 e0 0f             	and    $0xf,%eax
801029e5:	c1 ea 04             	shr    $0x4,%edx
801029e8:	8d 14 92             	lea    (%edx,%edx,4),%edx
801029eb:	8d 04 50             	lea    (%eax,%edx,2),%eax
801029ee:	89 45 c0             	mov    %eax,-0x40(%ebp)
    CONV(day   );
801029f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
801029f4:	89 c2                	mov    %eax,%edx
801029f6:	83 e0 0f             	and    $0xf,%eax
801029f9:	c1 ea 04             	shr    $0x4,%edx
801029fc:	8d 14 92             	lea    (%edx,%edx,4),%edx
801029ff:	8d 04 50             	lea    (%eax,%edx,2),%eax
80102a02:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    CONV(month );
80102a05:	8b 45 c8             	mov    -0x38(%ebp),%eax
80102a08:	89 c2                	mov    %eax,%edx
80102a0a:	83 e0 0f             	and    $0xf,%eax
80102a0d:	c1 ea 04             	shr    $0x4,%edx
80102a10:	8d 14 92             	lea    (%edx,%edx,4),%edx
80102a13:	8d 04 50             	lea    (%eax,%edx,2),%eax
80102a16:	89 45 c8             	mov    %eax,-0x38(%ebp)
    CONV(year  );
80102a19:	8b 45 cc             	mov    -0x34(%ebp),%eax
80102a1c:	89 c2                	mov    %eax,%edx
80102a1e:	83 e0 0f             	and    $0xf,%eax
80102a21:	c1 ea 04             	shr    $0x4,%edx
80102a24:	8d 14 92             	lea    (%edx,%edx,4),%edx
80102a27:	8d 04 50             	lea    (%eax,%edx,2),%eax
80102a2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
#undef     CONV
  }

  *r = t1;
80102a2d:	8b 75 08             	mov    0x8(%ebp),%esi
80102a30:	8b 45 b8             	mov    -0x48(%ebp),%eax
80102a33:	89 06                	mov    %eax,(%esi)
80102a35:	8b 45 bc             	mov    -0x44(%ebp),%eax
80102a38:	89 46 04             	mov    %eax,0x4(%esi)
80102a3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
80102a3e:	89 46 08             	mov    %eax,0x8(%esi)
80102a41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
80102a44:	89 46 0c             	mov    %eax,0xc(%esi)
80102a47:	8b 45 c8             	mov    -0x38(%ebp),%eax
80102a4a:	89 46 10             	mov    %eax,0x10(%esi)
80102a4d:	8b 45 cc             	mov    -0x34(%ebp),%eax
80102a50:	89 46 14             	mov    %eax,0x14(%esi)
  r->year += 2000;
80102a53:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
}
80102a5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102a5d:	5b                   	pop    %ebx
80102a5e:	5e                   	pop    %esi
80102a5f:	5f                   	pop    %edi
80102a60:	5d                   	pop    %ebp
80102a61:	c3                   	ret    
80102a62:	66 90                	xchg   %ax,%ax
80102a64:	66 90                	xchg   %ax,%ax
80102a66:	66 90                	xchg   %ax,%ax
80102a68:	66 90                	xchg   %ax,%ax
80102a6a:	66 90                	xchg   %ax,%ax
80102a6c:	66 90                	xchg   %ax,%ax
80102a6e:	66 90                	xchg   %ax,%ax

80102a70 <install_trans>:
static void
install_trans(void)
{
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80102a70:	8b 0d 08 e4 13 80    	mov    0x8013e408,%ecx
80102a76:	85 c9                	test   %ecx,%ecx
80102a78:	0f 8e 8a 00 00 00    	jle    80102b08 <install_trans+0x98>
{
80102a7e:	55                   	push   %ebp
80102a7f:	89 e5                	mov    %esp,%ebp
80102a81:	57                   	push   %edi
  for (tail = 0; tail < log.lh.n; tail++) {
80102a82:	31 ff                	xor    %edi,%edi
{
80102a84:	56                   	push   %esi
80102a85:	53                   	push   %ebx
80102a86:	83 ec 0c             	sub    $0xc,%esp
80102a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
80102a90:	a1 f4 e3 13 80       	mov    0x8013e3f4,%eax
80102a95:	83 ec 08             	sub    $0x8,%esp
80102a98:	01 f8                	add    %edi,%eax
80102a9a:	83 c0 01             	add    $0x1,%eax
80102a9d:	50                   	push   %eax
80102a9e:	ff 35 04 e4 13 80    	pushl  0x8013e404
80102aa4:	e8 27 d6 ff ff       	call   801000d0 <bread>
80102aa9:	89 c6                	mov    %eax,%esi
    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102aab:	58                   	pop    %eax
80102aac:	5a                   	pop    %edx
80102aad:	ff 34 bd 0c e4 13 80 	pushl  -0x7fec1bf4(,%edi,4)
80102ab4:	ff 35 04 e4 13 80    	pushl  0x8013e404
  for (tail = 0; tail < log.lh.n; tail++) {
80102aba:	83 c7 01             	add    $0x1,%edi
    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102abd:	e8 0e d6 ff ff       	call   801000d0 <bread>
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
80102ac2:	83 c4 0c             	add    $0xc,%esp
    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102ac5:	89 c3                	mov    %eax,%ebx
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
80102ac7:	8d 46 5c             	lea    0x5c(%esi),%eax
80102aca:	68 00 04 00 00       	push   $0x400
80102acf:	50                   	push   %eax
80102ad0:	8d 43 5c             	lea    0x5c(%ebx),%eax
80102ad3:	50                   	push   %eax
80102ad4:	e8 87 27 00 00       	call   80105260 <memmove>
    bwrite(dbuf);  // write dst to disk
80102ad9:	89 1c 24             	mov    %ebx,(%esp)
80102adc:	e8 cf d6 ff ff       	call   801001b0 <bwrite>
    brelse(lbuf);
80102ae1:	89 34 24             	mov    %esi,(%esp)
80102ae4:	e8 07 d7 ff ff       	call   801001f0 <brelse>
    brelse(dbuf);
80102ae9:	89 1c 24             	mov    %ebx,(%esp)
80102aec:	e8 ff d6 ff ff       	call   801001f0 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
80102af1:	83 c4 10             	add    $0x10,%esp
80102af4:	39 3d 08 e4 13 80    	cmp    %edi,0x8013e408
80102afa:	7f 94                	jg     80102a90 <install_trans+0x20>
  }
}
80102afc:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102aff:	5b                   	pop    %ebx
80102b00:	5e                   	pop    %esi
80102b01:	5f                   	pop    %edi
80102b02:	5d                   	pop    %ebp
80102b03:	c3                   	ret    
80102b04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102b08:	c3                   	ret    
80102b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102b10 <write_head>:
// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void
write_head(void)
{
80102b10:	55                   	push   %ebp
80102b11:	89 e5                	mov    %esp,%ebp
80102b13:	53                   	push   %ebx
80102b14:	83 ec 0c             	sub    $0xc,%esp
  struct buf *buf = bread(log.dev, log.start);
80102b17:	ff 35 f4 e3 13 80    	pushl  0x8013e3f4
80102b1d:	ff 35 04 e4 13 80    	pushl  0x8013e404
80102b23:	e8 a8 d5 ff ff       	call   801000d0 <bread>
  struct logheader *hb = (struct logheader *) (buf->data);
  int i;
  hb->n = log.lh.n;
  for (i = 0; i < log.lh.n; i++) {
80102b28:	83 c4 10             	add    $0x10,%esp
  struct buf *buf = bread(log.dev, log.start);
80102b2b:	89 c3                	mov    %eax,%ebx
  hb->n = log.lh.n;
80102b2d:	a1 08 e4 13 80       	mov    0x8013e408,%eax
80102b32:	89 43 5c             	mov    %eax,0x5c(%ebx)
  for (i = 0; i < log.lh.n; i++) {
80102b35:	85 c0                	test   %eax,%eax
80102b37:	7e 19                	jle    80102b52 <write_head+0x42>
80102b39:	31 d2                	xor    %edx,%edx
80102b3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102b3f:	90                   	nop
    hb->block[i] = log.lh.block[i];
80102b40:	8b 0c 95 0c e4 13 80 	mov    -0x7fec1bf4(,%edx,4),%ecx
80102b47:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
  for (i = 0; i < log.lh.n; i++) {
80102b4b:	83 c2 01             	add    $0x1,%edx
80102b4e:	39 d0                	cmp    %edx,%eax
80102b50:	75 ee                	jne    80102b40 <write_head+0x30>
  }
  bwrite(buf);
80102b52:	83 ec 0c             	sub    $0xc,%esp
80102b55:	53                   	push   %ebx
80102b56:	e8 55 d6 ff ff       	call   801001b0 <bwrite>
  brelse(buf);
80102b5b:	89 1c 24             	mov    %ebx,(%esp)
80102b5e:	e8 8d d6 ff ff       	call   801001f0 <brelse>
}
80102b63:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102b66:	83 c4 10             	add    $0x10,%esp
80102b69:	c9                   	leave  
80102b6a:	c3                   	ret    
80102b6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102b6f:	90                   	nop

80102b70 <initlog>:
{
80102b70:	f3 0f 1e fb          	endbr32 
80102b74:	55                   	push   %ebp
80102b75:	89 e5                	mov    %esp,%ebp
80102b77:	53                   	push   %ebx
80102b78:	83 ec 2c             	sub    $0x2c,%esp
80102b7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  initlock(&log.lock, "log");
80102b7e:	68 80 d4 10 80       	push   $0x8010d480
80102b83:	68 c0 e3 13 80       	push   $0x8013e3c0
80102b88:	e8 a3 23 00 00       	call   80104f30 <initlock>
  readsb(dev, &sb);
80102b8d:	58                   	pop    %eax
80102b8e:	8d 45 dc             	lea    -0x24(%ebp),%eax
80102b91:	5a                   	pop    %edx
80102b92:	50                   	push   %eax
80102b93:	53                   	push   %ebx
80102b94:	e8 47 e8 ff ff       	call   801013e0 <readsb>
  log.start = sb.logstart;
80102b99:	8b 45 ec             	mov    -0x14(%ebp),%eax
  struct buf *buf = bread(log.dev, log.start);
80102b9c:	59                   	pop    %ecx
  log.dev = dev;
80102b9d:	89 1d 04 e4 13 80    	mov    %ebx,0x8013e404
  log.size = sb.nlog;
80102ba3:	8b 55 e8             	mov    -0x18(%ebp),%edx
  log.start = sb.logstart;
80102ba6:	a3 f4 e3 13 80       	mov    %eax,0x8013e3f4
  log.size = sb.nlog;
80102bab:	89 15 f8 e3 13 80    	mov    %edx,0x8013e3f8
  struct buf *buf = bread(log.dev, log.start);
80102bb1:	5a                   	pop    %edx
80102bb2:	50                   	push   %eax
80102bb3:	53                   	push   %ebx
80102bb4:	e8 17 d5 ff ff       	call   801000d0 <bread>
  for (i = 0; i < log.lh.n; i++) {
80102bb9:	83 c4 10             	add    $0x10,%esp
  log.lh.n = lh->n;
80102bbc:	8b 48 5c             	mov    0x5c(%eax),%ecx
80102bbf:	89 0d 08 e4 13 80    	mov    %ecx,0x8013e408
  for (i = 0; i < log.lh.n; i++) {
80102bc5:	85 c9                	test   %ecx,%ecx
80102bc7:	7e 19                	jle    80102be2 <initlog+0x72>
80102bc9:	31 d2                	xor    %edx,%edx
80102bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102bcf:	90                   	nop
    log.lh.block[i] = lh->block[i];
80102bd0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
80102bd4:	89 1c 95 0c e4 13 80 	mov    %ebx,-0x7fec1bf4(,%edx,4)
  for (i = 0; i < log.lh.n; i++) {
80102bdb:	83 c2 01             	add    $0x1,%edx
80102bde:	39 d1                	cmp    %edx,%ecx
80102be0:	75 ee                	jne    80102bd0 <initlog+0x60>
  brelse(buf);
80102be2:	83 ec 0c             	sub    $0xc,%esp
80102be5:	50                   	push   %eax
80102be6:	e8 05 d6 ff ff       	call   801001f0 <brelse>

static void
recover_from_log(void)
{
  read_head();
  install_trans(); // if committed, copy from log to disk
80102beb:	e8 80 fe ff ff       	call   80102a70 <install_trans>
  log.lh.n = 0;
80102bf0:	c7 05 08 e4 13 80 00 	movl   $0x0,0x8013e408
80102bf7:	00 00 00 
  write_head(); // clear the log
80102bfa:	e8 11 ff ff ff       	call   80102b10 <write_head>
}
80102bff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102c02:	83 c4 10             	add    $0x10,%esp
80102c05:	c9                   	leave  
80102c06:	c3                   	ret    
80102c07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102c0e:	66 90                	xchg   %ax,%ax

80102c10 <begin_op>:
}

// called at the start of each FS system call.
void
begin_op(void)
{
80102c10:	f3 0f 1e fb          	endbr32 
80102c14:	55                   	push   %ebp
80102c15:	89 e5                	mov    %esp,%ebp
80102c17:	83 ec 14             	sub    $0x14,%esp
  acquire(&log.lock);
80102c1a:	68 c0 e3 13 80       	push   $0x8013e3c0
80102c1f:	e8 8c 24 00 00       	call   801050b0 <acquire>
80102c24:	83 c4 10             	add    $0x10,%esp
80102c27:	eb 1c                	jmp    80102c45 <begin_op+0x35>
80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  while(1){
    if(log.committing){
      sleep(&log, &log.lock);
80102c30:	83 ec 08             	sub    $0x8,%esp
80102c33:	68 c0 e3 13 80       	push   $0x8013e3c0
80102c38:	68 c0 e3 13 80       	push   $0x8013e3c0
80102c3d:	e8 2e 1e 00 00       	call   80104a70 <sleep>
80102c42:	83 c4 10             	add    $0x10,%esp
    if(log.committing){
80102c45:	a1 00 e4 13 80       	mov    0x8013e400,%eax
80102c4a:	85 c0                	test   %eax,%eax
80102c4c:	75 e2                	jne    80102c30 <begin_op+0x20>
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
80102c4e:	a1 fc e3 13 80       	mov    0x8013e3fc,%eax
80102c53:	8b 15 08 e4 13 80    	mov    0x8013e408,%edx
80102c59:	83 c0 01             	add    $0x1,%eax
80102c5c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
80102c5f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
80102c62:	83 fa 1e             	cmp    $0x1e,%edx
80102c65:	7f c9                	jg     80102c30 <begin_op+0x20>
      // this op might exhaust log space; wait for commit.
      sleep(&log, &log.lock);
    } else {
      log.outstanding += 1;
      release(&log.lock);
80102c67:	83 ec 0c             	sub    $0xc,%esp
      log.outstanding += 1;
80102c6a:	a3 fc e3 13 80       	mov    %eax,0x8013e3fc
      release(&log.lock);
80102c6f:	68 c0 e3 13 80       	push   $0x8013e3c0
80102c74:	e8 f7 24 00 00       	call   80105170 <release>
      break;
    }
  }
}
80102c79:	83 c4 10             	add    $0x10,%esp
80102c7c:	c9                   	leave  
80102c7d:	c3                   	ret    
80102c7e:	66 90                	xchg   %ax,%ax

80102c80 <end_op>:

// called at the end of each FS system call.
// commits if this was the last outstanding operation.
void
end_op(void)
{
80102c80:	f3 0f 1e fb          	endbr32 
80102c84:	55                   	push   %ebp
80102c85:	89 e5                	mov    %esp,%ebp
80102c87:	57                   	push   %edi
80102c88:	56                   	push   %esi
80102c89:	53                   	push   %ebx
80102c8a:	83 ec 18             	sub    $0x18,%esp
  int do_commit = 0;

  acquire(&log.lock);
80102c8d:	68 c0 e3 13 80       	push   $0x8013e3c0
80102c92:	e8 19 24 00 00       	call   801050b0 <acquire>
  log.outstanding -= 1;
80102c97:	a1 fc e3 13 80       	mov    0x8013e3fc,%eax
  if(log.committing)
80102c9c:	8b 35 00 e4 13 80    	mov    0x8013e400,%esi
80102ca2:	83 c4 10             	add    $0x10,%esp
  log.outstanding -= 1;
80102ca5:	8d 58 ff             	lea    -0x1(%eax),%ebx
80102ca8:	89 1d fc e3 13 80    	mov    %ebx,0x8013e3fc
  if(log.committing)
80102cae:	85 f6                	test   %esi,%esi
80102cb0:	0f 85 1e 01 00 00    	jne    80102dd4 <end_op+0x154>
    panic("log.committing");
  if(log.outstanding == 0){
80102cb6:	85 db                	test   %ebx,%ebx
80102cb8:	0f 85 f2 00 00 00    	jne    80102db0 <end_op+0x130>
    do_commit = 1;
    log.committing = 1;
80102cbe:	c7 05 00 e4 13 80 01 	movl   $0x1,0x8013e400
80102cc5:	00 00 00 
    // begin_op() may be waiting for log space,
    // and decrementing log.outstanding has decreased
    // the amount of reserved space.
    wakeup(&log);
  }
  release(&log.lock);
80102cc8:	83 ec 0c             	sub    $0xc,%esp
80102ccb:	68 c0 e3 13 80       	push   $0x8013e3c0
80102cd0:	e8 9b 24 00 00       	call   80105170 <release>
}

static void
commit()
{
  if (log.lh.n > 0) {
80102cd5:	8b 0d 08 e4 13 80    	mov    0x8013e408,%ecx
80102cdb:	83 c4 10             	add    $0x10,%esp
80102cde:	85 c9                	test   %ecx,%ecx
80102ce0:	7f 3e                	jg     80102d20 <end_op+0xa0>
    acquire(&log.lock);
80102ce2:	83 ec 0c             	sub    $0xc,%esp
80102ce5:	68 c0 e3 13 80       	push   $0x8013e3c0
80102cea:	e8 c1 23 00 00       	call   801050b0 <acquire>
    wakeup(&log);
80102cef:	c7 04 24 c0 e3 13 80 	movl   $0x8013e3c0,(%esp)
    log.committing = 0;
80102cf6:	c7 05 00 e4 13 80 00 	movl   $0x0,0x8013e400
80102cfd:	00 00 00 
    wakeup(&log);
80102d00:	e8 2b 1f 00 00       	call   80104c30 <wakeup>
    release(&log.lock);
80102d05:	c7 04 24 c0 e3 13 80 	movl   $0x8013e3c0,(%esp)
80102d0c:	e8 5f 24 00 00       	call   80105170 <release>
80102d11:	83 c4 10             	add    $0x10,%esp
}
80102d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102d17:	5b                   	pop    %ebx
80102d18:	5e                   	pop    %esi
80102d19:	5f                   	pop    %edi
80102d1a:	5d                   	pop    %ebp
80102d1b:	c3                   	ret    
80102d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    struct buf *to = bread(log.dev, log.start+tail+1); // log block
80102d20:	a1 f4 e3 13 80       	mov    0x8013e3f4,%eax
80102d25:	83 ec 08             	sub    $0x8,%esp
80102d28:	01 d8                	add    %ebx,%eax
80102d2a:	83 c0 01             	add    $0x1,%eax
80102d2d:	50                   	push   %eax
80102d2e:	ff 35 04 e4 13 80    	pushl  0x8013e404
80102d34:	e8 97 d3 ff ff       	call   801000d0 <bread>
80102d39:	89 c6                	mov    %eax,%esi
    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102d3b:	58                   	pop    %eax
80102d3c:	5a                   	pop    %edx
80102d3d:	ff 34 9d 0c e4 13 80 	pushl  -0x7fec1bf4(,%ebx,4)
80102d44:	ff 35 04 e4 13 80    	pushl  0x8013e404
  for (tail = 0; tail < log.lh.n; tail++) {
80102d4a:	83 c3 01             	add    $0x1,%ebx
    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102d4d:	e8 7e d3 ff ff       	call   801000d0 <bread>
    memmove(to->data, from->data, BSIZE);
80102d52:	83 c4 0c             	add    $0xc,%esp
    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102d55:	89 c7                	mov    %eax,%edi
    memmove(to->data, from->data, BSIZE);
80102d57:	8d 40 5c             	lea    0x5c(%eax),%eax
80102d5a:	68 00 04 00 00       	push   $0x400
80102d5f:	50                   	push   %eax
80102d60:	8d 46 5c             	lea    0x5c(%esi),%eax
80102d63:	50                   	push   %eax
80102d64:	e8 f7 24 00 00       	call   80105260 <memmove>
    bwrite(to);  // write the log
80102d69:	89 34 24             	mov    %esi,(%esp)
80102d6c:	e8 3f d4 ff ff       	call   801001b0 <bwrite>
    brelse(from);
80102d71:	89 3c 24             	mov    %edi,(%esp)
80102d74:	e8 77 d4 ff ff       	call   801001f0 <brelse>
    brelse(to);
80102d79:	89 34 24             	mov    %esi,(%esp)
80102d7c:	e8 6f d4 ff ff       	call   801001f0 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
80102d81:	83 c4 10             	add    $0x10,%esp
80102d84:	3b 1d 08 e4 13 80    	cmp    0x8013e408,%ebx
80102d8a:	7c 94                	jl     80102d20 <end_op+0xa0>
    write_log();     // Write modified blocks from cache to log
    write_head();    // Write header to disk -- the real commit
80102d8c:	e8 7f fd ff ff       	call   80102b10 <write_head>
    install_trans(); // Now install writes to home locations
80102d91:	e8 da fc ff ff       	call   80102a70 <install_trans>
    log.lh.n = 0;
80102d96:	c7 05 08 e4 13 80 00 	movl   $0x0,0x8013e408
80102d9d:	00 00 00 
    write_head();    // Erase the transaction from the log
80102da0:	e8 6b fd ff ff       	call   80102b10 <write_head>
80102da5:	e9 38 ff ff ff       	jmp    80102ce2 <end_op+0x62>
80102daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    wakeup(&log);
80102db0:	83 ec 0c             	sub    $0xc,%esp
80102db3:	68 c0 e3 13 80       	push   $0x8013e3c0
80102db8:	e8 73 1e 00 00       	call   80104c30 <wakeup>
  release(&log.lock);
80102dbd:	c7 04 24 c0 e3 13 80 	movl   $0x8013e3c0,(%esp)
80102dc4:	e8 a7 23 00 00       	call   80105170 <release>
80102dc9:	83 c4 10             	add    $0x10,%esp
}
80102dcc:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102dcf:	5b                   	pop    %ebx
80102dd0:	5e                   	pop    %esi
80102dd1:	5f                   	pop    %edi
80102dd2:	5d                   	pop    %ebp
80102dd3:	c3                   	ret    
    panic("log.committing");
80102dd4:	83 ec 0c             	sub    $0xc,%esp
80102dd7:	68 84 d4 10 80       	push   $0x8010d484
80102ddc:	e8 3f d6 ff ff       	call   80100420 <panic>
80102de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102de8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102def:	90                   	nop

80102df0 <log_write>:
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void
log_write(struct buf *b)
{
80102df0:	f3 0f 1e fb          	endbr32 
80102df4:	55                   	push   %ebp
80102df5:	89 e5                	mov    %esp,%ebp
80102df7:	53                   	push   %ebx
80102df8:	83 ec 04             	sub    $0x4,%esp
  int i;

  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
80102dfb:	8b 15 08 e4 13 80    	mov    0x8013e408,%edx
{
80102e01:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
80102e04:	83 fa 1d             	cmp    $0x1d,%edx
80102e07:	0f 8f 91 00 00 00    	jg     80102e9e <log_write+0xae>
80102e0d:	a1 f8 e3 13 80       	mov    0x8013e3f8,%eax
80102e12:	83 e8 01             	sub    $0x1,%eax
80102e15:	39 c2                	cmp    %eax,%edx
80102e17:	0f 8d 81 00 00 00    	jge    80102e9e <log_write+0xae>
    panic("too big a transaction");
  if (log.outstanding < 1)
80102e1d:	a1 fc e3 13 80       	mov    0x8013e3fc,%eax
80102e22:	85 c0                	test   %eax,%eax
80102e24:	0f 8e 81 00 00 00    	jle    80102eab <log_write+0xbb>
    panic("log_write outside of trans");

  acquire(&log.lock);
80102e2a:	83 ec 0c             	sub    $0xc,%esp
80102e2d:	68 c0 e3 13 80       	push   $0x8013e3c0
80102e32:	e8 79 22 00 00       	call   801050b0 <acquire>
  for (i = 0; i < log.lh.n; i++) {
80102e37:	8b 15 08 e4 13 80    	mov    0x8013e408,%edx
80102e3d:	83 c4 10             	add    $0x10,%esp
80102e40:	85 d2                	test   %edx,%edx
80102e42:	7e 4e                	jle    80102e92 <log_write+0xa2>
    if (log.lh.block[i] == b->blockno)   // log absorbtion
80102e44:	8b 4b 08             	mov    0x8(%ebx),%ecx
  for (i = 0; i < log.lh.n; i++) {
80102e47:	31 c0                	xor    %eax,%eax
80102e49:	eb 0c                	jmp    80102e57 <log_write+0x67>
80102e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102e4f:	90                   	nop
80102e50:	83 c0 01             	add    $0x1,%eax
80102e53:	39 c2                	cmp    %eax,%edx
80102e55:	74 29                	je     80102e80 <log_write+0x90>
    if (log.lh.block[i] == b->blockno)   // log absorbtion
80102e57:	39 0c 85 0c e4 13 80 	cmp    %ecx,-0x7fec1bf4(,%eax,4)
80102e5e:	75 f0                	jne    80102e50 <log_write+0x60>
      break;
  }
  log.lh.block[i] = b->blockno;
80102e60:	89 0c 85 0c e4 13 80 	mov    %ecx,-0x7fec1bf4(,%eax,4)
  if (i == log.lh.n)
    log.lh.n++;
  b->flags |= B_DIRTY; // prevent eviction
80102e67:	83 0b 04             	orl    $0x4,(%ebx)
  release(&log.lock);
}
80102e6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  release(&log.lock);
80102e6d:	c7 45 08 c0 e3 13 80 	movl   $0x8013e3c0,0x8(%ebp)
}
80102e74:	c9                   	leave  
  release(&log.lock);
80102e75:	e9 f6 22 00 00       	jmp    80105170 <release>
80102e7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  log.lh.block[i] = b->blockno;
80102e80:	89 0c 95 0c e4 13 80 	mov    %ecx,-0x7fec1bf4(,%edx,4)
    log.lh.n++;
80102e87:	83 c2 01             	add    $0x1,%edx
80102e8a:	89 15 08 e4 13 80    	mov    %edx,0x8013e408
80102e90:	eb d5                	jmp    80102e67 <log_write+0x77>
  log.lh.block[i] = b->blockno;
80102e92:	8b 43 08             	mov    0x8(%ebx),%eax
80102e95:	a3 0c e4 13 80       	mov    %eax,0x8013e40c
  if (i == log.lh.n)
80102e9a:	75 cb                	jne    80102e67 <log_write+0x77>
80102e9c:	eb e9                	jmp    80102e87 <log_write+0x97>
    panic("too big a transaction");
80102e9e:	83 ec 0c             	sub    $0xc,%esp
80102ea1:	68 93 d4 10 80       	push   $0x8010d493
80102ea6:	e8 75 d5 ff ff       	call   80100420 <panic>
    panic("log_write outside of trans");
80102eab:	83 ec 0c             	sub    $0xc,%esp
80102eae:	68 a9 d4 10 80       	push   $0x8010d4a9
80102eb3:	e8 68 d5 ff ff       	call   80100420 <panic>
80102eb8:	66 90                	xchg   %ax,%ax
80102eba:	66 90                	xchg   %ax,%ax
80102ebc:	66 90                	xchg   %ax,%ax
80102ebe:	66 90                	xchg   %ax,%ax

80102ec0 <mpmain>:
}

// Common CPU setup code.
static void
mpmain(void)
{
80102ec0:	55                   	push   %ebp
80102ec1:	89 e5                	mov    %esp,%ebp
80102ec3:	53                   	push   %ebx
80102ec4:	83 ec 04             	sub    $0x4,%esp
  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
80102ec7:	e8 c4 15 00 00       	call   80104490 <cpuid>
80102ecc:	89 c3                	mov    %eax,%ebx
80102ece:	e8 bd 15 00 00       	call   80104490 <cpuid>
80102ed3:	83 ec 04             	sub    $0x4,%esp
80102ed6:	53                   	push   %ebx
80102ed7:	50                   	push   %eax
80102ed8:	68 c4 d4 10 80       	push   $0x8010d4c4
80102edd:	e8 ae d4 ff ff       	call   80100390 <cprintf>
  idtinit();       // load idt register
80102ee2:	e8 19 38 00 00       	call   80106700 <idtinit>
  xchg(&(mycpu()->started), 1); // tell startothers() we're up
80102ee7:	e8 34 15 00 00       	call   80104420 <mycpu>
80102eec:	89 c2                	mov    %eax,%edx
xchg(volatile uint *addr, uint newval)
{
  uint result;

  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80102eee:	b8 01 00 00 00       	mov    $0x1,%eax
80102ef3:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
  scheduler();     // start running processes
80102efa:	e8 81 18 00 00       	call   80104780 <scheduler>
80102eff:	90                   	nop

80102f00 <mpenter>:
{
80102f00:	f3 0f 1e fb          	endbr32 
80102f04:	55                   	push   %ebp
80102f05:	89 e5                	mov    %esp,%ebp
80102f07:	83 ec 08             	sub    $0x8,%esp
  switchkvm();
80102f0a:	e8 e1 48 00 00       	call   801077f0 <switchkvm>
  seginit();
80102f0f:	e8 4c 48 00 00       	call   80107760 <seginit>
  lapicinit();
80102f14:	e8 67 f7 ff ff       	call   80102680 <lapicinit>
  mpmain();
80102f19:	e8 a2 ff ff ff       	call   80102ec0 <mpmain>
80102f1e:	66 90                	xchg   %ax,%ax

80102f20 <main>:
{
80102f20:	f3 0f 1e fb          	endbr32 
80102f24:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80102f28:	83 e4 f0             	and    $0xfffffff0,%esp
80102f2b:	ff 71 fc             	pushl  -0x4(%ecx)
80102f2e:	55                   	push   %ebp
80102f2f:	89 e5                	mov    %esp,%ebp
80102f31:	53                   	push   %ebx
80102f32:	51                   	push   %ecx
  kinit1(end, P2V(4*1024*1024)); // phys page allocator
80102f33:	83 ec 08             	sub    $0x8,%esp
80102f36:	68 00 00 40 80       	push   $0x80400000
80102f3b:	68 40 17 15 80       	push   $0x80151740
80102f40:	e8 fb f4 ff ff       	call   80102440 <kinit1>
  kvmalloc();      // kernel page table
80102f45:	e8 86 4d 00 00       	call   80107cd0 <kvmalloc>
  mpinit();        // detect other processors
80102f4a:	e8 91 01 00 00       	call   801030e0 <mpinit>
  lapicinit();     // interrupt controller
80102f4f:	e8 2c f7 ff ff       	call   80102680 <lapicinit>
  seginit();       // segment descriptors
80102f54:	e8 07 48 00 00       	call   80107760 <seginit>
  picinit();       // disable pic
80102f59:	e8 62 09 00 00       	call   801038c0 <picinit>
  ioapicinit();    // another interrupt controller
80102f5e:	e8 fd f2 ff ff       	call   80102260 <ioapicinit>
  consoleinit();   // console hardware
80102f63:	e8 38 d9 ff ff       	call   801008a0 <consoleinit>
  uartinit();      // serial port
80102f68:	e8 b3 3a 00 00       	call   80106a20 <uartinit>
  pinit();         // process table
80102f6d:	e8 8e 14 00 00       	call   80104400 <pinit>
  tvinit();        // trap vectors
80102f72:	e8 09 37 00 00       	call   80106680 <tvinit>
  binit();         // buffer cache
80102f77:	e8 c4 d0 ff ff       	call   80100040 <binit>
  fileinit();      // file table
80102f7c:	e8 cf dc ff ff       	call   80100c50 <fileinit>
  ideinit();       // disk
80102f81:	e8 aa f0 ff ff       	call   80102030 <ideinit>
  pciinit();       // pci devices
80102f86:	e8 05 09 00 00       	call   80103890 <pciinit>
  netinit();       // networking
80102f8b:	e8 f0 76 00 00       	call   8010a680 <netinit>

  // Write entry code to unused memory at 0x7000.
  // The linker has placed the image of entryother.S in
  // _binary_entryother_start.
  code = P2V(0x7000);
  memmove(code, _binary_build_kernel_entryother_start, (uint)_binary_build_kernel_entryother_size);
80102f90:	83 c4 0c             	add    $0xc,%esp
80102f93:	68 8a 00 00 00       	push   $0x8a
80102f98:	68 c0 14 11 80       	push   $0x801114c0
80102f9d:	68 00 70 00 80       	push   $0x80007000
80102fa2:	e8 b9 22 00 00       	call   80105260 <memmove>

  for(c = cpus; c < cpus+ncpu; c++){
80102fa7:	83 c4 10             	add    $0x10,%esp
80102faa:	69 05 40 ea 13 80 b0 	imul   $0xb0,0x8013ea40,%eax
80102fb1:	00 00 00 
80102fb4:	05 c0 e4 13 80       	add    $0x8013e4c0,%eax
80102fb9:	3d c0 e4 13 80       	cmp    $0x8013e4c0,%eax
80102fbe:	0f 86 7c 00 00 00    	jbe    80103040 <main+0x120>
80102fc4:	bb c0 e4 13 80       	mov    $0x8013e4c0,%ebx
80102fc9:	eb 1e                	jmp    80102fe9 <main+0xc9>
80102fcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102fcf:	90                   	nop
80102fd0:	69 05 40 ea 13 80 b0 	imul   $0xb0,0x8013ea40,%eax
80102fd7:	00 00 00 
80102fda:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
80102fe0:	05 c0 e4 13 80       	add    $0x8013e4c0,%eax
80102fe5:	39 c3                	cmp    %eax,%ebx
80102fe7:	73 57                	jae    80103040 <main+0x120>
    if(c == mycpu())  // We've started already.
80102fe9:	e8 32 14 00 00       	call   80104420 <mycpu>
80102fee:	39 c3                	cmp    %eax,%ebx
80102ff0:	74 de                	je     80102fd0 <main+0xb0>
      continue;

    // Tell entryother.S what stack to use, where to enter, and what
    // pgdir to use. We cannot use kpgdir yet, because the AP processor
    // is running in low  memory, so we use entrypgdir for the APs too.
    stack = kalloc();
80102ff2:	e8 19 f5 ff ff       	call   80102510 <kalloc>
    *(void**)(code-4) = stack + KSTACKSIZE;
    *(void(**)(void))(code-8) = mpenter;
    *(int**)(code-12) = (void *) V2P(entrypgdir);

    lapicstartap(c->apicid, V2P(code));
80102ff7:	83 ec 08             	sub    $0x8,%esp
    *(void(**)(void))(code-8) = mpenter;
80102ffa:	c7 05 f8 6f 00 80 00 	movl   $0x80102f00,0x80006ff8
80103001:	2f 10 80 
    *(int**)(code-12) = (void *) V2P(entrypgdir);
80103004:	c7 05 f4 6f 00 80 00 	movl   $0x110000,0x80006ff4
8010300b:	00 11 00 
    *(void**)(code-4) = stack + KSTACKSIZE;
8010300e:	05 00 10 00 00       	add    $0x1000,%eax
80103013:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
    lapicstartap(c->apicid, V2P(code));
80103018:	0f b6 03             	movzbl (%ebx),%eax
8010301b:	68 00 70 00 00       	push   $0x7000
80103020:	50                   	push   %eax
80103021:	e8 aa f7 ff ff       	call   801027d0 <lapicstartap>

    // wait for cpu to finish mpmain()
    while(c->started == 0)
80103026:	83 c4 10             	add    $0x10,%esp
80103029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103030:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
80103036:	85 c0                	test   %eax,%eax
80103038:	74 f6                	je     80103030 <main+0x110>
8010303a:	eb 94                	jmp    80102fd0 <main+0xb0>
8010303c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
80103040:	83 ec 08             	sub    $0x8,%esp
80103043:	68 00 00 00 8e       	push   $0x8e000000
80103048:	68 00 00 40 80       	push   $0x80400000
8010304d:	e8 5e f4 ff ff       	call   801024b0 <kinit2>
  userinit();      // first user process
80103052:	e8 89 14 00 00       	call   801044e0 <userinit>
  mpmain();        // finish this processor's setup
80103057:	e8 64 fe ff ff       	call   80102ec0 <mpmain>
8010305c:	66 90                	xchg   %ax,%ax
8010305e:	66 90                	xchg   %ax,%ax

80103060 <mpsearch1>:
}

// Look for an MP structure in the len bytes at addr.
static struct mp*
mpsearch1(uint a, int len)
{
80103060:	55                   	push   %ebp
80103061:	89 e5                	mov    %esp,%ebp
80103063:	57                   	push   %edi
80103064:	56                   	push   %esi
  uchar *e, *p, *addr;

  addr = P2V(a);
80103065:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
{
8010306b:	53                   	push   %ebx
  e = addr+len;
8010306c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
{
8010306f:	83 ec 0c             	sub    $0xc,%esp
  for(p = addr; p < e; p += sizeof(struct mp))
80103072:	39 de                	cmp    %ebx,%esi
80103074:	72 10                	jb     80103086 <mpsearch1+0x26>
80103076:	eb 50                	jmp    801030c8 <mpsearch1+0x68>
80103078:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010307f:	90                   	nop
80103080:	89 fe                	mov    %edi,%esi
80103082:	39 fb                	cmp    %edi,%ebx
80103084:	76 42                	jbe    801030c8 <mpsearch1+0x68>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80103086:	83 ec 04             	sub    $0x4,%esp
80103089:	8d 7e 10             	lea    0x10(%esi),%edi
8010308c:	6a 04                	push   $0x4
8010308e:	68 d8 d4 10 80       	push   $0x8010d4d8
80103093:	56                   	push   %esi
80103094:	e8 77 21 00 00       	call   80105210 <memcmp>
80103099:	83 c4 10             	add    $0x10,%esp
8010309c:	85 c0                	test   %eax,%eax
8010309e:	75 e0                	jne    80103080 <mpsearch1+0x20>
801030a0:	89 f2                	mov    %esi,%edx
801030a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    sum += addr[i];
801030a8:	0f b6 0a             	movzbl (%edx),%ecx
801030ab:	83 c2 01             	add    $0x1,%edx
801030ae:	01 c8                	add    %ecx,%eax
  for(i=0; i<len; i++)
801030b0:	39 fa                	cmp    %edi,%edx
801030b2:	75 f4                	jne    801030a8 <mpsearch1+0x48>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
801030b4:	84 c0                	test   %al,%al
801030b6:	75 c8                	jne    80103080 <mpsearch1+0x20>
      return (struct mp*)p;
  return 0;
}
801030b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801030bb:	89 f0                	mov    %esi,%eax
801030bd:	5b                   	pop    %ebx
801030be:	5e                   	pop    %esi
801030bf:	5f                   	pop    %edi
801030c0:	5d                   	pop    %ebp
801030c1:	c3                   	ret    
801030c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801030c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
801030cb:	31 f6                	xor    %esi,%esi
}
801030cd:	5b                   	pop    %ebx
801030ce:	89 f0                	mov    %esi,%eax
801030d0:	5e                   	pop    %esi
801030d1:	5f                   	pop    %edi
801030d2:	5d                   	pop    %ebp
801030d3:	c3                   	ret    
801030d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801030db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801030df:	90                   	nop

801030e0 <mpinit>:
  return conf;
}

void
mpinit(void)
{
801030e0:	f3 0f 1e fb          	endbr32 
801030e4:	55                   	push   %ebp
801030e5:	89 e5                	mov    %esp,%ebp
801030e7:	57                   	push   %edi
801030e8:	56                   	push   %esi
801030e9:	53                   	push   %ebx
801030ea:	83 ec 1c             	sub    $0x1c,%esp
  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
801030ed:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
801030f4:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
801030fb:	c1 e0 08             	shl    $0x8,%eax
801030fe:	09 d0                	or     %edx,%eax
80103100:	c1 e0 04             	shl    $0x4,%eax
80103103:	75 1b                	jne    80103120 <mpinit+0x40>
    p = ((bda[0x14]<<8)|bda[0x13])*1024;
80103105:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
8010310c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
80103113:	c1 e0 08             	shl    $0x8,%eax
80103116:	09 d0                	or     %edx,%eax
80103118:	c1 e0 0a             	shl    $0xa,%eax
    if((mp = mpsearch1(p-1024, 1024)))
8010311b:	2d 00 04 00 00       	sub    $0x400,%eax
    if((mp = mpsearch1(p, 1024)))
80103120:	ba 00 04 00 00       	mov    $0x400,%edx
80103125:	e8 36 ff ff ff       	call   80103060 <mpsearch1>
8010312a:	89 c6                	mov    %eax,%esi
8010312c:	85 c0                	test   %eax,%eax
8010312e:	0f 84 4c 01 00 00    	je     80103280 <mpinit+0x1a0>
  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
80103134:	8b 5e 04             	mov    0x4(%esi),%ebx
80103137:	85 db                	test   %ebx,%ebx
80103139:	0f 84 61 01 00 00    	je     801032a0 <mpinit+0x1c0>
  if(memcmp(conf, "PCMP", 4) != 0)
8010313f:	83 ec 04             	sub    $0x4,%esp
  conf = (struct mpconf*) P2V((uint) mp->physaddr);
80103142:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
  if(memcmp(conf, "PCMP", 4) != 0)
80103148:	6a 04                	push   $0x4
8010314a:	68 dd d4 10 80       	push   $0x8010d4dd
8010314f:	50                   	push   %eax
  conf = (struct mpconf*) P2V((uint) mp->physaddr);
80103150:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if(memcmp(conf, "PCMP", 4) != 0)
80103153:	e8 b8 20 00 00       	call   80105210 <memcmp>
80103158:	83 c4 10             	add    $0x10,%esp
8010315b:	85 c0                	test   %eax,%eax
8010315d:	0f 85 3d 01 00 00    	jne    801032a0 <mpinit+0x1c0>
  if(conf->version != 1 && conf->version != 4)
80103163:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
8010316a:	3c 01                	cmp    $0x1,%al
8010316c:	74 08                	je     80103176 <mpinit+0x96>
8010316e:	3c 04                	cmp    $0x4,%al
80103170:	0f 85 2a 01 00 00    	jne    801032a0 <mpinit+0x1c0>
  if(sum((uchar*)conf, conf->length) != 0)
80103176:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
  for(i=0; i<len; i++)
8010317d:	66 85 d2             	test   %dx,%dx
80103180:	74 26                	je     801031a8 <mpinit+0xc8>
80103182:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
80103185:	89 d8                	mov    %ebx,%eax
  sum = 0;
80103187:	31 d2                	xor    %edx,%edx
80103189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    sum += addr[i];
80103190:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
80103197:	83 c0 01             	add    $0x1,%eax
8010319a:	01 ca                	add    %ecx,%edx
  for(i=0; i<len; i++)
8010319c:	39 f8                	cmp    %edi,%eax
8010319e:	75 f0                	jne    80103190 <mpinit+0xb0>
  if(sum((uchar*)conf, conf->length) != 0)
801031a0:	84 d2                	test   %dl,%dl
801031a2:	0f 85 f8 00 00 00    	jne    801032a0 <mpinit+0x1c0>
  struct mpioapic *ioapic;

  if((conf = mpconfig(&mp)) == 0)
    panic("Expect to run on an SMP");
  ismp = 1;
  lapic = (uint*)conf->lapicaddr;
801031a8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
801031ae:	a3 bc e3 13 80       	mov    %eax,0x8013e3bc
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
801031b3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
801031b9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
  ismp = 1;
801031c0:	bb 01 00 00 00       	mov    $0x1,%ebx
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
801031c5:	03 55 e4             	add    -0x1c(%ebp),%edx
801031c8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
801031cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801031cf:	90                   	nop
801031d0:	39 c2                	cmp    %eax,%edx
801031d2:	76 15                	jbe    801031e9 <mpinit+0x109>
    switch(*p){
801031d4:	0f b6 08             	movzbl (%eax),%ecx
801031d7:	80 f9 02             	cmp    $0x2,%cl
801031da:	74 5c                	je     80103238 <mpinit+0x158>
801031dc:	77 42                	ja     80103220 <mpinit+0x140>
801031de:	84 c9                	test   %cl,%cl
801031e0:	74 6e                	je     80103250 <mpinit+0x170>
      p += sizeof(struct mpioapic);
      continue;
    case MPBUS:
    case MPIOINTR:
    case MPLINTR:
      p += 8;
801031e2:	83 c0 08             	add    $0x8,%eax
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
801031e5:	39 c2                	cmp    %eax,%edx
801031e7:	77 eb                	ja     801031d4 <mpinit+0xf4>
801031e9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    default:
      ismp = 0;
      break;
    }
  }
  if(!ismp)
801031ec:	85 db                	test   %ebx,%ebx
801031ee:	0f 84 b9 00 00 00    	je     801032ad <mpinit+0x1cd>
    panic("Didn't find a suitable machine");

  if(mp->imcrp){
801031f4:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
801031f8:	74 15                	je     8010320f <mpinit+0x12f>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801031fa:	b8 70 00 00 00       	mov    $0x70,%eax
801031ff:	ba 22 00 00 00       	mov    $0x22,%edx
80103204:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103205:	ba 23 00 00 00       	mov    $0x23,%edx
8010320a:	ec                   	in     (%dx),%al
    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
    // But it would on real hardware.
    outb(0x22, 0x70);   // Select IMCR
    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
8010320b:	83 c8 01             	or     $0x1,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010320e:	ee                   	out    %al,(%dx)
  }
}
8010320f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103212:	5b                   	pop    %ebx
80103213:	5e                   	pop    %esi
80103214:	5f                   	pop    %edi
80103215:	5d                   	pop    %ebp
80103216:	c3                   	ret    
80103217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010321e:	66 90                	xchg   %ax,%ax
    switch(*p){
80103220:	83 e9 03             	sub    $0x3,%ecx
80103223:	80 f9 01             	cmp    $0x1,%cl
80103226:	76 ba                	jbe    801031e2 <mpinit+0x102>
80103228:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010322f:	eb 9f                	jmp    801031d0 <mpinit+0xf0>
80103231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      ioapicid = ioapic->apicno;
80103238:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
      p += sizeof(struct mpioapic);
8010323c:	83 c0 08             	add    $0x8,%eax
      ioapicid = ioapic->apicno;
8010323f:	88 0d a0 e4 13 80    	mov    %cl,0x8013e4a0
      continue;
80103245:	eb 89                	jmp    801031d0 <mpinit+0xf0>
80103247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010324e:	66 90                	xchg   %ax,%ax
      if(ncpu < NCPU) {
80103250:	8b 0d 40 ea 13 80    	mov    0x8013ea40,%ecx
80103256:	83 f9 07             	cmp    $0x7,%ecx
80103259:	7f 19                	jg     80103274 <mpinit+0x194>
        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
8010325b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
80103261:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
        ncpu++;
80103265:	83 c1 01             	add    $0x1,%ecx
80103268:	89 0d 40 ea 13 80    	mov    %ecx,0x8013ea40
        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
8010326e:	88 9f c0 e4 13 80    	mov    %bl,-0x7fec1b40(%edi)
      p += sizeof(struct mpproc);
80103274:	83 c0 14             	add    $0x14,%eax
      continue;
80103277:	e9 54 ff ff ff       	jmp    801031d0 <mpinit+0xf0>
8010327c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  return mpsearch1(0xF0000, 0x10000);
80103280:	ba 00 00 01 00       	mov    $0x10000,%edx
80103285:	b8 00 00 0f 00       	mov    $0xf0000,%eax
8010328a:	e8 d1 fd ff ff       	call   80103060 <mpsearch1>
8010328f:	89 c6                	mov    %eax,%esi
  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
80103291:	85 c0                	test   %eax,%eax
80103293:	0f 85 9b fe ff ff    	jne    80103134 <mpinit+0x54>
80103299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    panic("Expect to run on an SMP");
801032a0:	83 ec 0c             	sub    $0xc,%esp
801032a3:	68 e2 d4 10 80       	push   $0x8010d4e2
801032a8:	e8 73 d1 ff ff       	call   80100420 <panic>
    panic("Didn't find a suitable machine");
801032ad:	83 ec 0c             	sub    $0xc,%esp
801032b0:	68 fc d4 10 80       	push   $0x8010d4fc
801032b5:	e8 66 d1 ff ff       	call   80100420 <panic>
801032ba:	66 90                	xchg   %ax,%ax
801032bc:	66 90                	xchg   %ax,%ax
801032be:	66 90                	xchg   %ax,%ax

801032c0 <pci_attach_match>:
}

static int __attribute__((warn_unused_result))
pci_attach_match(uint32_t key1, uint32_t key2,
		 struct pci_driver *list, struct pci_func *pcif)
{
801032c0:	55                   	push   %ebp
801032c1:	89 e5                	mov    %esp,%ebp
801032c3:	57                   	push   %edi
801032c4:	56                   	push   %esi
801032c5:	53                   	push   %ebx
801032c6:	83 ec 0c             	sub    $0xc,%esp
801032c9:	8b 5d 10             	mov    0x10(%ebp),%ebx
801032cc:	8b 7d 08             	mov    0x8(%ebp),%edi
801032cf:	8b 75 0c             	mov    0xc(%ebp),%esi
	uint32_t i;

	for (i = 0; list[i].attachfn; i++) {
801032d2:	8b 43 08             	mov    0x8(%ebx),%eax
801032d5:	85 c0                	test   %eax,%eax
801032d7:	75 11                	jne    801032ea <pci_attach_match+0x2a>
801032d9:	eb 4d                	jmp    80103328 <pci_attach_match+0x68>
801032db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801032df:	90                   	nop
801032e0:	8b 43 14             	mov    0x14(%ebx),%eax
801032e3:	83 c3 0c             	add    $0xc,%ebx
801032e6:	85 c0                	test   %eax,%eax
801032e8:	74 3e                	je     80103328 <pci_attach_match+0x68>
		if (list[i].key1 == key1 && list[i].key2 == key2) {
801032ea:	39 3b                	cmp    %edi,(%ebx)
801032ec:	75 f2                	jne    801032e0 <pci_attach_match+0x20>
801032ee:	39 73 04             	cmp    %esi,0x4(%ebx)
801032f1:	75 ed                	jne    801032e0 <pci_attach_match+0x20>
			int r = list[i].attachfn(pcif);
801032f3:	83 ec 0c             	sub    $0xc,%esp
801032f6:	ff 75 14             	pushl  0x14(%ebp)
801032f9:	ff d0                	call   *%eax
			if (r > 0)
801032fb:	83 c4 10             	add    $0x10,%esp
801032fe:	85 c0                	test   %eax,%eax
80103300:	7f 28                	jg     8010332a <pci_attach_match+0x6a>
				return r;
			if (r < 0)
80103302:	74 dc                	je     801032e0 <pci_attach_match+0x20>
				cprintf("pci_attach_match: attaching "
80103304:	83 ec 0c             	sub    $0xc,%esp
80103307:	83 c3 0c             	add    $0xc,%ebx
8010330a:	50                   	push   %eax
8010330b:	ff 73 fc             	pushl  -0x4(%ebx)
8010330e:	56                   	push   %esi
8010330f:	57                   	push   %edi
80103310:	68 1c d5 10 80       	push   $0x8010d51c
80103315:	e8 76 d0 ff ff       	call   80100390 <cprintf>
	for (i = 0; list[i].attachfn; i++) {
8010331a:	8b 43 08             	mov    0x8(%ebx),%eax
				cprintf("pci_attach_match: attaching "
8010331d:	83 c4 20             	add    $0x20,%esp
	for (i = 0; list[i].attachfn; i++) {
80103320:	85 c0                	test   %eax,%eax
80103322:	75 c6                	jne    801032ea <pci_attach_match+0x2a>
80103324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
					"%x.%x (%p): e\n",
					key1, key2, list[i].attachfn, r);
		}
	}
	return 0;
80103328:	31 c0                	xor    %eax,%eax
}
8010332a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010332d:	5b                   	pop    %ebx
8010332e:	5e                   	pop    %esi
8010332f:	5f                   	pop    %edi
80103330:	5d                   	pop    %ebp
80103331:	c3                   	ret    
80103332:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80103340 <pci_conf1_set_addr>:
{
80103340:	55                   	push   %ebp
80103341:	89 e5                	mov    %esp,%ebp
80103343:	53                   	push   %ebx
80103344:	83 ec 04             	sub    $0x4,%esp
80103347:	8b 5d 08             	mov    0x8(%ebp),%ebx
	assert(bus < 256);
8010334a:	3d ff 00 00 00       	cmp    $0xff,%eax
8010334f:	77 31                	ja     80103382 <pci_conf1_set_addr+0x42>
	assert(dev < 32);
80103351:	83 fa 1f             	cmp    $0x1f,%edx
80103354:	77 53                	ja     801033a9 <pci_conf1_set_addr+0x69>
	assert(func < 8);
80103356:	83 f9 07             	cmp    $0x7,%ecx
80103359:	77 41                	ja     8010339c <pci_conf1_set_addr+0x5c>
	assert(offset < 256);
8010335b:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
80103361:	77 2c                	ja     8010338f <pci_conf1_set_addr+0x4f>
		(bus << 16) | (dev << 11) | (func << 8) | (offset);
80103363:	c1 e0 10             	shl    $0x10,%eax
80103366:	c1 e1 08             	shl    $0x8,%ecx
80103369:	09 d8                	or     %ebx,%eax
8010336b:	c1 e2 0b             	shl    $0xb,%edx
8010336e:	09 c8                	or     %ecx,%eax
80103370:	09 d0                	or     %edx,%eax
}

static inline void
outl(int port, uint data)
{
  asm volatile("outl %0,%w1" : : "a" (data), "d" (port));
80103372:	ba f8 0c 00 00       	mov    $0xcf8,%edx
	uint32_t v = (1 << 31) |		// config-space
80103377:	0d 00 00 00 80       	or     $0x80000000,%eax
8010337c:	ef                   	out    %eax,(%dx)
}
8010337d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103380:	c9                   	leave  
80103381:	c3                   	ret    
	assert(bus < 256);
80103382:	83 ec 0c             	sub    $0xc,%esp
80103385:	68 48 d5 10 80       	push   $0x8010d548
8010338a:	e8 91 d0 ff ff       	call   80100420 <panic>
	assert(offset < 256);
8010338f:	83 ec 0c             	sub    $0xc,%esp
80103392:	68 cc d5 10 80       	push   $0x8010d5cc
80103397:	e8 84 d0 ff ff       	call   80100420 <panic>
	assert(func < 8);
8010339c:	83 ec 0c             	sub    $0xc,%esp
8010339f:	68 a0 d5 10 80       	push   $0x8010d5a0
801033a4:	e8 77 d0 ff ff       	call   80100420 <panic>
	assert(dev < 32);
801033a9:	83 ec 0c             	sub    $0xc,%esp
801033ac:	68 74 d5 10 80       	push   $0x8010d574
801033b1:	e8 6a d0 ff ff       	call   80100420 <panic>
801033b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801033bd:	8d 76 00             	lea    0x0(%esi),%esi

801033c0 <pci_scan_bus>:
		f->irq_line);
}

static int
pci_scan_bus(struct pci_bus *bus)
{
801033c0:	55                   	push   %ebp
801033c1:	89 e5                	mov    %esp,%ebp
801033c3:	57                   	push   %edi
801033c4:	56                   	push   %esi
801033c5:	53                   	push   %ebx
801033c6:	89 c3                	mov    %eax,%ebx
	int totaldev = 0;
	struct pci_func df;
	memset(&df, 0, sizeof(df));
801033c8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
{
801033ce:	81 ec 00 01 00 00    	sub    $0x100,%esp
	memset(&df, 0, sizeof(df));
801033d4:	6a 48                	push   $0x48
801033d6:	6a 00                	push   $0x0
801033d8:	50                   	push   %eax
801033d9:	e8 e2 1d 00 00       	call   801051c0 <memset>
	df.bus = bus;
801033de:	89 9d 10 ff ff ff    	mov    %ebx,-0xf0(%ebp)

	for (df.dev = 0; df.dev < 32; df.dev++) {
801033e4:	83 c4 10             	add    $0x10,%esp
801033e7:	31 d2                	xor    %edx,%edx
801033e9:	c7 85 14 ff ff ff 00 	movl   $0x0,-0xec(%ebp)
801033f0:	00 00 00 
	int totaldev = 0;
801033f3:	c7 85 f8 fe ff ff 00 	movl   $0x0,-0x108(%ebp)
801033fa:	00 00 00 
801033fd:	eb 1f                	jmp    8010341e <pci_scan_bus+0x5e>
801033ff:	90                   	nop
	for (df.dev = 0; df.dev < 32; df.dev++) {
80103400:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
80103406:	8d 50 01             	lea    0x1(%eax),%edx
80103409:	89 95 14 ff ff ff    	mov    %edx,-0xec(%ebp)
8010340f:	83 fa 1f             	cmp    $0x1f,%edx
80103412:	0f 87 b8 01 00 00    	ja     801035d0 <pci_scan_bus+0x210>
80103418:	8b 9d 10 ff ff ff    	mov    -0xf0(%ebp),%ebx
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
8010341e:	83 ec 0c             	sub    $0xc,%esp
80103421:	8b 43 04             	mov    0x4(%ebx),%eax
80103424:	8b 8d 18 ff ff ff    	mov    -0xe8(%ebp),%ecx
8010342a:	6a 0c                	push   $0xc
8010342c:	e8 0f ff ff ff       	call   80103340 <pci_conf1_set_addr>
  asm volatile("inl %w1,%0" : "=a" (data) : "d" (port));
80103431:	ba fc 0c 00 00       	mov    $0xcfc,%edx
80103436:	ed                   	in     (%dx),%eax
		uint32_t bhlc = pci_conf_read(&df, PCI_BHLC_REG);
		if (PCI_HDRTYPE_TYPE(bhlc) > 1)	    // Unsupported or no device
80103437:	89 c3                	mov    %eax,%ebx
80103439:	83 c4 10             	add    $0x10,%esp
8010343c:	c1 eb 10             	shr    $0x10,%ebx
8010343f:	83 e3 7e             	and    $0x7e,%ebx
80103442:	75 bc                	jne    80103400 <pci_scan_bus+0x40>
			continue;

		totaldev++;

		struct pci_func f = df;
		for (f.func = 0; f.func < (PCI_HDRTYPE_MULTIFN(bhlc) ? 8 : 1);
80103444:	25 00 00 80 00       	and    $0x800000,%eax
		totaldev++;
80103449:	83 85 f8 fe ff ff 01 	addl   $0x1,-0x108(%ebp)
		struct pci_func f = df;
80103450:	b9 12 00 00 00       	mov    $0x12,%ecx
80103455:	83 f8 01             	cmp    $0x1,%eax
80103458:	8d bd 58 ff ff ff    	lea    -0xa8(%ebp),%edi
8010345e:	8d b5 10 ff ff ff    	lea    -0xf0(%ebp),%esi
80103464:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
80103466:	8b b5 10 ff ff ff    	mov    -0xf0(%ebp),%esi
8010346c:	19 c0                	sbb    %eax,%eax
8010346e:	83 e0 f9             	and    $0xfffffff9,%eax
80103471:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
80103477:	8b b5 14 ff ff ff    	mov    -0xec(%ebp),%esi
8010347d:	83 c0 08             	add    $0x8,%eax
80103480:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
80103486:	89 b5 00 ff ff ff    	mov    %esi,-0x100(%ebp)
		for (f.func = 0; f.func < (PCI_HDRTYPE_MULTIFN(bhlc) ? 8 : 1);
8010348c:	eb 05                	jmp    80103493 <pci_scan_bus+0xd3>
8010348e:	66 90                	xchg   %ax,%ax
		     f.func++) {
80103490:	83 c3 01             	add    $0x1,%ebx
		for (f.func = 0; f.func < (PCI_HDRTYPE_MULTIFN(bhlc) ? 8 : 1);
80103493:	39 9d 04 ff ff ff    	cmp    %ebx,-0xfc(%ebp)
80103499:	0f 84 61 ff ff ff    	je     80103400 <pci_scan_bus+0x40>
			struct pci_func af = f;
8010349f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
801034a5:	8b 95 00 ff ff ff    	mov    -0x100(%ebp),%edx
801034ab:	8d 7d a0             	lea    -0x60(%ebp),%edi
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801034ae:	83 ec 0c             	sub    $0xc,%esp
			struct pci_func af = f;
801034b1:	89 9d 60 ff ff ff    	mov    %ebx,-0xa0(%ebp)
801034b7:	8d b5 58 ff ff ff    	lea    -0xa8(%ebp),%esi
801034bd:	b9 12 00 00 00       	mov    $0x12,%ecx
801034c2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
801034c8:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%ebp)
801034ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801034d0:	89 d9                	mov    %ebx,%ecx
801034d2:	8b 40 04             	mov    0x4(%eax),%eax
801034d5:	6a 00                	push   $0x0
801034d7:	e8 64 fe ff ff       	call   80103340 <pci_conf1_set_addr>
801034dc:	ba fc 0c 00 00       	mov    $0xcfc,%edx
801034e1:	ed                   	in     (%dx),%eax

			af.dev_id = pci_conf_read(&f, PCI_ID_REG);
801034e2:	89 45 ac             	mov    %eax,-0x54(%ebp)
			if (PCI_VENDOR(af.dev_id) == 0xffff)
801034e5:	0f b7 c0             	movzwl %ax,%eax
801034e8:	83 c4 10             	add    $0x10,%esp
801034eb:	3d ff ff 00 00       	cmp    $0xffff,%eax
801034f0:	74 9e                	je     80103490 <pci_scan_bus+0xd0>
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801034f2:	8b 45 a0             	mov    -0x60(%ebp),%eax
801034f5:	83 ec 0c             	sub    $0xc,%esp
801034f8:	8b 55 a4             	mov    -0x5c(%ebp),%edx
801034fb:	8b 4d a8             	mov    -0x58(%ebp),%ecx
801034fe:	8b 40 04             	mov    0x4(%eax),%eax
80103501:	6a 3c                	push   $0x3c
80103503:	e8 38 fe ff ff       	call   80103340 <pci_conf1_set_addr>
80103508:	ba fc 0c 00 00       	mov    $0xcfc,%edx
8010350d:	ed                   	in     (%dx),%eax
8010350e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
80103511:	8b 4d a8             	mov    -0x58(%ebp),%ecx
				continue;

			uint32_t intr = pci_conf_read(&af, PCI_INTERRUPT_REG);
			af.irq_line = PCI_INTERRUPT_LINE(intr);
80103514:	88 45 e4             	mov    %al,-0x1c(%ebp)
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
80103517:	8b 45 a0             	mov    -0x60(%ebp),%eax
8010351a:	8b 40 04             	mov    0x4(%eax),%eax
8010351d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
80103524:	e8 17 fe ff ff       	call   80103340 <pci_conf1_set_addr>
80103529:	ba fc 0c 00 00       	mov    $0xcfc,%edx
8010352e:	ed                   	in     (%dx),%eax
	if (PCI_CLASS(f->dev_class) < ARRAY_SIZE(pci_class))
8010352f:	89 c1                	mov    %eax,%ecx

			af.dev_class = pci_conf_read(&af, PCI_CLASS_REG);
80103531:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (PCI_CLASS(f->dev_class) < ARRAY_SIZE(pci_class))
80103534:	83 c4 10             	add    $0x10,%esp
	const char *class = pci_class[0];
80103537:	be 47 d7 10 80       	mov    $0x8010d747,%esi
	if (PCI_CLASS(f->dev_class) < ARRAY_SIZE(pci_class))
8010353c:	c1 e9 18             	shr    $0x18,%ecx
8010353f:	3d ff ff ff 06       	cmp    $0x6ffffff,%eax
80103544:	77 07                	ja     8010354d <pci_scan_bus+0x18d>
		class = pci_class[PCI_CLASS(f->dev_class)];
80103546:	8b 34 8d ec d7 10 80 	mov    -0x7fef2814(,%ecx,4),%esi
		PCI_VENDOR(f->dev_id), PCI_PRODUCT(f->dev_id),
8010354d:	8b 55 ac             	mov    -0x54(%ebp),%edx
	cprintf("PCI: %02x:%02x.%d: %04x:%04x: class: %x.%x (%s) irq: %d\n",
80103550:	0f b6 7d e4          	movzbl -0x1c(%ebp),%edi
		PCI_CLASS(f->dev_class), PCI_SUBCLASS(f->dev_class), class,
80103554:	c1 e8 10             	shr    $0x10,%eax
	cprintf("PCI: %02x:%02x.%d: %04x:%04x: class: %x.%x (%s) irq: %d\n",
80103557:	83 ec 08             	sub    $0x8,%esp
8010355a:	0f b6 c0             	movzbl %al,%eax
8010355d:	57                   	push   %edi
		pci_attach_match(PCI_CLASS(f->dev_class),
8010355e:	8d 7d a0             	lea    -0x60(%ebp),%edi
	cprintf("PCI: %02x:%02x.%d: %04x:%04x: class: %x.%x (%s) irq: %d\n",
80103561:	56                   	push   %esi
80103562:	50                   	push   %eax
80103563:	89 d0                	mov    %edx,%eax
80103565:	0f b7 d2             	movzwl %dx,%edx
80103568:	c1 e8 10             	shr    $0x10,%eax
8010356b:	51                   	push   %ecx
8010356c:	50                   	push   %eax
8010356d:	8b 45 a0             	mov    -0x60(%ebp),%eax
80103570:	52                   	push   %edx
80103571:	ff 75 a8             	pushl  -0x58(%ebp)
80103574:	ff 75 a4             	pushl  -0x5c(%ebp)
80103577:	ff 70 04             	pushl  0x4(%eax)
8010357a:	68 fc d5 10 80       	push   $0x8010d5fc
8010357f:	e8 0c ce ff ff       	call   80100390 <cprintf>
				 PCI_SUBCLASS(f->dev_class),
80103584:	8b 45 b0             	mov    -0x50(%ebp),%eax
		pci_attach_match(PCI_CLASS(f->dev_class),
80103587:	83 c4 30             	add    $0x30,%esp
8010358a:	57                   	push   %edi
				 PCI_SUBCLASS(f->dev_class),
8010358b:	89 c2                	mov    %eax,%edx
		pci_attach_match(PCI_CLASS(f->dev_class),
8010358d:	c1 e8 18             	shr    $0x18,%eax
80103590:	68 18 10 11 80       	push   $0x80111018
				 PCI_SUBCLASS(f->dev_class),
80103595:	c1 ea 10             	shr    $0x10,%edx
		pci_attach_match(PCI_CLASS(f->dev_class),
80103598:	0f b6 d2             	movzbl %dl,%edx
8010359b:	52                   	push   %edx
8010359c:	50                   	push   %eax
8010359d:	e8 1e fd ff ff       	call   801032c0 <pci_attach_match>
				 &pci_attach_class[0], f) ||
801035a2:	83 c4 10             	add    $0x10,%esp
801035a5:	85 c0                	test   %eax,%eax
801035a7:	0f 85 e3 fe ff ff    	jne    80103490 <pci_scan_bus+0xd0>
				 PCI_PRODUCT(f->dev_id),
801035ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
		pci_attach_match(PCI_VENDOR(f->dev_id),
801035b0:	57                   	push   %edi
801035b1:	68 00 10 11 80       	push   $0x80111000
801035b6:	89 c2                	mov    %eax,%edx
801035b8:	0f b7 c0             	movzwl %ax,%eax
801035bb:	c1 ea 10             	shr    $0x10,%edx
801035be:	52                   	push   %edx
801035bf:	50                   	push   %eax
801035c0:	e8 fb fc ff ff       	call   801032c0 <pci_attach_match>
801035c5:	83 c4 10             	add    $0x10,%esp
801035c8:	e9 c3 fe ff ff       	jmp    80103490 <pci_scan_bus+0xd0>
801035cd:	8d 76 00             	lea    0x0(%esi),%esi
			pci_attach(&af);
		}
	}

	return totaldev;
}
801035d0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
801035d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801035d9:	5b                   	pop    %ebx
801035da:	5e                   	pop    %esi
801035db:	5f                   	pop    %edi
801035dc:	5d                   	pop    %ebp
801035dd:	c3                   	ret    
801035de:	66 90                	xchg   %ax,%ax

801035e0 <pci_bridge_attach>:

static int
pci_bridge_attach(struct pci_func *pcif)
{
801035e0:	f3 0f 1e fb          	endbr32 
801035e4:	55                   	push   %ebp
801035e5:	89 e5                	mov    %esp,%ebp
801035e7:	57                   	push   %edi
801035e8:	56                   	push   %esi
801035e9:	be fc 0c 00 00       	mov    $0xcfc,%esi
801035ee:	53                   	push   %ebx
801035ef:	83 ec 28             	sub    $0x28,%esp
801035f2:	8b 5d 08             	mov    0x8(%ebp),%ebx
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801035f5:	8b 03                	mov    (%ebx),%eax
801035f7:	8b 53 04             	mov    0x4(%ebx),%edx
801035fa:	8b 4b 08             	mov    0x8(%ebx),%ecx
801035fd:	8b 40 04             	mov    0x4(%eax),%eax
80103600:	6a 1c                	push   $0x1c
80103602:	e8 39 fd ff ff       	call   80103340 <pci_conf1_set_addr>
80103607:	89 f2                	mov    %esi,%edx
80103609:	ed                   	in     (%dx),%eax
8010360a:	89 c7                	mov    %eax,%edi
8010360c:	8b 03                	mov    (%ebx),%eax
8010360e:	8b 53 04             	mov    0x4(%ebx),%edx
80103611:	8b 4b 08             	mov    0x8(%ebx),%ecx
80103614:	8b 40 04             	mov    0x4(%eax),%eax
80103617:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
8010361e:	e8 1d fd ff ff       	call   80103340 <pci_conf1_set_addr>
80103623:	89 f2                	mov    %esi,%edx
80103625:	ed                   	in     (%dx),%eax
80103626:	89 c6                	mov    %eax,%esi
	uint32_t ioreg  = pci_conf_read(pcif, PCI_BRIDGE_STATIO_REG);
	uint32_t busreg = pci_conf_read(pcif, PCI_BRIDGE_BUS_REG);

	if (PCI_BRIDGE_IO_32BITS(ioreg)) {
80103628:	89 f8                	mov    %edi,%eax
8010362a:	83 c4 10             	add    $0x10,%esp
8010362d:	83 e0 0f             	and    $0xf,%eax
80103630:	83 f8 01             	cmp    $0x1,%eax
80103633:	74 5b                	je     80103690 <pci_bridge_attach+0xb0>
			pcif->bus->busno, pcif->dev, pcif->func);
		return 0;
	}

	struct pci_bus nbus;
	memset(&nbus, 0, sizeof(nbus));
80103635:	83 ec 04             	sub    $0x4,%esp
80103638:	8d 7d e0             	lea    -0x20(%ebp),%edi
8010363b:	6a 08                	push   $0x8
8010363d:	6a 00                	push   $0x0
8010363f:	57                   	push   %edi
80103640:	e8 7b 1b 00 00       	call   801051c0 <memset>
	nbus.parent_bridge = pcif;
	nbus.busno = (busreg >> PCI_BRIDGE_BUS_SECONDARY_SHIFT) & 0xff;
80103645:	89 f0                	mov    %esi,%eax

	if (pci_show_devs)
		cprintf("PCI: %02x:%02x.%d: bridge to PCI bus %d--%d\n",
80103647:	59                   	pop    %ecx
80103648:	5e                   	pop    %esi
	nbus.busno = (busreg >> PCI_BRIDGE_BUS_SECONDARY_SHIFT) & 0xff;
80103649:	0f b6 d4             	movzbl %ah,%edx
			pcif->bus->busno, pcif->dev, pcif->func,
			nbus.busno,
			(busreg >> PCI_BRIDGE_BUS_SUBORDINATE_SHIFT) & 0xff);
8010364c:	c1 e8 10             	shr    $0x10,%eax
	nbus.parent_bridge = pcif;
8010364f:	89 5d e0             	mov    %ebx,-0x20(%ebp)
		cprintf("PCI: %02x:%02x.%d: bridge to PCI bus %d--%d\n",
80103652:	0f b6 c0             	movzbl %al,%eax
	nbus.busno = (busreg >> PCI_BRIDGE_BUS_SECONDARY_SHIFT) & 0xff;
80103655:	89 55 e4             	mov    %edx,-0x1c(%ebp)
		cprintf("PCI: %02x:%02x.%d: bridge to PCI bus %d--%d\n",
80103658:	50                   	push   %eax
80103659:	52                   	push   %edx
8010365a:	ff 73 08             	pushl  0x8(%ebx)
8010365d:	ff 73 04             	pushl  0x4(%ebx)
80103660:	8b 03                	mov    (%ebx),%eax
80103662:	ff 70 04             	pushl  0x4(%eax)
80103665:	68 6c d6 10 80       	push   $0x8010d66c
8010366a:	e8 21 cd ff ff       	call   80100390 <cprintf>

	pci_scan_bus(&nbus);
8010366f:	83 c4 20             	add    $0x20,%esp
80103672:	89 f8                	mov    %edi,%eax
80103674:	e8 47 fd ff ff       	call   801033c0 <pci_scan_bus>
	return 1;
}
80103679:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 1;
8010367c:	b8 01 00 00 00       	mov    $0x1,%eax
}
80103681:	5b                   	pop    %ebx
80103682:	5e                   	pop    %esi
80103683:	5f                   	pop    %edi
80103684:	5d                   	pop    %ebp
80103685:	c3                   	ret    
80103686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010368d:	8d 76 00             	lea    0x0(%esi),%esi
		cprintf("PCI: %02x:%02x.%d: 32-bit bridge IO not supported.\n",
80103690:	ff 73 08             	pushl  0x8(%ebx)
80103693:	ff 73 04             	pushl  0x4(%ebx)
80103696:	8b 03                	mov    (%ebx),%eax
80103698:	ff 70 04             	pushl  0x4(%eax)
8010369b:	68 38 d6 10 80       	push   $0x8010d638
801036a0:	e8 eb cc ff ff       	call   80100390 <cprintf>
		return 0;
801036a5:	83 c4 10             	add    $0x10,%esp
}
801036a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
		return 0;
801036ab:	31 c0                	xor    %eax,%eax
}
801036ad:	5b                   	pop    %ebx
801036ae:	5e                   	pop    %esi
801036af:	5f                   	pop    %edi
801036b0:	5d                   	pop    %ebp
801036b1:	c3                   	ret    
801036b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801036b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801036c0 <pci_func_enable>:

// External PCI subsystem interface

void
pci_func_enable(struct pci_func *f)
{
801036c0:	f3 0f 1e fb          	endbr32 
801036c4:	55                   	push   %ebp
801036c5:	89 e5                	mov    %esp,%ebp
801036c7:	57                   	push   %edi
801036c8:	56                   	push   %esi
801036c9:	53                   	push   %ebx
801036ca:	83 ec 28             	sub    $0x28,%esp
801036cd:	8b 7d 08             	mov    0x8(%ebp),%edi
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801036d0:	8b 07                	mov    (%edi),%eax
801036d2:	8b 57 04             	mov    0x4(%edi),%edx
801036d5:	8b 4f 08             	mov    0x8(%edi),%ecx
801036d8:	8b 40 04             	mov    0x4(%eax),%eax
801036db:	6a 04                	push   $0x4
801036dd:	e8 5e fc ff ff       	call   80103340 <pci_conf1_set_addr>
  asm volatile("outl %0,%w1" : : "a" (data), "d" (port));
801036e2:	b8 07 00 00 00       	mov    $0x7,%eax
801036e7:	ba fc 0c 00 00       	mov    $0xcfc,%edx
801036ec:	ef                   	out    %eax,(%dx)
		       PCI_COMMAND_MEM_ENABLE |
		       PCI_COMMAND_MASTER_ENABLE);

	uint32_t bar_width;
	uint32_t bar;
	for (bar = PCI_MAPREG_START; bar < PCI_MAPREG_END;
801036ed:	be 10 00 00 00       	mov    $0x10,%esi
801036f2:	83 c4 10             	add    $0x10,%esp
801036f5:	e9 d0 00 00 00       	jmp    801037ca <pci_func_enable+0x10a>
801036fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi


		int regnum = PCI_MAPREG_NUM(bar);
		uint32_t base, size;
		if (PCI_MAPREG_TYPE(rv) == PCI_MAPREG_TYPE_MEM) {
			if (PCI_MAPREG_MEM_TYPE(rv) == PCI_MAPREG_MEM_TYPE_64BIT)
80103700:	89 c2                	mov    %eax,%edx
		bar_width = 4;
80103702:	31 db                	xor    %ebx,%ebx
				bar_width = 8;

			size = PCI_MAPREG_MEM_SIZE(rv);
			base = PCI_MAPREG_MEM_ADDR(oldv);
80103704:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
			if (PCI_MAPREG_MEM_TYPE(rv) == PCI_MAPREG_MEM_TYPE_64BIT)
80103707:	83 e2 06             	and    $0x6,%edx
		bar_width = 4;
8010370a:	83 fa 04             	cmp    $0x4,%edx
8010370d:	0f 94 c3             	sete   %bl
			base = PCI_MAPREG_MEM_ADDR(oldv);
80103710:	83 e1 f0             	and    $0xfffffff0,%ecx
		bar_width = 4;
80103713:	8d 1c 9d 04 00 00 00 	lea    0x4(,%ebx,4),%ebx
			base = PCI_MAPREG_MEM_ADDR(oldv);
8010371a:	89 4d d8             	mov    %ecx,-0x28(%ebp)
		bar_width = 4;
8010371d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
			size = PCI_MAPREG_MEM_SIZE(rv);
80103720:	89 c3                	mov    %eax,%ebx
80103722:	83 e3 f0             	and    $0xfffffff0,%ebx
80103725:	f7 db                	neg    %ebx
80103727:	21 c3                	and    %eax,%ebx
			if (pci_show_addrs)
				cprintf("  io region %d: %d bytes at 0x%x\n",
					regnum, size, base);
		}

		cprintf(">>>>debug>>> rv = %x\t bar = %x", rv, bar);
80103729:	83 ec 04             	sub    $0x4,%esp
8010372c:	56                   	push   %esi
8010372d:	50                   	push   %eax
8010372e:	68 9c d6 10 80       	push   $0x8010d69c
80103733:	e8 58 cc ff ff       	call   80100390 <cprintf>
		cprintf("\t base = %x\t size = %x", base, size);
80103738:	83 c4 0c             	add    $0xc,%esp
8010373b:	53                   	push   %ebx
8010373c:	ff 75 d8             	pushl  -0x28(%ebp)
8010373f:	68 4f d7 10 80       	push   $0x8010d74f
80103744:	e8 47 cc ff ff       	call   80100390 <cprintf>
		cprintf("\t oldv = %x\t regnum = %x\n", oldv, regnum);
80103749:	83 c4 0c             	add    $0xc,%esp
8010374c:	ff 75 dc             	pushl  -0x24(%ebp)
8010374f:	ff 75 e4             	pushl  -0x1c(%ebp)
80103752:	68 66 d7 10 80       	push   $0x8010d766
80103757:	e8 34 cc ff ff       	call   80100390 <cprintf>
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
8010375c:	8b 07                	mov    (%edi),%eax
8010375e:	8b 57 04             	mov    0x4(%edi),%edx
80103761:	8b 4f 08             	mov    0x8(%edi),%ecx
80103764:	8b 40 04             	mov    0x4(%eax),%eax
80103767:	89 34 24             	mov    %esi,(%esp)
8010376a:	e8 d1 fb ff ff       	call   80103340 <pci_conf1_set_addr>
8010376f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103772:	ba fc 0c 00 00       	mov    $0xcfc,%edx
80103777:	ef                   	out    %eax,(%dx)


		pci_conf_write(f, bar, oldv);
		f->reg_base[regnum] = base;
80103778:	8b 55 dc             	mov    -0x24(%ebp),%edx
8010377b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
		f->reg_size[regnum] = size;

		if (size && !base)
8010377e:	83 c4 10             	add    $0x10,%esp
80103781:	8d 04 97             	lea    (%edi,%edx,4),%eax
		f->reg_base[regnum] = base;
80103784:	89 48 14             	mov    %ecx,0x14(%eax)
		f->reg_size[regnum] = size;
80103787:	89 58 2c             	mov    %ebx,0x2c(%eax)
		if (size && !base)
8010378a:	85 db                	test   %ebx,%ebx
8010378c:	74 30                	je     801037be <pci_func_enable+0xfe>
8010378e:	85 c9                	test   %ecx,%ecx
80103790:	75 2c                	jne    801037be <pci_func_enable+0xfe>
			cprintf("PCI device %02x:%02x.%d (%04x:%04x) "
				"may be misconfigured: "
				"region %d: base 0x%x, size %d\n",
				f->bus->busno, f->dev, f->func,
				PCI_VENDOR(f->dev_id), PCI_PRODUCT(f->dev_id),
80103792:	8b 47 0c             	mov    0xc(%edi),%eax
			cprintf("PCI device %02x:%02x.%d (%04x:%04x) "
80103795:	83 ec 0c             	sub    $0xc,%esp
80103798:	53                   	push   %ebx
80103799:	6a 00                	push   $0x0
8010379b:	52                   	push   %edx
8010379c:	89 c2                	mov    %eax,%edx
8010379e:	0f b7 c0             	movzwl %ax,%eax
801037a1:	c1 ea 10             	shr    $0x10,%edx
801037a4:	52                   	push   %edx
801037a5:	50                   	push   %eax
801037a6:	ff 77 08             	pushl  0x8(%edi)
801037a9:	ff 77 04             	pushl  0x4(%edi)
801037ac:	8b 07                	mov    (%edi),%eax
801037ae:	ff 70 04             	pushl  0x4(%eax)
801037b1:	68 bc d6 10 80       	push   $0x8010d6bc
801037b6:	e8 d5 cb ff ff       	call   80100390 <cprintf>
801037bb:	83 c4 30             	add    $0x30,%esp
	     bar += bar_width)
801037be:	03 75 e0             	add    -0x20(%ebp),%esi
	for (bar = PCI_MAPREG_START; bar < PCI_MAPREG_END;
801037c1:	83 fe 27             	cmp    $0x27,%esi
801037c4:	0f 87 8e 00 00 00    	ja     80103858 <pci_func_enable+0x198>
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801037ca:	8b 07                	mov    (%edi),%eax
801037cc:	83 ec 0c             	sub    $0xc,%esp
801037cf:	8b 57 04             	mov    0x4(%edi),%edx
801037d2:	8b 4f 08             	mov    0x8(%edi),%ecx
801037d5:	8b 40 04             	mov    0x4(%eax),%eax
801037d8:	56                   	push   %esi
801037d9:	e8 62 fb ff ff       	call   80103340 <pci_conf1_set_addr>
  asm volatile("inl %w1,%0" : "=a" (data) : "d" (port));
801037de:	ba fc 0c 00 00       	mov    $0xcfc,%edx
801037e3:	ed                   	in     (%dx),%eax
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
801037e4:	8b 57 04             	mov    0x4(%edi),%edx
801037e7:	8b 4f 08             	mov    0x8(%edi),%ecx
801037ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801037ed:	8b 07                	mov    (%edi),%eax
801037ef:	8b 40 04             	mov    0x4(%eax),%eax
801037f2:	89 34 24             	mov    %esi,(%esp)
801037f5:	e8 46 fb ff ff       	call   80103340 <pci_conf1_set_addr>
  asm volatile("outl %0,%w1" : : "a" (data), "d" (port));
801037fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801037ff:	ba fc 0c 00 00       	mov    $0xcfc,%edx
80103804:	ef                   	out    %eax,(%dx)
	pci_conf1_set_addr(f->bus->busno, f->dev, f->func, off);
80103805:	8b 07                	mov    (%edi),%eax
80103807:	8b 57 04             	mov    0x4(%edi),%edx
8010380a:	8b 4f 08             	mov    0x8(%edi),%ecx
8010380d:	8b 40 04             	mov    0x4(%eax),%eax
80103810:	89 34 24             	mov    %esi,(%esp)
80103813:	e8 28 fb ff ff       	call   80103340 <pci_conf1_set_addr>
  asm volatile("inl %w1,%0" : "=a" (data) : "d" (port));
80103818:	ba fc 0c 00 00       	mov    $0xcfc,%edx
8010381d:	ed                   	in     (%dx),%eax
		bar_width = 4;
8010381e:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
		if (rv == 0) {
80103825:	83 c4 10             	add    $0x10,%esp
80103828:	85 c0                	test   %eax,%eax
8010382a:	74 92                	je     801037be <pci_func_enable+0xfe>
		int regnum = PCI_MAPREG_NUM(bar);
8010382c:	8d 56 f0             	lea    -0x10(%esi),%edx
8010382f:	c1 ea 02             	shr    $0x2,%edx
80103832:	89 55 dc             	mov    %edx,-0x24(%ebp)
		if (PCI_MAPREG_TYPE(rv) == PCI_MAPREG_TYPE_MEM) {
80103835:	a8 01                	test   $0x1,%al
80103837:	0f 84 c3 fe ff ff    	je     80103700 <pci_func_enable+0x40>
			base = PCI_MAPREG_IO_ADDR(oldv);
8010383d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
			size = PCI_MAPREG_IO_SIZE(rv);
80103840:	89 c3                	mov    %eax,%ebx
80103842:	83 e3 fc             	and    $0xfffffffc,%ebx
80103845:	f7 db                	neg    %ebx
			base = PCI_MAPREG_IO_ADDR(oldv);
80103847:	83 e1 fc             	and    $0xfffffffc,%ecx
8010384a:	89 4d d8             	mov    %ecx,-0x28(%ebp)
			size = PCI_MAPREG_IO_SIZE(rv);
8010384d:	21 c3                	and    %eax,%ebx
			if (pci_show_addrs)
8010384f:	e9 d5 fe ff ff       	jmp    80103729 <pci_func_enable+0x69>
80103854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
				regnum, base, size);
	}

	cprintf("PCI function %02x:%02x.%d (%04x:%04x) enabled\n",
		f->bus->busno, f->dev, f->func,
		PCI_VENDOR(f->dev_id), PCI_PRODUCT(f->dev_id));
80103858:	8b 47 0c             	mov    0xc(%edi),%eax
	cprintf("PCI function %02x:%02x.%d (%04x:%04x) enabled\n",
8010385b:	83 ec 08             	sub    $0x8,%esp
8010385e:	89 c2                	mov    %eax,%edx
80103860:	0f b7 c0             	movzwl %ax,%eax
80103863:	c1 ea 10             	shr    $0x10,%edx
80103866:	52                   	push   %edx
80103867:	50                   	push   %eax
80103868:	ff 77 08             	pushl  0x8(%edi)
8010386b:	ff 77 04             	pushl  0x4(%edi)
8010386e:	8b 07                	mov    (%edi),%eax
80103870:	ff 70 04             	pushl  0x4(%eax)
80103873:	68 18 d7 10 80       	push   $0x8010d718
80103878:	e8 13 cb ff ff       	call   80100390 <cprintf>
}
8010387d:	83 c4 20             	add    $0x20,%esp
80103880:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103883:	5b                   	pop    %ebx
80103884:	5e                   	pop    %esi
80103885:	5f                   	pop    %edi
80103886:	5d                   	pop    %ebp
80103887:	c3                   	ret    
80103888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010388f:	90                   	nop

80103890 <pciinit>:
	return pci_scan_bus(&root_bus);
}

void
pciinit(void)
{
80103890:	f3 0f 1e fb          	endbr32 
80103894:	55                   	push   %ebp
80103895:	89 e5                	mov    %esp,%ebp
80103897:	83 ec 0c             	sub    $0xc,%esp
	memset(&root_bus, 0, sizeof(root_bus));
8010389a:	6a 08                	push   $0x8
8010389c:	6a 00                	push   $0x0
8010389e:	68 f8 15 11 80       	push   $0x801115f8
801038a3:	e8 18 19 00 00       	call   801051c0 <memset>
	return pci_scan_bus(&root_bus);
801038a8:	83 c4 10             	add    $0x10,%esp
801038ab:	b8 f8 15 11 80       	mov    $0x801115f8,%eax
	(void)pci_init();
}
801038b0:	c9                   	leave  
	return pci_scan_bus(&root_bus);
801038b1:	e9 0a fb ff ff       	jmp    801033c0 <pci_scan_bus>
801038b6:	66 90                	xchg   %ax,%ax
801038b8:	66 90                	xchg   %ax,%ax
801038ba:	66 90                	xchg   %ax,%ax
801038bc:	66 90                	xchg   %ax,%ax
801038be:	66 90                	xchg   %ax,%ax

801038c0 <picinit>:
#define IO_PIC2         0xA0    // Slave (IRQs 8-15)

// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
void
picinit(void)
{
801038c0:	f3 0f 1e fb          	endbr32 
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801038c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801038c9:	ba 21 00 00 00       	mov    $0x21,%edx
801038ce:	ee                   	out    %al,(%dx)
801038cf:	ba a1 00 00 00       	mov    $0xa1,%edx
801038d4:	ee                   	out    %al,(%dx)
  // mask all interrupts
  outb(IO_PIC1+1, 0xFF);
  outb(IO_PIC2+1, 0xFF);
}
801038d5:	c3                   	ret    
801038d6:	66 90                	xchg   %ax,%ax
801038d8:	66 90                	xchg   %ax,%ax
801038da:	66 90                	xchg   %ax,%ax
801038dc:	66 90                	xchg   %ax,%ax
801038de:	66 90                	xchg   %ax,%ax

801038e0 <pipealloc>:
  int writeopen;  // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
801038e0:	f3 0f 1e fb          	endbr32 
801038e4:	55                   	push   %ebp
801038e5:	89 e5                	mov    %esp,%ebp
801038e7:	57                   	push   %edi
801038e8:	56                   	push   %esi
801038e9:	53                   	push   %ebx
801038ea:	83 ec 0c             	sub    $0xc,%esp
801038ed:	8b 5d 08             	mov    0x8(%ebp),%ebx
801038f0:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct pipe *p;

  p = 0;
  *f0 = *f1 = 0;
801038f3:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
801038f9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
801038ff:	e8 6c d3 ff ff       	call   80100c70 <filealloc>
80103904:	89 03                	mov    %eax,(%ebx)
80103906:	85 c0                	test   %eax,%eax
80103908:	0f 84 ac 00 00 00    	je     801039ba <pipealloc+0xda>
8010390e:	e8 5d d3 ff ff       	call   80100c70 <filealloc>
80103913:	89 06                	mov    %eax,(%esi)
80103915:	85 c0                	test   %eax,%eax
80103917:	0f 84 8b 00 00 00    	je     801039a8 <pipealloc+0xc8>
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
8010391d:	e8 ee eb ff ff       	call   80102510 <kalloc>
80103922:	89 c7                	mov    %eax,%edi
80103924:	85 c0                	test   %eax,%eax
80103926:	0f 84 b4 00 00 00    	je     801039e0 <pipealloc+0x100>
    goto bad;
  p->readopen = 1;
8010392c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
80103933:	00 00 00 
  p->writeopen = 1;
  p->nwrite = 0;
  p->nread = 0;
  initlock(&p->lock, "pipe");
80103936:	83 ec 08             	sub    $0x8,%esp
  p->writeopen = 1;
80103939:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
80103940:	00 00 00 
  p->nwrite = 0;
80103943:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
8010394a:	00 00 00 
  p->nread = 0;
8010394d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
80103954:	00 00 00 
  initlock(&p->lock, "pipe");
80103957:	68 08 d8 10 80       	push   $0x8010d808
8010395c:	50                   	push   %eax
8010395d:	e8 ce 15 00 00       	call   80104f30 <initlock>
  (*f0)->type = FD_PIPE;
80103962:	8b 03                	mov    (%ebx),%eax
  (*f0)->pipe = p;
  (*f1)->type = FD_PIPE;
  (*f1)->readable = 0;
  (*f1)->writable = 1;
  (*f1)->pipe = p;
  return 0;
80103964:	83 c4 10             	add    $0x10,%esp
  (*f0)->type = FD_PIPE;
80103967:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f0)->readable = 1;
8010396d:	8b 03                	mov    (%ebx),%eax
8010396f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
  (*f0)->writable = 0;
80103973:	8b 03                	mov    (%ebx),%eax
80103975:	c6 40 09 00          	movb   $0x0,0x9(%eax)
  (*f0)->pipe = p;
80103979:	8b 03                	mov    (%ebx),%eax
8010397b:	89 78 0c             	mov    %edi,0xc(%eax)
  (*f1)->type = FD_PIPE;
8010397e:	8b 06                	mov    (%esi),%eax
80103980:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f1)->readable = 0;
80103986:	8b 06                	mov    (%esi),%eax
80103988:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  (*f1)->writable = 1;
8010398c:	8b 06                	mov    (%esi),%eax
8010398e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  (*f1)->pipe = p;
80103992:	8b 06                	mov    (%esi),%eax
80103994:	89 78 0c             	mov    %edi,0xc(%eax)
  if(*f0)
    fileclose(*f0);
  if(*f1)
    fileclose(*f1);
  return -1;
}
80103997:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
8010399a:	31 c0                	xor    %eax,%eax
}
8010399c:	5b                   	pop    %ebx
8010399d:	5e                   	pop    %esi
8010399e:	5f                   	pop    %edi
8010399f:	5d                   	pop    %ebp
801039a0:	c3                   	ret    
801039a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if(*f0)
801039a8:	8b 03                	mov    (%ebx),%eax
801039aa:	85 c0                	test   %eax,%eax
801039ac:	74 1e                	je     801039cc <pipealloc+0xec>
    fileclose(*f0);
801039ae:	83 ec 0c             	sub    $0xc,%esp
801039b1:	50                   	push   %eax
801039b2:	e8 79 d3 ff ff       	call   80100d30 <fileclose>
801039b7:	83 c4 10             	add    $0x10,%esp
  if(*f1)
801039ba:	8b 06                	mov    (%esi),%eax
801039bc:	85 c0                	test   %eax,%eax
801039be:	74 0c                	je     801039cc <pipealloc+0xec>
    fileclose(*f1);
801039c0:	83 ec 0c             	sub    $0xc,%esp
801039c3:	50                   	push   %eax
801039c4:	e8 67 d3 ff ff       	call   80100d30 <fileclose>
801039c9:	83 c4 10             	add    $0x10,%esp
}
801039cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return -1;
801039cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801039d4:	5b                   	pop    %ebx
801039d5:	5e                   	pop    %esi
801039d6:	5f                   	pop    %edi
801039d7:	5d                   	pop    %ebp
801039d8:	c3                   	ret    
801039d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if(*f0)
801039e0:	8b 03                	mov    (%ebx),%eax
801039e2:	85 c0                	test   %eax,%eax
801039e4:	75 c8                	jne    801039ae <pipealloc+0xce>
801039e6:	eb d2                	jmp    801039ba <pipealloc+0xda>
801039e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801039ef:	90                   	nop

801039f0 <pipeclose>:

void
pipeclose(struct pipe *p, int writable)
{
801039f0:	f3 0f 1e fb          	endbr32 
801039f4:	55                   	push   %ebp
801039f5:	89 e5                	mov    %esp,%ebp
801039f7:	56                   	push   %esi
801039f8:	53                   	push   %ebx
801039f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
801039fc:	8b 75 0c             	mov    0xc(%ebp),%esi
  acquire(&p->lock);
801039ff:	83 ec 0c             	sub    $0xc,%esp
80103a02:	53                   	push   %ebx
80103a03:	e8 a8 16 00 00       	call   801050b0 <acquire>
  if(writable){
80103a08:	83 c4 10             	add    $0x10,%esp
80103a0b:	85 f6                	test   %esi,%esi
80103a0d:	74 41                	je     80103a50 <pipeclose+0x60>
    p->writeopen = 0;
    wakeup(&p->nread);
80103a0f:	83 ec 0c             	sub    $0xc,%esp
80103a12:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
    p->writeopen = 0;
80103a18:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
80103a1f:	00 00 00 
    wakeup(&p->nread);
80103a22:	50                   	push   %eax
80103a23:	e8 08 12 00 00       	call   80104c30 <wakeup>
80103a28:	83 c4 10             	add    $0x10,%esp
  } else {
    p->readopen = 0;
    wakeup(&p->nwrite);
  }
  if(p->readopen == 0 && p->writeopen == 0){
80103a2b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
80103a31:	85 d2                	test   %edx,%edx
80103a33:	75 0a                	jne    80103a3f <pipeclose+0x4f>
80103a35:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
80103a3b:	85 c0                	test   %eax,%eax
80103a3d:	74 31                	je     80103a70 <pipeclose+0x80>
    release(&p->lock);
    kfree((char*)p);
  } else
    release(&p->lock);
80103a3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
80103a42:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103a45:	5b                   	pop    %ebx
80103a46:	5e                   	pop    %esi
80103a47:	5d                   	pop    %ebp
    release(&p->lock);
80103a48:	e9 23 17 00 00       	jmp    80105170 <release>
80103a4d:	8d 76 00             	lea    0x0(%esi),%esi
    wakeup(&p->nwrite);
80103a50:	83 ec 0c             	sub    $0xc,%esp
80103a53:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
    p->readopen = 0;
80103a59:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
80103a60:	00 00 00 
    wakeup(&p->nwrite);
80103a63:	50                   	push   %eax
80103a64:	e8 c7 11 00 00       	call   80104c30 <wakeup>
80103a69:	83 c4 10             	add    $0x10,%esp
80103a6c:	eb bd                	jmp    80103a2b <pipeclose+0x3b>
80103a6e:	66 90                	xchg   %ax,%ax
    release(&p->lock);
80103a70:	83 ec 0c             	sub    $0xc,%esp
80103a73:	53                   	push   %ebx
80103a74:	e8 f7 16 00 00       	call   80105170 <release>
    kfree((char*)p);
80103a79:	89 5d 08             	mov    %ebx,0x8(%ebp)
80103a7c:	83 c4 10             	add    $0x10,%esp
}
80103a7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103a82:	5b                   	pop    %ebx
80103a83:	5e                   	pop    %esi
80103a84:	5d                   	pop    %ebp
    kfree((char*)p);
80103a85:	e9 c6 e8 ff ff       	jmp    80102350 <kfree>
80103a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80103a90 <pipewrite>:

//PAGEBREAK: 40
int
pipewrite(struct pipe *p, char *addr, int n)
{
80103a90:	f3 0f 1e fb          	endbr32 
80103a94:	55                   	push   %ebp
80103a95:	89 e5                	mov    %esp,%ebp
80103a97:	57                   	push   %edi
80103a98:	56                   	push   %esi
80103a99:	53                   	push   %ebx
80103a9a:	83 ec 28             	sub    $0x28,%esp
80103a9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  int i;

  acquire(&p->lock);
80103aa0:	53                   	push   %ebx
80103aa1:	e8 0a 16 00 00       	call   801050b0 <acquire>
  for(i = 0; i < n; i++){
80103aa6:	8b 45 10             	mov    0x10(%ebp),%eax
80103aa9:	83 c4 10             	add    $0x10,%esp
80103aac:	85 c0                	test   %eax,%eax
80103aae:	0f 8e bc 00 00 00    	jle    80103b70 <pipewrite+0xe0>
80103ab4:	8b 45 0c             	mov    0xc(%ebp),%eax
80103ab7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
      if(p->readopen == 0 || myproc()->killed){
        release(&p->lock);
        return -1;
      }
      wakeup(&p->nread);
80103abd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
80103ac3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80103ac6:	03 45 10             	add    0x10(%ebp),%eax
80103ac9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80103acc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
80103ad2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80103ad8:	89 ca                	mov    %ecx,%edx
80103ada:	05 00 02 00 00       	add    $0x200,%eax
80103adf:	39 c1                	cmp    %eax,%ecx
80103ae1:	74 3b                	je     80103b1e <pipewrite+0x8e>
80103ae3:	eb 63                	jmp    80103b48 <pipewrite+0xb8>
80103ae5:	8d 76 00             	lea    0x0(%esi),%esi
      if(p->readopen == 0 || myproc()->killed){
80103ae8:	e8 c3 09 00 00       	call   801044b0 <myproc>
80103aed:	8b 48 24             	mov    0x24(%eax),%ecx
80103af0:	85 c9                	test   %ecx,%ecx
80103af2:	75 34                	jne    80103b28 <pipewrite+0x98>
      wakeup(&p->nread);
80103af4:	83 ec 0c             	sub    $0xc,%esp
80103af7:	57                   	push   %edi
80103af8:	e8 33 11 00 00       	call   80104c30 <wakeup>
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
80103afd:	58                   	pop    %eax
80103afe:	5a                   	pop    %edx
80103aff:	53                   	push   %ebx
80103b00:	56                   	push   %esi
80103b01:	e8 6a 0f 00 00       	call   80104a70 <sleep>
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80103b06:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80103b0c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
80103b12:	83 c4 10             	add    $0x10,%esp
80103b15:	05 00 02 00 00       	add    $0x200,%eax
80103b1a:	39 c2                	cmp    %eax,%edx
80103b1c:	75 2a                	jne    80103b48 <pipewrite+0xb8>
      if(p->readopen == 0 || myproc()->killed){
80103b1e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
80103b24:	85 c0                	test   %eax,%eax
80103b26:	75 c0                	jne    80103ae8 <pipewrite+0x58>
        release(&p->lock);
80103b28:	83 ec 0c             	sub    $0xc,%esp
80103b2b:	53                   	push   %ebx
80103b2c:	e8 3f 16 00 00       	call   80105170 <release>
        return -1;
80103b31:	83 c4 10             	add    $0x10,%esp
80103b34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
  }
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
  release(&p->lock);
  return n;
}
80103b39:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103b3c:	5b                   	pop    %ebx
80103b3d:	5e                   	pop    %esi
80103b3e:	5f                   	pop    %edi
80103b3f:	5d                   	pop    %ebp
80103b40:	c3                   	ret    
80103b41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
80103b48:	8b 75 e4             	mov    -0x1c(%ebp),%esi
80103b4b:	8d 4a 01             	lea    0x1(%edx),%ecx
80103b4e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
80103b54:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
80103b5a:	0f b6 06             	movzbl (%esi),%eax
80103b5d:	83 c6 01             	add    $0x1,%esi
80103b60:	89 75 e4             	mov    %esi,-0x1c(%ebp)
80103b63:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
  for(i = 0; i < n; i++){
80103b67:	3b 75 e0             	cmp    -0x20(%ebp),%esi
80103b6a:	0f 85 5c ff ff ff    	jne    80103acc <pipewrite+0x3c>
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
80103b70:	83 ec 0c             	sub    $0xc,%esp
80103b73:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
80103b79:	50                   	push   %eax
80103b7a:	e8 b1 10 00 00       	call   80104c30 <wakeup>
  release(&p->lock);
80103b7f:	89 1c 24             	mov    %ebx,(%esp)
80103b82:	e8 e9 15 00 00       	call   80105170 <release>
  return n;
80103b87:	8b 45 10             	mov    0x10(%ebp),%eax
80103b8a:	83 c4 10             	add    $0x10,%esp
80103b8d:	eb aa                	jmp    80103b39 <pipewrite+0xa9>
80103b8f:	90                   	nop

80103b90 <piperead>:

int
piperead(struct pipe *p, char *addr, int n)
{
80103b90:	f3 0f 1e fb          	endbr32 
80103b94:	55                   	push   %ebp
80103b95:	89 e5                	mov    %esp,%ebp
80103b97:	57                   	push   %edi
80103b98:	56                   	push   %esi
80103b99:	53                   	push   %ebx
80103b9a:	83 ec 18             	sub    $0x18,%esp
80103b9d:	8b 75 08             	mov    0x8(%ebp),%esi
80103ba0:	8b 7d 0c             	mov    0xc(%ebp),%edi
  int i;

  acquire(&p->lock);
80103ba3:	56                   	push   %esi
80103ba4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
80103baa:	e8 01 15 00 00       	call   801050b0 <acquire>
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80103baf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
80103bb5:	83 c4 10             	add    $0x10,%esp
80103bb8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
80103bbe:	74 33                	je     80103bf3 <piperead+0x63>
80103bc0:	eb 3b                	jmp    80103bfd <piperead+0x6d>
80103bc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if(myproc()->killed){
80103bc8:	e8 e3 08 00 00       	call   801044b0 <myproc>
80103bcd:	8b 48 24             	mov    0x24(%eax),%ecx
80103bd0:	85 c9                	test   %ecx,%ecx
80103bd2:	0f 85 88 00 00 00    	jne    80103c60 <piperead+0xd0>
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
80103bd8:	83 ec 08             	sub    $0x8,%esp
80103bdb:	56                   	push   %esi
80103bdc:	53                   	push   %ebx
80103bdd:	e8 8e 0e 00 00       	call   80104a70 <sleep>
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80103be2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
80103be8:	83 c4 10             	add    $0x10,%esp
80103beb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
80103bf1:	75 0a                	jne    80103bfd <piperead+0x6d>
80103bf3:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
80103bf9:	85 c0                	test   %eax,%eax
80103bfb:	75 cb                	jne    80103bc8 <piperead+0x38>
  }
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103bfd:	8b 55 10             	mov    0x10(%ebp),%edx
80103c00:	31 db                	xor    %ebx,%ebx
80103c02:	85 d2                	test   %edx,%edx
80103c04:	7f 28                	jg     80103c2e <piperead+0x9e>
80103c06:	eb 34                	jmp    80103c3c <piperead+0xac>
80103c08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103c0f:	90                   	nop
    if(p->nread == p->nwrite)
      break;
    addr[i] = p->data[p->nread++ % PIPESIZE];
80103c10:	8d 48 01             	lea    0x1(%eax),%ecx
80103c13:	25 ff 01 00 00       	and    $0x1ff,%eax
80103c18:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
80103c1e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
80103c23:	88 04 1f             	mov    %al,(%edi,%ebx,1)
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103c26:	83 c3 01             	add    $0x1,%ebx
80103c29:	39 5d 10             	cmp    %ebx,0x10(%ebp)
80103c2c:	74 0e                	je     80103c3c <piperead+0xac>
    if(p->nread == p->nwrite)
80103c2e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
80103c34:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
80103c3a:	75 d4                	jne    80103c10 <piperead+0x80>
  }
  wakeup(&p->nwrite);  //DOC: piperead-wakeup
80103c3c:	83 ec 0c             	sub    $0xc,%esp
80103c3f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
80103c45:	50                   	push   %eax
80103c46:	e8 e5 0f 00 00       	call   80104c30 <wakeup>
  release(&p->lock);
80103c4b:	89 34 24             	mov    %esi,(%esp)
80103c4e:	e8 1d 15 00 00       	call   80105170 <release>
  return i;
80103c53:	83 c4 10             	add    $0x10,%esp
}
80103c56:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103c59:	89 d8                	mov    %ebx,%eax
80103c5b:	5b                   	pop    %ebx
80103c5c:	5e                   	pop    %esi
80103c5d:	5f                   	pop    %edi
80103c5e:	5d                   	pop    %ebp
80103c5f:	c3                   	ret    
      release(&p->lock);
80103c60:	83 ec 0c             	sub    $0xc,%esp
      return -1;
80103c63:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
      release(&p->lock);
80103c68:	56                   	push   %esi
80103c69:	e8 02 15 00 00       	call   80105170 <release>
      return -1;
80103c6e:	83 c4 10             	add    $0x10,%esp
}
80103c71:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103c74:	89 d8                	mov    %ebx,%eax
80103c76:	5b                   	pop    %ebx
80103c77:	5e                   	pop    %esi
80103c78:	5f                   	pop    %edi
80103c79:	5d                   	pop    %ebp
80103c7a:	c3                   	ret    
80103c7b:	66 90                	xchg   %ax,%ax
80103c7d:	66 90                	xchg   %ax,%ax
80103c7f:	90                   	nop

80103c80 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
80103c80:	55                   	push   %ebp
80103c81:	89 e5                	mov    %esp,%ebp
80103c83:	57                   	push   %edi
80103c84:	56                   	push   %esi
80103c85:	89 d6                	mov    %edx,%esi
80103c87:	53                   	push   %ebx
80103c88:	89 c3                	mov    %eax,%ebx
80103c8a:	83 ec 2c             	sub    $0x2c,%esp
80103c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
80103c90:	8b 4d 18             	mov    0x18(%ebp),%ecx
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
80103c93:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
{
80103c9a:	8b 45 08             	mov    0x8(%ebp),%eax
80103c9d:	89 55 dc             	mov    %edx,-0x24(%ebp)
80103ca0:	8b 55 10             	mov    0x10(%ebp),%edx
80103ca3:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80103ca6:	8b 4d 14             	mov    0x14(%ebp),%ecx
80103ca9:	89 45 d8             	mov    %eax,-0x28(%ebp)
	if (num >= base) {
80103cac:	8b 45 dc             	mov    -0x24(%ebp),%eax
80103caf:	39 55 d8             	cmp    %edx,-0x28(%ebp)
80103cb2:	1b 45 d4             	sbb    -0x2c(%ebp),%eax
80103cb5:	89 55 d0             	mov    %edx,-0x30(%ebp)
80103cb8:	8d 79 ff             	lea    -0x1(%ecx),%edi
80103cbb:	73 4b                	jae    80103d08 <printnum+0x88>
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
80103cbd:	85 ff                	test   %edi,%edi
80103cbf:	7e 18                	jle    80103cd9 <printnum+0x59>
80103cc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			putch(padc, putdat);
80103cc8:	83 ec 08             	sub    $0x8,%esp
80103ccb:	56                   	push   %esi
80103ccc:	ff 75 e4             	pushl  -0x1c(%ebp)
80103ccf:	ff d3                	call   *%ebx
		while (--width > 0)
80103cd1:	83 c4 10             	add    $0x10,%esp
80103cd4:	83 ef 01             	sub    $0x1,%edi
80103cd7:	75 ef                	jne    80103cc8 <printnum+0x48>
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
80103cd9:	ff 75 d4             	pushl  -0x2c(%ebp)
80103cdc:	ff 75 d0             	pushl  -0x30(%ebp)
80103cdf:	ff 75 dc             	pushl  -0x24(%ebp)
80103ce2:	ff 75 d8             	pushl  -0x28(%ebp)
80103ce5:	89 75 0c             	mov    %esi,0xc(%ebp)
80103ce8:	e8 b3 91 00 00       	call   8010cea0 <__umoddi3>
80103ced:	83 c4 10             	add    $0x10,%esp
80103cf0:	0f be 80 0d d8 10 80 	movsbl -0x7fef27f3(%eax),%eax
80103cf7:	89 45 08             	mov    %eax,0x8(%ebp)
}
80103cfa:	8d 65 f4             	lea    -0xc(%ebp),%esp
	putch("0123456789abcdef"[num % base], putdat);
80103cfd:	89 d8                	mov    %ebx,%eax
}
80103cff:	5b                   	pop    %ebx
80103d00:	5e                   	pop    %esi
80103d01:	5f                   	pop    %edi
80103d02:	5d                   	pop    %ebp
	putch("0123456789abcdef"[num % base], putdat);
80103d03:	ff e0                	jmp    *%eax
80103d05:	8d 76 00             	lea    0x0(%esi),%esi
		printnum(putch, putdat, num / base, base, width - 1, padc);
80103d08:	83 ec 0c             	sub    $0xc,%esp
80103d0b:	ff 75 e4             	pushl  -0x1c(%ebp)
80103d0e:	57                   	push   %edi
80103d0f:	52                   	push   %edx
80103d10:	83 ec 08             	sub    $0x8,%esp
80103d13:	ff 75 d4             	pushl  -0x2c(%ebp)
80103d16:	ff 75 d0             	pushl  -0x30(%ebp)
80103d19:	ff 75 dc             	pushl  -0x24(%ebp)
80103d1c:	ff 75 d8             	pushl  -0x28(%ebp)
80103d1f:	e8 6c 90 00 00       	call   8010cd90 <__udivdi3>
80103d24:	83 c4 18             	add    $0x18,%esp
80103d27:	52                   	push   %edx
80103d28:	89 f2                	mov    %esi,%edx
80103d2a:	50                   	push   %eax
80103d2b:	89 d8                	mov    %ebx,%eax
80103d2d:	e8 4e ff ff ff       	call   80103c80 <printnum>
80103d32:	83 c4 20             	add    $0x20,%esp
80103d35:	eb a2                	jmp    80103cd9 <printnum+0x59>
80103d37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103d3e:	66 90                	xchg   %ax,%ax

80103d40 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
80103d40:	f3 0f 1e fb          	endbr32 
80103d44:	55                   	push   %ebp
80103d45:	89 e5                	mov    %esp,%ebp
80103d47:	8b 45 0c             	mov    0xc(%ebp),%eax
	b->cnt++;
80103d4a:	83 40 08 01          	addl   $0x1,0x8(%eax)
	if (b->buf < b->ebuf)
80103d4e:	8b 10                	mov    (%eax),%edx
80103d50:	3b 50 04             	cmp    0x4(%eax),%edx
80103d53:	73 0a                	jae    80103d5f <sprintputch+0x1f>
		*b->buf++ = ch;
80103d55:	8d 4a 01             	lea    0x1(%edx),%ecx
80103d58:	89 08                	mov    %ecx,(%eax)
80103d5a:	8b 45 08             	mov    0x8(%ebp),%eax
80103d5d:	88 02                	mov    %al,(%edx)
}
80103d5f:	5d                   	pop    %ebp
80103d60:	c3                   	ret    
80103d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103d6f:	90                   	nop

80103d70 <printfmt>:
{
80103d70:	f3 0f 1e fb          	endbr32 
80103d74:	55                   	push   %ebp
80103d75:	89 e5                	mov    %esp,%ebp
80103d77:	83 ec 08             	sub    $0x8,%esp
	va_start(ap, fmt);
80103d7a:	8d 45 14             	lea    0x14(%ebp),%eax
	vprintfmt(putch, putdat, fmt, ap);
80103d7d:	50                   	push   %eax
80103d7e:	ff 75 10             	pushl  0x10(%ebp)
80103d81:	ff 75 0c             	pushl  0xc(%ebp)
80103d84:	ff 75 08             	pushl  0x8(%ebp)
80103d87:	e8 14 00 00 00       	call   80103da0 <vprintfmt>
}
80103d8c:	83 c4 10             	add    $0x10,%esp
80103d8f:	c9                   	leave  
80103d90:	c3                   	ret    
80103d91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103d98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103d9f:	90                   	nop

80103da0 <vprintfmt>:
{
80103da0:	f3 0f 1e fb          	endbr32 
80103da4:	55                   	push   %ebp
80103da5:	89 e5                	mov    %esp,%ebp
80103da7:	57                   	push   %edi
80103da8:	56                   	push   %esi
80103da9:	53                   	push   %ebx
80103daa:	83 ec 2c             	sub    $0x2c,%esp
80103dad:	8b 7d 08             	mov    0x8(%ebp),%edi
80103db0:	8b 75 0c             	mov    0xc(%ebp),%esi
		while ((ch = *(unsigned char *) fmt++) != '%') {
80103db3:	8b 45 10             	mov    0x10(%ebp),%eax
80103db6:	8d 58 01             	lea    0x1(%eax),%ebx
80103db9:	0f b6 00             	movzbl (%eax),%eax
80103dbc:	83 f8 25             	cmp    $0x25,%eax
80103dbf:	75 1d                	jne    80103dde <vprintfmt+0x3e>
80103dc1:	eb 2d                	jmp    80103df0 <vprintfmt+0x50>
80103dc3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80103dc7:	90                   	nop
			putch(ch, putdat);
80103dc8:	83 ec 08             	sub    $0x8,%esp
		while ((ch = *(unsigned char *) fmt++) != '%') {
80103dcb:	83 c3 01             	add    $0x1,%ebx
			putch(ch, putdat);
80103dce:	56                   	push   %esi
80103dcf:	50                   	push   %eax
80103dd0:	ff d7                	call   *%edi
		while ((ch = *(unsigned char *) fmt++) != '%') {
80103dd2:	0f b6 43 ff          	movzbl -0x1(%ebx),%eax
80103dd6:	83 c4 10             	add    $0x10,%esp
80103dd9:	83 f8 25             	cmp    $0x25,%eax
80103ddc:	74 12                	je     80103df0 <vprintfmt+0x50>
			if (ch == '\0')
80103dde:	85 c0                	test   %eax,%eax
80103de0:	75 e6                	jne    80103dc8 <vprintfmt+0x28>
}
80103de2:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103de5:	5b                   	pop    %ebx
80103de6:	5e                   	pop    %esi
80103de7:	5f                   	pop    %edi
80103de8:	5d                   	pop    %ebp
80103de9:	c3                   	ret    
80103dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		padc = ' ';
80103df0:	c6 45 e0 20          	movb   $0x20,-0x20(%ebp)
		precision = -1;
80103df4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
		altflag = 0;
80103df9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		width = -1;
80103e00:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		lflag = 0;
80103e07:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		switch (ch = *(unsigned char *) fmt++) {
80103e0e:	0f b6 0b             	movzbl (%ebx),%ecx
80103e11:	8d 43 01             	lea    0x1(%ebx),%eax
80103e14:	89 45 10             	mov    %eax,0x10(%ebp)
80103e17:	8d 41 dd             	lea    -0x23(%ecx),%eax
80103e1a:	3c 55                	cmp    $0x55,%al
80103e1c:	77 12                	ja     80103e30 <vprintfmt+0x90>
80103e1e:	0f b6 c0             	movzbl %al,%eax
80103e21:	3e ff 24 85 40 d9 10 	notrack jmp *-0x7fef26c0(,%eax,4)
80103e28:	80 
80103e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			putch('%', putdat);
80103e30:	83 ec 08             	sub    $0x8,%esp
80103e33:	56                   	push   %esi
80103e34:	6a 25                	push   $0x25
80103e36:	ff d7                	call   *%edi
			for (fmt--; fmt[-1] != '%'; fmt--)
80103e38:	89 5d 10             	mov    %ebx,0x10(%ebp)
80103e3b:	83 c4 10             	add    $0x10,%esp
80103e3e:	80 7b ff 25          	cmpb   $0x25,-0x1(%ebx)
80103e42:	0f 84 6b ff ff ff    	je     80103db3 <vprintfmt+0x13>
80103e48:	89 d8                	mov    %ebx,%eax
80103e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103e50:	83 e8 01             	sub    $0x1,%eax
80103e53:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)
80103e57:	75 f7                	jne    80103e50 <vprintfmt+0xb0>
80103e59:	89 45 10             	mov    %eax,0x10(%ebp)
80103e5c:	e9 52 ff ff ff       	jmp    80103db3 <vprintfmt+0x13>
				ch = *fmt;
80103e61:	0f be 43 01          	movsbl 0x1(%ebx),%eax
		switch (ch = *(unsigned char *) fmt++) {
80103e65:	0f b6 d1             	movzbl %cl,%edx
80103e68:	8b 5d 10             	mov    0x10(%ebp),%ebx
				precision = precision * 10 + ch - '0';
80103e6b:	83 ea 30             	sub    $0x30,%edx
				if (ch < '0' || ch > '9')
80103e6e:	8d 48 d0             	lea    -0x30(%eax),%ecx
80103e71:	83 f9 09             	cmp    $0x9,%ecx
80103e74:	77 1f                	ja     80103e95 <vprintfmt+0xf5>
80103e76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103e7d:	8d 76 00             	lea    0x0(%esi),%esi
			for (precision = 0; ; ++fmt) {
80103e80:	83 c3 01             	add    $0x1,%ebx
				precision = precision * 10 + ch - '0';
80103e83:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103e86:	8d 54 50 d0          	lea    -0x30(%eax,%edx,2),%edx
				ch = *fmt;
80103e8a:	0f be 03             	movsbl (%ebx),%eax
				if (ch < '0' || ch > '9')
80103e8d:	8d 48 d0             	lea    -0x30(%eax),%ecx
80103e90:	83 f9 09             	cmp    $0x9,%ecx
80103e93:	76 eb                	jbe    80103e80 <vprintfmt+0xe0>
			if (width < 0)
80103e95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103e98:	85 c0                	test   %eax,%eax
80103e9a:	0f 89 6e ff ff ff    	jns    80103e0e <vprintfmt+0x6e>
				width = precision, precision = -1;
80103ea0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80103ea3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
80103ea8:	e9 61 ff ff ff       	jmp    80103e0e <vprintfmt+0x6e>
			putch(va_arg(ap, int), putdat);
80103ead:	8b 45 14             	mov    0x14(%ebp),%eax
80103eb0:	83 ec 08             	sub    $0x8,%esp
80103eb3:	56                   	push   %esi
80103eb4:	ff 30                	pushl  (%eax)
80103eb6:	8d 58 04             	lea    0x4(%eax),%ebx
80103eb9:	ff d7                	call   *%edi
80103ebb:	89 5d 14             	mov    %ebx,0x14(%ebp)
			break;
80103ebe:	83 c4 10             	add    $0x10,%esp
80103ec1:	e9 ed fe ff ff       	jmp    80103db3 <vprintfmt+0x13>
			precision = va_arg(ap, int);
80103ec6:	8b 45 14             	mov    0x14(%ebp),%eax
		switch (ch = *(unsigned char *) fmt++) {
80103ec9:	8b 5d 10             	mov    0x10(%ebp),%ebx
			precision = va_arg(ap, int);
80103ecc:	8b 10                	mov    (%eax),%edx
80103ece:	83 c0 04             	add    $0x4,%eax
80103ed1:	89 45 14             	mov    %eax,0x14(%ebp)
			goto process_precision;
80103ed4:	eb bf                	jmp    80103e95 <vprintfmt+0xf5>
			if (width < 0)
80103ed6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103ed9:	b9 00 00 00 00       	mov    $0x0,%ecx
		switch (ch = *(unsigned char *) fmt++) {
80103ede:	8b 5d 10             	mov    0x10(%ebp),%ebx
80103ee1:	85 c0                	test   %eax,%eax
80103ee3:	0f 49 c8             	cmovns %eax,%ecx
80103ee6:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
			goto reswitch;
80103ee9:	e9 20 ff ff ff       	jmp    80103e0e <vprintfmt+0x6e>
		return va_arg(*ap, unsigned long long);
80103eee:	8b 45 14             	mov    0x14(%ebp),%eax
	if (lflag >= 2)
80103ef1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
		return va_arg(*ap, unsigned long long);
80103ef5:	8b 10                	mov    (%eax),%edx
	if (lflag >= 2)
80103ef7:	0f 8f 78 02 00 00    	jg     80104175 <vprintfmt+0x3d5>
	else if (lflag)
80103efd:	83 45 14 04          	addl   $0x4,0x14(%ebp)
80103f01:	31 c9                	xor    %ecx,%ecx
80103f03:	b8 0a 00 00 00       	mov    $0xa,%eax
80103f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103f0f:	90                   	nop
			printnum(putch, putdat, num, base, width, padc);
80103f10:	0f be 5d e0          	movsbl -0x20(%ebp),%ebx
80103f14:	83 ec 0c             	sub    $0xc,%esp
80103f17:	53                   	push   %ebx
80103f18:	ff 75 e4             	pushl  -0x1c(%ebp)
80103f1b:	50                   	push   %eax
80103f1c:	89 f8                	mov    %edi,%eax
80103f1e:	51                   	push   %ecx
80103f1f:	52                   	push   %edx
80103f20:	89 f2                	mov    %esi,%edx
80103f22:	e8 59 fd ff ff       	call   80103c80 <printnum>
			break;
80103f27:	83 c4 20             	add    $0x20,%esp
80103f2a:	e9 84 fe ff ff       	jmp    80103db3 <vprintfmt+0x13>
		return va_arg(*ap, unsigned long long);
80103f2f:	8b 45 14             	mov    0x14(%ebp),%eax
	if (lflag >= 2)
80103f32:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
		return va_arg(*ap, unsigned long long);
80103f36:	8b 10                	mov    (%eax),%edx
	if (lflag >= 2)
80103f38:	0f 8f 24 02 00 00    	jg     80104162 <vprintfmt+0x3c2>
	else if (lflag)
80103f3e:	83 45 14 04          	addl   $0x4,0x14(%ebp)
80103f42:	31 c9                	xor    %ecx,%ecx
80103f44:	b8 10 00 00 00       	mov    $0x10,%eax
80103f49:	eb c5                	jmp    80103f10 <vprintfmt+0x170>
			altflag = 1;
80103f4b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		switch (ch = *(unsigned char *) fmt++) {
80103f52:	8b 5d 10             	mov    0x10(%ebp),%ebx
			goto reswitch;
80103f55:	e9 b4 fe ff ff       	jmp    80103e0e <vprintfmt+0x6e>
			putch(ch, putdat);
80103f5a:	83 ec 08             	sub    $0x8,%esp
80103f5d:	56                   	push   %esi
80103f5e:	6a 25                	push   $0x25
80103f60:	ff d7                	call   *%edi
			break;
80103f62:	83 c4 10             	add    $0x10,%esp
80103f65:	e9 49 fe ff ff       	jmp    80103db3 <vprintfmt+0x13>
	if (lflag >= 2)
80103f6a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
		return va_arg(*ap, long long);
80103f6e:	8b 45 14             	mov    0x14(%ebp),%eax
	if (lflag >= 2)
80103f71:	0f 8f d8 01 00 00    	jg     8010414f <vprintfmt+0x3af>
	else if (lflag)
80103f77:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
80103f7a:	8d 48 04             	lea    0x4(%eax),%ecx
80103f7d:	85 db                	test   %ebx,%ebx
80103f7f:	0f 84 7e 01 00 00    	je     80104103 <vprintfmt+0x363>
		return va_arg(*ap, int);
80103f85:	8b 10                	mov    (%eax),%edx
80103f87:	89 4d 14             	mov    %ecx,0x14(%ebp)
80103f8a:	89 d0                	mov    %edx,%eax
80103f8c:	99                   	cltd   
			if ((long long) num < 0) {
80103f8d:	85 d2                	test   %edx,%edx
80103f8f:	0f 88 8e 01 00 00    	js     80104123 <vprintfmt+0x383>
			num = getint(&ap, lflag);
80103f95:	89 d1                	mov    %edx,%ecx
80103f97:	89 c2                	mov    %eax,%edx
80103f99:	b8 0a 00 00 00       	mov    $0xa,%eax
80103f9e:	e9 6d ff ff ff       	jmp    80103f10 <vprintfmt+0x170>
			err = va_arg(ap, int);
80103fa3:	8b 45 14             	mov    0x14(%ebp),%eax
80103fa6:	8d 58 04             	lea    0x4(%eax),%ebx
80103fa9:	8b 00                	mov    (%eax),%eax
			if (err < 0)
80103fab:	99                   	cltd   
80103fac:	31 d0                	xor    %edx,%eax
80103fae:	29 d0                	sub    %edx,%eax
			if (err >= MAXERROR || (p = error_string[err]) == NULL)
80103fb0:	83 f8 0f             	cmp    $0xf,%eax
80103fb3:	7f 13                	jg     80103fc8 <vprintfmt+0x228>
80103fb5:	8b 14 85 a0 da 10 80 	mov    -0x7fef2560(,%eax,4),%edx
80103fbc:	85 d2                	test   %edx,%edx
80103fbe:	74 08                	je     80103fc8 <vprintfmt+0x228>
				printfmt(putch, putdat, "%s", p);
80103fc0:	52                   	push   %edx
80103fc1:	68 b4 db 10 80       	push   $0x8010dbb4
80103fc6:	eb 06                	jmp    80103fce <vprintfmt+0x22e>
				printfmt(putch, putdat, "error %d", err);
80103fc8:	50                   	push   %eax
80103fc9:	68 25 d8 10 80       	push   $0x8010d825
				printfmt(putch, putdat, "%s", p);
80103fce:	56                   	push   %esi
80103fcf:	57                   	push   %edi
80103fd0:	e8 9b fd ff ff       	call   80103d70 <printfmt>
			err = va_arg(ap, int);
80103fd5:	89 5d 14             	mov    %ebx,0x14(%ebp)
				printfmt(putch, putdat, "%s", p);
80103fd8:	83 c4 10             	add    $0x10,%esp
80103fdb:	e9 d3 fd ff ff       	jmp    80103db3 <vprintfmt+0x13>
			lflag++;
80103fe0:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
		switch (ch = *(unsigned char *) fmt++) {
80103fe4:	8b 5d 10             	mov    0x10(%ebp),%ebx
			goto reswitch;
80103fe7:	e9 22 fe ff ff       	jmp    80103e0e <vprintfmt+0x6e>
			putch('X', putdat);
80103fec:	83 ec 08             	sub    $0x8,%esp
80103fef:	56                   	push   %esi
80103ff0:	6a 58                	push   $0x58
80103ff2:	ff d7                	call   *%edi
			putch('X', putdat);
80103ff4:	59                   	pop    %ecx
80103ff5:	5b                   	pop    %ebx
80103ff6:	56                   	push   %esi
80103ff7:	6a 58                	push   $0x58
80103ff9:	ff d7                	call   *%edi
			putch('X', putdat);
80103ffb:	58                   	pop    %eax
80103ffc:	5a                   	pop    %edx
80103ffd:	56                   	push   %esi
80103ffe:	6a 58                	push   $0x58
80104000:	ff d7                	call   *%edi
			break;
80104002:	83 c4 10             	add    $0x10,%esp
80104005:	e9 a9 fd ff ff       	jmp    80103db3 <vprintfmt+0x13>
			putch('0', putdat);
8010400a:	83 ec 08             	sub    $0x8,%esp
8010400d:	56                   	push   %esi
8010400e:	6a 30                	push   $0x30
80104010:	ff d7                	call   *%edi
			putch('x', putdat);
80104012:	58                   	pop    %eax
80104013:	5a                   	pop    %edx
80104014:	56                   	push   %esi
80104015:	6a 78                	push   $0x78
80104017:	ff d7                	call   *%edi
			num = (unsigned long long)
80104019:	8b 45 14             	mov    0x14(%ebp),%eax
8010401c:	31 c9                	xor    %ecx,%ecx
8010401e:	8b 10                	mov    (%eax),%edx
				(uintptr_t) va_arg(ap, void *);
80104020:	83 c0 04             	add    $0x4,%eax
			goto number;
80104023:	83 c4 10             	add    $0x10,%esp
				(uintptr_t) va_arg(ap, void *);
80104026:	89 45 14             	mov    %eax,0x14(%ebp)
			goto number;
80104029:	b8 10 00 00 00       	mov    $0x10,%eax
8010402e:	e9 dd fe ff ff       	jmp    80103f10 <vprintfmt+0x170>
			if ((p = va_arg(ap, char *)) == NULL)
80104033:	8b 45 14             	mov    0x14(%ebp),%eax
80104036:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80104039:	83 c0 04             	add    $0x4,%eax
8010403c:	80 7d e0 2d          	cmpb   $0x2d,-0x20(%ebp)
80104040:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80104043:	8b 45 14             	mov    0x14(%ebp),%eax
80104046:	8b 18                	mov    (%eax),%ebx
80104048:	0f 95 c0             	setne  %al
8010404b:	85 c9                	test   %ecx,%ecx
8010404d:	0f 9f c1             	setg   %cl
80104050:	21 c8                	and    %ecx,%eax
80104052:	85 db                	test   %ebx,%ebx
80104054:	0f 84 2e 01 00 00    	je     80104188 <vprintfmt+0x3e8>
			if (width > 0 && padc != '-')
8010405a:	8d 4b 01             	lea    0x1(%ebx),%ecx
8010405d:	84 c0                	test   %al,%al
8010405f:	0f 85 54 01 00 00    	jne    801041b9 <vprintfmt+0x419>
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
80104065:	0f be 1b             	movsbl (%ebx),%ebx
80104068:	89 d8                	mov    %ebx,%eax
8010406a:	85 db                	test   %ebx,%ebx
8010406c:	74 6b                	je     801040d9 <vprintfmt+0x339>
8010406e:	89 5d e0             	mov    %ebx,-0x20(%ebp)
80104071:	89 cb                	mov    %ecx,%ebx
80104073:	8b 4d e0             	mov    -0x20(%ebp),%ecx
80104076:	89 7d 08             	mov    %edi,0x8(%ebp)
80104079:	8b 7d e4             	mov    -0x1c(%ebp),%edi
8010407c:	89 75 0c             	mov    %esi,0xc(%ebp)
8010407f:	89 d6                	mov    %edx,%esi
80104081:	eb 2b                	jmp    801040ae <vprintfmt+0x30e>
80104083:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104087:	90                   	nop
				if (altflag && (ch < ' ' || ch > '~'))
80104088:	83 e8 20             	sub    $0x20,%eax
8010408b:	83 f8 5e             	cmp    $0x5e,%eax
8010408e:	76 31                	jbe    801040c1 <vprintfmt+0x321>
					putch('?', putdat);
80104090:	83 ec 08             	sub    $0x8,%esp
80104093:	ff 75 0c             	pushl  0xc(%ebp)
80104096:	6a 3f                	push   $0x3f
80104098:	ff 55 08             	call   *0x8(%ebp)
8010409b:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
8010409e:	0f be 03             	movsbl (%ebx),%eax
801040a1:	83 c3 01             	add    $0x1,%ebx
801040a4:	83 ef 01             	sub    $0x1,%edi
801040a7:	0f be c8             	movsbl %al,%ecx
801040aa:	85 c9                	test   %ecx,%ecx
801040ac:	74 22                	je     801040d0 <vprintfmt+0x330>
801040ae:	85 f6                	test   %esi,%esi
801040b0:	78 08                	js     801040ba <vprintfmt+0x31a>
801040b2:	83 ee 01             	sub    $0x1,%esi
801040b5:	83 fe ff             	cmp    $0xffffffff,%esi
801040b8:	74 16                	je     801040d0 <vprintfmt+0x330>
				if (altflag && (ch < ' ' || ch > '~'))
801040ba:	8b 55 d8             	mov    -0x28(%ebp),%edx
801040bd:	85 d2                	test   %edx,%edx
801040bf:	75 c7                	jne    80104088 <vprintfmt+0x2e8>
					putch(ch, putdat);
801040c1:	83 ec 08             	sub    $0x8,%esp
801040c4:	ff 75 0c             	pushl  0xc(%ebp)
801040c7:	51                   	push   %ecx
801040c8:	ff 55 08             	call   *0x8(%ebp)
801040cb:	83 c4 10             	add    $0x10,%esp
801040ce:	eb ce                	jmp    8010409e <vprintfmt+0x2fe>
801040d0:	89 7d e4             	mov    %edi,-0x1c(%ebp)
801040d3:	8b 75 0c             	mov    0xc(%ebp),%esi
801040d6:	8b 7d 08             	mov    0x8(%ebp),%edi
			for (; width > 0; width--)
801040d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801040dc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
801040df:	85 c0                	test   %eax,%eax
801040e1:	7e 15                	jle    801040f8 <vprintfmt+0x358>
801040e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801040e7:	90                   	nop
				putch(' ', putdat);
801040e8:	83 ec 08             	sub    $0x8,%esp
801040eb:	56                   	push   %esi
801040ec:	6a 20                	push   $0x20
801040ee:	ff d7                	call   *%edi
			for (; width > 0; width--)
801040f0:	83 c4 10             	add    $0x10,%esp
801040f3:	83 eb 01             	sub    $0x1,%ebx
801040f6:	75 f0                	jne    801040e8 <vprintfmt+0x348>
			if ((p = va_arg(ap, char *)) == NULL)
801040f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
801040fb:	89 45 14             	mov    %eax,0x14(%ebp)
801040fe:	e9 b0 fc ff ff       	jmp    80103db3 <vprintfmt+0x13>
		return va_arg(*ap, int);
80104103:	8b 45 14             	mov    0x14(%ebp),%eax
80104106:	e9 7a fe ff ff       	jmp    80103f85 <vprintfmt+0x1e5>
			padc = '-';
8010410b:	c6 45 e0 2d          	movb   $0x2d,-0x20(%ebp)
		switch (ch = *(unsigned char *) fmt++) {
8010410f:	8b 5d 10             	mov    0x10(%ebp),%ebx
80104112:	e9 f7 fc ff ff       	jmp    80103e0e <vprintfmt+0x6e>
80104117:	c6 45 e0 30          	movb   $0x30,-0x20(%ebp)
8010411b:	8b 5d 10             	mov    0x10(%ebp),%ebx
8010411e:	e9 eb fc ff ff       	jmp    80103e0e <vprintfmt+0x6e>
				putch('-', putdat);
80104123:	83 ec 08             	sub    $0x8,%esp
80104126:	89 45 d8             	mov    %eax,-0x28(%ebp)
80104129:	56                   	push   %esi
8010412a:	89 55 dc             	mov    %edx,-0x24(%ebp)
8010412d:	6a 2d                	push   $0x2d
8010412f:	ff d7                	call   *%edi
				num = -(long long) num;
80104131:	8b 45 d8             	mov    -0x28(%ebp),%eax
80104134:	8b 55 dc             	mov    -0x24(%ebp),%edx
80104137:	f7 d8                	neg    %eax
80104139:	83 d2 00             	adc    $0x0,%edx
8010413c:	83 c4 10             	add    $0x10,%esp
8010413f:	f7 da                	neg    %edx
80104141:	89 d1                	mov    %edx,%ecx
80104143:	89 c2                	mov    %eax,%edx
80104145:	b8 0a 00 00 00       	mov    $0xa,%eax
8010414a:	e9 c1 fd ff ff       	jmp    80103f10 <vprintfmt+0x170>
		return va_arg(*ap, long long);
8010414f:	8b 4d 14             	mov    0x14(%ebp),%ecx
80104152:	8b 50 04             	mov    0x4(%eax),%edx
80104155:	8b 00                	mov    (%eax),%eax
80104157:	83 c1 08             	add    $0x8,%ecx
8010415a:	89 4d 14             	mov    %ecx,0x14(%ebp)
8010415d:	e9 2b fe ff ff       	jmp    80103f8d <vprintfmt+0x1ed>
		return va_arg(*ap, unsigned long long);
80104162:	8b 48 04             	mov    0x4(%eax),%ecx
80104165:	83 c0 08             	add    $0x8,%eax
80104168:	89 45 14             	mov    %eax,0x14(%ebp)
8010416b:	b8 10 00 00 00       	mov    $0x10,%eax
80104170:	e9 9b fd ff ff       	jmp    80103f10 <vprintfmt+0x170>
80104175:	8b 48 04             	mov    0x4(%eax),%ecx
80104178:	83 c0 08             	add    $0x8,%eax
8010417b:	89 45 14             	mov    %eax,0x14(%ebp)
8010417e:	b8 0a 00 00 00       	mov    $0xa,%eax
80104183:	e9 88 fd ff ff       	jmp    80103f10 <vprintfmt+0x170>
			if (width > 0 && padc != '-')
80104188:	84 c0                	test   %al,%al
8010418a:	0f 85 8f 00 00 00    	jne    8010421f <vprintfmt+0x47f>
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
80104190:	bb 28 00 00 00       	mov    $0x28,%ebx
80104195:	b9 1f d8 10 80       	mov    $0x8010d81f,%ecx
8010419a:	b8 28 00 00 00       	mov    $0x28,%eax
8010419f:	89 5d e0             	mov    %ebx,-0x20(%ebp)
801041a2:	89 cb                	mov    %ecx,%ebx
801041a4:	b9 28 00 00 00       	mov    $0x28,%ecx
801041a9:	89 7d 08             	mov    %edi,0x8(%ebp)
801041ac:	8b 7d e4             	mov    -0x1c(%ebp),%edi
801041af:	89 75 0c             	mov    %esi,0xc(%ebp)
801041b2:	89 d6                	mov    %edx,%esi
801041b4:	e9 f5 fe ff ff       	jmp    801040ae <vprintfmt+0x30e>
				for (width -= strnlen(p, precision); width > 0; width--)
801041b9:	83 ec 08             	sub    $0x8,%esp
801041bc:	89 4d cc             	mov    %ecx,-0x34(%ebp)
801041bf:	52                   	push   %edx
801041c0:	53                   	push   %ebx
801041c1:	89 55 d0             	mov    %edx,-0x30(%ebp)
801041c4:	e8 77 12 00 00       	call   80105440 <strnlen>
801041c9:	29 45 e4             	sub    %eax,-0x1c(%ebp)
801041cc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801041cf:	83 c4 10             	add    $0x10,%esp
801041d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
801041d5:	85 c9                	test   %ecx,%ecx
801041d7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
801041da:	7e 30                	jle    8010420c <vprintfmt+0x46c>
801041dc:	0f be 45 e0          	movsbl -0x20(%ebp),%eax
801041e0:	89 55 d0             	mov    %edx,-0x30(%ebp)
801041e3:	89 4d cc             	mov    %ecx,-0x34(%ebp)
801041e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
801041e9:	89 5d c8             	mov    %ebx,-0x38(%ebp)
801041ec:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
					putch(padc, putdat);
801041ef:	83 ec 08             	sub    $0x8,%esp
801041f2:	56                   	push   %esi
801041f3:	ff 75 e0             	pushl  -0x20(%ebp)
801041f6:	ff d7                	call   *%edi
				for (width -= strnlen(p, precision); width > 0; width--)
801041f8:	83 c4 10             	add    $0x10,%esp
801041fb:	83 eb 01             	sub    $0x1,%ebx
801041fe:	75 ef                	jne    801041ef <vprintfmt+0x44f>
80104200:	8b 55 d0             	mov    -0x30(%ebp),%edx
80104203:	8b 4d cc             	mov    -0x34(%ebp),%ecx
80104206:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
80104209:	8b 5d c8             	mov    -0x38(%ebp),%ebx
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
8010420c:	0f be 03             	movsbl (%ebx),%eax
8010420f:	0f be d8             	movsbl %al,%ebx
80104212:	85 db                	test   %ebx,%ebx
80104214:	0f 85 54 fe ff ff    	jne    8010406e <vprintfmt+0x2ce>
8010421a:	e9 d9 fe ff ff       	jmp    801040f8 <vprintfmt+0x358>
				for (width -= strnlen(p, precision); width > 0; width--)
8010421f:	83 ec 08             	sub    $0x8,%esp
80104222:	89 55 d0             	mov    %edx,-0x30(%ebp)
				p = "(null)";
80104225:	bb 1e d8 10 80       	mov    $0x8010d81e,%ebx
				for (width -= strnlen(p, precision); width > 0; width--)
8010422a:	52                   	push   %edx
8010422b:	68 1e d8 10 80       	push   $0x8010d81e
80104230:	e8 0b 12 00 00       	call   80105440 <strnlen>
80104235:	29 45 e4             	sub    %eax,-0x1c(%ebp)
80104238:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010423b:	83 c4 10             	add    $0x10,%esp
8010423e:	8b 55 d0             	mov    -0x30(%ebp),%edx
80104241:	b9 1f d8 10 80       	mov    $0x8010d81f,%ecx
80104246:	85 c0                	test   %eax,%eax
80104248:	7f 92                	jg     801041dc <vprintfmt+0x43c>
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
8010424a:	b8 28 00 00 00       	mov    $0x28,%eax
8010424f:	bb 28 00 00 00       	mov    $0x28,%ebx
80104254:	e9 46 ff ff ff       	jmp    8010419f <vprintfmt+0x3ff>
80104259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104260 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
80104260:	f3 0f 1e fb          	endbr32 
80104264:	55                   	push   %ebp
80104265:	89 e5                	mov    %esp,%ebp
80104267:	83 ec 18             	sub    $0x18,%esp
8010426a:	8b 45 08             	mov    0x8(%ebp),%eax
8010426d:	8b 55 0c             	mov    0xc(%ebp),%edx
	struct sprintbuf b = {buf, buf+n-1, 0};
80104270:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104277:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
8010427b:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010427e:	89 4d f0             	mov    %ecx,-0x10(%ebp)

	if (buf == NULL || n < 1)
80104281:	85 c0                	test   %eax,%eax
80104283:	74 2b                	je     801042b0 <vsnprintf+0x50>
80104285:	85 d2                	test   %edx,%edx
80104287:	7e 27                	jle    801042b0 <vsnprintf+0x50>
		return -E_INVAL;

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
80104289:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010428c:	ff 75 14             	pushl  0x14(%ebp)
8010428f:	ff 75 10             	pushl  0x10(%ebp)
80104292:	50                   	push   %eax
80104293:	68 40 3d 10 80       	push   $0x80103d40
80104298:	e8 03 fb ff ff       	call   80103da0 <vprintfmt>

	// null terminate the buffer
	*b.buf = '\0';
8010429d:	8b 45 ec             	mov    -0x14(%ebp),%eax

	return b.cnt;
801042a0:	83 c4 10             	add    $0x10,%esp
	*b.buf = '\0';
801042a3:	c6 00 00             	movb   $0x0,(%eax)
	return b.cnt;
801042a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801042a9:	c9                   	leave  
801042aa:	c3                   	ret    
801042ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801042af:	90                   	nop
801042b0:	c9                   	leave  
		return -E_INVAL;
801042b1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
801042b6:	c3                   	ret    
801042b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801042be:	66 90                	xchg   %ax,%ax

801042c0 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
801042c0:	f3 0f 1e fb          	endbr32 
801042c4:	55                   	push   %ebp
801042c5:	89 e5                	mov    %esp,%ebp
801042c7:	83 ec 08             	sub    $0x8,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
801042ca:	8d 45 14             	lea    0x14(%ebp),%eax
	rc = vsnprintf(buf, n, fmt, ap);
801042cd:	50                   	push   %eax
801042ce:	ff 75 10             	pushl  0x10(%ebp)
801042d1:	ff 75 0c             	pushl  0xc(%ebp)
801042d4:	ff 75 08             	pushl  0x8(%ebp)
801042d7:	e8 84 ff ff ff       	call   80104260 <vsnprintf>
	va_end(ap);

	return rc;
}
801042dc:	c9                   	leave  
801042dd:	c3                   	ret    
801042de:	66 90                	xchg   %ax,%ax

801042e0 <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
801042e0:	55                   	push   %ebp
801042e1:	89 e5                	mov    %esp,%ebp
801042e3:	53                   	push   %ebx
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801042e4:	bb 94 ea 13 80       	mov    $0x8013ea94,%ebx
{
801042e9:	83 ec 10             	sub    $0x10,%esp
  acquire(&ptable.lock);
801042ec:	68 60 ea 13 80       	push   $0x8013ea60
801042f1:	e8 ba 0d 00 00       	call   801050b0 <acquire>
801042f6:	83 c4 10             	add    $0x10,%esp
801042f9:	eb 10                	jmp    8010430b <allocproc+0x2b>
801042fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801042ff:	90                   	nop
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104300:	83 c3 7c             	add    $0x7c,%ebx
80104303:	81 fb 94 09 14 80    	cmp    $0x80140994,%ebx
80104309:	74 75                	je     80104380 <allocproc+0xa0>
    if(p->state == UNUSED)
8010430b:	8b 43 0c             	mov    0xc(%ebx),%eax
8010430e:	85 c0                	test   %eax,%eax
80104310:	75 ee                	jne    80104300 <allocproc+0x20>
  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
  p->pid = nextpid++;
80104312:	a1 34 10 11 80       	mov    0x80111034,%eax

  release(&ptable.lock);
80104317:	83 ec 0c             	sub    $0xc,%esp
  p->state = EMBRYO;
8010431a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
  p->pid = nextpid++;
80104321:	89 43 10             	mov    %eax,0x10(%ebx)
80104324:	8d 50 01             	lea    0x1(%eax),%edx
  release(&ptable.lock);
80104327:	68 60 ea 13 80       	push   $0x8013ea60
  p->pid = nextpid++;
8010432c:	89 15 34 10 11 80    	mov    %edx,0x80111034
  release(&ptable.lock);
80104332:	e8 39 0e 00 00       	call   80105170 <release>

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
80104337:	e8 d4 e1 ff ff       	call   80102510 <kalloc>
8010433c:	83 c4 10             	add    $0x10,%esp
8010433f:	89 43 08             	mov    %eax,0x8(%ebx)
80104342:	85 c0                	test   %eax,%eax
80104344:	74 53                	je     80104399 <allocproc+0xb9>
    return 0;
  }
  sp = p->kstack + KSTACKSIZE;

  // Leave room for trap frame.
  sp -= sizeof *p->tf;
80104346:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
  sp -= 4;
  *(uint*)sp = (uint)trapret;

  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
8010434c:	83 ec 04             	sub    $0x4,%esp
  sp -= sizeof *p->context;
8010434f:	05 9c 0f 00 00       	add    $0xf9c,%eax
  sp -= sizeof *p->tf;
80104354:	89 53 18             	mov    %edx,0x18(%ebx)
  *(uint*)sp = (uint)trapret;
80104357:	c7 40 14 66 66 10 80 	movl   $0x80106666,0x14(%eax)
  p->context = (struct context*)sp;
8010435e:	89 43 1c             	mov    %eax,0x1c(%ebx)
  memset(p->context, 0, sizeof *p->context);
80104361:	6a 14                	push   $0x14
80104363:	6a 00                	push   $0x0
80104365:	50                   	push   %eax
80104366:	e8 55 0e 00 00       	call   801051c0 <memset>
  p->context->eip = (uint)forkret;
8010436b:	8b 43 1c             	mov    0x1c(%ebx),%eax

  return p;
8010436e:	83 c4 10             	add    $0x10,%esp
  p->context->eip = (uint)forkret;
80104371:	c7 40 10 b0 43 10 80 	movl   $0x801043b0,0x10(%eax)
}
80104378:	89 d8                	mov    %ebx,%eax
8010437a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010437d:	c9                   	leave  
8010437e:	c3                   	ret    
8010437f:	90                   	nop
  release(&ptable.lock);
80104380:	83 ec 0c             	sub    $0xc,%esp
  return 0;
80104383:	31 db                	xor    %ebx,%ebx
  release(&ptable.lock);
80104385:	68 60 ea 13 80       	push   $0x8013ea60
8010438a:	e8 e1 0d 00 00       	call   80105170 <release>
}
8010438f:	89 d8                	mov    %ebx,%eax
  return 0;
80104391:	83 c4 10             	add    $0x10,%esp
}
80104394:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104397:	c9                   	leave  
80104398:	c3                   	ret    
    p->state = UNUSED;
80104399:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    return 0;
801043a0:	31 db                	xor    %ebx,%ebx
}
801043a2:	89 d8                	mov    %ebx,%eax
801043a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801043a7:	c9                   	leave  
801043a8:	c3                   	ret    
801043a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801043b0 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
801043b0:	f3 0f 1e fb          	endbr32 
801043b4:	55                   	push   %ebp
801043b5:	89 e5                	mov    %esp,%ebp
801043b7:	83 ec 14             	sub    $0x14,%esp
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
801043ba:	68 60 ea 13 80       	push   $0x8013ea60
801043bf:	e8 ac 0d 00 00       	call   80105170 <release>

  if (first) {
801043c4:	a1 30 10 11 80       	mov    0x80111030,%eax
801043c9:	83 c4 10             	add    $0x10,%esp
801043cc:	85 c0                	test   %eax,%eax
801043ce:	75 08                	jne    801043d8 <forkret+0x28>
    iinit(ROOTDEV);
    initlog(ROOTDEV);
  }

  // Return to "caller", actually trapret (see allocproc).
}
801043d0:	c9                   	leave  
801043d1:	c3                   	ret    
801043d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    first = 0;
801043d8:	c7 05 30 10 11 80 00 	movl   $0x0,0x80111030
801043df:	00 00 00 
    iinit(ROOTDEV);
801043e2:	83 ec 0c             	sub    $0xc,%esp
801043e5:	6a 01                	push   $0x1
801043e7:	e8 34 d0 ff ff       	call   80101420 <iinit>
    initlog(ROOTDEV);
801043ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
801043f3:	e8 78 e7 ff ff       	call   80102b70 <initlog>
}
801043f8:	83 c4 10             	add    $0x10,%esp
801043fb:	c9                   	leave  
801043fc:	c3                   	ret    
801043fd:	8d 76 00             	lea    0x0(%esi),%esi

80104400 <pinit>:
{
80104400:	f3 0f 1e fb          	endbr32 
80104404:	55                   	push   %ebp
80104405:	89 e5                	mov    %esp,%ebp
80104407:	83 ec 10             	sub    $0x10,%esp
  initlock(&ptable.lock, "ptable");
8010440a:	68 ff da 10 80       	push   $0x8010daff
8010440f:	68 60 ea 13 80       	push   $0x8013ea60
80104414:	e8 17 0b 00 00       	call   80104f30 <initlock>
}
80104419:	83 c4 10             	add    $0x10,%esp
8010441c:	c9                   	leave  
8010441d:	c3                   	ret    
8010441e:	66 90                	xchg   %ax,%ax

80104420 <mycpu>:
{
80104420:	f3 0f 1e fb          	endbr32 
80104424:	55                   	push   %ebp
80104425:	89 e5                	mov    %esp,%ebp
80104427:	56                   	push   %esi
80104428:	53                   	push   %ebx
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80104429:	9c                   	pushf  
8010442a:	58                   	pop    %eax
  if(readeflags()&FL_IF)
8010442b:	f6 c4 02             	test   $0x2,%ah
8010442e:	75 4a                	jne    8010447a <mycpu+0x5a>
  apicid = lapicid();
80104430:	e8 4b e3 ff ff       	call   80102780 <lapicid>
  for (i = 0; i < ncpu; ++i) {
80104435:	8b 35 40 ea 13 80    	mov    0x8013ea40,%esi
  apicid = lapicid();
8010443b:	89 c3                	mov    %eax,%ebx
  for (i = 0; i < ncpu; ++i) {
8010443d:	85 f6                	test   %esi,%esi
8010443f:	7e 2c                	jle    8010446d <mycpu+0x4d>
80104441:	31 d2                	xor    %edx,%edx
80104443:	eb 0a                	jmp    8010444f <mycpu+0x2f>
80104445:	8d 76 00             	lea    0x0(%esi),%esi
80104448:	83 c2 01             	add    $0x1,%edx
8010444b:	39 f2                	cmp    %esi,%edx
8010444d:	74 1e                	je     8010446d <mycpu+0x4d>
    if (cpus[i].apicid == apicid)
8010444f:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
80104455:	0f b6 81 c0 e4 13 80 	movzbl -0x7fec1b40(%ecx),%eax
8010445c:	39 d8                	cmp    %ebx,%eax
8010445e:	75 e8                	jne    80104448 <mycpu+0x28>
}
80104460:	8d 65 f8             	lea    -0x8(%ebp),%esp
      return &cpus[i];
80104463:	8d 81 c0 e4 13 80    	lea    -0x7fec1b40(%ecx),%eax
}
80104469:	5b                   	pop    %ebx
8010446a:	5e                   	pop    %esi
8010446b:	5d                   	pop    %ebp
8010446c:	c3                   	ret    
  panic("unknown apicid\n");
8010446d:	83 ec 0c             	sub    $0xc,%esp
80104470:	68 06 db 10 80       	push   $0x8010db06
80104475:	e8 a6 bf ff ff       	call   80100420 <panic>
    panic("mycpu called with interrupts enabled\n");
8010447a:	83 ec 0c             	sub    $0xc,%esp
8010447d:	68 e4 db 10 80       	push   $0x8010dbe4
80104482:	e8 99 bf ff ff       	call   80100420 <panic>
80104487:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010448e:	66 90                	xchg   %ax,%ax

80104490 <cpuid>:
cpuid() {
80104490:	f3 0f 1e fb          	endbr32 
80104494:	55                   	push   %ebp
80104495:	89 e5                	mov    %esp,%ebp
80104497:	83 ec 08             	sub    $0x8,%esp
  return mycpu()-cpus;
8010449a:	e8 81 ff ff ff       	call   80104420 <mycpu>
}
8010449f:	c9                   	leave  
  return mycpu()-cpus;
801044a0:	2d c0 e4 13 80       	sub    $0x8013e4c0,%eax
801044a5:	c1 f8 04             	sar    $0x4,%eax
801044a8:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
}
801044ae:	c3                   	ret    
801044af:	90                   	nop

801044b0 <myproc>:
myproc(void) {
801044b0:	f3 0f 1e fb          	endbr32 
801044b4:	55                   	push   %ebp
801044b5:	89 e5                	mov    %esp,%ebp
801044b7:	53                   	push   %ebx
801044b8:	83 ec 04             	sub    $0x4,%esp
  pushcli();
801044bb:	e8 f0 0a 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
801044c0:	e8 5b ff ff ff       	call   80104420 <mycpu>
  p = c->proc;
801044c5:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
801044cb:	e8 30 0b 00 00       	call   80105000 <popcli>
}
801044d0:	83 c4 04             	add    $0x4,%esp
801044d3:	89 d8                	mov    %ebx,%eax
801044d5:	5b                   	pop    %ebx
801044d6:	5d                   	pop    %ebp
801044d7:	c3                   	ret    
801044d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801044df:	90                   	nop

801044e0 <userinit>:
{
801044e0:	f3 0f 1e fb          	endbr32 
801044e4:	55                   	push   %ebp
801044e5:	89 e5                	mov    %esp,%ebp
801044e7:	53                   	push   %ebx
801044e8:	83 ec 04             	sub    $0x4,%esp
  p = allocproc();
801044eb:	e8 f0 fd ff ff       	call   801042e0 <allocproc>
801044f0:	89 c3                	mov    %eax,%ebx
  initproc = p;
801044f2:	a3 00 16 11 80       	mov    %eax,0x80111600
  if((p->pgdir = setupkvm()) == 0)
801044f7:	e8 54 37 00 00       	call   80107c50 <setupkvm>
801044fc:	89 43 04             	mov    %eax,0x4(%ebx)
801044ff:	85 c0                	test   %eax,%eax
80104501:	0f 84 bd 00 00 00    	je     801045c4 <userinit+0xe4>
  inituvm(p->pgdir, _binary_build_kernel_initcode_start, (int)_binary_build_kernel_initcode_size);
80104507:	83 ec 04             	sub    $0x4,%esp
8010450a:	68 2c 00 00 00       	push   $0x2c
8010450f:	68 94 14 11 80       	push   $0x80111494
80104514:	50                   	push   %eax
80104515:	e8 06 34 00 00       	call   80107920 <inituvm>
  memset(p->tf, 0, sizeof(*p->tf));
8010451a:	83 c4 0c             	add    $0xc,%esp
  p->sz = PGSIZE;
8010451d:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
  memset(p->tf, 0, sizeof(*p->tf));
80104523:	6a 4c                	push   $0x4c
80104525:	6a 00                	push   $0x0
80104527:	ff 73 18             	pushl  0x18(%ebx)
8010452a:	e8 91 0c 00 00       	call   801051c0 <memset>
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
8010452f:	8b 43 18             	mov    0x18(%ebx),%eax
80104532:	ba 1b 00 00 00       	mov    $0x1b,%edx
  safestrcpy(p->name, "initcode", sizeof(p->name));
80104537:	83 c4 0c             	add    $0xc,%esp
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
8010453a:	b9 23 00 00 00       	mov    $0x23,%ecx
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
8010453f:	66 89 50 3c          	mov    %dx,0x3c(%eax)
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
80104543:	8b 43 18             	mov    0x18(%ebx),%eax
80104546:	66 89 48 2c          	mov    %cx,0x2c(%eax)
  p->tf->es = p->tf->ds;
8010454a:	8b 43 18             	mov    0x18(%ebx),%eax
8010454d:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
80104551:	66 89 50 28          	mov    %dx,0x28(%eax)
  p->tf->ss = p->tf->ds;
80104555:	8b 43 18             	mov    0x18(%ebx),%eax
80104558:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
8010455c:	66 89 50 48          	mov    %dx,0x48(%eax)
  p->tf->eflags = FL_IF;
80104560:	8b 43 18             	mov    0x18(%ebx),%eax
80104563:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
  p->tf->esp = PGSIZE;
8010456a:	8b 43 18             	mov    0x18(%ebx),%eax
8010456d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
  p->tf->eip = 0;  // beginning of initcode.S
80104574:	8b 43 18             	mov    0x18(%ebx),%eax
80104577:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
  safestrcpy(p->name, "initcode", sizeof(p->name));
8010457e:	8d 43 6c             	lea    0x6c(%ebx),%eax
80104581:	6a 10                	push   $0x10
80104583:	68 2f db 10 80       	push   $0x8010db2f
80104588:	50                   	push   %eax
80104589:	e8 f2 0d 00 00       	call   80105380 <safestrcpy>
  p->cwd = namei("/");
8010458e:	c7 04 24 38 db 10 80 	movl   $0x8010db38,(%esp)
80104595:	e8 76 d9 ff ff       	call   80101f10 <namei>
8010459a:	89 43 68             	mov    %eax,0x68(%ebx)
  acquire(&ptable.lock);
8010459d:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
801045a4:	e8 07 0b 00 00       	call   801050b0 <acquire>
  p->state = RUNNABLE;
801045a9:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
  release(&ptable.lock);
801045b0:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
801045b7:	e8 b4 0b 00 00       	call   80105170 <release>
}
801045bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801045bf:	83 c4 10             	add    $0x10,%esp
801045c2:	c9                   	leave  
801045c3:	c3                   	ret    
    panic("userinit: out of memory?");
801045c4:	83 ec 0c             	sub    $0xc,%esp
801045c7:	68 16 db 10 80       	push   $0x8010db16
801045cc:	e8 4f be ff ff       	call   80100420 <panic>
801045d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801045d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801045df:	90                   	nop

801045e0 <growproc>:
{
801045e0:	f3 0f 1e fb          	endbr32 
801045e4:	55                   	push   %ebp
801045e5:	89 e5                	mov    %esp,%ebp
801045e7:	56                   	push   %esi
801045e8:	53                   	push   %ebx
801045e9:	8b 75 08             	mov    0x8(%ebp),%esi
  pushcli();
801045ec:	e8 bf 09 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
801045f1:	e8 2a fe ff ff       	call   80104420 <mycpu>
  p = c->proc;
801045f6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
801045fc:	e8 ff 09 00 00       	call   80105000 <popcli>
  sz = curproc->sz;
80104601:	8b 03                	mov    (%ebx),%eax
  if(n > 0){
80104603:	85 f6                	test   %esi,%esi
80104605:	7f 19                	jg     80104620 <growproc+0x40>
  } else if(n < 0){
80104607:	75 37                	jne    80104640 <growproc+0x60>
  switchuvm(curproc);
80104609:	83 ec 0c             	sub    $0xc,%esp
  curproc->sz = sz;
8010460c:	89 03                	mov    %eax,(%ebx)
  switchuvm(curproc);
8010460e:	53                   	push   %ebx
8010460f:	e8 fc 31 00 00       	call   80107810 <switchuvm>
  return 0;
80104614:	83 c4 10             	add    $0x10,%esp
80104617:	31 c0                	xor    %eax,%eax
}
80104619:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010461c:	5b                   	pop    %ebx
8010461d:	5e                   	pop    %esi
8010461e:	5d                   	pop    %ebp
8010461f:	c3                   	ret    
    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
80104620:	83 ec 04             	sub    $0x4,%esp
80104623:	01 c6                	add    %eax,%esi
80104625:	56                   	push   %esi
80104626:	50                   	push   %eax
80104627:	ff 73 04             	pushl  0x4(%ebx)
8010462a:	e8 41 34 00 00       	call   80107a70 <allocuvm>
8010462f:	83 c4 10             	add    $0x10,%esp
80104632:	85 c0                	test   %eax,%eax
80104634:	75 d3                	jne    80104609 <growproc+0x29>
      return -1;
80104636:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010463b:	eb dc                	jmp    80104619 <growproc+0x39>
8010463d:	8d 76 00             	lea    0x0(%esi),%esi
    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
80104640:	83 ec 04             	sub    $0x4,%esp
80104643:	01 c6                	add    %eax,%esi
80104645:	56                   	push   %esi
80104646:	50                   	push   %eax
80104647:	ff 73 04             	pushl  0x4(%ebx)
8010464a:	e8 51 35 00 00       	call   80107ba0 <deallocuvm>
8010464f:	83 c4 10             	add    $0x10,%esp
80104652:	85 c0                	test   %eax,%eax
80104654:	75 b3                	jne    80104609 <growproc+0x29>
80104656:	eb de                	jmp    80104636 <growproc+0x56>
80104658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010465f:	90                   	nop

80104660 <fork>:
{
80104660:	f3 0f 1e fb          	endbr32 
80104664:	55                   	push   %ebp
80104665:	89 e5                	mov    %esp,%ebp
80104667:	57                   	push   %edi
80104668:	56                   	push   %esi
80104669:	53                   	push   %ebx
8010466a:	83 ec 1c             	sub    $0x1c,%esp
  pushcli();
8010466d:	e8 3e 09 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
80104672:	e8 a9 fd ff ff       	call   80104420 <mycpu>
  p = c->proc;
80104677:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
8010467d:	e8 7e 09 00 00       	call   80105000 <popcli>
  if((np = allocproc()) == 0){
80104682:	e8 59 fc ff ff       	call   801042e0 <allocproc>
80104687:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010468a:	85 c0                	test   %eax,%eax
8010468c:	0f 84 bb 00 00 00    	je     8010474d <fork+0xed>
  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
80104692:	83 ec 08             	sub    $0x8,%esp
80104695:	ff 33                	pushl  (%ebx)
80104697:	89 c7                	mov    %eax,%edi
80104699:	ff 73 04             	pushl  0x4(%ebx)
8010469c:	e8 7f 36 00 00       	call   80107d20 <copyuvm>
801046a1:	83 c4 10             	add    $0x10,%esp
801046a4:	89 47 04             	mov    %eax,0x4(%edi)
801046a7:	85 c0                	test   %eax,%eax
801046a9:	0f 84 a5 00 00 00    	je     80104754 <fork+0xf4>
  np->sz = curproc->sz;
801046af:	8b 03                	mov    (%ebx),%eax
801046b1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801046b4:	89 01                	mov    %eax,(%ecx)
  *np->tf = *curproc->tf;
801046b6:	8b 79 18             	mov    0x18(%ecx),%edi
  np->parent = curproc;
801046b9:	89 c8                	mov    %ecx,%eax
801046bb:	89 59 14             	mov    %ebx,0x14(%ecx)
  *np->tf = *curproc->tf;
801046be:	b9 13 00 00 00       	mov    $0x13,%ecx
801046c3:	8b 73 18             	mov    0x18(%ebx),%esi
801046c6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  for(i = 0; i < NOFILE; i++)
801046c8:	31 f6                	xor    %esi,%esi
  np->tf->eax = 0;
801046ca:	8b 40 18             	mov    0x18(%eax),%eax
801046cd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for(i = 0; i < NOFILE; i++)
801046d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    if(curproc->ofile[i])
801046d8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
801046dc:	85 c0                	test   %eax,%eax
801046de:	74 13                	je     801046f3 <fork+0x93>
      np->ofile[i] = filedup(curproc->ofile[i]);
801046e0:	83 ec 0c             	sub    $0xc,%esp
801046e3:	50                   	push   %eax
801046e4:	e8 f7 c5 ff ff       	call   80100ce0 <filedup>
801046e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801046ec:	83 c4 10             	add    $0x10,%esp
801046ef:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
  for(i = 0; i < NOFILE; i++)
801046f3:	83 c6 01             	add    $0x1,%esi
801046f6:	83 fe 10             	cmp    $0x10,%esi
801046f9:	75 dd                	jne    801046d8 <fork+0x78>
  np->cwd = idup(curproc->cwd);
801046fb:	83 ec 0c             	sub    $0xc,%esp
801046fe:	ff 73 68             	pushl  0x68(%ebx)
  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80104701:	83 c3 6c             	add    $0x6c,%ebx
  np->cwd = idup(curproc->cwd);
80104704:	e8 07 cf ff ff       	call   80101610 <idup>
80104709:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
8010470c:	83 c4 0c             	add    $0xc,%esp
  np->cwd = idup(curproc->cwd);
8010470f:	89 47 68             	mov    %eax,0x68(%edi)
  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80104712:	8d 47 6c             	lea    0x6c(%edi),%eax
80104715:	6a 10                	push   $0x10
80104717:	53                   	push   %ebx
80104718:	50                   	push   %eax
80104719:	e8 62 0c 00 00       	call   80105380 <safestrcpy>
  pid = np->pid;
8010471e:	8b 5f 10             	mov    0x10(%edi),%ebx
  acquire(&ptable.lock);
80104721:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
80104728:	e8 83 09 00 00       	call   801050b0 <acquire>
  np->state = RUNNABLE;
8010472d:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
  release(&ptable.lock);
80104734:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
8010473b:	e8 30 0a 00 00       	call   80105170 <release>
  return pid;
80104740:	83 c4 10             	add    $0x10,%esp
}
80104743:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104746:	89 d8                	mov    %ebx,%eax
80104748:	5b                   	pop    %ebx
80104749:	5e                   	pop    %esi
8010474a:	5f                   	pop    %edi
8010474b:	5d                   	pop    %ebp
8010474c:	c3                   	ret    
    return -1;
8010474d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80104752:	eb ef                	jmp    80104743 <fork+0xe3>
    kfree(np->kstack);
80104754:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80104757:	83 ec 0c             	sub    $0xc,%esp
8010475a:	ff 73 08             	pushl  0x8(%ebx)
8010475d:	e8 ee db ff ff       	call   80102350 <kfree>
    np->kstack = 0;
80104762:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    return -1;
80104769:	83 c4 10             	add    $0x10,%esp
    np->state = UNUSED;
8010476c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    return -1;
80104773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80104778:	eb c9                	jmp    80104743 <fork+0xe3>
8010477a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104780 <scheduler>:
{
80104780:	f3 0f 1e fb          	endbr32 
80104784:	55                   	push   %ebp
80104785:	89 e5                	mov    %esp,%ebp
80104787:	57                   	push   %edi
80104788:	56                   	push   %esi
80104789:	53                   	push   %ebx
8010478a:	83 ec 0c             	sub    $0xc,%esp
  struct cpu *c = mycpu();
8010478d:	e8 8e fc ff ff       	call   80104420 <mycpu>
  c->proc = 0;
80104792:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
80104799:	00 00 00 
  struct cpu *c = mycpu();
8010479c:	89 c6                	mov    %eax,%esi
  c->proc = 0;
8010479e:	8d 78 04             	lea    0x4(%eax),%edi
801047a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  asm volatile("sti");
801047a8:	fb                   	sti    
  asm volatile("hlt");
801047a9:	f4                   	hlt    
    acquire(&ptable.lock);
801047aa:	83 ec 0c             	sub    $0xc,%esp
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801047ad:	bb 94 ea 13 80       	mov    $0x8013ea94,%ebx
    acquire(&ptable.lock);
801047b2:	68 60 ea 13 80       	push   $0x8013ea60
801047b7:	e8 f4 08 00 00       	call   801050b0 <acquire>
801047bc:	83 c4 10             	add    $0x10,%esp
801047bf:	90                   	nop
      if(p->state != RUNNABLE)
801047c0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
801047c4:	75 33                	jne    801047f9 <scheduler+0x79>
      switchuvm(p);
801047c6:	83 ec 0c             	sub    $0xc,%esp
      c->proc = p;
801047c9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
      switchuvm(p);
801047cf:	53                   	push   %ebx
801047d0:	e8 3b 30 00 00       	call   80107810 <switchuvm>
      swtch(&(c->scheduler), p->context);
801047d5:	58                   	pop    %eax
801047d6:	5a                   	pop    %edx
801047d7:	ff 73 1c             	pushl  0x1c(%ebx)
801047da:	57                   	push   %edi
      p->state = RUNNING;
801047db:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
      swtch(&(c->scheduler), p->context);
801047e2:	e8 aa 0d 00 00       	call   80105591 <swtch>
      switchkvm();
801047e7:	e8 04 30 00 00       	call   801077f0 <switchkvm>
      c->proc = 0;
801047ec:	83 c4 10             	add    $0x10,%esp
801047ef:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
801047f6:	00 00 00 
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801047f9:	83 c3 7c             	add    $0x7c,%ebx
801047fc:	81 fb 94 09 14 80    	cmp    $0x80140994,%ebx
80104802:	75 bc                	jne    801047c0 <scheduler+0x40>
    release(&ptable.lock);
80104804:	83 ec 0c             	sub    $0xc,%esp
80104807:	68 60 ea 13 80       	push   $0x8013ea60
8010480c:	e8 5f 09 00 00       	call   80105170 <release>
    sti();
80104811:	83 c4 10             	add    $0x10,%esp
80104814:	eb 92                	jmp    801047a8 <scheduler+0x28>
80104816:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010481d:	8d 76 00             	lea    0x0(%esi),%esi

80104820 <sched>:
{
80104820:	f3 0f 1e fb          	endbr32 
80104824:	55                   	push   %ebp
80104825:	89 e5                	mov    %esp,%ebp
80104827:	56                   	push   %esi
80104828:	53                   	push   %ebx
  pushcli();
80104829:	e8 82 07 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
8010482e:	e8 ed fb ff ff       	call   80104420 <mycpu>
  p = c->proc;
80104833:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
80104839:	e8 c2 07 00 00       	call   80105000 <popcli>
  if(!holding(&ptable.lock))
8010483e:	83 ec 0c             	sub    $0xc,%esp
80104841:	68 60 ea 13 80       	push   $0x8013ea60
80104846:	e8 15 08 00 00       	call   80105060 <holding>
8010484b:	83 c4 10             	add    $0x10,%esp
8010484e:	85 c0                	test   %eax,%eax
80104850:	74 4f                	je     801048a1 <sched+0x81>
  if(mycpu()->ncli != 1)
80104852:	e8 c9 fb ff ff       	call   80104420 <mycpu>
80104857:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
8010485e:	75 68                	jne    801048c8 <sched+0xa8>
  if(p->state == RUNNING)
80104860:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
80104864:	74 55                	je     801048bb <sched+0x9b>
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80104866:	9c                   	pushf  
80104867:	58                   	pop    %eax
  if(readeflags()&FL_IF)
80104868:	f6 c4 02             	test   $0x2,%ah
8010486b:	75 41                	jne    801048ae <sched+0x8e>
  intena = mycpu()->intena;
8010486d:	e8 ae fb ff ff       	call   80104420 <mycpu>
  swtch(&p->context, mycpu()->scheduler);
80104872:	83 c3 1c             	add    $0x1c,%ebx
  intena = mycpu()->intena;
80104875:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
  swtch(&p->context, mycpu()->scheduler);
8010487b:	e8 a0 fb ff ff       	call   80104420 <mycpu>
80104880:	83 ec 08             	sub    $0x8,%esp
80104883:	ff 70 04             	pushl  0x4(%eax)
80104886:	53                   	push   %ebx
80104887:	e8 05 0d 00 00       	call   80105591 <swtch>
  mycpu()->intena = intena;
8010488c:	e8 8f fb ff ff       	call   80104420 <mycpu>
}
80104891:	83 c4 10             	add    $0x10,%esp
  mycpu()->intena = intena;
80104894:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
}
8010489a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010489d:	5b                   	pop    %ebx
8010489e:	5e                   	pop    %esi
8010489f:	5d                   	pop    %ebp
801048a0:	c3                   	ret    
    panic("sched ptable.lock");
801048a1:	83 ec 0c             	sub    $0xc,%esp
801048a4:	68 3a db 10 80       	push   $0x8010db3a
801048a9:	e8 72 bb ff ff       	call   80100420 <panic>
    panic("sched interruptible");
801048ae:	83 ec 0c             	sub    $0xc,%esp
801048b1:	68 66 db 10 80       	push   $0x8010db66
801048b6:	e8 65 bb ff ff       	call   80100420 <panic>
    panic("sched running");
801048bb:	83 ec 0c             	sub    $0xc,%esp
801048be:	68 58 db 10 80       	push   $0x8010db58
801048c3:	e8 58 bb ff ff       	call   80100420 <panic>
    panic("sched locks");
801048c8:	83 ec 0c             	sub    $0xc,%esp
801048cb:	68 4c db 10 80       	push   $0x8010db4c
801048d0:	e8 4b bb ff ff       	call   80100420 <panic>
801048d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801048dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801048e0 <exit>:
{
801048e0:	f3 0f 1e fb          	endbr32 
801048e4:	55                   	push   %ebp
801048e5:	89 e5                	mov    %esp,%ebp
801048e7:	57                   	push   %edi
801048e8:	56                   	push   %esi
801048e9:	53                   	push   %ebx
801048ea:	83 ec 0c             	sub    $0xc,%esp
  pushcli();
801048ed:	e8 be 06 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
801048f2:	e8 29 fb ff ff       	call   80104420 <mycpu>
  p = c->proc;
801048f7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
  popcli();
801048fd:	e8 fe 06 00 00       	call   80105000 <popcli>
  if(curproc == initproc)
80104902:	8d 5e 28             	lea    0x28(%esi),%ebx
80104905:	8d 7e 68             	lea    0x68(%esi),%edi
80104908:	39 35 00 16 11 80    	cmp    %esi,0x80111600
8010490e:	0f 84 f3 00 00 00    	je     80104a07 <exit+0x127>
80104914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    if(curproc->ofile[fd]){
80104918:	8b 03                	mov    (%ebx),%eax
8010491a:	85 c0                	test   %eax,%eax
8010491c:	74 12                	je     80104930 <exit+0x50>
      fileclose(curproc->ofile[fd]);
8010491e:	83 ec 0c             	sub    $0xc,%esp
80104921:	50                   	push   %eax
80104922:	e8 09 c4 ff ff       	call   80100d30 <fileclose>
      curproc->ofile[fd] = 0;
80104927:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
8010492d:	83 c4 10             	add    $0x10,%esp
  for(fd = 0; fd < NOFILE; fd++){
80104930:	83 c3 04             	add    $0x4,%ebx
80104933:	39 df                	cmp    %ebx,%edi
80104935:	75 e1                	jne    80104918 <exit+0x38>
  begin_op();
80104937:	e8 d4 e2 ff ff       	call   80102c10 <begin_op>
  iput(curproc->cwd);
8010493c:	83 ec 0c             	sub    $0xc,%esp
8010493f:	ff 76 68             	pushl  0x68(%esi)
80104942:	e8 29 ce ff ff       	call   80101770 <iput>
  end_op();
80104947:	e8 34 e3 ff ff       	call   80102c80 <end_op>
  curproc->cwd = 0;
8010494c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
  acquire(&ptable.lock);
80104953:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
8010495a:	e8 51 07 00 00       	call   801050b0 <acquire>
  wakeup1(curproc->parent);
8010495f:	8b 56 14             	mov    0x14(%esi),%edx
80104962:	83 c4 10             	add    $0x10,%esp
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104965:	b8 94 ea 13 80       	mov    $0x8013ea94,%eax
8010496a:	eb 0e                	jmp    8010497a <exit+0x9a>
8010496c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104970:	83 c0 7c             	add    $0x7c,%eax
80104973:	3d 94 09 14 80       	cmp    $0x80140994,%eax
80104978:	74 1c                	je     80104996 <exit+0xb6>
    if(p->state == SLEEPING && p->chan == chan)
8010497a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
8010497e:	75 f0                	jne    80104970 <exit+0x90>
80104980:	3b 50 20             	cmp    0x20(%eax),%edx
80104983:	75 eb                	jne    80104970 <exit+0x90>
      p->state = RUNNABLE;
80104985:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
8010498c:	83 c0 7c             	add    $0x7c,%eax
8010498f:	3d 94 09 14 80       	cmp    $0x80140994,%eax
80104994:	75 e4                	jne    8010497a <exit+0x9a>
      p->parent = initproc;
80104996:	8b 0d 00 16 11 80    	mov    0x80111600,%ecx
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
8010499c:	ba 94 ea 13 80       	mov    $0x8013ea94,%edx
801049a1:	eb 10                	jmp    801049b3 <exit+0xd3>
801049a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801049a7:	90                   	nop
801049a8:	83 c2 7c             	add    $0x7c,%edx
801049ab:	81 fa 94 09 14 80    	cmp    $0x80140994,%edx
801049b1:	74 3b                	je     801049ee <exit+0x10e>
    if(p->parent == curproc){
801049b3:	39 72 14             	cmp    %esi,0x14(%edx)
801049b6:	75 f0                	jne    801049a8 <exit+0xc8>
      if(p->state == ZOMBIE)
801049b8:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
      p->parent = initproc;
801049bc:	89 4a 14             	mov    %ecx,0x14(%edx)
      if(p->state == ZOMBIE)
801049bf:	75 e7                	jne    801049a8 <exit+0xc8>
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801049c1:	b8 94 ea 13 80       	mov    $0x8013ea94,%eax
801049c6:	eb 12                	jmp    801049da <exit+0xfa>
801049c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801049cf:	90                   	nop
801049d0:	83 c0 7c             	add    $0x7c,%eax
801049d3:	3d 94 09 14 80       	cmp    $0x80140994,%eax
801049d8:	74 ce                	je     801049a8 <exit+0xc8>
    if(p->state == SLEEPING && p->chan == chan)
801049da:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
801049de:	75 f0                	jne    801049d0 <exit+0xf0>
801049e0:	3b 48 20             	cmp    0x20(%eax),%ecx
801049e3:	75 eb                	jne    801049d0 <exit+0xf0>
      p->state = RUNNABLE;
801049e5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
801049ec:	eb e2                	jmp    801049d0 <exit+0xf0>
  curproc->state = ZOMBIE;
801049ee:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
  sched();
801049f5:	e8 26 fe ff ff       	call   80104820 <sched>
  panic("zombie exit");
801049fa:	83 ec 0c             	sub    $0xc,%esp
801049fd:	68 87 db 10 80       	push   $0x8010db87
80104a02:	e8 19 ba ff ff       	call   80100420 <panic>
    panic("init exiting");
80104a07:	83 ec 0c             	sub    $0xc,%esp
80104a0a:	68 7a db 10 80       	push   $0x8010db7a
80104a0f:	e8 0c ba ff ff       	call   80100420 <panic>
80104a14:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104a1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104a1f:	90                   	nop

80104a20 <yield>:
{
80104a20:	f3 0f 1e fb          	endbr32 
80104a24:	55                   	push   %ebp
80104a25:	89 e5                	mov    %esp,%ebp
80104a27:	53                   	push   %ebx
80104a28:	83 ec 10             	sub    $0x10,%esp
  acquire(&ptable.lock);  //DOC: yieldlock
80104a2b:	68 60 ea 13 80       	push   $0x8013ea60
80104a30:	e8 7b 06 00 00       	call   801050b0 <acquire>
  pushcli();
80104a35:	e8 76 05 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
80104a3a:	e8 e1 f9 ff ff       	call   80104420 <mycpu>
  p = c->proc;
80104a3f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
80104a45:	e8 b6 05 00 00       	call   80105000 <popcli>
  myproc()->state = RUNNABLE;
80104a4a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
  sched();
80104a51:	e8 ca fd ff ff       	call   80104820 <sched>
  release(&ptable.lock);
80104a56:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
80104a5d:	e8 0e 07 00 00       	call   80105170 <release>
}
80104a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104a65:	83 c4 10             	add    $0x10,%esp
80104a68:	c9                   	leave  
80104a69:	c3                   	ret    
80104a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104a70 <sleep>:
{
80104a70:	f3 0f 1e fb          	endbr32 
80104a74:	55                   	push   %ebp
80104a75:	89 e5                	mov    %esp,%ebp
80104a77:	57                   	push   %edi
80104a78:	56                   	push   %esi
80104a79:	53                   	push   %ebx
80104a7a:	83 ec 0c             	sub    $0xc,%esp
80104a7d:	8b 7d 08             	mov    0x8(%ebp),%edi
80104a80:	8b 75 0c             	mov    0xc(%ebp),%esi
  pushcli();
80104a83:	e8 28 05 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
80104a88:	e8 93 f9 ff ff       	call   80104420 <mycpu>
  p = c->proc;
80104a8d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
80104a93:	e8 68 05 00 00       	call   80105000 <popcli>
  if(p == 0)
80104a98:	85 db                	test   %ebx,%ebx
80104a9a:	0f 84 83 00 00 00    	je     80104b23 <sleep+0xb3>
  if(lk == 0)
80104aa0:	85 f6                	test   %esi,%esi
80104aa2:	74 72                	je     80104b16 <sleep+0xa6>
  if(lk != &ptable.lock){  //DOC: sleeplock0
80104aa4:	81 fe 60 ea 13 80    	cmp    $0x8013ea60,%esi
80104aaa:	74 4c                	je     80104af8 <sleep+0x88>
    acquire(&ptable.lock);  //DOC: sleeplock1
80104aac:	83 ec 0c             	sub    $0xc,%esp
80104aaf:	68 60 ea 13 80       	push   $0x8013ea60
80104ab4:	e8 f7 05 00 00       	call   801050b0 <acquire>
    release(lk);
80104ab9:	89 34 24             	mov    %esi,(%esp)
80104abc:	e8 af 06 00 00       	call   80105170 <release>
  p->chan = chan;
80104ac1:	89 7b 20             	mov    %edi,0x20(%ebx)
  p->state = SLEEPING;
80104ac4:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
  sched();
80104acb:	e8 50 fd ff ff       	call   80104820 <sched>
  p->chan = 0;
80104ad0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    release(&ptable.lock);
80104ad7:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
80104ade:	e8 8d 06 00 00       	call   80105170 <release>
    acquire(lk);
80104ae3:	89 75 08             	mov    %esi,0x8(%ebp)
80104ae6:	83 c4 10             	add    $0x10,%esp
}
80104ae9:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104aec:	5b                   	pop    %ebx
80104aed:	5e                   	pop    %esi
80104aee:	5f                   	pop    %edi
80104aef:	5d                   	pop    %ebp
    acquire(lk);
80104af0:	e9 bb 05 00 00       	jmp    801050b0 <acquire>
80104af5:	8d 76 00             	lea    0x0(%esi),%esi
  p->chan = chan;
80104af8:	89 7b 20             	mov    %edi,0x20(%ebx)
  p->state = SLEEPING;
80104afb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
  sched();
80104b02:	e8 19 fd ff ff       	call   80104820 <sched>
  p->chan = 0;
80104b07:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
}
80104b0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104b11:	5b                   	pop    %ebx
80104b12:	5e                   	pop    %esi
80104b13:	5f                   	pop    %edi
80104b14:	5d                   	pop    %ebp
80104b15:	c3                   	ret    
    panic("sleep without lk");
80104b16:	83 ec 0c             	sub    $0xc,%esp
80104b19:	68 99 db 10 80       	push   $0x8010db99
80104b1e:	e8 fd b8 ff ff       	call   80100420 <panic>
    panic("sleep");
80104b23:	83 ec 0c             	sub    $0xc,%esp
80104b26:	68 93 db 10 80       	push   $0x8010db93
80104b2b:	e8 f0 b8 ff ff       	call   80100420 <panic>

80104b30 <wait>:
{
80104b30:	f3 0f 1e fb          	endbr32 
80104b34:	55                   	push   %ebp
80104b35:	89 e5                	mov    %esp,%ebp
80104b37:	56                   	push   %esi
80104b38:	53                   	push   %ebx
  pushcli();
80104b39:	e8 72 04 00 00       	call   80104fb0 <pushcli>
  c = mycpu();
80104b3e:	e8 dd f8 ff ff       	call   80104420 <mycpu>
  p = c->proc;
80104b43:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
  popcli();
80104b49:	e8 b2 04 00 00       	call   80105000 <popcli>
  acquire(&ptable.lock);
80104b4e:	83 ec 0c             	sub    $0xc,%esp
80104b51:	68 60 ea 13 80       	push   $0x8013ea60
80104b56:	e8 55 05 00 00       	call   801050b0 <acquire>
80104b5b:	83 c4 10             	add    $0x10,%esp
    havekids = 0;
80104b5e:	31 c0                	xor    %eax,%eax
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104b60:	bb 94 ea 13 80       	mov    $0x8013ea94,%ebx
80104b65:	eb 14                	jmp    80104b7b <wait+0x4b>
80104b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104b6e:	66 90                	xchg   %ax,%ax
80104b70:	83 c3 7c             	add    $0x7c,%ebx
80104b73:	81 fb 94 09 14 80    	cmp    $0x80140994,%ebx
80104b79:	74 1b                	je     80104b96 <wait+0x66>
      if(p->parent != curproc)
80104b7b:	39 73 14             	cmp    %esi,0x14(%ebx)
80104b7e:	75 f0                	jne    80104b70 <wait+0x40>
      if(p->state == ZOMBIE){
80104b80:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
80104b84:	74 32                	je     80104bb8 <wait+0x88>
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104b86:	83 c3 7c             	add    $0x7c,%ebx
      havekids = 1;
80104b89:	b8 01 00 00 00       	mov    $0x1,%eax
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104b8e:	81 fb 94 09 14 80    	cmp    $0x80140994,%ebx
80104b94:	75 e5                	jne    80104b7b <wait+0x4b>
    if(!havekids || curproc->killed){
80104b96:	85 c0                	test   %eax,%eax
80104b98:	74 74                	je     80104c0e <wait+0xde>
80104b9a:	8b 46 24             	mov    0x24(%esi),%eax
80104b9d:	85 c0                	test   %eax,%eax
80104b9f:	75 6d                	jne    80104c0e <wait+0xde>
    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
80104ba1:	83 ec 08             	sub    $0x8,%esp
80104ba4:	68 60 ea 13 80       	push   $0x8013ea60
80104ba9:	56                   	push   %esi
80104baa:	e8 c1 fe ff ff       	call   80104a70 <sleep>
    havekids = 0;
80104baf:	83 c4 10             	add    $0x10,%esp
80104bb2:	eb aa                	jmp    80104b5e <wait+0x2e>
80104bb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        kfree(p->kstack);
80104bb8:	83 ec 0c             	sub    $0xc,%esp
80104bbb:	ff 73 08             	pushl  0x8(%ebx)
        pid = p->pid;
80104bbe:	8b 73 10             	mov    0x10(%ebx),%esi
        kfree(p->kstack);
80104bc1:	e8 8a d7 ff ff       	call   80102350 <kfree>
        freevm(p->pgdir);
80104bc6:	5a                   	pop    %edx
80104bc7:	ff 73 04             	pushl  0x4(%ebx)
        p->kstack = 0;
80104bca:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
        freevm(p->pgdir);
80104bd1:	e8 fa 2f 00 00       	call   80107bd0 <freevm>
        release(&ptable.lock);
80104bd6:	c7 04 24 60 ea 13 80 	movl   $0x8013ea60,(%esp)
        p->pid = 0;
80104bdd:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
        p->parent = 0;
80104be4:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
        p->name[0] = 0;
80104beb:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
        p->killed = 0;
80104bef:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
        p->state = UNUSED;
80104bf6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
        release(&ptable.lock);
80104bfd:	e8 6e 05 00 00       	call   80105170 <release>
        return pid;
80104c02:	83 c4 10             	add    $0x10,%esp
}
80104c05:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104c08:	89 f0                	mov    %esi,%eax
80104c0a:	5b                   	pop    %ebx
80104c0b:	5e                   	pop    %esi
80104c0c:	5d                   	pop    %ebp
80104c0d:	c3                   	ret    
      release(&ptable.lock);
80104c0e:	83 ec 0c             	sub    $0xc,%esp
      return -1;
80104c11:	be ff ff ff ff       	mov    $0xffffffff,%esi
      release(&ptable.lock);
80104c16:	68 60 ea 13 80       	push   $0x8013ea60
80104c1b:	e8 50 05 00 00       	call   80105170 <release>
      return -1;
80104c20:	83 c4 10             	add    $0x10,%esp
80104c23:	eb e0                	jmp    80104c05 <wait+0xd5>
80104c25:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80104c30 <wakeup>:
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
80104c30:	f3 0f 1e fb          	endbr32 
80104c34:	55                   	push   %ebp
80104c35:	89 e5                	mov    %esp,%ebp
80104c37:	53                   	push   %ebx
80104c38:	83 ec 10             	sub    $0x10,%esp
80104c3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&ptable.lock);
80104c3e:	68 60 ea 13 80       	push   $0x8013ea60
80104c43:	e8 68 04 00 00       	call   801050b0 <acquire>
80104c48:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104c4b:	b8 94 ea 13 80       	mov    $0x8013ea94,%eax
80104c50:	eb 10                	jmp    80104c62 <wakeup+0x32>
80104c52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80104c58:	83 c0 7c             	add    $0x7c,%eax
80104c5b:	3d 94 09 14 80       	cmp    $0x80140994,%eax
80104c60:	74 1c                	je     80104c7e <wakeup+0x4e>
    if(p->state == SLEEPING && p->chan == chan)
80104c62:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
80104c66:	75 f0                	jne    80104c58 <wakeup+0x28>
80104c68:	3b 58 20             	cmp    0x20(%eax),%ebx
80104c6b:	75 eb                	jne    80104c58 <wakeup+0x28>
      p->state = RUNNABLE;
80104c6d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104c74:	83 c0 7c             	add    $0x7c,%eax
80104c77:	3d 94 09 14 80       	cmp    $0x80140994,%eax
80104c7c:	75 e4                	jne    80104c62 <wakeup+0x32>
  wakeup1(chan);
  release(&ptable.lock);
80104c7e:	c7 45 08 60 ea 13 80 	movl   $0x8013ea60,0x8(%ebp)
}
80104c85:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104c88:	c9                   	leave  
  release(&ptable.lock);
80104c89:	e9 e2 04 00 00       	jmp    80105170 <release>
80104c8e:	66 90                	xchg   %ax,%ax

80104c90 <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
80104c90:	f3 0f 1e fb          	endbr32 
80104c94:	55                   	push   %ebp
80104c95:	89 e5                	mov    %esp,%ebp
80104c97:	53                   	push   %ebx
80104c98:	83 ec 10             	sub    $0x10,%esp
80104c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct proc *p;

  acquire(&ptable.lock);
80104c9e:	68 60 ea 13 80       	push   $0x8013ea60
80104ca3:	e8 08 04 00 00       	call   801050b0 <acquire>
80104ca8:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104cab:	b8 94 ea 13 80       	mov    $0x8013ea94,%eax
80104cb0:	eb 10                	jmp    80104cc2 <kill+0x32>
80104cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80104cb8:	83 c0 7c             	add    $0x7c,%eax
80104cbb:	3d 94 09 14 80       	cmp    $0x80140994,%eax
80104cc0:	74 36                	je     80104cf8 <kill+0x68>
    if(p->pid == pid){
80104cc2:	39 58 10             	cmp    %ebx,0x10(%eax)
80104cc5:	75 f1                	jne    80104cb8 <kill+0x28>
      p->killed = 1;
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
80104cc7:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
      p->killed = 1;
80104ccb:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
      if(p->state == SLEEPING)
80104cd2:	75 07                	jne    80104cdb <kill+0x4b>
        p->state = RUNNABLE;
80104cd4:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
      release(&ptable.lock);
80104cdb:	83 ec 0c             	sub    $0xc,%esp
80104cde:	68 60 ea 13 80       	push   $0x8013ea60
80104ce3:	e8 88 04 00 00       	call   80105170 <release>
      return 0;
    }
  }
  release(&ptable.lock);
  return -1;
}
80104ce8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
      return 0;
80104ceb:	83 c4 10             	add    $0x10,%esp
80104cee:	31 c0                	xor    %eax,%eax
}
80104cf0:	c9                   	leave  
80104cf1:	c3                   	ret    
80104cf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  release(&ptable.lock);
80104cf8:	83 ec 0c             	sub    $0xc,%esp
80104cfb:	68 60 ea 13 80       	push   $0x8013ea60
80104d00:	e8 6b 04 00 00       	call   80105170 <release>
}
80104d05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  return -1;
80104d08:	83 c4 10             	add    $0x10,%esp
80104d0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104d10:	c9                   	leave  
80104d11:	c3                   	ret    
80104d12:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104d19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104d20 <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
80104d20:	f3 0f 1e fb          	endbr32 
80104d24:	55                   	push   %ebp
80104d25:	89 e5                	mov    %esp,%ebp
80104d27:	57                   	push   %edi
80104d28:	56                   	push   %esi
80104d29:	8d 75 e8             	lea    -0x18(%ebp),%esi
80104d2c:	53                   	push   %ebx
80104d2d:	bb 00 eb 13 80       	mov    $0x8013eb00,%ebx
80104d32:	83 ec 3c             	sub    $0x3c,%esp
80104d35:	eb 28                	jmp    80104d5f <procdump+0x3f>
80104d37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104d3e:	66 90                	xchg   %ax,%ax
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
80104d40:	83 ec 0c             	sub    $0xc,%esp
80104d43:	68 99 e5 10 80       	push   $0x8010e599
80104d48:	e8 43 b6 ff ff       	call   80100390 <cprintf>
80104d4d:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104d50:	83 c3 7c             	add    $0x7c,%ebx
80104d53:	81 fb 00 0a 14 80    	cmp    $0x80140a00,%ebx
80104d59:	0f 84 81 00 00 00    	je     80104de0 <procdump+0xc0>
    if(p->state == UNUSED)
80104d5f:	8b 43 a0             	mov    -0x60(%ebx),%eax
80104d62:	85 c0                	test   %eax,%eax
80104d64:	74 ea                	je     80104d50 <procdump+0x30>
      state = "???";
80104d66:	ba aa db 10 80       	mov    $0x8010dbaa,%edx
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
80104d6b:	83 f8 05             	cmp    $0x5,%eax
80104d6e:	77 11                	ja     80104d81 <procdump+0x61>
80104d70:	8b 14 85 0c dc 10 80 	mov    -0x7fef23f4(,%eax,4),%edx
      state = "???";
80104d77:	b8 aa db 10 80       	mov    $0x8010dbaa,%eax
80104d7c:	85 d2                	test   %edx,%edx
80104d7e:	0f 44 d0             	cmove  %eax,%edx
    cprintf("%d %s %s", p->pid, state, p->name);
80104d81:	53                   	push   %ebx
80104d82:	52                   	push   %edx
80104d83:	ff 73 a4             	pushl  -0x5c(%ebx)
80104d86:	68 ae db 10 80       	push   $0x8010dbae
80104d8b:	e8 00 b6 ff ff       	call   80100390 <cprintf>
    if(p->state == SLEEPING){
80104d90:	83 c4 10             	add    $0x10,%esp
80104d93:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
80104d97:	75 a7                	jne    80104d40 <procdump+0x20>
      getcallerpcs((uint*)p->context->ebp+2, pc);
80104d99:	83 ec 08             	sub    $0x8,%esp
80104d9c:	8d 45 c0             	lea    -0x40(%ebp),%eax
80104d9f:	8d 7d c0             	lea    -0x40(%ebp),%edi
80104da2:	50                   	push   %eax
80104da3:	8b 43 b0             	mov    -0x50(%ebx),%eax
80104da6:	8b 40 0c             	mov    0xc(%eax),%eax
80104da9:	83 c0 08             	add    $0x8,%eax
80104dac:	50                   	push   %eax
80104dad:	e8 9e 01 00 00       	call   80104f50 <getcallerpcs>
      for(i=0; i<10 && pc[i] != 0; i++)
80104db2:	83 c4 10             	add    $0x10,%esp
80104db5:	8d 76 00             	lea    0x0(%esi),%esi
80104db8:	8b 07                	mov    (%edi),%eax
80104dba:	85 c0                	test   %eax,%eax
80104dbc:	74 82                	je     80104d40 <procdump+0x20>
        cprintf(" %p", pc[i]);
80104dbe:	83 ec 08             	sub    $0x8,%esp
80104dc1:	83 c7 04             	add    $0x4,%edi
80104dc4:	50                   	push   %eax
80104dc5:	68 41 d0 10 80       	push   $0x8010d041
80104dca:	e8 c1 b5 ff ff       	call   80100390 <cprintf>
      for(i=0; i<10 && pc[i] != 0; i++)
80104dcf:	83 c4 10             	add    $0x10,%esp
80104dd2:	39 fe                	cmp    %edi,%esi
80104dd4:	75 e2                	jne    80104db8 <procdump+0x98>
80104dd6:	e9 65 ff ff ff       	jmp    80104d40 <procdump+0x20>
80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104ddf:	90                   	nop
  }
}
80104de0:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104de3:	5b                   	pop    %ebx
80104de4:	5e                   	pop    %esi
80104de5:	5f                   	pop    %edi
80104de6:	5d                   	pop    %ebp
80104de7:	c3                   	ret    
80104de8:	66 90                	xchg   %ax,%ax
80104dea:	66 90                	xchg   %ax,%ax
80104dec:	66 90                	xchg   %ax,%ax
80104dee:	66 90                	xchg   %ax,%ax

80104df0 <initsleeplock>:
#include "spinlock.h"
#include "sleeplock.h"

void
initsleeplock(struct sleeplock *lk, char *name)
{
80104df0:	f3 0f 1e fb          	endbr32 
80104df4:	55                   	push   %ebp
80104df5:	89 e5                	mov    %esp,%ebp
80104df7:	53                   	push   %ebx
80104df8:	83 ec 0c             	sub    $0xc,%esp
80104dfb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  initlock(&lk->lk, "sleep lock");
80104dfe:	68 24 dc 10 80       	push   $0x8010dc24
80104e03:	8d 43 04             	lea    0x4(%ebx),%eax
80104e06:	50                   	push   %eax
80104e07:	e8 24 01 00 00       	call   80104f30 <initlock>
  lk->name = name;
80104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
  lk->locked = 0;
80104e0f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  lk->pid = 0;
}
80104e15:	83 c4 10             	add    $0x10,%esp
  lk->pid = 0;
80104e18:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
  lk->name = name;
80104e1f:	89 43 38             	mov    %eax,0x38(%ebx)
}
80104e22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104e25:	c9                   	leave  
80104e26:	c3                   	ret    
80104e27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104e2e:	66 90                	xchg   %ax,%ax

80104e30 <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
80104e30:	f3 0f 1e fb          	endbr32 
80104e34:	55                   	push   %ebp
80104e35:	89 e5                	mov    %esp,%ebp
80104e37:	56                   	push   %esi
80104e38:	53                   	push   %ebx
80104e39:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&lk->lk);
80104e3c:	8d 73 04             	lea    0x4(%ebx),%esi
80104e3f:	83 ec 0c             	sub    $0xc,%esp
80104e42:	56                   	push   %esi
80104e43:	e8 68 02 00 00       	call   801050b0 <acquire>
  while (lk->locked) {
80104e48:	8b 13                	mov    (%ebx),%edx
80104e4a:	83 c4 10             	add    $0x10,%esp
80104e4d:	85 d2                	test   %edx,%edx
80104e4f:	74 1a                	je     80104e6b <acquiresleep+0x3b>
80104e51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    sleep(lk, &lk->lk);
80104e58:	83 ec 08             	sub    $0x8,%esp
80104e5b:	56                   	push   %esi
80104e5c:	53                   	push   %ebx
80104e5d:	e8 0e fc ff ff       	call   80104a70 <sleep>
  while (lk->locked) {
80104e62:	8b 03                	mov    (%ebx),%eax
80104e64:	83 c4 10             	add    $0x10,%esp
80104e67:	85 c0                	test   %eax,%eax
80104e69:	75 ed                	jne    80104e58 <acquiresleep+0x28>
  }
  lk->locked = 1;
80104e6b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
  lk->pid = myproc()->pid;
80104e71:	e8 3a f6 ff ff       	call   801044b0 <myproc>
80104e76:	8b 40 10             	mov    0x10(%eax),%eax
80104e79:	89 43 3c             	mov    %eax,0x3c(%ebx)
  release(&lk->lk);
80104e7c:	89 75 08             	mov    %esi,0x8(%ebp)
}
80104e7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104e82:	5b                   	pop    %ebx
80104e83:	5e                   	pop    %esi
80104e84:	5d                   	pop    %ebp
  release(&lk->lk);
80104e85:	e9 e6 02 00 00       	jmp    80105170 <release>
80104e8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104e90 <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
80104e90:	f3 0f 1e fb          	endbr32 
80104e94:	55                   	push   %ebp
80104e95:	89 e5                	mov    %esp,%ebp
80104e97:	56                   	push   %esi
80104e98:	53                   	push   %ebx
80104e99:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&lk->lk);
80104e9c:	8d 73 04             	lea    0x4(%ebx),%esi
80104e9f:	83 ec 0c             	sub    $0xc,%esp
80104ea2:	56                   	push   %esi
80104ea3:	e8 08 02 00 00       	call   801050b0 <acquire>
  lk->locked = 0;
80104ea8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  lk->pid = 0;
80104eae:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
  wakeup(lk);
80104eb5:	89 1c 24             	mov    %ebx,(%esp)
80104eb8:	e8 73 fd ff ff       	call   80104c30 <wakeup>
  release(&lk->lk);
80104ebd:	89 75 08             	mov    %esi,0x8(%ebp)
80104ec0:	83 c4 10             	add    $0x10,%esp
}
80104ec3:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104ec6:	5b                   	pop    %ebx
80104ec7:	5e                   	pop    %esi
80104ec8:	5d                   	pop    %ebp
  release(&lk->lk);
80104ec9:	e9 a2 02 00 00       	jmp    80105170 <release>
80104ece:	66 90                	xchg   %ax,%ax

80104ed0 <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
80104ed0:	f3 0f 1e fb          	endbr32 
80104ed4:	55                   	push   %ebp
80104ed5:	89 e5                	mov    %esp,%ebp
80104ed7:	57                   	push   %edi
80104ed8:	31 ff                	xor    %edi,%edi
80104eda:	56                   	push   %esi
80104edb:	53                   	push   %ebx
80104edc:	83 ec 18             	sub    $0x18,%esp
80104edf:	8b 5d 08             	mov    0x8(%ebp),%ebx
  int r;
  
  acquire(&lk->lk);
80104ee2:	8d 73 04             	lea    0x4(%ebx),%esi
80104ee5:	56                   	push   %esi
80104ee6:	e8 c5 01 00 00       	call   801050b0 <acquire>
  r = lk->locked && (lk->pid == myproc()->pid);
80104eeb:	8b 03                	mov    (%ebx),%eax
80104eed:	83 c4 10             	add    $0x10,%esp
80104ef0:	85 c0                	test   %eax,%eax
80104ef2:	75 1c                	jne    80104f10 <holdingsleep+0x40>
  release(&lk->lk);
80104ef4:	83 ec 0c             	sub    $0xc,%esp
80104ef7:	56                   	push   %esi
80104ef8:	e8 73 02 00 00       	call   80105170 <release>
  return r;
}
80104efd:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104f00:	89 f8                	mov    %edi,%eax
80104f02:	5b                   	pop    %ebx
80104f03:	5e                   	pop    %esi
80104f04:	5f                   	pop    %edi
80104f05:	5d                   	pop    %ebp
80104f06:	c3                   	ret    
80104f07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104f0e:	66 90                	xchg   %ax,%ax
  r = lk->locked && (lk->pid == myproc()->pid);
80104f10:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
80104f13:	e8 98 f5 ff ff       	call   801044b0 <myproc>
80104f18:	39 58 10             	cmp    %ebx,0x10(%eax)
80104f1b:	0f 94 c0             	sete   %al
80104f1e:	0f b6 c0             	movzbl %al,%eax
80104f21:	89 c7                	mov    %eax,%edi
80104f23:	eb cf                	jmp    80104ef4 <holdingsleep+0x24>
80104f25:	66 90                	xchg   %ax,%ax
80104f27:	66 90                	xchg   %ax,%ax
80104f29:	66 90                	xchg   %ax,%ax
80104f2b:	66 90                	xchg   %ax,%ax
80104f2d:	66 90                	xchg   %ax,%ax
80104f2f:	90                   	nop

80104f30 <initlock>:
#include "proc.h"
#include "spinlock.h"

void
initlock(struct spinlock *lk, char *name)
{
80104f30:	f3 0f 1e fb          	endbr32 
80104f34:	55                   	push   %ebp
80104f35:	89 e5                	mov    %esp,%ebp
80104f37:	8b 45 08             	mov    0x8(%ebp),%eax
  lk->name = name;
80104f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
  lk->locked = 0;
80104f3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  lk->name = name;
80104f43:	89 50 04             	mov    %edx,0x4(%eax)
  lk->cpu = 0;
80104f46:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
80104f4d:	5d                   	pop    %ebp
80104f4e:	c3                   	ret    
80104f4f:	90                   	nop

80104f50 <getcallerpcs>:
}

// Record the current call stack in pcs[] by following the %ebp chain.
void
getcallerpcs(void *v, uint pcs[])
{
80104f50:	f3 0f 1e fb          	endbr32 
80104f54:	55                   	push   %ebp
  uint *ebp;
  int i;

  ebp = (uint*)v - 2;
  for(i = 0; i < 10; i++){
80104f55:	31 d2                	xor    %edx,%edx
{
80104f57:	89 e5                	mov    %esp,%ebp
80104f59:	53                   	push   %ebx
  ebp = (uint*)v - 2;
80104f5a:	8b 45 08             	mov    0x8(%ebp),%eax
{
80104f5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  ebp = (uint*)v - 2;
80104f60:	83 e8 08             	sub    $0x8,%eax
  for(i = 0; i < 10; i++){
80104f63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104f67:	90                   	nop
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
80104f68:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
80104f6e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
80104f74:	77 1a                	ja     80104f90 <getcallerpcs+0x40>
      break;
    pcs[i] = ebp[1];     // saved %eip
80104f76:	8b 58 04             	mov    0x4(%eax),%ebx
80104f79:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
  for(i = 0; i < 10; i++){
80104f7c:	83 c2 01             	add    $0x1,%edx
    ebp = (uint*)ebp[0]; // saved %ebp
80104f7f:	8b 00                	mov    (%eax),%eax
  for(i = 0; i < 10; i++){
80104f81:	83 fa 0a             	cmp    $0xa,%edx
80104f84:	75 e2                	jne    80104f68 <getcallerpcs+0x18>
  }
  for(; i < 10; i++)
    pcs[i] = 0;
}
80104f86:	5b                   	pop    %ebx
80104f87:	5d                   	pop    %ebp
80104f88:	c3                   	ret    
80104f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  for(; i < 10; i++)
80104f90:	8d 04 91             	lea    (%ecx,%edx,4),%eax
80104f93:	8d 51 28             	lea    0x28(%ecx),%edx
80104f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104f9d:	8d 76 00             	lea    0x0(%esi),%esi
    pcs[i] = 0;
80104fa0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  for(; i < 10; i++)
80104fa6:	83 c0 04             	add    $0x4,%eax
80104fa9:	39 d0                	cmp    %edx,%eax
80104fab:	75 f3                	jne    80104fa0 <getcallerpcs+0x50>
}
80104fad:	5b                   	pop    %ebx
80104fae:	5d                   	pop    %ebp
80104faf:	c3                   	ret    

80104fb0 <pushcli>:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void
pushcli(void)
{
80104fb0:	f3 0f 1e fb          	endbr32 
80104fb4:	55                   	push   %ebp
80104fb5:	89 e5                	mov    %esp,%ebp
80104fb7:	53                   	push   %ebx
80104fb8:	83 ec 04             	sub    $0x4,%esp
80104fbb:	9c                   	pushf  
80104fbc:	5b                   	pop    %ebx
  asm volatile("cli");
80104fbd:	fa                   	cli    
  int eflags;

  eflags = readeflags();
  cli();
  if(mycpu()->ncli == 0)
80104fbe:	e8 5d f4 ff ff       	call   80104420 <mycpu>
80104fc3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
80104fc9:	85 c0                	test   %eax,%eax
80104fcb:	74 13                	je     80104fe0 <pushcli+0x30>
    mycpu()->intena = eflags & FL_IF;
  mycpu()->ncli += 1;
80104fcd:	e8 4e f4 ff ff       	call   80104420 <mycpu>
80104fd2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
}
80104fd9:	83 c4 04             	add    $0x4,%esp
80104fdc:	5b                   	pop    %ebx
80104fdd:	5d                   	pop    %ebp
80104fde:	c3                   	ret    
80104fdf:	90                   	nop
    mycpu()->intena = eflags & FL_IF;
80104fe0:	e8 3b f4 ff ff       	call   80104420 <mycpu>
80104fe5:	81 e3 00 02 00 00    	and    $0x200,%ebx
80104feb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
80104ff1:	eb da                	jmp    80104fcd <pushcli+0x1d>
80104ff3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80105000 <popcli>:

void
popcli(void)
{
80105000:	f3 0f 1e fb          	endbr32 
80105004:	55                   	push   %ebp
80105005:	89 e5                	mov    %esp,%ebp
80105007:	83 ec 08             	sub    $0x8,%esp
  asm volatile("pushfl; popl %0" : "=r" (eflags));
8010500a:	9c                   	pushf  
8010500b:	58                   	pop    %eax
  if(readeflags()&FL_IF)
8010500c:	f6 c4 02             	test   $0x2,%ah
8010500f:	75 31                	jne    80105042 <popcli+0x42>
    panic("popcli - interruptible");
  if(--mycpu()->ncli < 0)
80105011:	e8 0a f4 ff ff       	call   80104420 <mycpu>
80105016:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
8010501d:	78 30                	js     8010504f <popcli+0x4f>
    panic("popcli");
  if(mycpu()->ncli == 0 && mycpu()->intena)
8010501f:	e8 fc f3 ff ff       	call   80104420 <mycpu>
80105024:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
8010502a:	85 d2                	test   %edx,%edx
8010502c:	74 02                	je     80105030 <popcli+0x30>
    sti();
}
8010502e:	c9                   	leave  
8010502f:	c3                   	ret    
  if(mycpu()->ncli == 0 && mycpu()->intena)
80105030:	e8 eb f3 ff ff       	call   80104420 <mycpu>
80105035:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
8010503b:	85 c0                	test   %eax,%eax
8010503d:	74 ef                	je     8010502e <popcli+0x2e>
  asm volatile("sti");
8010503f:	fb                   	sti    
}
80105040:	c9                   	leave  
80105041:	c3                   	ret    
    panic("popcli - interruptible");
80105042:	83 ec 0c             	sub    $0xc,%esp
80105045:	68 2f dc 10 80       	push   $0x8010dc2f
8010504a:	e8 d1 b3 ff ff       	call   80100420 <panic>
    panic("popcli");
8010504f:	83 ec 0c             	sub    $0xc,%esp
80105052:	68 46 dc 10 80       	push   $0x8010dc46
80105057:	e8 c4 b3 ff ff       	call   80100420 <panic>
8010505c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80105060 <holding>:
{
80105060:	f3 0f 1e fb          	endbr32 
80105064:	55                   	push   %ebp
80105065:	89 e5                	mov    %esp,%ebp
80105067:	56                   	push   %esi
80105068:	53                   	push   %ebx
80105069:	8b 75 08             	mov    0x8(%ebp),%esi
8010506c:	31 db                	xor    %ebx,%ebx
  pushcli();
8010506e:	e8 3d ff ff ff       	call   80104fb0 <pushcli>
  r = lock->locked && lock->cpu == mycpu();
80105073:	8b 06                	mov    (%esi),%eax
80105075:	85 c0                	test   %eax,%eax
80105077:	75 0f                	jne    80105088 <holding+0x28>
  popcli();
80105079:	e8 82 ff ff ff       	call   80105000 <popcli>
}
8010507e:	89 d8                	mov    %ebx,%eax
80105080:	5b                   	pop    %ebx
80105081:	5e                   	pop    %esi
80105082:	5d                   	pop    %ebp
80105083:	c3                   	ret    
80105084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  r = lock->locked && lock->cpu == mycpu();
80105088:	8b 5e 08             	mov    0x8(%esi),%ebx
8010508b:	e8 90 f3 ff ff       	call   80104420 <mycpu>
80105090:	39 c3                	cmp    %eax,%ebx
80105092:	0f 94 c3             	sete   %bl
  popcli();
80105095:	e8 66 ff ff ff       	call   80105000 <popcli>
  r = lock->locked && lock->cpu == mycpu();
8010509a:	0f b6 db             	movzbl %bl,%ebx
}
8010509d:	89 d8                	mov    %ebx,%eax
8010509f:	5b                   	pop    %ebx
801050a0:	5e                   	pop    %esi
801050a1:	5d                   	pop    %ebp
801050a2:	c3                   	ret    
801050a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801050aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801050b0 <acquire>:
{
801050b0:	f3 0f 1e fb          	endbr32 
801050b4:	55                   	push   %ebp
801050b5:	89 e5                	mov    %esp,%ebp
801050b7:	56                   	push   %esi
801050b8:	53                   	push   %ebx
  pushcli(); // disable interrupts to avoid deadlock.
801050b9:	e8 f2 fe ff ff       	call   80104fb0 <pushcli>
  if(holding(lk))
801050be:	8b 5d 08             	mov    0x8(%ebp),%ebx
801050c1:	83 ec 0c             	sub    $0xc,%esp
801050c4:	53                   	push   %ebx
801050c5:	e8 96 ff ff ff       	call   80105060 <holding>
801050ca:	83 c4 10             	add    $0x10,%esp
801050cd:	85 c0                	test   %eax,%eax
801050cf:	0f 85 7f 00 00 00    	jne    80105154 <acquire+0xa4>
801050d5:	89 c6                	mov    %eax,%esi
  asm volatile("lock; xchgl %0, %1" :
801050d7:	ba 01 00 00 00       	mov    $0x1,%edx
801050dc:	eb 05                	jmp    801050e3 <acquire+0x33>
801050de:	66 90                	xchg   %ax,%ax
801050e0:	8b 5d 08             	mov    0x8(%ebp),%ebx
801050e3:	89 d0                	mov    %edx,%eax
801050e5:	f0 87 03             	lock xchg %eax,(%ebx)
  while(xchg(&lk->locked, 1) != 0)
801050e8:	85 c0                	test   %eax,%eax
801050ea:	75 f4                	jne    801050e0 <acquire+0x30>
  __sync_synchronize();
801050ec:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
  lk->cpu = mycpu();
801050f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
801050f4:	e8 27 f3 ff ff       	call   80104420 <mycpu>
801050f9:	89 43 08             	mov    %eax,0x8(%ebx)
  ebp = (uint*)v - 2;
801050fc:	89 e8                	mov    %ebp,%eax
801050fe:	66 90                	xchg   %ax,%ax
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
80105100:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
80105106:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
8010510c:	77 22                	ja     80105130 <acquire+0x80>
    pcs[i] = ebp[1];     // saved %eip
8010510e:	8b 50 04             	mov    0x4(%eax),%edx
80105111:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
  for(i = 0; i < 10; i++){
80105115:	83 c6 01             	add    $0x1,%esi
    ebp = (uint*)ebp[0]; // saved %ebp
80105118:	8b 00                	mov    (%eax),%eax
  for(i = 0; i < 10; i++){
8010511a:	83 fe 0a             	cmp    $0xa,%esi
8010511d:	75 e1                	jne    80105100 <acquire+0x50>
}
8010511f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105122:	5b                   	pop    %ebx
80105123:	5e                   	pop    %esi
80105124:	5d                   	pop    %ebp
80105125:	c3                   	ret    
80105126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010512d:	8d 76 00             	lea    0x0(%esi),%esi
  for(; i < 10; i++)
80105130:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
80105134:	83 c3 34             	add    $0x34,%ebx
80105137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010513e:	66 90                	xchg   %ax,%ax
    pcs[i] = 0;
80105140:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  for(; i < 10; i++)
80105146:	83 c0 04             	add    $0x4,%eax
80105149:	39 d8                	cmp    %ebx,%eax
8010514b:	75 f3                	jne    80105140 <acquire+0x90>
}
8010514d:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105150:	5b                   	pop    %ebx
80105151:	5e                   	pop    %esi
80105152:	5d                   	pop    %ebp
80105153:	c3                   	ret    
    panic("acquire");
80105154:	83 ec 0c             	sub    $0xc,%esp
80105157:	68 4d dc 10 80       	push   $0x8010dc4d
8010515c:	e8 bf b2 ff ff       	call   80100420 <panic>
80105161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010516f:	90                   	nop

80105170 <release>:
{
80105170:	f3 0f 1e fb          	endbr32 
80105174:	55                   	push   %ebp
80105175:	89 e5                	mov    %esp,%ebp
80105177:	53                   	push   %ebx
80105178:	83 ec 10             	sub    $0x10,%esp
8010517b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(!holding(lk))
8010517e:	53                   	push   %ebx
8010517f:	e8 dc fe ff ff       	call   80105060 <holding>
80105184:	83 c4 10             	add    $0x10,%esp
80105187:	85 c0                	test   %eax,%eax
80105189:	74 22                	je     801051ad <release+0x3d>
  lk->pcs[0] = 0;
8010518b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  lk->cpu = 0;
80105192:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  __sync_synchronize();
80105199:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
8010519e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
}
801051a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801051a7:	c9                   	leave  
  popcli();
801051a8:	e9 53 fe ff ff       	jmp    80105000 <popcli>
    panic("release");
801051ad:	83 ec 0c             	sub    $0xc,%esp
801051b0:	68 55 dc 10 80       	push   $0x8010dc55
801051b5:	e8 66 b2 ff ff       	call   80100420 <panic>
801051ba:	66 90                	xchg   %ax,%ax
801051bc:	66 90                	xchg   %ax,%ax
801051be:	66 90                	xchg   %ax,%ax

801051c0 <memset>:
#include "types.h"
#include "x86.h"

void*
memset(void *dst, int c, uint n)
{
801051c0:	f3 0f 1e fb          	endbr32 
801051c4:	55                   	push   %ebp
801051c5:	89 e5                	mov    %esp,%ebp
801051c7:	57                   	push   %edi
801051c8:	8b 55 08             	mov    0x8(%ebp),%edx
801051cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
801051ce:	53                   	push   %ebx
801051cf:	8b 45 0c             	mov    0xc(%ebp),%eax
  if ((int)dst%4 == 0 && n%4 == 0){
801051d2:	89 d7                	mov    %edx,%edi
801051d4:	09 cf                	or     %ecx,%edi
801051d6:	83 e7 03             	and    $0x3,%edi
801051d9:	75 25                	jne    80105200 <memset+0x40>
    c &= 0xFF;
801051db:	0f b6 f8             	movzbl %al,%edi
    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
801051de:	c1 e0 18             	shl    $0x18,%eax
801051e1:	89 fb                	mov    %edi,%ebx
801051e3:	c1 e9 02             	shr    $0x2,%ecx
801051e6:	c1 e3 10             	shl    $0x10,%ebx
801051e9:	09 d8                	or     %ebx,%eax
801051eb:	09 f8                	or     %edi,%eax
801051ed:	c1 e7 08             	shl    $0x8,%edi
801051f0:	09 f8                	or     %edi,%eax
  asm volatile("cld; rep stosl" :
801051f2:	89 d7                	mov    %edx,%edi
801051f4:	fc                   	cld    
801051f5:	f3 ab                	rep stos %eax,%es:(%edi)
  } else
    stosb(dst, c, n);
  return dst;
}
801051f7:	5b                   	pop    %ebx
801051f8:	89 d0                	mov    %edx,%eax
801051fa:	5f                   	pop    %edi
801051fb:	5d                   	pop    %ebp
801051fc:	c3                   	ret    
801051fd:	8d 76 00             	lea    0x0(%esi),%esi
  asm volatile("cld; rep stosb" :
80105200:	89 d7                	mov    %edx,%edi
80105202:	fc                   	cld    
80105203:	f3 aa                	rep stos %al,%es:(%edi)
80105205:	5b                   	pop    %ebx
80105206:	89 d0                	mov    %edx,%eax
80105208:	5f                   	pop    %edi
80105209:	5d                   	pop    %ebp
8010520a:	c3                   	ret    
8010520b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010520f:	90                   	nop

80105210 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
80105210:	f3 0f 1e fb          	endbr32 
80105214:	55                   	push   %ebp
80105215:	89 e5                	mov    %esp,%ebp
80105217:	56                   	push   %esi
80105218:	8b 75 10             	mov    0x10(%ebp),%esi
8010521b:	8b 55 08             	mov    0x8(%ebp),%edx
8010521e:	53                   	push   %ebx
8010521f:	8b 45 0c             	mov    0xc(%ebp),%eax
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
80105222:	85 f6                	test   %esi,%esi
80105224:	74 2a                	je     80105250 <memcmp+0x40>
80105226:	01 c6                	add    %eax,%esi
80105228:	eb 10                	jmp    8010523a <memcmp+0x2a>
8010522a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if(*s1 != *s2)
      return *s1 - *s2;
    s1++, s2++;
80105230:	83 c0 01             	add    $0x1,%eax
80105233:	83 c2 01             	add    $0x1,%edx
  while(n-- > 0){
80105236:	39 f0                	cmp    %esi,%eax
80105238:	74 16                	je     80105250 <memcmp+0x40>
    if(*s1 != *s2)
8010523a:	0f b6 0a             	movzbl (%edx),%ecx
8010523d:	0f b6 18             	movzbl (%eax),%ebx
80105240:	38 d9                	cmp    %bl,%cl
80105242:	74 ec                	je     80105230 <memcmp+0x20>
      return *s1 - *s2;
80105244:	0f b6 c1             	movzbl %cl,%eax
80105247:	29 d8                	sub    %ebx,%eax
  }

  return 0;
}
80105249:	5b                   	pop    %ebx
8010524a:	5e                   	pop    %esi
8010524b:	5d                   	pop    %ebp
8010524c:	c3                   	ret    
8010524d:	8d 76 00             	lea    0x0(%esi),%esi
80105250:	5b                   	pop    %ebx
  return 0;
80105251:	31 c0                	xor    %eax,%eax
}
80105253:	5e                   	pop    %esi
80105254:	5d                   	pop    %ebp
80105255:	c3                   	ret    
80105256:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010525d:	8d 76 00             	lea    0x0(%esi),%esi

80105260 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
80105260:	f3 0f 1e fb          	endbr32 
80105264:	55                   	push   %ebp
80105265:	89 e5                	mov    %esp,%ebp
80105267:	57                   	push   %edi
80105268:	8b 55 08             	mov    0x8(%ebp),%edx
8010526b:	8b 4d 10             	mov    0x10(%ebp),%ecx
8010526e:	56                   	push   %esi
8010526f:	8b 75 0c             	mov    0xc(%ebp),%esi
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
80105272:	39 d6                	cmp    %edx,%esi
80105274:	73 2a                	jae    801052a0 <memmove+0x40>
80105276:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
80105279:	39 fa                	cmp    %edi,%edx
8010527b:	73 23                	jae    801052a0 <memmove+0x40>
8010527d:	8d 41 ff             	lea    -0x1(%ecx),%eax
    s += n;
    d += n;
    while(n-- > 0)
80105280:	85 c9                	test   %ecx,%ecx
80105282:	74 13                	je     80105297 <memmove+0x37>
80105284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      *--d = *--s;
80105288:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
8010528c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
    while(n-- > 0)
8010528f:	83 e8 01             	sub    $0x1,%eax
80105292:	83 f8 ff             	cmp    $0xffffffff,%eax
80105295:	75 f1                	jne    80105288 <memmove+0x28>
  } else
    while(n-- > 0)
      *d++ = *s++;

  return dst;
}
80105297:	5e                   	pop    %esi
80105298:	89 d0                	mov    %edx,%eax
8010529a:	5f                   	pop    %edi
8010529b:	5d                   	pop    %ebp
8010529c:	c3                   	ret    
8010529d:	8d 76 00             	lea    0x0(%esi),%esi
    while(n-- > 0)
801052a0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
801052a3:	89 d7                	mov    %edx,%edi
801052a5:	85 c9                	test   %ecx,%ecx
801052a7:	74 ee                	je     80105297 <memmove+0x37>
801052a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      *d++ = *s++;
801052b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    while(n-- > 0)
801052b1:	39 f0                	cmp    %esi,%eax
801052b3:	75 fb                	jne    801052b0 <memmove+0x50>
}
801052b5:	5e                   	pop    %esi
801052b6:	89 d0                	mov    %edx,%eax
801052b8:	5f                   	pop    %edi
801052b9:	5d                   	pop    %ebp
801052ba:	c3                   	ret    
801052bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801052bf:	90                   	nop

801052c0 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
801052c0:	f3 0f 1e fb          	endbr32 
  return memmove(dst, src, n);
801052c4:	eb 9a                	jmp    80105260 <memmove>
801052c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801052cd:	8d 76 00             	lea    0x0(%esi),%esi

801052d0 <strncmp>:
}

int
strncmp(const char *p, const char *q, uint n)
{
801052d0:	f3 0f 1e fb          	endbr32 
801052d4:	55                   	push   %ebp
801052d5:	89 e5                	mov    %esp,%ebp
801052d7:	56                   	push   %esi
801052d8:	8b 75 10             	mov    0x10(%ebp),%esi
801052db:	8b 4d 08             	mov    0x8(%ebp),%ecx
801052de:	53                   	push   %ebx
801052df:	8b 45 0c             	mov    0xc(%ebp),%eax
  while(n > 0 && *p && *p == *q)
801052e2:	85 f6                	test   %esi,%esi
801052e4:	74 32                	je     80105318 <strncmp+0x48>
801052e6:	01 c6                	add    %eax,%esi
801052e8:	eb 14                	jmp    801052fe <strncmp+0x2e>
801052ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801052f0:	38 da                	cmp    %bl,%dl
801052f2:	75 14                	jne    80105308 <strncmp+0x38>
    n--, p++, q++;
801052f4:	83 c0 01             	add    $0x1,%eax
801052f7:	83 c1 01             	add    $0x1,%ecx
  while(n > 0 && *p && *p == *q)
801052fa:	39 f0                	cmp    %esi,%eax
801052fc:	74 1a                	je     80105318 <strncmp+0x48>
801052fe:	0f b6 11             	movzbl (%ecx),%edx
80105301:	0f b6 18             	movzbl (%eax),%ebx
80105304:	84 d2                	test   %dl,%dl
80105306:	75 e8                	jne    801052f0 <strncmp+0x20>
  if(n == 0)
    return 0;
  return (uchar)*p - (uchar)*q;
80105308:	0f b6 c2             	movzbl %dl,%eax
8010530b:	29 d8                	sub    %ebx,%eax
}
8010530d:	5b                   	pop    %ebx
8010530e:	5e                   	pop    %esi
8010530f:	5d                   	pop    %ebp
80105310:	c3                   	ret    
80105311:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105318:	5b                   	pop    %ebx
    return 0;
80105319:	31 c0                	xor    %eax,%eax
}
8010531b:	5e                   	pop    %esi
8010531c:	5d                   	pop    %ebp
8010531d:	c3                   	ret    
8010531e:	66 90                	xchg   %ax,%ax

80105320 <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
80105320:	f3 0f 1e fb          	endbr32 
80105324:	55                   	push   %ebp
80105325:	89 e5                	mov    %esp,%ebp
80105327:	57                   	push   %edi
80105328:	56                   	push   %esi
80105329:	8b 75 08             	mov    0x8(%ebp),%esi
8010532c:	53                   	push   %ebx
8010532d:	8b 45 10             	mov    0x10(%ebp),%eax
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
80105330:	89 f2                	mov    %esi,%edx
80105332:	eb 1b                	jmp    8010534f <strncpy+0x2f>
80105334:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80105338:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
8010533c:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010533f:	83 c2 01             	add    $0x1,%edx
80105342:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
80105346:	89 f9                	mov    %edi,%ecx
80105348:	88 4a ff             	mov    %cl,-0x1(%edx)
8010534b:	84 c9                	test   %cl,%cl
8010534d:	74 09                	je     80105358 <strncpy+0x38>
8010534f:	89 c3                	mov    %eax,%ebx
80105351:	83 e8 01             	sub    $0x1,%eax
80105354:	85 db                	test   %ebx,%ebx
80105356:	7f e0                	jg     80105338 <strncpy+0x18>
    ;
  while(n-- > 0)
80105358:	89 d1                	mov    %edx,%ecx
8010535a:	85 c0                	test   %eax,%eax
8010535c:	7e 15                	jle    80105373 <strncpy+0x53>
8010535e:	66 90                	xchg   %ax,%ax
    *s++ = 0;
80105360:	83 c1 01             	add    $0x1,%ecx
80105363:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
  while(n-- > 0)
80105367:	89 c8                	mov    %ecx,%eax
80105369:	f7 d0                	not    %eax
8010536b:	01 d0                	add    %edx,%eax
8010536d:	01 d8                	add    %ebx,%eax
8010536f:	85 c0                	test   %eax,%eax
80105371:	7f ed                	jg     80105360 <strncpy+0x40>
  return os;
}
80105373:	5b                   	pop    %ebx
80105374:	89 f0                	mov    %esi,%eax
80105376:	5e                   	pop    %esi
80105377:	5f                   	pop    %edi
80105378:	5d                   	pop    %ebp
80105379:	c3                   	ret    
8010537a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80105380 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
80105380:	f3 0f 1e fb          	endbr32 
80105384:	55                   	push   %ebp
80105385:	89 e5                	mov    %esp,%ebp
80105387:	56                   	push   %esi
80105388:	8b 55 10             	mov    0x10(%ebp),%edx
8010538b:	8b 75 08             	mov    0x8(%ebp),%esi
8010538e:	53                   	push   %ebx
8010538f:	8b 45 0c             	mov    0xc(%ebp),%eax
  char *os;

  os = s;
  if(n <= 0)
80105392:	85 d2                	test   %edx,%edx
80105394:	7e 21                	jle    801053b7 <safestrcpy+0x37>
80105396:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
8010539a:	89 f2                	mov    %esi,%edx
8010539c:	eb 12                	jmp    801053b0 <safestrcpy+0x30>
8010539e:	66 90                	xchg   %ax,%ax
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
801053a0:	0f b6 08             	movzbl (%eax),%ecx
801053a3:	83 c0 01             	add    $0x1,%eax
801053a6:	83 c2 01             	add    $0x1,%edx
801053a9:	88 4a ff             	mov    %cl,-0x1(%edx)
801053ac:	84 c9                	test   %cl,%cl
801053ae:	74 04                	je     801053b4 <safestrcpy+0x34>
801053b0:	39 d8                	cmp    %ebx,%eax
801053b2:	75 ec                	jne    801053a0 <safestrcpy+0x20>
    ;
  *s = 0;
801053b4:	c6 02 00             	movb   $0x0,(%edx)
  return os;
}
801053b7:	89 f0                	mov    %esi,%eax
801053b9:	5b                   	pop    %ebx
801053ba:	5e                   	pop    %esi
801053bb:	5d                   	pop    %ebp
801053bc:	c3                   	ret    
801053bd:	8d 76 00             	lea    0x0(%esi),%esi

801053c0 <strlen>:

int
strlen(const char *s)
{
801053c0:	f3 0f 1e fb          	endbr32 
801053c4:	55                   	push   %ebp
  int n;

  for(n = 0; s[n]; n++)
801053c5:	31 c0                	xor    %eax,%eax
{
801053c7:	89 e5                	mov    %esp,%ebp
801053c9:	8b 55 08             	mov    0x8(%ebp),%edx
  for(n = 0; s[n]; n++)
801053cc:	80 3a 00             	cmpb   $0x0,(%edx)
801053cf:	74 10                	je     801053e1 <strlen+0x21>
801053d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801053d8:	83 c0 01             	add    $0x1,%eax
801053db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
801053df:	75 f7                	jne    801053d8 <strlen+0x18>
    ;
  return n;
}
801053e1:	5d                   	pop    %ebp
801053e2:	c3                   	ret    
801053e3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801053ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801053f0 <strcmp>:

/* copy from JOS */

int
strcmp(const char *p, const char *q)
{
801053f0:	f3 0f 1e fb          	endbr32 
801053f4:	55                   	push   %ebp
801053f5:	89 e5                	mov    %esp,%ebp
801053f7:	53                   	push   %ebx
801053f8:	8b 4d 08             	mov    0x8(%ebp),%ecx
801053fb:	8b 55 0c             	mov    0xc(%ebp),%edx
  while(*p && *p == *q)
801053fe:	0f b6 01             	movzbl (%ecx),%eax
80105401:	0f b6 1a             	movzbl (%edx),%ebx
80105404:	84 c0                	test   %al,%al
80105406:	75 19                	jne    80105421 <strcmp+0x31>
80105408:	eb 26                	jmp    80105430 <strcmp+0x40>
8010540a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80105410:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
    p++, q++;
80105414:	83 c1 01             	add    $0x1,%ecx
80105417:	83 c2 01             	add    $0x1,%edx
  while(*p && *p == *q)
8010541a:	0f b6 1a             	movzbl (%edx),%ebx
8010541d:	84 c0                	test   %al,%al
8010541f:	74 0f                	je     80105430 <strcmp+0x40>
80105421:	38 d8                	cmp    %bl,%al
80105423:	74 eb                	je     80105410 <strcmp+0x20>
  return (uchar)*p - (uchar)*q;
80105425:	29 d8                	sub    %ebx,%eax
}
80105427:	5b                   	pop    %ebx
80105428:	5d                   	pop    %ebp
80105429:	c3                   	ret    
8010542a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80105430:	31 c0                	xor    %eax,%eax
  return (uchar)*p - (uchar)*q;
80105432:	29 d8                	sub    %ebx,%eax
}
80105434:	5b                   	pop    %ebx
80105435:	5d                   	pop    %ebp
80105436:	c3                   	ret    
80105437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010543e:	66 90                	xchg   %ax,%ax

80105440 <strnlen>:

int
strnlen(const char *s, size_t size)
{
80105440:	f3 0f 1e fb          	endbr32 
80105444:	55                   	push   %ebp
        int n;

        for (n = 0; size > 0 && *s != '\0'; s++, size--)
80105445:	31 c0                	xor    %eax,%eax
{
80105447:	89 e5                	mov    %esp,%ebp
80105449:	8b 55 0c             	mov    0xc(%ebp),%edx
8010544c:	8b 4d 08             	mov    0x8(%ebp),%ecx
        for (n = 0; size > 0 && *s != '\0'; s++, size--)
8010544f:	85 d2                	test   %edx,%edx
80105451:	75 0c                	jne    8010545f <strnlen+0x1f>
80105453:	eb 10                	jmp    80105465 <strnlen+0x25>
80105455:	8d 76 00             	lea    0x0(%esi),%esi
                n++;
80105458:	83 c0 01             	add    $0x1,%eax
        for (n = 0; size > 0 && *s != '\0'; s++, size--)
8010545b:	39 d0                	cmp    %edx,%eax
8010545d:	74 06                	je     80105465 <strnlen+0x25>
8010545f:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
80105463:	75 f3                	jne    80105458 <strnlen+0x18>
        return n;
}
80105465:	5d                   	pop    %ebp
80105466:	c3                   	ret    
80105467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010546e:	66 90                	xchg   %ax,%ax

80105470 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
80105470:	f3 0f 1e fb          	endbr32 
80105474:	55                   	push   %ebp
80105475:	89 e5                	mov    %esp,%ebp
80105477:	57                   	push   %edi
80105478:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010547b:	56                   	push   %esi
8010547c:	53                   	push   %ebx
8010547d:	8b 5d 10             	mov    0x10(%ebp),%ebx
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t')
80105480:	0f b6 01             	movzbl (%ecx),%eax
80105483:	3c 09                	cmp    $0x9,%al
80105485:	74 09                	je     80105490 <strtol+0x20>
80105487:	3c 20                	cmp    $0x20,%al
80105489:	75 14                	jne    8010549f <strtol+0x2f>
8010548b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010548f:	90                   	nop
80105490:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
        s++;
80105494:	83 c1 01             	add    $0x1,%ecx
    while (*s == ' ' || *s == '\t')
80105497:	3c 20                	cmp    $0x20,%al
80105499:	74 f5                	je     80105490 <strtol+0x20>
8010549b:	3c 09                	cmp    $0x9,%al
8010549d:	74 f1                	je     80105490 <strtol+0x20>

    // plus/minus sign
    if (*s == '+')
8010549f:	3c 2b                	cmp    $0x2b,%al
801054a1:	0f 84 a9 00 00 00    	je     80105550 <strtol+0xe0>
    int neg = 0;
801054a7:	31 ff                	xor    %edi,%edi
        s++;
    else if (*s == '-')
801054a9:	3c 2d                	cmp    $0x2d,%al
801054ab:	0f 84 8f 00 00 00    	je     80105540 <strtol+0xd0>
        s++, neg = 1;

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
801054b1:	0f be 11             	movsbl (%ecx),%edx
801054b4:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebx
801054ba:	75 12                	jne    801054ce <strtol+0x5e>
801054bc:	80 fa 30             	cmp    $0x30,%dl
801054bf:	0f 84 9b 00 00 00    	je     80105560 <strtol+0xf0>
        s += 2, base = 16;
    else if (base == 0 && s[0] == '0')
801054c5:	85 db                	test   %ebx,%ebx
801054c7:	75 05                	jne    801054ce <strtol+0x5e>
        s++, base = 8;
    else if (base == 0)
        base = 10;
801054c9:	bb 0a 00 00 00       	mov    $0xa,%ebx
801054ce:	89 5d 10             	mov    %ebx,0x10(%ebp)
801054d1:	31 c0                	xor    %eax,%eax
801054d3:	eb 17                	jmp    801054ec <strtol+0x7c>
801054d5:	8d 76 00             	lea    0x0(%esi),%esi
    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9')
            dig = *s - '0';
801054d8:	83 ea 30             	sub    $0x30,%edx
            dig = *s - 'a' + 10;
        else if (*s >= 'A' && *s <= 'Z')
            dig = *s - 'A' + 10;
        else
            break;
        if (dig >= base)
801054db:	3b 55 10             	cmp    0x10(%ebp),%edx
801054de:	7d 28                	jge    80105508 <strtol+0x98>
            break;
        s++, val = (val * base) + dig;
801054e0:	0f af 45 10          	imul   0x10(%ebp),%eax
801054e4:	83 c1 01             	add    $0x1,%ecx
801054e7:	01 d0                	add    %edx,%eax
    while (1) {
801054e9:	0f be 11             	movsbl (%ecx),%edx
        if (*s >= '0' && *s <= '9')
801054ec:	8d 72 d0             	lea    -0x30(%edx),%esi
801054ef:	89 f3                	mov    %esi,%ebx
801054f1:	80 fb 09             	cmp    $0x9,%bl
801054f4:	76 e2                	jbe    801054d8 <strtol+0x68>
        else if (*s >= 'a' && *s <= 'z')
801054f6:	8d 72 9f             	lea    -0x61(%edx),%esi
801054f9:	89 f3                	mov    %esi,%ebx
801054fb:	80 fb 19             	cmp    $0x19,%bl
801054fe:	77 28                	ja     80105528 <strtol+0xb8>
            dig = *s - 'a' + 10;
80105500:	83 ea 57             	sub    $0x57,%edx
        if (dig >= base)
80105503:	3b 55 10             	cmp    0x10(%ebp),%edx
80105506:	7c d8                	jl     801054e0 <strtol+0x70>
        // we don't properly detect overflow!
    }

    if (endptr)
80105508:	8b 55 0c             	mov    0xc(%ebp),%edx
8010550b:	85 d2                	test   %edx,%edx
8010550d:	74 05                	je     80105514 <strtol+0xa4>
        *endptr = (char *) s;
8010550f:	8b 75 0c             	mov    0xc(%ebp),%esi
80105512:	89 0e                	mov    %ecx,(%esi)
    return (neg ? -val : val);
80105514:	89 c2                	mov    %eax,%edx
}
80105516:	5b                   	pop    %ebx
80105517:	5e                   	pop    %esi
    return (neg ? -val : val);
80105518:	f7 da                	neg    %edx
8010551a:	85 ff                	test   %edi,%edi
}
8010551c:	5f                   	pop    %edi
8010551d:	5d                   	pop    %ebp
    return (neg ? -val : val);
8010551e:	0f 45 c2             	cmovne %edx,%eax
}
80105521:	c3                   	ret    
80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        else if (*s >= 'A' && *s <= 'Z')
80105528:	8d 72 bf             	lea    -0x41(%edx),%esi
8010552b:	89 f3                	mov    %esi,%ebx
8010552d:	80 fb 19             	cmp    $0x19,%bl
80105530:	77 d6                	ja     80105508 <strtol+0x98>
            dig = *s - 'A' + 10;
80105532:	83 ea 37             	sub    $0x37,%edx
80105535:	eb a4                	jmp    801054db <strtol+0x6b>
80105537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010553e:	66 90                	xchg   %ax,%ax
        s++, neg = 1;
80105540:	83 c1 01             	add    $0x1,%ecx
80105543:	bf 01 00 00 00       	mov    $0x1,%edi
80105548:	e9 64 ff ff ff       	jmp    801054b1 <strtol+0x41>
8010554d:	8d 76 00             	lea    0x0(%esi),%esi
        s++;
80105550:	83 c1 01             	add    $0x1,%ecx
    int neg = 0;
80105553:	31 ff                	xor    %edi,%edi
80105555:	e9 57 ff ff ff       	jmp    801054b1 <strtol+0x41>
8010555a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
80105560:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
80105564:	3c 78                	cmp    $0x78,%al
80105566:	74 18                	je     80105580 <strtol+0x110>
    else if (base == 0 && s[0] == '0')
80105568:	85 db                	test   %ebx,%ebx
8010556a:	0f 85 5e ff ff ff    	jne    801054ce <strtol+0x5e>
        s++, base = 8;
80105570:	83 c1 01             	add    $0x1,%ecx
80105573:	0f be d0             	movsbl %al,%edx
80105576:	bb 08 00 00 00       	mov    $0x8,%ebx
8010557b:	e9 4e ff ff ff       	jmp    801054ce <strtol+0x5e>
        s += 2, base = 16;
80105580:	0f be 51 02          	movsbl 0x2(%ecx),%edx
80105584:	bb 10 00 00 00       	mov    $0x10,%ebx
80105589:	83 c1 02             	add    $0x2,%ecx
8010558c:	e9 3d ff ff ff       	jmp    801054ce <strtol+0x5e>

80105591 <swtch>:
# a struct context, and save its address in *old.
# Switch stacks to new and pop previously-saved registers.

.globl swtch
swtch:
  movl 4(%esp), %eax
80105591:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
80105595:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-saved registers
  pushl %ebp
80105599:	55                   	push   %ebp
  pushl %ebx
8010559a:	53                   	push   %ebx
  pushl %esi
8010559b:	56                   	push   %esi
  pushl %edi
8010559c:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
8010559d:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
8010559f:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
801055a1:	5f                   	pop    %edi
  popl %esi
801055a2:	5e                   	pop    %esi
  popl %ebx
801055a3:	5b                   	pop    %ebx
  popl %ebp
801055a4:	5d                   	pop    %ebp
  ret
801055a5:	c3                   	ret    
801055a6:	66 90                	xchg   %ax,%ax
801055a8:	66 90                	xchg   %ax,%ax
801055aa:	66 90                	xchg   %ax,%ax
801055ac:	66 90                	xchg   %ax,%ax
801055ae:	66 90                	xchg   %ax,%ax

801055b0 <fetchint>:
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int
fetchint(uint addr, int *ip)
{
801055b0:	f3 0f 1e fb          	endbr32 
801055b4:	55                   	push   %ebp
801055b5:	89 e5                	mov    %esp,%ebp
801055b7:	53                   	push   %ebx
801055b8:	83 ec 04             	sub    $0x4,%esp
801055bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct proc *curproc = myproc();
801055be:	e8 ed ee ff ff       	call   801044b0 <myproc>

  if(addr >= curproc->sz || addr+4 > curproc->sz)
801055c3:	8b 00                	mov    (%eax),%eax
801055c5:	39 d8                	cmp    %ebx,%eax
801055c7:	76 17                	jbe    801055e0 <fetchint+0x30>
801055c9:	8d 53 04             	lea    0x4(%ebx),%edx
801055cc:	39 d0                	cmp    %edx,%eax
801055ce:	72 10                	jb     801055e0 <fetchint+0x30>
    return -1;
  *ip = *(int*)(addr);
801055d0:	8b 45 0c             	mov    0xc(%ebp),%eax
801055d3:	8b 13                	mov    (%ebx),%edx
801055d5:	89 10                	mov    %edx,(%eax)
  return 0;
801055d7:	31 c0                	xor    %eax,%eax
}
801055d9:	83 c4 04             	add    $0x4,%esp
801055dc:	5b                   	pop    %ebx
801055dd:	5d                   	pop    %ebp
801055de:	c3                   	ret    
801055df:	90                   	nop
    return -1;
801055e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801055e5:	eb f2                	jmp    801055d9 <fetchint+0x29>
801055e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801055ee:	66 90                	xchg   %ax,%ax

801055f0 <fetchstr>:
// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int
fetchstr(uint addr, char **pp)
{
801055f0:	f3 0f 1e fb          	endbr32 
801055f4:	55                   	push   %ebp
801055f5:	89 e5                	mov    %esp,%ebp
801055f7:	53                   	push   %ebx
801055f8:	83 ec 04             	sub    $0x4,%esp
801055fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  char *s, *ep;
  struct proc *curproc = myproc();
801055fe:	e8 ad ee ff ff       	call   801044b0 <myproc>

  if(addr >= curproc->sz)
80105603:	39 18                	cmp    %ebx,(%eax)
80105605:	76 31                	jbe    80105638 <fetchstr+0x48>
    return -1;
  *pp = (char*)addr;
80105607:	8b 55 0c             	mov    0xc(%ebp),%edx
8010560a:	89 1a                	mov    %ebx,(%edx)
  ep = (char*)curproc->sz;
8010560c:	8b 10                	mov    (%eax),%edx
  for(s = *pp; s < ep; s++){
8010560e:	39 d3                	cmp    %edx,%ebx
80105610:	73 26                	jae    80105638 <fetchstr+0x48>
80105612:	89 d8                	mov    %ebx,%eax
80105614:	eb 11                	jmp    80105627 <fetchstr+0x37>
80105616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010561d:	8d 76 00             	lea    0x0(%esi),%esi
80105620:	83 c0 01             	add    $0x1,%eax
80105623:	39 c2                	cmp    %eax,%edx
80105625:	76 11                	jbe    80105638 <fetchstr+0x48>
    if(*s == 0)
80105627:	80 38 00             	cmpb   $0x0,(%eax)
8010562a:	75 f4                	jne    80105620 <fetchstr+0x30>
      return s - *pp;
  }
  return -1;
}
8010562c:	83 c4 04             	add    $0x4,%esp
      return s - *pp;
8010562f:	29 d8                	sub    %ebx,%eax
}
80105631:	5b                   	pop    %ebx
80105632:	5d                   	pop    %ebp
80105633:	c3                   	ret    
80105634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80105638:	83 c4 04             	add    $0x4,%esp
    return -1;
8010563b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105640:	5b                   	pop    %ebx
80105641:	5d                   	pop    %ebp
80105642:	c3                   	ret    
80105643:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010564a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80105650 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
80105650:	f3 0f 1e fb          	endbr32 
80105654:	55                   	push   %ebp
80105655:	89 e5                	mov    %esp,%ebp
80105657:	56                   	push   %esi
80105658:	53                   	push   %ebx
  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
80105659:	e8 52 ee ff ff       	call   801044b0 <myproc>
8010565e:	8b 55 08             	mov    0x8(%ebp),%edx
80105661:	8b 40 18             	mov    0x18(%eax),%eax
80105664:	8b 40 44             	mov    0x44(%eax),%eax
80105667:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
  struct proc *curproc = myproc();
8010566a:	e8 41 ee ff ff       	call   801044b0 <myproc>
  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
8010566f:	8d 73 04             	lea    0x4(%ebx),%esi
  if(addr >= curproc->sz || addr+4 > curproc->sz)
80105672:	8b 00                	mov    (%eax),%eax
80105674:	39 c6                	cmp    %eax,%esi
80105676:	73 18                	jae    80105690 <argint+0x40>
80105678:	8d 53 08             	lea    0x8(%ebx),%edx
8010567b:	39 d0                	cmp    %edx,%eax
8010567d:	72 11                	jb     80105690 <argint+0x40>
  *ip = *(int*)(addr);
8010567f:	8b 45 0c             	mov    0xc(%ebp),%eax
80105682:	8b 53 04             	mov    0x4(%ebx),%edx
80105685:	89 10                	mov    %edx,(%eax)
  return 0;
80105687:	31 c0                	xor    %eax,%eax
}
80105689:	5b                   	pop    %ebx
8010568a:	5e                   	pop    %esi
8010568b:	5d                   	pop    %ebp
8010568c:	c3                   	ret    
8010568d:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80105690:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
80105695:	eb f2                	jmp    80105689 <argint+0x39>
80105697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010569e:	66 90                	xchg   %ax,%ax

801056a0 <argptr>:
// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size bytes.  Check that the pointer
// lies within the process address space.
int
argptr(int n, char **pp, int size)
{
801056a0:	f3 0f 1e fb          	endbr32 
801056a4:	55                   	push   %ebp
801056a5:	89 e5                	mov    %esp,%ebp
801056a7:	56                   	push   %esi
801056a8:	53                   	push   %ebx
801056a9:	83 ec 10             	sub    $0x10,%esp
801056ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
  int i;
  struct proc *curproc = myproc();
801056af:	e8 fc ed ff ff       	call   801044b0 <myproc>
 
  if(argint(n, &i) < 0)
801056b4:	83 ec 08             	sub    $0x8,%esp
  struct proc *curproc = myproc();
801056b7:	89 c6                	mov    %eax,%esi
  if(argint(n, &i) < 0)
801056b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
801056bc:	50                   	push   %eax
801056bd:	ff 75 08             	pushl  0x8(%ebp)
801056c0:	e8 8b ff ff ff       	call   80105650 <argint>
    return -1;
  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
801056c5:	83 c4 10             	add    $0x10,%esp
801056c8:	85 c0                	test   %eax,%eax
801056ca:	78 24                	js     801056f0 <argptr+0x50>
801056cc:	85 db                	test   %ebx,%ebx
801056ce:	78 20                	js     801056f0 <argptr+0x50>
801056d0:	8b 16                	mov    (%esi),%edx
801056d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801056d5:	39 c2                	cmp    %eax,%edx
801056d7:	76 17                	jbe    801056f0 <argptr+0x50>
801056d9:	01 c3                	add    %eax,%ebx
801056db:	39 da                	cmp    %ebx,%edx
801056dd:	72 11                	jb     801056f0 <argptr+0x50>
    return -1;
  *pp = (char*)i;
801056df:	8b 55 0c             	mov    0xc(%ebp),%edx
801056e2:	89 02                	mov    %eax,(%edx)
  return 0;
801056e4:	31 c0                	xor    %eax,%eax
}
801056e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
801056e9:	5b                   	pop    %ebx
801056ea:	5e                   	pop    %esi
801056eb:	5d                   	pop    %ebp
801056ec:	c3                   	ret    
801056ed:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
801056f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801056f5:	eb ef                	jmp    801056e6 <argptr+0x46>
801056f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801056fe:	66 90                	xchg   %ax,%ax

80105700 <argstr>:
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int
argstr(int n, char **pp)
{
80105700:	f3 0f 1e fb          	endbr32 
80105704:	55                   	push   %ebp
80105705:	89 e5                	mov    %esp,%ebp
80105707:	83 ec 20             	sub    $0x20,%esp
  int addr;
  if(argint(n, &addr) < 0)
8010570a:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010570d:	50                   	push   %eax
8010570e:	ff 75 08             	pushl  0x8(%ebp)
80105711:	e8 3a ff ff ff       	call   80105650 <argint>
80105716:	83 c4 10             	add    $0x10,%esp
80105719:	85 c0                	test   %eax,%eax
8010571b:	78 13                	js     80105730 <argstr+0x30>
    return -1;
  return fetchstr(addr, pp);
8010571d:	83 ec 08             	sub    $0x8,%esp
80105720:	ff 75 0c             	pushl  0xc(%ebp)
80105723:	ff 75 f4             	pushl  -0xc(%ebp)
80105726:	e8 c5 fe ff ff       	call   801055f0 <fetchstr>
8010572b:	83 c4 10             	add    $0x10,%esp
}
8010572e:	c9                   	leave  
8010572f:	c3                   	ret    
80105730:	c9                   	leave  
    return -1;
80105731:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105736:	c3                   	ret    
80105737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010573e:	66 90                	xchg   %ax,%ax

80105740 <syscall>:
[SYS_sendto]   sys_sendto,
};

void
syscall(void)
{
80105740:	f3 0f 1e fb          	endbr32 
80105744:	55                   	push   %ebp
80105745:	89 e5                	mov    %esp,%ebp
80105747:	53                   	push   %ebx
80105748:	83 ec 04             	sub    $0x4,%esp
  int num;
  struct proc *curproc = myproc();
8010574b:	e8 60 ed ff ff       	call   801044b0 <myproc>
80105750:	89 c3                	mov    %eax,%ebx

  num = curproc->tf->eax;
80105752:	8b 40 18             	mov    0x18(%eax),%eax
80105755:	8b 40 1c             	mov    0x1c(%eax),%eax
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80105758:	8d 50 ff             	lea    -0x1(%eax),%edx
8010575b:	83 fa 1e             	cmp    $0x1e,%edx
8010575e:	77 20                	ja     80105780 <syscall+0x40>
80105760:	8b 14 85 80 dc 10 80 	mov    -0x7fef2380(,%eax,4),%edx
80105767:	85 d2                	test   %edx,%edx
80105769:	74 15                	je     80105780 <syscall+0x40>
    curproc->tf->eax = syscalls[num]();
8010576b:	ff d2                	call   *%edx
8010576d:	89 c2                	mov    %eax,%edx
8010576f:	8b 43 18             	mov    0x18(%ebx),%eax
80105772:	89 50 1c             	mov    %edx,0x1c(%eax)
  } else {
    cprintf("%d %s: unknown sys call %d\n",
            curproc->pid, curproc->name, num);
    curproc->tf->eax = -1;
  }
}
80105775:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105778:	c9                   	leave  
80105779:	c3                   	ret    
8010577a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    cprintf("%d %s: unknown sys call %d\n",
80105780:	50                   	push   %eax
            curproc->pid, curproc->name, num);
80105781:	8d 43 6c             	lea    0x6c(%ebx),%eax
    cprintf("%d %s: unknown sys call %d\n",
80105784:	50                   	push   %eax
80105785:	ff 73 10             	pushl  0x10(%ebx)
80105788:	68 5d dc 10 80       	push   $0x8010dc5d
8010578d:	e8 fe ab ff ff       	call   80100390 <cprintf>
    curproc->tf->eax = -1;
80105792:	8b 43 18             	mov    0x18(%ebx),%eax
80105795:	83 c4 10             	add    $0x10,%esp
80105798:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
}
8010579f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801057a2:	c9                   	leave  
801057a3:	c3                   	ret    
801057a4:	66 90                	xchg   %ax,%ax
801057a6:	66 90                	xchg   %ax,%ax
801057a8:	66 90                	xchg   %ax,%ax
801057aa:	66 90                	xchg   %ax,%ax
801057ac:	66 90                	xchg   %ax,%ax
801057ae:	66 90                	xchg   %ax,%ax

801057b0 <create>:
  return -1;
}

static struct inode*
create(char *path, short type, short major, short minor)
{
801057b0:	55                   	push   %ebp
801057b1:	89 e5                	mov    %esp,%ebp
801057b3:	57                   	push   %edi
801057b4:	56                   	push   %esi
  struct inode *ip, *dp;
  char name[DIRSIZ];

  if((dp = nameiparent(path, name)) == 0)
801057b5:	8d 7d da             	lea    -0x26(%ebp),%edi
{
801057b8:	53                   	push   %ebx
801057b9:	83 ec 34             	sub    $0x34,%esp
801057bc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
801057bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  if((dp = nameiparent(path, name)) == 0)
801057c2:	57                   	push   %edi
801057c3:	50                   	push   %eax
{
801057c4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
801057c7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  if((dp = nameiparent(path, name)) == 0)
801057ca:	e8 61 c7 ff ff       	call   80101f30 <nameiparent>
801057cf:	83 c4 10             	add    $0x10,%esp
801057d2:	85 c0                	test   %eax,%eax
801057d4:	0f 84 46 01 00 00    	je     80105920 <create+0x170>
    return 0;
  ilock(dp);
801057da:	83 ec 0c             	sub    $0xc,%esp
801057dd:	89 c3                	mov    %eax,%ebx
801057df:	50                   	push   %eax
801057e0:	e8 5b be ff ff       	call   80101640 <ilock>

  if((ip = dirlookup(dp, name, 0)) != 0){
801057e5:	83 c4 0c             	add    $0xc,%esp
801057e8:	6a 00                	push   $0x0
801057ea:	57                   	push   %edi
801057eb:	53                   	push   %ebx
801057ec:	e8 9f c3 ff ff       	call   80101b90 <dirlookup>
801057f1:	83 c4 10             	add    $0x10,%esp
801057f4:	89 c6                	mov    %eax,%esi
801057f6:	85 c0                	test   %eax,%eax
801057f8:	74 56                	je     80105850 <create+0xa0>
    iunlockput(dp);
801057fa:	83 ec 0c             	sub    $0xc,%esp
801057fd:	53                   	push   %ebx
801057fe:	e8 dd c0 ff ff       	call   801018e0 <iunlockput>
    ilock(ip);
80105803:	89 34 24             	mov    %esi,(%esp)
80105806:	e8 35 be ff ff       	call   80101640 <ilock>
    if(type == T_FILE && ip->type == T_FILE)
8010580b:	83 c4 10             	add    $0x10,%esp
8010580e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
80105813:	75 1b                	jne    80105830 <create+0x80>
80105815:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
8010581a:	75 14                	jne    80105830 <create+0x80>
    panic("create: dirlink");

  iunlockput(dp);

  return ip;
}
8010581c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010581f:	89 f0                	mov    %esi,%eax
80105821:	5b                   	pop    %ebx
80105822:	5e                   	pop    %esi
80105823:	5f                   	pop    %edi
80105824:	5d                   	pop    %ebp
80105825:	c3                   	ret    
80105826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010582d:	8d 76 00             	lea    0x0(%esi),%esi
    iunlockput(ip);
80105830:	83 ec 0c             	sub    $0xc,%esp
80105833:	56                   	push   %esi
    return 0;
80105834:	31 f6                	xor    %esi,%esi
    iunlockput(ip);
80105836:	e8 a5 c0 ff ff       	call   801018e0 <iunlockput>
    return 0;
8010583b:	83 c4 10             	add    $0x10,%esp
}
8010583e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105841:	89 f0                	mov    %esi,%eax
80105843:	5b                   	pop    %ebx
80105844:	5e                   	pop    %esi
80105845:	5f                   	pop    %edi
80105846:	5d                   	pop    %ebp
80105847:	c3                   	ret    
80105848:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010584f:	90                   	nop
  if((ip = ialloc(dp->dev, type)) == 0)
80105850:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
80105854:	83 ec 08             	sub    $0x8,%esp
80105857:	50                   	push   %eax
80105858:	ff 33                	pushl  (%ebx)
8010585a:	e8 61 bc ff ff       	call   801014c0 <ialloc>
8010585f:	83 c4 10             	add    $0x10,%esp
80105862:	89 c6                	mov    %eax,%esi
80105864:	85 c0                	test   %eax,%eax
80105866:	0f 84 cd 00 00 00    	je     80105939 <create+0x189>
  ilock(ip);
8010586c:	83 ec 0c             	sub    $0xc,%esp
8010586f:	50                   	push   %eax
80105870:	e8 cb bd ff ff       	call   80101640 <ilock>
  ip->major = major;
80105875:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
80105879:	66 89 46 52          	mov    %ax,0x52(%esi)
  ip->minor = minor;
8010587d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
80105881:	66 89 46 54          	mov    %ax,0x54(%esi)
  ip->nlink = 1;
80105885:	b8 01 00 00 00       	mov    $0x1,%eax
8010588a:	66 89 46 56          	mov    %ax,0x56(%esi)
  iupdate(ip);
8010588e:	89 34 24             	mov    %esi,(%esp)
80105891:	e8 ea bc ff ff       	call   80101580 <iupdate>
  if(type == T_DIR){  // Create . and .. entries.
80105896:	83 c4 10             	add    $0x10,%esp
80105899:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
8010589e:	74 30                	je     801058d0 <create+0x120>
  if(dirlink(dp, name, ip->inum) < 0)
801058a0:	83 ec 04             	sub    $0x4,%esp
801058a3:	ff 76 04             	pushl  0x4(%esi)
801058a6:	57                   	push   %edi
801058a7:	53                   	push   %ebx
801058a8:	e8 a3 c5 ff ff       	call   80101e50 <dirlink>
801058ad:	83 c4 10             	add    $0x10,%esp
801058b0:	85 c0                	test   %eax,%eax
801058b2:	78 78                	js     8010592c <create+0x17c>
  iunlockput(dp);
801058b4:	83 ec 0c             	sub    $0xc,%esp
801058b7:	53                   	push   %ebx
801058b8:	e8 23 c0 ff ff       	call   801018e0 <iunlockput>
  return ip;
801058bd:	83 c4 10             	add    $0x10,%esp
}
801058c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801058c3:	89 f0                	mov    %esi,%eax
801058c5:	5b                   	pop    %ebx
801058c6:	5e                   	pop    %esi
801058c7:	5f                   	pop    %edi
801058c8:	5d                   	pop    %ebp
801058c9:	c3                   	ret    
801058ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    iupdate(dp);
801058d0:	83 ec 0c             	sub    $0xc,%esp
    dp->nlink++;  // for ".."
801058d3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
    iupdate(dp);
801058d8:	53                   	push   %ebx
801058d9:	e8 a2 bc ff ff       	call   80101580 <iupdate>
    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
801058de:	83 c4 0c             	add    $0xc,%esp
801058e1:	ff 76 04             	pushl  0x4(%esi)
801058e4:	68 1c dd 10 80       	push   $0x8010dd1c
801058e9:	56                   	push   %esi
801058ea:	e8 61 c5 ff ff       	call   80101e50 <dirlink>
801058ef:	83 c4 10             	add    $0x10,%esp
801058f2:	85 c0                	test   %eax,%eax
801058f4:	78 18                	js     8010590e <create+0x15e>
801058f6:	83 ec 04             	sub    $0x4,%esp
801058f9:	ff 73 04             	pushl  0x4(%ebx)
801058fc:	68 1b dd 10 80       	push   $0x8010dd1b
80105901:	56                   	push   %esi
80105902:	e8 49 c5 ff ff       	call   80101e50 <dirlink>
80105907:	83 c4 10             	add    $0x10,%esp
8010590a:	85 c0                	test   %eax,%eax
8010590c:	79 92                	jns    801058a0 <create+0xf0>
      panic("create dots");
8010590e:	83 ec 0c             	sub    $0xc,%esp
80105911:	68 0f dd 10 80       	push   $0x8010dd0f
80105916:	e8 05 ab ff ff       	call   80100420 <panic>
8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010591f:	90                   	nop
}
80105920:	8d 65 f4             	lea    -0xc(%ebp),%esp
    return 0;
80105923:	31 f6                	xor    %esi,%esi
}
80105925:	5b                   	pop    %ebx
80105926:	89 f0                	mov    %esi,%eax
80105928:	5e                   	pop    %esi
80105929:	5f                   	pop    %edi
8010592a:	5d                   	pop    %ebp
8010592b:	c3                   	ret    
    panic("create: dirlink");
8010592c:	83 ec 0c             	sub    $0xc,%esp
8010592f:	68 1e dd 10 80       	push   $0x8010dd1e
80105934:	e8 e7 aa ff ff       	call   80100420 <panic>
    panic("create: ialloc");
80105939:	83 ec 0c             	sub    $0xc,%esp
8010593c:	68 00 dd 10 80       	push   $0x8010dd00
80105941:	e8 da aa ff ff       	call   80100420 <panic>
80105946:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010594d:	8d 76 00             	lea    0x0(%esi),%esi

80105950 <argfd>:
{
80105950:	f3 0f 1e fb          	endbr32 
80105954:	55                   	push   %ebp
80105955:	89 e5                	mov    %esp,%ebp
80105957:	56                   	push   %esi
80105958:	53                   	push   %ebx
  if(argint(n, &fd) < 0)
80105959:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
8010595c:	83 ec 18             	sub    $0x18,%esp
8010595f:	8b 75 0c             	mov    0xc(%ebp),%esi
80105962:	8b 5d 10             	mov    0x10(%ebp),%ebx
  if(argint(n, &fd) < 0)
80105965:	50                   	push   %eax
80105966:	ff 75 08             	pushl  0x8(%ebp)
80105969:	e8 e2 fc ff ff       	call   80105650 <argint>
8010596e:	83 c4 10             	add    $0x10,%esp
80105971:	85 c0                	test   %eax,%eax
80105973:	78 33                	js     801059a8 <argfd+0x58>
  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
80105975:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80105979:	77 2d                	ja     801059a8 <argfd+0x58>
8010597b:	e8 30 eb ff ff       	call   801044b0 <myproc>
80105980:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105983:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
80105987:	85 c0                	test   %eax,%eax
80105989:	74 1d                	je     801059a8 <argfd+0x58>
  if(pfd)
8010598b:	85 f6                	test   %esi,%esi
8010598d:	74 02                	je     80105991 <argfd+0x41>
    *pfd = fd;
8010598f:	89 16                	mov    %edx,(%esi)
  return 0;
80105991:	31 d2                	xor    %edx,%edx
  if(pf)
80105993:	85 db                	test   %ebx,%ebx
80105995:	74 02                	je     80105999 <argfd+0x49>
    *pf = f;
80105997:	89 03                	mov    %eax,(%ebx)
}
80105999:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010599c:	89 d0                	mov    %edx,%eax
8010599e:	5b                   	pop    %ebx
8010599f:	5e                   	pop    %esi
801059a0:	5d                   	pop    %ebp
801059a1:	c3                   	ret    
801059a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    return -1;
801059a8:	ba ff ff ff ff       	mov    $0xffffffff,%edx
801059ad:	eb ea                	jmp    80105999 <argfd+0x49>
801059af:	90                   	nop

801059b0 <fdalloc>:
{
801059b0:	f3 0f 1e fb          	endbr32 
801059b4:	55                   	push   %ebp
801059b5:	89 e5                	mov    %esp,%ebp
801059b7:	83 ec 08             	sub    $0x8,%esp
  struct proc *curproc = myproc();
801059ba:	e8 f1 ea ff ff       	call   801044b0 <myproc>
801059bf:	89 c2                	mov    %eax,%edx
  for(fd = 0; fd < NOFILE; fd++){
801059c1:	31 c0                	xor    %eax,%eax
801059c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801059c7:	90                   	nop
    if(curproc->ofile[fd] == 0){
801059c8:	8b 4c 82 28          	mov    0x28(%edx,%eax,4),%ecx
801059cc:	85 c9                	test   %ecx,%ecx
801059ce:	74 10                	je     801059e0 <fdalloc+0x30>
  for(fd = 0; fd < NOFILE; fd++){
801059d0:	83 c0 01             	add    $0x1,%eax
801059d3:	83 f8 10             	cmp    $0x10,%eax
801059d6:	75 f0                	jne    801059c8 <fdalloc+0x18>
}
801059d8:	c9                   	leave  
  return -1;
801059d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801059de:	c3                   	ret    
801059df:	90                   	nop
      curproc->ofile[fd] = f;
801059e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
801059e3:	89 4c 82 28          	mov    %ecx,0x28(%edx,%eax,4)
}
801059e7:	c9                   	leave  
801059e8:	c3                   	ret    
801059e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801059f0 <sys_dup>:
{
801059f0:	f3 0f 1e fb          	endbr32 
801059f4:	55                   	push   %ebp
801059f5:	89 e5                	mov    %esp,%ebp
801059f7:	56                   	push   %esi
801059f8:	53                   	push   %ebx
  if(argfd(0, 0, &f) < 0)
801059f9:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
801059fc:	83 ec 14             	sub    $0x14,%esp
  if(argfd(0, 0, &f) < 0)
801059ff:	50                   	push   %eax
80105a00:	6a 00                	push   $0x0
80105a02:	6a 00                	push   $0x0
80105a04:	e8 47 ff ff ff       	call   80105950 <argfd>
80105a09:	83 c4 10             	add    $0x10,%esp
80105a0c:	85 c0                	test   %eax,%eax
80105a0e:	78 20                	js     80105a30 <sys_dup+0x40>
  if((fd=fdalloc(f)) < 0)
80105a10:	8b 75 f4             	mov    -0xc(%ebp),%esi
  for(fd = 0; fd < NOFILE; fd++){
80105a13:	31 db                	xor    %ebx,%ebx
  struct proc *curproc = myproc();
80105a15:	e8 96 ea ff ff       	call   801044b0 <myproc>
  for(fd = 0; fd < NOFILE; fd++){
80105a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if(curproc->ofile[fd] == 0){
80105a20:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
80105a24:	85 d2                	test   %edx,%edx
80105a26:	74 18                	je     80105a40 <sys_dup+0x50>
  for(fd = 0; fd < NOFILE; fd++){
80105a28:	83 c3 01             	add    $0x1,%ebx
80105a2b:	83 fb 10             	cmp    $0x10,%ebx
80105a2e:	75 f0                	jne    80105a20 <sys_dup+0x30>
}
80105a30:	8d 65 f8             	lea    -0x8(%ebp),%esp
    return -1;
80105a33:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
}
80105a38:	89 d8                	mov    %ebx,%eax
80105a3a:	5b                   	pop    %ebx
80105a3b:	5e                   	pop    %esi
80105a3c:	5d                   	pop    %ebp
80105a3d:	c3                   	ret    
80105a3e:	66 90                	xchg   %ax,%ax
      curproc->ofile[fd] = f;
80105a40:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
  filedup(f);
80105a44:	83 ec 0c             	sub    $0xc,%esp
80105a47:	ff 75 f4             	pushl  -0xc(%ebp)
80105a4a:	e8 91 b2 ff ff       	call   80100ce0 <filedup>
  return fd;
80105a4f:	83 c4 10             	add    $0x10,%esp
}
80105a52:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105a55:	89 d8                	mov    %ebx,%eax
80105a57:	5b                   	pop    %ebx
80105a58:	5e                   	pop    %esi
80105a59:	5d                   	pop    %ebp
80105a5a:	c3                   	ret    
80105a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80105a5f:	90                   	nop

80105a60 <sys_read>:
{
80105a60:	f3 0f 1e fb          	endbr32 
80105a64:	55                   	push   %ebp
80105a65:	89 e5                	mov    %esp,%ebp
80105a67:	83 ec 1c             	sub    $0x1c,%esp
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80105a6a:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105a6d:	50                   	push   %eax
80105a6e:	6a 00                	push   $0x0
80105a70:	6a 00                	push   $0x0
80105a72:	e8 d9 fe ff ff       	call   80105950 <argfd>
80105a77:	83 c4 10             	add    $0x10,%esp
80105a7a:	85 c0                	test   %eax,%eax
80105a7c:	78 4a                	js     80105ac8 <sys_read+0x68>
80105a7e:	83 ec 08             	sub    $0x8,%esp
80105a81:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105a84:	50                   	push   %eax
80105a85:	6a 02                	push   $0x2
80105a87:	e8 c4 fb ff ff       	call   80105650 <argint>
80105a8c:	83 c4 10             	add    $0x10,%esp
80105a8f:	85 c0                	test   %eax,%eax
80105a91:	78 35                	js     80105ac8 <sys_read+0x68>
80105a93:	83 ec 04             	sub    $0x4,%esp
80105a96:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105a99:	ff 75 f0             	pushl  -0x10(%ebp)
80105a9c:	50                   	push   %eax
80105a9d:	6a 01                	push   $0x1
80105a9f:	e8 fc fb ff ff       	call   801056a0 <argptr>
80105aa4:	83 c4 10             	add    $0x10,%esp
80105aa7:	85 c0                	test   %eax,%eax
80105aa9:	78 1d                	js     80105ac8 <sys_read+0x68>
  return fileread(f, p, n);
80105aab:	83 ec 04             	sub    $0x4,%esp
80105aae:	ff 75 f0             	pushl  -0x10(%ebp)
80105ab1:	ff 75 f4             	pushl  -0xc(%ebp)
80105ab4:	ff 75 ec             	pushl  -0x14(%ebp)
80105ab7:	e8 b4 b3 ff ff       	call   80100e70 <fileread>
80105abc:	83 c4 10             	add    $0x10,%esp
}
80105abf:	c9                   	leave  
80105ac0:	c3                   	ret    
80105ac1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105ac8:	c9                   	leave  
    return -1;
80105ac9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105ace:	c3                   	ret    
80105acf:	90                   	nop

80105ad0 <sys_write>:
{
80105ad0:	f3 0f 1e fb          	endbr32 
80105ad4:	55                   	push   %ebp
80105ad5:	89 e5                	mov    %esp,%ebp
80105ad7:	83 ec 1c             	sub    $0x1c,%esp
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80105ada:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105add:	50                   	push   %eax
80105ade:	6a 00                	push   $0x0
80105ae0:	6a 00                	push   $0x0
80105ae2:	e8 69 fe ff ff       	call   80105950 <argfd>
80105ae7:	83 c4 10             	add    $0x10,%esp
80105aea:	85 c0                	test   %eax,%eax
80105aec:	78 4a                	js     80105b38 <sys_write+0x68>
80105aee:	83 ec 08             	sub    $0x8,%esp
80105af1:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105af4:	50                   	push   %eax
80105af5:	6a 02                	push   $0x2
80105af7:	e8 54 fb ff ff       	call   80105650 <argint>
80105afc:	83 c4 10             	add    $0x10,%esp
80105aff:	85 c0                	test   %eax,%eax
80105b01:	78 35                	js     80105b38 <sys_write+0x68>
80105b03:	83 ec 04             	sub    $0x4,%esp
80105b06:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105b09:	ff 75 f0             	pushl  -0x10(%ebp)
80105b0c:	50                   	push   %eax
80105b0d:	6a 01                	push   $0x1
80105b0f:	e8 8c fb ff ff       	call   801056a0 <argptr>
80105b14:	83 c4 10             	add    $0x10,%esp
80105b17:	85 c0                	test   %eax,%eax
80105b19:	78 1d                	js     80105b38 <sys_write+0x68>
  return filewrite(f, p, n);
80105b1b:	83 ec 04             	sub    $0x4,%esp
80105b1e:	ff 75 f0             	pushl  -0x10(%ebp)
80105b21:	ff 75 f4             	pushl  -0xc(%ebp)
80105b24:	ff 75 ec             	pushl  -0x14(%ebp)
80105b27:	e8 f4 b3 ff ff       	call   80100f20 <filewrite>
80105b2c:	83 c4 10             	add    $0x10,%esp
}
80105b2f:	c9                   	leave  
80105b30:	c3                   	ret    
80105b31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105b38:	c9                   	leave  
    return -1;
80105b39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105b3e:	c3                   	ret    
80105b3f:	90                   	nop

80105b40 <sys_close>:
{
80105b40:	f3 0f 1e fb          	endbr32 
80105b44:	55                   	push   %ebp
80105b45:	89 e5                	mov    %esp,%ebp
80105b47:	83 ec 1c             	sub    $0x1c,%esp
  if(argfd(0, &fd, &f) < 0)
80105b4a:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105b4d:	50                   	push   %eax
80105b4e:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105b51:	50                   	push   %eax
80105b52:	6a 00                	push   $0x0
80105b54:	e8 f7 fd ff ff       	call   80105950 <argfd>
80105b59:	83 c4 10             	add    $0x10,%esp
80105b5c:	85 c0                	test   %eax,%eax
80105b5e:	78 28                	js     80105b88 <sys_close+0x48>
  myproc()->ofile[fd] = 0;
80105b60:	e8 4b e9 ff ff       	call   801044b0 <myproc>
80105b65:	8b 55 f0             	mov    -0x10(%ebp),%edx
  fileclose(f);
80105b68:	83 ec 0c             	sub    $0xc,%esp
  myproc()->ofile[fd] = 0;
80105b6b:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
80105b72:	00 
  fileclose(f);
80105b73:	ff 75 f4             	pushl  -0xc(%ebp)
80105b76:	e8 b5 b1 ff ff       	call   80100d30 <fileclose>
  return 0;
80105b7b:	83 c4 10             	add    $0x10,%esp
80105b7e:	31 c0                	xor    %eax,%eax
}
80105b80:	c9                   	leave  
80105b81:	c3                   	ret    
80105b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80105b88:	c9                   	leave  
    return -1;
80105b89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105b8e:	c3                   	ret    
80105b8f:	90                   	nop

80105b90 <sys_fstat>:
{
80105b90:	f3 0f 1e fb          	endbr32 
80105b94:	55                   	push   %ebp
80105b95:	89 e5                	mov    %esp,%ebp
80105b97:	83 ec 1c             	sub    $0x1c,%esp
  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
80105b9a:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105b9d:	50                   	push   %eax
80105b9e:	6a 00                	push   $0x0
80105ba0:	6a 00                	push   $0x0
80105ba2:	e8 a9 fd ff ff       	call   80105950 <argfd>
80105ba7:	83 c4 10             	add    $0x10,%esp
80105baa:	85 c0                	test   %eax,%eax
80105bac:	78 32                	js     80105be0 <sys_fstat+0x50>
80105bae:	83 ec 04             	sub    $0x4,%esp
80105bb1:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105bb4:	6a 14                	push   $0x14
80105bb6:	50                   	push   %eax
80105bb7:	6a 01                	push   $0x1
80105bb9:	e8 e2 fa ff ff       	call   801056a0 <argptr>
80105bbe:	83 c4 10             	add    $0x10,%esp
80105bc1:	85 c0                	test   %eax,%eax
80105bc3:	78 1b                	js     80105be0 <sys_fstat+0x50>
  return filestat(f, st);
80105bc5:	83 ec 08             	sub    $0x8,%esp
80105bc8:	ff 75 f4             	pushl  -0xc(%ebp)
80105bcb:	ff 75 f0             	pushl  -0x10(%ebp)
80105bce:	e8 4d b2 ff ff       	call   80100e20 <filestat>
80105bd3:	83 c4 10             	add    $0x10,%esp
}
80105bd6:	c9                   	leave  
80105bd7:	c3                   	ret    
80105bd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105bdf:	90                   	nop
80105be0:	c9                   	leave  
    return -1;
80105be1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105be6:	c3                   	ret    
80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105bee:	66 90                	xchg   %ax,%ax

80105bf0 <sys_link>:
{
80105bf0:	f3 0f 1e fb          	endbr32 
80105bf4:	55                   	push   %ebp
80105bf5:	89 e5                	mov    %esp,%ebp
80105bf7:	57                   	push   %edi
80105bf8:	56                   	push   %esi
  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
80105bf9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
{
80105bfc:	53                   	push   %ebx
80105bfd:	83 ec 34             	sub    $0x34,%esp
  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
80105c00:	50                   	push   %eax
80105c01:	6a 00                	push   $0x0
80105c03:	e8 f8 fa ff ff       	call   80105700 <argstr>
80105c08:	83 c4 10             	add    $0x10,%esp
80105c0b:	85 c0                	test   %eax,%eax
80105c0d:	0f 88 ff 00 00 00    	js     80105d12 <sys_link+0x122>
80105c13:	83 ec 08             	sub    $0x8,%esp
80105c16:	8d 45 d0             	lea    -0x30(%ebp),%eax
80105c19:	50                   	push   %eax
80105c1a:	6a 01                	push   $0x1
80105c1c:	e8 df fa ff ff       	call   80105700 <argstr>
80105c21:	83 c4 10             	add    $0x10,%esp
80105c24:	85 c0                	test   %eax,%eax
80105c26:	0f 88 e6 00 00 00    	js     80105d12 <sys_link+0x122>
  begin_op();
80105c2c:	e8 df cf ff ff       	call   80102c10 <begin_op>
  if((ip = namei(old)) == 0){
80105c31:	83 ec 0c             	sub    $0xc,%esp
80105c34:	ff 75 d4             	pushl  -0x2c(%ebp)
80105c37:	e8 d4 c2 ff ff       	call   80101f10 <namei>
80105c3c:	83 c4 10             	add    $0x10,%esp
80105c3f:	89 c3                	mov    %eax,%ebx
80105c41:	85 c0                	test   %eax,%eax
80105c43:	0f 84 e8 00 00 00    	je     80105d31 <sys_link+0x141>
  ilock(ip);
80105c49:	83 ec 0c             	sub    $0xc,%esp
80105c4c:	50                   	push   %eax
80105c4d:	e8 ee b9 ff ff       	call   80101640 <ilock>
  if(ip->type == T_DIR){
80105c52:	83 c4 10             	add    $0x10,%esp
80105c55:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80105c5a:	0f 84 b9 00 00 00    	je     80105d19 <sys_link+0x129>
  iupdate(ip);
80105c60:	83 ec 0c             	sub    $0xc,%esp
  ip->nlink++;
80105c63:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
  if((dp = nameiparent(new, name)) == 0)
80105c68:	8d 7d da             	lea    -0x26(%ebp),%edi
  iupdate(ip);
80105c6b:	53                   	push   %ebx
80105c6c:	e8 0f b9 ff ff       	call   80101580 <iupdate>
  iunlock(ip);
80105c71:	89 1c 24             	mov    %ebx,(%esp)
80105c74:	e8 a7 ba ff ff       	call   80101720 <iunlock>
  if((dp = nameiparent(new, name)) == 0)
80105c79:	58                   	pop    %eax
80105c7a:	5a                   	pop    %edx
80105c7b:	57                   	push   %edi
80105c7c:	ff 75 d0             	pushl  -0x30(%ebp)
80105c7f:	e8 ac c2 ff ff       	call   80101f30 <nameiparent>
80105c84:	83 c4 10             	add    $0x10,%esp
80105c87:	89 c6                	mov    %eax,%esi
80105c89:	85 c0                	test   %eax,%eax
80105c8b:	74 5f                	je     80105cec <sys_link+0xfc>
  ilock(dp);
80105c8d:	83 ec 0c             	sub    $0xc,%esp
80105c90:	50                   	push   %eax
80105c91:	e8 aa b9 ff ff       	call   80101640 <ilock>
  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
80105c96:	8b 03                	mov    (%ebx),%eax
80105c98:	83 c4 10             	add    $0x10,%esp
80105c9b:	39 06                	cmp    %eax,(%esi)
80105c9d:	75 41                	jne    80105ce0 <sys_link+0xf0>
80105c9f:	83 ec 04             	sub    $0x4,%esp
80105ca2:	ff 73 04             	pushl  0x4(%ebx)
80105ca5:	57                   	push   %edi
80105ca6:	56                   	push   %esi
80105ca7:	e8 a4 c1 ff ff       	call   80101e50 <dirlink>
80105cac:	83 c4 10             	add    $0x10,%esp
80105caf:	85 c0                	test   %eax,%eax
80105cb1:	78 2d                	js     80105ce0 <sys_link+0xf0>
  iunlockput(dp);
80105cb3:	83 ec 0c             	sub    $0xc,%esp
80105cb6:	56                   	push   %esi
80105cb7:	e8 24 bc ff ff       	call   801018e0 <iunlockput>
  iput(ip);
80105cbc:	89 1c 24             	mov    %ebx,(%esp)
80105cbf:	e8 ac ba ff ff       	call   80101770 <iput>
  end_op();
80105cc4:	e8 b7 cf ff ff       	call   80102c80 <end_op>
  return 0;
80105cc9:	83 c4 10             	add    $0x10,%esp
80105ccc:	31 c0                	xor    %eax,%eax
}
80105cce:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105cd1:	5b                   	pop    %ebx
80105cd2:	5e                   	pop    %esi
80105cd3:	5f                   	pop    %edi
80105cd4:	5d                   	pop    %ebp
80105cd5:	c3                   	ret    
80105cd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105cdd:	8d 76 00             	lea    0x0(%esi),%esi
    iunlockput(dp);
80105ce0:	83 ec 0c             	sub    $0xc,%esp
80105ce3:	56                   	push   %esi
80105ce4:	e8 f7 bb ff ff       	call   801018e0 <iunlockput>
    goto bad;
80105ce9:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
80105cec:	83 ec 0c             	sub    $0xc,%esp
80105cef:	53                   	push   %ebx
80105cf0:	e8 4b b9 ff ff       	call   80101640 <ilock>
  ip->nlink--;
80105cf5:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
  iupdate(ip);
80105cfa:	89 1c 24             	mov    %ebx,(%esp)
80105cfd:	e8 7e b8 ff ff       	call   80101580 <iupdate>
  iunlockput(ip);
80105d02:	89 1c 24             	mov    %ebx,(%esp)
80105d05:	e8 d6 bb ff ff       	call   801018e0 <iunlockput>
  end_op();
80105d0a:	e8 71 cf ff ff       	call   80102c80 <end_op>
  return -1;
80105d0f:	83 c4 10             	add    $0x10,%esp
80105d12:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105d17:	eb b5                	jmp    80105cce <sys_link+0xde>
    iunlockput(ip);
80105d19:	83 ec 0c             	sub    $0xc,%esp
80105d1c:	53                   	push   %ebx
80105d1d:	e8 be bb ff ff       	call   801018e0 <iunlockput>
    end_op();
80105d22:	e8 59 cf ff ff       	call   80102c80 <end_op>
    return -1;
80105d27:	83 c4 10             	add    $0x10,%esp
80105d2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105d2f:	eb 9d                	jmp    80105cce <sys_link+0xde>
    end_op();
80105d31:	e8 4a cf ff ff       	call   80102c80 <end_op>
    return -1;
80105d36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105d3b:	eb 91                	jmp    80105cce <sys_link+0xde>
80105d3d:	8d 76 00             	lea    0x0(%esi),%esi

80105d40 <sys_unlink>:
{
80105d40:	f3 0f 1e fb          	endbr32 
80105d44:	55                   	push   %ebp
80105d45:	89 e5                	mov    %esp,%ebp
80105d47:	57                   	push   %edi
80105d48:	56                   	push   %esi
  if(argstr(0, &path) < 0)
80105d49:	8d 45 c0             	lea    -0x40(%ebp),%eax
{
80105d4c:	53                   	push   %ebx
80105d4d:	83 ec 54             	sub    $0x54,%esp
  if(argstr(0, &path) < 0)
80105d50:	50                   	push   %eax
80105d51:	6a 00                	push   $0x0
80105d53:	e8 a8 f9 ff ff       	call   80105700 <argstr>
80105d58:	83 c4 10             	add    $0x10,%esp
80105d5b:	85 c0                	test   %eax,%eax
80105d5d:	0f 88 7d 01 00 00    	js     80105ee0 <sys_unlink+0x1a0>
  begin_op();
80105d63:	e8 a8 ce ff ff       	call   80102c10 <begin_op>
  if((dp = nameiparent(path, name)) == 0){
80105d68:	8d 5d ca             	lea    -0x36(%ebp),%ebx
80105d6b:	83 ec 08             	sub    $0x8,%esp
80105d6e:	53                   	push   %ebx
80105d6f:	ff 75 c0             	pushl  -0x40(%ebp)
80105d72:	e8 b9 c1 ff ff       	call   80101f30 <nameiparent>
80105d77:	83 c4 10             	add    $0x10,%esp
80105d7a:	89 c6                	mov    %eax,%esi
80105d7c:	85 c0                	test   %eax,%eax
80105d7e:	0f 84 66 01 00 00    	je     80105eea <sys_unlink+0x1aa>
  ilock(dp);
80105d84:	83 ec 0c             	sub    $0xc,%esp
80105d87:	50                   	push   %eax
80105d88:	e8 b3 b8 ff ff       	call   80101640 <ilock>
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
80105d8d:	58                   	pop    %eax
80105d8e:	5a                   	pop    %edx
80105d8f:	68 1c dd 10 80       	push   $0x8010dd1c
80105d94:	53                   	push   %ebx
80105d95:	e8 d6 bd ff ff       	call   80101b70 <namecmp>
80105d9a:	83 c4 10             	add    $0x10,%esp
80105d9d:	85 c0                	test   %eax,%eax
80105d9f:	0f 84 03 01 00 00    	je     80105ea8 <sys_unlink+0x168>
80105da5:	83 ec 08             	sub    $0x8,%esp
80105da8:	68 1b dd 10 80       	push   $0x8010dd1b
80105dad:	53                   	push   %ebx
80105dae:	e8 bd bd ff ff       	call   80101b70 <namecmp>
80105db3:	83 c4 10             	add    $0x10,%esp
80105db6:	85 c0                	test   %eax,%eax
80105db8:	0f 84 ea 00 00 00    	je     80105ea8 <sys_unlink+0x168>
  if((ip = dirlookup(dp, name, &off)) == 0)
80105dbe:	83 ec 04             	sub    $0x4,%esp
80105dc1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
80105dc4:	50                   	push   %eax
80105dc5:	53                   	push   %ebx
80105dc6:	56                   	push   %esi
80105dc7:	e8 c4 bd ff ff       	call   80101b90 <dirlookup>
80105dcc:	83 c4 10             	add    $0x10,%esp
80105dcf:	89 c3                	mov    %eax,%ebx
80105dd1:	85 c0                	test   %eax,%eax
80105dd3:	0f 84 cf 00 00 00    	je     80105ea8 <sys_unlink+0x168>
  ilock(ip);
80105dd9:	83 ec 0c             	sub    $0xc,%esp
80105ddc:	50                   	push   %eax
80105ddd:	e8 5e b8 ff ff       	call   80101640 <ilock>
  if(ip->nlink < 1)
80105de2:	83 c4 10             	add    $0x10,%esp
80105de5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
80105dea:	0f 8e 23 01 00 00    	jle    80105f13 <sys_unlink+0x1d3>
  if(ip->type == T_DIR && !isdirempty(ip)){
80105df0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80105df5:	8d 7d d8             	lea    -0x28(%ebp),%edi
80105df8:	74 66                	je     80105e60 <sys_unlink+0x120>
  memset(&de, 0, sizeof(de));
80105dfa:	83 ec 04             	sub    $0x4,%esp
80105dfd:	6a 10                	push   $0x10
80105dff:	6a 00                	push   $0x0
80105e01:	57                   	push   %edi
80105e02:	e8 b9 f3 ff ff       	call   801051c0 <memset>
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80105e07:	6a 10                	push   $0x10
80105e09:	ff 75 c4             	pushl  -0x3c(%ebp)
80105e0c:	57                   	push   %edi
80105e0d:	56                   	push   %esi
80105e0e:	e8 2d bc ff ff       	call   80101a40 <writei>
80105e13:	83 c4 20             	add    $0x20,%esp
80105e16:	83 f8 10             	cmp    $0x10,%eax
80105e19:	0f 85 e7 00 00 00    	jne    80105f06 <sys_unlink+0x1c6>
  if(ip->type == T_DIR){
80105e1f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80105e24:	0f 84 96 00 00 00    	je     80105ec0 <sys_unlink+0x180>
  iunlockput(dp);
80105e2a:	83 ec 0c             	sub    $0xc,%esp
80105e2d:	56                   	push   %esi
80105e2e:	e8 ad ba ff ff       	call   801018e0 <iunlockput>
  ip->nlink--;
80105e33:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
  iupdate(ip);
80105e38:	89 1c 24             	mov    %ebx,(%esp)
80105e3b:	e8 40 b7 ff ff       	call   80101580 <iupdate>
  iunlockput(ip);
80105e40:	89 1c 24             	mov    %ebx,(%esp)
80105e43:	e8 98 ba ff ff       	call   801018e0 <iunlockput>
  end_op();
80105e48:	e8 33 ce ff ff       	call   80102c80 <end_op>
  return 0;
80105e4d:	83 c4 10             	add    $0x10,%esp
80105e50:	31 c0                	xor    %eax,%eax
}
80105e52:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105e55:	5b                   	pop    %ebx
80105e56:	5e                   	pop    %esi
80105e57:	5f                   	pop    %edi
80105e58:	5d                   	pop    %ebp
80105e59:	c3                   	ret    
80105e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
80105e60:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
80105e64:	76 94                	jbe    80105dfa <sys_unlink+0xba>
80105e66:	ba 20 00 00 00       	mov    $0x20,%edx
80105e6b:	eb 0b                	jmp    80105e78 <sys_unlink+0x138>
80105e6d:	8d 76 00             	lea    0x0(%esi),%esi
80105e70:	83 c2 10             	add    $0x10,%edx
80105e73:	39 53 58             	cmp    %edx,0x58(%ebx)
80105e76:	76 82                	jbe    80105dfa <sys_unlink+0xba>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80105e78:	6a 10                	push   $0x10
80105e7a:	52                   	push   %edx
80105e7b:	57                   	push   %edi
80105e7c:	53                   	push   %ebx
80105e7d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
80105e80:	e8 bb ba ff ff       	call   80101940 <readi>
80105e85:	83 c4 10             	add    $0x10,%esp
80105e88:	8b 55 b4             	mov    -0x4c(%ebp),%edx
80105e8b:	83 f8 10             	cmp    $0x10,%eax
80105e8e:	75 69                	jne    80105ef9 <sys_unlink+0x1b9>
    if(de.inum != 0)
80105e90:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80105e95:	74 d9                	je     80105e70 <sys_unlink+0x130>
    iunlockput(ip);
80105e97:	83 ec 0c             	sub    $0xc,%esp
80105e9a:	53                   	push   %ebx
80105e9b:	e8 40 ba ff ff       	call   801018e0 <iunlockput>
    goto bad;
80105ea0:	83 c4 10             	add    $0x10,%esp
80105ea3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80105ea7:	90                   	nop
  iunlockput(dp);
80105ea8:	83 ec 0c             	sub    $0xc,%esp
80105eab:	56                   	push   %esi
80105eac:	e8 2f ba ff ff       	call   801018e0 <iunlockput>
  end_op();
80105eb1:	e8 ca cd ff ff       	call   80102c80 <end_op>
  return -1;
80105eb6:	83 c4 10             	add    $0x10,%esp
80105eb9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105ebe:	eb 92                	jmp    80105e52 <sys_unlink+0x112>
    iupdate(dp);
80105ec0:	83 ec 0c             	sub    $0xc,%esp
    dp->nlink--;
80105ec3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
    iupdate(dp);
80105ec8:	56                   	push   %esi
80105ec9:	e8 b2 b6 ff ff       	call   80101580 <iupdate>
80105ece:	83 c4 10             	add    $0x10,%esp
80105ed1:	e9 54 ff ff ff       	jmp    80105e2a <sys_unlink+0xea>
80105ed6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105edd:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80105ee0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105ee5:	e9 68 ff ff ff       	jmp    80105e52 <sys_unlink+0x112>
    end_op();
80105eea:	e8 91 cd ff ff       	call   80102c80 <end_op>
    return -1;
80105eef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105ef4:	e9 59 ff ff ff       	jmp    80105e52 <sys_unlink+0x112>
      panic("isdirempty: readi");
80105ef9:	83 ec 0c             	sub    $0xc,%esp
80105efc:	68 40 dd 10 80       	push   $0x8010dd40
80105f01:	e8 1a a5 ff ff       	call   80100420 <panic>
    panic("unlink: writei");
80105f06:	83 ec 0c             	sub    $0xc,%esp
80105f09:	68 52 dd 10 80       	push   $0x8010dd52
80105f0e:	e8 0d a5 ff ff       	call   80100420 <panic>
    panic("unlink: nlink < 1");
80105f13:	83 ec 0c             	sub    $0xc,%esp
80105f16:	68 2e dd 10 80       	push   $0x8010dd2e
80105f1b:	e8 00 a5 ff ff       	call   80100420 <panic>

80105f20 <sys_open>:

int
sys_open(void)
{
80105f20:	f3 0f 1e fb          	endbr32 
80105f24:	55                   	push   %ebp
80105f25:	89 e5                	mov    %esp,%ebp
80105f27:	57                   	push   %edi
80105f28:	56                   	push   %esi
  char *path;
  int fd, omode;
  struct file *f;
  struct inode *ip;

  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
80105f29:	8d 45 e0             	lea    -0x20(%ebp),%eax
{
80105f2c:	53                   	push   %ebx
80105f2d:	83 ec 24             	sub    $0x24,%esp
  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
80105f30:	50                   	push   %eax
80105f31:	6a 00                	push   $0x0
80105f33:	e8 c8 f7 ff ff       	call   80105700 <argstr>
80105f38:	83 c4 10             	add    $0x10,%esp
80105f3b:	85 c0                	test   %eax,%eax
80105f3d:	0f 88 8a 00 00 00    	js     80105fcd <sys_open+0xad>
80105f43:	83 ec 08             	sub    $0x8,%esp
80105f46:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80105f49:	50                   	push   %eax
80105f4a:	6a 01                	push   $0x1
80105f4c:	e8 ff f6 ff ff       	call   80105650 <argint>
80105f51:	83 c4 10             	add    $0x10,%esp
80105f54:	85 c0                	test   %eax,%eax
80105f56:	78 75                	js     80105fcd <sys_open+0xad>
    return -1;

  begin_op();
80105f58:	e8 b3 cc ff ff       	call   80102c10 <begin_op>

  if(omode & O_CREATE){
80105f5d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
80105f61:	75 75                	jne    80105fd8 <sys_open+0xb8>
    if(ip == 0){
      end_op();
      return -1;
    }
  } else {
    if((ip = namei(path)) == 0){
80105f63:	83 ec 0c             	sub    $0xc,%esp
80105f66:	ff 75 e0             	pushl  -0x20(%ebp)
80105f69:	e8 a2 bf ff ff       	call   80101f10 <namei>
80105f6e:	83 c4 10             	add    $0x10,%esp
80105f71:	89 c6                	mov    %eax,%esi
80105f73:	85 c0                	test   %eax,%eax
80105f75:	74 7e                	je     80105ff5 <sys_open+0xd5>
      end_op();
      return -1;
    }
    ilock(ip);
80105f77:	83 ec 0c             	sub    $0xc,%esp
80105f7a:	50                   	push   %eax
80105f7b:	e8 c0 b6 ff ff       	call   80101640 <ilock>
    if(ip->type == T_DIR && omode != O_RDONLY){
80105f80:	83 c4 10             	add    $0x10,%esp
80105f83:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
80105f88:	0f 84 c2 00 00 00    	je     80106050 <sys_open+0x130>
      end_op();
      return -1;
    }
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
80105f8e:	e8 dd ac ff ff       	call   80100c70 <filealloc>
80105f93:	89 c7                	mov    %eax,%edi
80105f95:	85 c0                	test   %eax,%eax
80105f97:	74 23                	je     80105fbc <sys_open+0x9c>
  struct proc *curproc = myproc();
80105f99:	e8 12 e5 ff ff       	call   801044b0 <myproc>
  for(fd = 0; fd < NOFILE; fd++){
80105f9e:	31 db                	xor    %ebx,%ebx
    if(curproc->ofile[fd] == 0){
80105fa0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
80105fa4:	85 d2                	test   %edx,%edx
80105fa6:	74 60                	je     80106008 <sys_open+0xe8>
  for(fd = 0; fd < NOFILE; fd++){
80105fa8:	83 c3 01             	add    $0x1,%ebx
80105fab:	83 fb 10             	cmp    $0x10,%ebx
80105fae:	75 f0                	jne    80105fa0 <sys_open+0x80>
    if(f)
      fileclose(f);
80105fb0:	83 ec 0c             	sub    $0xc,%esp
80105fb3:	57                   	push   %edi
80105fb4:	e8 77 ad ff ff       	call   80100d30 <fileclose>
80105fb9:	83 c4 10             	add    $0x10,%esp
    iunlockput(ip);
80105fbc:	83 ec 0c             	sub    $0xc,%esp
80105fbf:	56                   	push   %esi
80105fc0:	e8 1b b9 ff ff       	call   801018e0 <iunlockput>
    end_op();
80105fc5:	e8 b6 cc ff ff       	call   80102c80 <end_op>
    return -1;
80105fca:	83 c4 10             	add    $0x10,%esp
80105fcd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80105fd2:	eb 6d                	jmp    80106041 <sys_open+0x121>
80105fd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ip = create(path, T_FILE, 0, 0);
80105fd8:	83 ec 0c             	sub    $0xc,%esp
80105fdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105fde:	31 c9                	xor    %ecx,%ecx
80105fe0:	ba 02 00 00 00       	mov    $0x2,%edx
80105fe5:	6a 00                	push   $0x0
80105fe7:	e8 c4 f7 ff ff       	call   801057b0 <create>
    if(ip == 0){
80105fec:	83 c4 10             	add    $0x10,%esp
    ip = create(path, T_FILE, 0, 0);
80105fef:	89 c6                	mov    %eax,%esi
    if(ip == 0){
80105ff1:	85 c0                	test   %eax,%eax
80105ff3:	75 99                	jne    80105f8e <sys_open+0x6e>
      end_op();
80105ff5:	e8 86 cc ff ff       	call   80102c80 <end_op>
      return -1;
80105ffa:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80105fff:	eb 40                	jmp    80106041 <sys_open+0x121>
80106001:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  }
  iunlock(ip);
80106008:	83 ec 0c             	sub    $0xc,%esp
      curproc->ofile[fd] = f;
8010600b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
  iunlock(ip);
8010600f:	56                   	push   %esi
80106010:	e8 0b b7 ff ff       	call   80101720 <iunlock>
  end_op();
80106015:	e8 66 cc ff ff       	call   80102c80 <end_op>

  f->type = FD_INODE;
8010601a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
  f->ip = ip;
  f->off = 0;
  f->readable = !(omode & O_WRONLY);
80106020:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
80106023:	83 c4 10             	add    $0x10,%esp
  f->ip = ip;
80106026:	89 77 10             	mov    %esi,0x10(%edi)
  f->readable = !(omode & O_WRONLY);
80106029:	89 d0                	mov    %edx,%eax
  f->off = 0;
8010602b:	c7 47 18 00 00 00 00 	movl   $0x0,0x18(%edi)
  f->readable = !(omode & O_WRONLY);
80106032:	f7 d0                	not    %eax
80106034:	83 e0 01             	and    $0x1,%eax
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
80106037:	83 e2 03             	and    $0x3,%edx
  f->readable = !(omode & O_WRONLY);
8010603a:	88 47 08             	mov    %al,0x8(%edi)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
8010603d:	0f 95 47 09          	setne  0x9(%edi)
  return fd;
}
80106041:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106044:	89 d8                	mov    %ebx,%eax
80106046:	5b                   	pop    %ebx
80106047:	5e                   	pop    %esi
80106048:	5f                   	pop    %edi
80106049:	5d                   	pop    %ebp
8010604a:	c3                   	ret    
8010604b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010604f:	90                   	nop
    if(ip->type == T_DIR && omode != O_RDONLY){
80106050:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80106053:	85 c9                	test   %ecx,%ecx
80106055:	0f 84 33 ff ff ff    	je     80105f8e <sys_open+0x6e>
8010605b:	e9 5c ff ff ff       	jmp    80105fbc <sys_open+0x9c>

80106060 <sys_mkdir>:

int
sys_mkdir(void)
{
80106060:	f3 0f 1e fb          	endbr32 
80106064:	55                   	push   %ebp
80106065:	89 e5                	mov    %esp,%ebp
80106067:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  begin_op();
8010606a:	e8 a1 cb ff ff       	call   80102c10 <begin_op>
  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
8010606f:	83 ec 08             	sub    $0x8,%esp
80106072:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106075:	50                   	push   %eax
80106076:	6a 00                	push   $0x0
80106078:	e8 83 f6 ff ff       	call   80105700 <argstr>
8010607d:	83 c4 10             	add    $0x10,%esp
80106080:	85 c0                	test   %eax,%eax
80106082:	78 34                	js     801060b8 <sys_mkdir+0x58>
80106084:	83 ec 0c             	sub    $0xc,%esp
80106087:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010608a:	31 c9                	xor    %ecx,%ecx
8010608c:	ba 01 00 00 00       	mov    $0x1,%edx
80106091:	6a 00                	push   $0x0
80106093:	e8 18 f7 ff ff       	call   801057b0 <create>
80106098:	83 c4 10             	add    $0x10,%esp
8010609b:	85 c0                	test   %eax,%eax
8010609d:	74 19                	je     801060b8 <sys_mkdir+0x58>
    end_op();
    return -1;
  }
  iunlockput(ip);
8010609f:	83 ec 0c             	sub    $0xc,%esp
801060a2:	50                   	push   %eax
801060a3:	e8 38 b8 ff ff       	call   801018e0 <iunlockput>
  end_op();
801060a8:	e8 d3 cb ff ff       	call   80102c80 <end_op>
  return 0;
801060ad:	83 c4 10             	add    $0x10,%esp
801060b0:	31 c0                	xor    %eax,%eax
}
801060b2:	c9                   	leave  
801060b3:	c3                   	ret    
801060b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    end_op();
801060b8:	e8 c3 cb ff ff       	call   80102c80 <end_op>
    return -1;
801060bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801060c2:	c9                   	leave  
801060c3:	c3                   	ret    
801060c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801060cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801060cf:	90                   	nop

801060d0 <sys_mknod>:

int
sys_mknod(void)
{
801060d0:	f3 0f 1e fb          	endbr32 
801060d4:	55                   	push   %ebp
801060d5:	89 e5                	mov    %esp,%ebp
801060d7:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip;
  char *path;
  int major, minor;

  begin_op();
801060da:	e8 31 cb ff ff       	call   80102c10 <begin_op>
  if((argstr(0, &path)) < 0 ||
801060df:	83 ec 08             	sub    $0x8,%esp
801060e2:	8d 45 ec             	lea    -0x14(%ebp),%eax
801060e5:	50                   	push   %eax
801060e6:	6a 00                	push   $0x0
801060e8:	e8 13 f6 ff ff       	call   80105700 <argstr>
801060ed:	83 c4 10             	add    $0x10,%esp
801060f0:	85 c0                	test   %eax,%eax
801060f2:	78 64                	js     80106158 <sys_mknod+0x88>
     argint(1, &major) < 0 ||
801060f4:	83 ec 08             	sub    $0x8,%esp
801060f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
801060fa:	50                   	push   %eax
801060fb:	6a 01                	push   $0x1
801060fd:	e8 4e f5 ff ff       	call   80105650 <argint>
  if((argstr(0, &path)) < 0 ||
80106102:	83 c4 10             	add    $0x10,%esp
80106105:	85 c0                	test   %eax,%eax
80106107:	78 4f                	js     80106158 <sys_mknod+0x88>
     argint(2, &minor) < 0 ||
80106109:	83 ec 08             	sub    $0x8,%esp
8010610c:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010610f:	50                   	push   %eax
80106110:	6a 02                	push   $0x2
80106112:	e8 39 f5 ff ff       	call   80105650 <argint>
     argint(1, &major) < 0 ||
80106117:	83 c4 10             	add    $0x10,%esp
8010611a:	85 c0                	test   %eax,%eax
8010611c:	78 3a                	js     80106158 <sys_mknod+0x88>
     (ip = create(path, T_DEV, major, minor)) == 0){
8010611e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
80106122:	83 ec 0c             	sub    $0xc,%esp
80106125:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
80106129:	ba 03 00 00 00       	mov    $0x3,%edx
8010612e:	50                   	push   %eax
8010612f:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106132:	e8 79 f6 ff ff       	call   801057b0 <create>
     argint(2, &minor) < 0 ||
80106137:	83 c4 10             	add    $0x10,%esp
8010613a:	85 c0                	test   %eax,%eax
8010613c:	74 1a                	je     80106158 <sys_mknod+0x88>
    end_op();
    return -1;
  }
  iunlockput(ip);
8010613e:	83 ec 0c             	sub    $0xc,%esp
80106141:	50                   	push   %eax
80106142:	e8 99 b7 ff ff       	call   801018e0 <iunlockput>
  end_op();
80106147:	e8 34 cb ff ff       	call   80102c80 <end_op>
  return 0;
8010614c:	83 c4 10             	add    $0x10,%esp
8010614f:	31 c0                	xor    %eax,%eax
}
80106151:	c9                   	leave  
80106152:	c3                   	ret    
80106153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106157:	90                   	nop
    end_op();
80106158:	e8 23 cb ff ff       	call   80102c80 <end_op>
    return -1;
8010615d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106162:	c9                   	leave  
80106163:	c3                   	ret    
80106164:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010616b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010616f:	90                   	nop

80106170 <sys_chdir>:

int
sys_chdir(void)
{
80106170:	f3 0f 1e fb          	endbr32 
80106174:	55                   	push   %ebp
80106175:	89 e5                	mov    %esp,%ebp
80106177:	56                   	push   %esi
80106178:	53                   	push   %ebx
80106179:	83 ec 10             	sub    $0x10,%esp
  char *path;
  struct inode *ip;
  struct proc *curproc = myproc();
8010617c:	e8 2f e3 ff ff       	call   801044b0 <myproc>
80106181:	89 c6                	mov    %eax,%esi
  
  begin_op();
80106183:	e8 88 ca ff ff       	call   80102c10 <begin_op>
  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
80106188:	83 ec 08             	sub    $0x8,%esp
8010618b:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010618e:	50                   	push   %eax
8010618f:	6a 00                	push   $0x0
80106191:	e8 6a f5 ff ff       	call   80105700 <argstr>
80106196:	83 c4 10             	add    $0x10,%esp
80106199:	85 c0                	test   %eax,%eax
8010619b:	78 73                	js     80106210 <sys_chdir+0xa0>
8010619d:	83 ec 0c             	sub    $0xc,%esp
801061a0:	ff 75 f4             	pushl  -0xc(%ebp)
801061a3:	e8 68 bd ff ff       	call   80101f10 <namei>
801061a8:	83 c4 10             	add    $0x10,%esp
801061ab:	89 c3                	mov    %eax,%ebx
801061ad:	85 c0                	test   %eax,%eax
801061af:	74 5f                	je     80106210 <sys_chdir+0xa0>
    end_op();
    return -1;
  }
  ilock(ip);
801061b1:	83 ec 0c             	sub    $0xc,%esp
801061b4:	50                   	push   %eax
801061b5:	e8 86 b4 ff ff       	call   80101640 <ilock>
  if(ip->type != T_DIR){
801061ba:	83 c4 10             	add    $0x10,%esp
801061bd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
801061c2:	75 2c                	jne    801061f0 <sys_chdir+0x80>
    iunlockput(ip);
    end_op();
    return -1;
  }
  iunlock(ip);
801061c4:	83 ec 0c             	sub    $0xc,%esp
801061c7:	53                   	push   %ebx
801061c8:	e8 53 b5 ff ff       	call   80101720 <iunlock>
  iput(curproc->cwd);
801061cd:	58                   	pop    %eax
801061ce:	ff 76 68             	pushl  0x68(%esi)
801061d1:	e8 9a b5 ff ff       	call   80101770 <iput>
  end_op();
801061d6:	e8 a5 ca ff ff       	call   80102c80 <end_op>
  curproc->cwd = ip;
801061db:	89 5e 68             	mov    %ebx,0x68(%esi)
  return 0;
801061de:	83 c4 10             	add    $0x10,%esp
801061e1:	31 c0                	xor    %eax,%eax
}
801061e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
801061e6:	5b                   	pop    %ebx
801061e7:	5e                   	pop    %esi
801061e8:	5d                   	pop    %ebp
801061e9:	c3                   	ret    
801061ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    iunlockput(ip);
801061f0:	83 ec 0c             	sub    $0xc,%esp
801061f3:	53                   	push   %ebx
801061f4:	e8 e7 b6 ff ff       	call   801018e0 <iunlockput>
    end_op();
801061f9:	e8 82 ca ff ff       	call   80102c80 <end_op>
    return -1;
801061fe:	83 c4 10             	add    $0x10,%esp
80106201:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106206:	eb db                	jmp    801061e3 <sys_chdir+0x73>
80106208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010620f:	90                   	nop
    end_op();
80106210:	e8 6b ca ff ff       	call   80102c80 <end_op>
    return -1;
80106215:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010621a:	eb c7                	jmp    801061e3 <sys_chdir+0x73>
8010621c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106220 <sys_exec>:

int
sys_exec(void)
{
80106220:	f3 0f 1e fb          	endbr32 
80106224:	55                   	push   %ebp
80106225:	89 e5                	mov    %esp,%ebp
80106227:	57                   	push   %edi
80106228:	56                   	push   %esi
  char *path, *argv[MAXARG];
  int i;
  uint uargv, uarg;

  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
80106229:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
{
8010622f:	53                   	push   %ebx
80106230:	81 ec a4 00 00 00    	sub    $0xa4,%esp
  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
80106236:	50                   	push   %eax
80106237:	6a 00                	push   $0x0
80106239:	e8 c2 f4 ff ff       	call   80105700 <argstr>
8010623e:	83 c4 10             	add    $0x10,%esp
80106241:	85 c0                	test   %eax,%eax
80106243:	0f 88 8b 00 00 00    	js     801062d4 <sys_exec+0xb4>
80106249:	83 ec 08             	sub    $0x8,%esp
8010624c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
80106252:	50                   	push   %eax
80106253:	6a 01                	push   $0x1
80106255:	e8 f6 f3 ff ff       	call   80105650 <argint>
8010625a:	83 c4 10             	add    $0x10,%esp
8010625d:	85 c0                	test   %eax,%eax
8010625f:	78 73                	js     801062d4 <sys_exec+0xb4>
    return -1;
  }
  memset(argv, 0, sizeof(argv));
80106261:	83 ec 04             	sub    $0x4,%esp
80106264:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
  for(i=0;; i++){
8010626a:	31 db                	xor    %ebx,%ebx
  memset(argv, 0, sizeof(argv));
8010626c:	68 80 00 00 00       	push   $0x80
80106271:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
80106277:	6a 00                	push   $0x0
80106279:	50                   	push   %eax
8010627a:	e8 41 ef ff ff       	call   801051c0 <memset>
8010627f:	83 c4 10             	add    $0x10,%esp
80106282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if(i >= NELEM(argv))
      return -1;
    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
80106288:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
8010628e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
80106295:	83 ec 08             	sub    $0x8,%esp
80106298:	57                   	push   %edi
80106299:	01 f0                	add    %esi,%eax
8010629b:	50                   	push   %eax
8010629c:	e8 0f f3 ff ff       	call   801055b0 <fetchint>
801062a1:	83 c4 10             	add    $0x10,%esp
801062a4:	85 c0                	test   %eax,%eax
801062a6:	78 2c                	js     801062d4 <sys_exec+0xb4>
      return -1;
    if(uarg == 0){
801062a8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
801062ae:	85 c0                	test   %eax,%eax
801062b0:	74 36                	je     801062e8 <sys_exec+0xc8>
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
801062b2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
801062b8:	83 ec 08             	sub    $0x8,%esp
801062bb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
801062be:	52                   	push   %edx
801062bf:	50                   	push   %eax
801062c0:	e8 2b f3 ff ff       	call   801055f0 <fetchstr>
801062c5:	83 c4 10             	add    $0x10,%esp
801062c8:	85 c0                	test   %eax,%eax
801062ca:	78 08                	js     801062d4 <sys_exec+0xb4>
  for(i=0;; i++){
801062cc:	83 c3 01             	add    $0x1,%ebx
    if(i >= NELEM(argv))
801062cf:	83 fb 20             	cmp    $0x20,%ebx
801062d2:	75 b4                	jne    80106288 <sys_exec+0x68>
      return -1;
  }
  return exec(path, argv);
}
801062d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    return -1;
801062d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801062dc:	5b                   	pop    %ebx
801062dd:	5e                   	pop    %esi
801062de:	5f                   	pop    %edi
801062df:	5d                   	pop    %ebp
801062e0:	c3                   	ret    
801062e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  return exec(path, argv);
801062e8:	83 ec 08             	sub    $0x8,%esp
801062eb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
      argv[i] = 0;
801062f1:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
801062f8:	00 00 00 00 
  return exec(path, argv);
801062fc:	50                   	push   %eax
801062fd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
80106303:	e8 e8 a5 ff ff       	call   801008f0 <exec>
80106308:	83 c4 10             	add    $0x10,%esp
}
8010630b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010630e:	5b                   	pop    %ebx
8010630f:	5e                   	pop    %esi
80106310:	5f                   	pop    %edi
80106311:	5d                   	pop    %ebp
80106312:	c3                   	ret    
80106313:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010631a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106320 <sys_pipe>:

int
sys_pipe(void)
{
80106320:	f3 0f 1e fb          	endbr32 
80106324:	55                   	push   %ebp
80106325:	89 e5                	mov    %esp,%ebp
80106327:	57                   	push   %edi
80106328:	56                   	push   %esi
  int *fd;
  struct file *rf, *wf;
  int fd0, fd1;

  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
80106329:	8d 45 dc             	lea    -0x24(%ebp),%eax
{
8010632c:	53                   	push   %ebx
8010632d:	83 ec 20             	sub    $0x20,%esp
  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
80106330:	6a 08                	push   $0x8
80106332:	50                   	push   %eax
80106333:	6a 00                	push   $0x0
80106335:	e8 66 f3 ff ff       	call   801056a0 <argptr>
8010633a:	83 c4 10             	add    $0x10,%esp
8010633d:	85 c0                	test   %eax,%eax
8010633f:	78 4e                	js     8010638f <sys_pipe+0x6f>
    return -1;
  if(pipealloc(&rf, &wf) < 0)
80106341:	83 ec 08             	sub    $0x8,%esp
80106344:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80106347:	50                   	push   %eax
80106348:	8d 45 e0             	lea    -0x20(%ebp),%eax
8010634b:	50                   	push   %eax
8010634c:	e8 8f d5 ff ff       	call   801038e0 <pipealloc>
80106351:	83 c4 10             	add    $0x10,%esp
80106354:	85 c0                	test   %eax,%eax
80106356:	78 37                	js     8010638f <sys_pipe+0x6f>
    return -1;
  fd0 = -1;
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
80106358:	8b 7d e0             	mov    -0x20(%ebp),%edi
  for(fd = 0; fd < NOFILE; fd++){
8010635b:	31 db                	xor    %ebx,%ebx
  struct proc *curproc = myproc();
8010635d:	e8 4e e1 ff ff       	call   801044b0 <myproc>
  for(fd = 0; fd < NOFILE; fd++){
80106362:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    if(curproc->ofile[fd] == 0){
80106368:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
8010636c:	85 f6                	test   %esi,%esi
8010636e:	74 30                	je     801063a0 <sys_pipe+0x80>
  for(fd = 0; fd < NOFILE; fd++){
80106370:	83 c3 01             	add    $0x1,%ebx
80106373:	83 fb 10             	cmp    $0x10,%ebx
80106376:	75 f0                	jne    80106368 <sys_pipe+0x48>
    if(fd0 >= 0)
      myproc()->ofile[fd0] = 0;
    fileclose(rf);
80106378:	83 ec 0c             	sub    $0xc,%esp
8010637b:	ff 75 e0             	pushl  -0x20(%ebp)
8010637e:	e8 ad a9 ff ff       	call   80100d30 <fileclose>
    fileclose(wf);
80106383:	58                   	pop    %eax
80106384:	ff 75 e4             	pushl  -0x1c(%ebp)
80106387:	e8 a4 a9 ff ff       	call   80100d30 <fileclose>
    return -1;
8010638c:	83 c4 10             	add    $0x10,%esp
8010638f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106394:	eb 5b                	jmp    801063f1 <sys_pipe+0xd1>
80106396:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010639d:	8d 76 00             	lea    0x0(%esi),%esi
      curproc->ofile[fd] = f;
801063a0:	8d 73 08             	lea    0x8(%ebx),%esi
801063a3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
801063a7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  struct proc *curproc = myproc();
801063aa:	e8 01 e1 ff ff       	call   801044b0 <myproc>
  for(fd = 0; fd < NOFILE; fd++){
801063af:	31 d2                	xor    %edx,%edx
801063b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    if(curproc->ofile[fd] == 0){
801063b8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
801063bc:	85 c9                	test   %ecx,%ecx
801063be:	74 20                	je     801063e0 <sys_pipe+0xc0>
  for(fd = 0; fd < NOFILE; fd++){
801063c0:	83 c2 01             	add    $0x1,%edx
801063c3:	83 fa 10             	cmp    $0x10,%edx
801063c6:	75 f0                	jne    801063b8 <sys_pipe+0x98>
      myproc()->ofile[fd0] = 0;
801063c8:	e8 e3 e0 ff ff       	call   801044b0 <myproc>
801063cd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
801063d4:	00 
801063d5:	eb a1                	jmp    80106378 <sys_pipe+0x58>
801063d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801063de:	66 90                	xchg   %ax,%ax
      curproc->ofile[fd] = f;
801063e0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
  }
  fd[0] = fd0;
801063e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
801063e7:	89 18                	mov    %ebx,(%eax)
  fd[1] = fd1;
801063e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
801063ec:	89 50 04             	mov    %edx,0x4(%eax)
  return 0;
801063ef:	31 c0                	xor    %eax,%eax
}
801063f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801063f4:	5b                   	pop    %ebx
801063f5:	5e                   	pop    %esi
801063f6:	5f                   	pop    %edi
801063f7:	5d                   	pop    %ebp
801063f8:	c3                   	ret    
801063f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106400 <sys_ioctl>:

int
sys_ioctl(void)
{
80106400:	f3 0f 1e fb          	endbr32 
80106404:	55                   	push   %ebp
80106405:	89 e5                	mov    %esp,%ebp
80106407:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int req;
  void *arg;

  if(argfd(0, 0, &f) < 0 || argint(1, &req) < 0)
8010640a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010640d:	50                   	push   %eax
8010640e:	6a 00                	push   $0x0
80106410:	6a 00                	push   $0x0
80106412:	e8 39 f5 ff ff       	call   80105950 <argfd>
80106417:	83 c4 10             	add    $0x10,%esp
8010641a:	85 c0                	test   %eax,%eax
8010641c:	78 52                	js     80106470 <sys_ioctl+0x70>
8010641e:	83 ec 08             	sub    $0x8,%esp
80106421:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106424:	50                   	push   %eax
80106425:	6a 01                	push   $0x1
80106427:	e8 24 f2 ff ff       	call   80105650 <argint>
8010642c:	83 c4 10             	add    $0x10,%esp
8010642f:	85 c0                	test   %eax,%eax
80106431:	78 3d                	js     80106470 <sys_ioctl+0x70>
    return -1;
  if(argptr(2, (void*)&arg, IOCPARM_LEN(req)) < 0)
80106433:	0f bf 45 f2          	movswl -0xe(%ebp),%eax
80106437:	83 ec 04             	sub    $0x4,%esp
8010643a:	25 ff 1f 00 00       	and    $0x1fff,%eax
8010643f:	50                   	push   %eax
80106440:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106443:	50                   	push   %eax
80106444:	6a 02                	push   $0x2
80106446:	e8 55 f2 ff ff       	call   801056a0 <argptr>
8010644b:	83 c4 10             	add    $0x10,%esp
8010644e:	85 c0                	test   %eax,%eax
80106450:	78 1e                	js     80106470 <sys_ioctl+0x70>
        return -1;
  return fileioctl(f, req, arg);
80106452:	83 ec 04             	sub    $0x4,%esp
80106455:	ff 75 f4             	pushl  -0xc(%ebp)
80106458:	ff 75 f0             	pushl  -0x10(%ebp)
8010645b:	ff 75 ec             	pushl  -0x14(%ebp)
8010645e:	e8 fd ab ff ff       	call   80101060 <fileioctl>
80106463:	83 c4 10             	add    $0x10,%esp
}
80106466:	c9                   	leave  
80106467:	c3                   	ret    
80106468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010646f:	90                   	nop
80106470:	c9                   	leave  
    return -1;
80106471:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106476:	c3                   	ret    
80106477:	66 90                	xchg   %ax,%ax
80106479:	66 90                	xchg   %ax,%ax
8010647b:	66 90                	xchg   %ax,%ax
8010647d:	66 90                	xchg   %ax,%ax
8010647f:	90                   	nop

80106480 <sys_fork>:
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
80106480:	f3 0f 1e fb          	endbr32 
  return fork();
80106484:	e9 d7 e1 ff ff       	jmp    80104660 <fork>
80106489:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106490 <sys_exit>:
}

int
sys_exit(void)
{
80106490:	f3 0f 1e fb          	endbr32 
80106494:	55                   	push   %ebp
80106495:	89 e5                	mov    %esp,%ebp
80106497:	83 ec 08             	sub    $0x8,%esp
  exit();
8010649a:	e8 41 e4 ff ff       	call   801048e0 <exit>
  return 0;  // not reached
}
8010649f:	31 c0                	xor    %eax,%eax
801064a1:	c9                   	leave  
801064a2:	c3                   	ret    
801064a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801064aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801064b0 <sys_wait>:

int
sys_wait(void)
{
801064b0:	f3 0f 1e fb          	endbr32 
  return wait();
801064b4:	e9 77 e6 ff ff       	jmp    80104b30 <wait>
801064b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801064c0 <sys_kill>:
}

int
sys_kill(void)
{
801064c0:	f3 0f 1e fb          	endbr32 
801064c4:	55                   	push   %ebp
801064c5:	89 e5                	mov    %esp,%ebp
801064c7:	83 ec 20             	sub    $0x20,%esp
  int pid;

  if(argint(0, &pid) < 0)
801064ca:	8d 45 f4             	lea    -0xc(%ebp),%eax
801064cd:	50                   	push   %eax
801064ce:	6a 00                	push   $0x0
801064d0:	e8 7b f1 ff ff       	call   80105650 <argint>
801064d5:	83 c4 10             	add    $0x10,%esp
801064d8:	85 c0                	test   %eax,%eax
801064da:	78 14                	js     801064f0 <sys_kill+0x30>
    return -1;
  return kill(pid);
801064dc:	83 ec 0c             	sub    $0xc,%esp
801064df:	ff 75 f4             	pushl  -0xc(%ebp)
801064e2:	e8 a9 e7 ff ff       	call   80104c90 <kill>
801064e7:	83 c4 10             	add    $0x10,%esp
}
801064ea:	c9                   	leave  
801064eb:	c3                   	ret    
801064ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801064f0:	c9                   	leave  
    return -1;
801064f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801064f6:	c3                   	ret    
801064f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801064fe:	66 90                	xchg   %ax,%ax

80106500 <sys_getpid>:

int
sys_getpid(void)
{
80106500:	f3 0f 1e fb          	endbr32 
80106504:	55                   	push   %ebp
80106505:	89 e5                	mov    %esp,%ebp
80106507:	83 ec 08             	sub    $0x8,%esp
  return myproc()->pid;
8010650a:	e8 a1 df ff ff       	call   801044b0 <myproc>
8010650f:	8b 40 10             	mov    0x10(%eax),%eax
}
80106512:	c9                   	leave  
80106513:	c3                   	ret    
80106514:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010651b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010651f:	90                   	nop

80106520 <sys_sbrk>:

int
sys_sbrk(void)
{
80106520:	f3 0f 1e fb          	endbr32 
80106524:	55                   	push   %ebp
80106525:	89 e5                	mov    %esp,%ebp
80106527:	53                   	push   %ebx
  int addr;
  int n;

  if(argint(0, &n) < 0)
80106528:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
8010652b:	83 ec 1c             	sub    $0x1c,%esp
  if(argint(0, &n) < 0)
8010652e:	50                   	push   %eax
8010652f:	6a 00                	push   $0x0
80106531:	e8 1a f1 ff ff       	call   80105650 <argint>
80106536:	83 c4 10             	add    $0x10,%esp
80106539:	85 c0                	test   %eax,%eax
8010653b:	78 23                	js     80106560 <sys_sbrk+0x40>
    return -1;
  addr = myproc()->sz;
8010653d:	e8 6e df ff ff       	call   801044b0 <myproc>
  if(growproc(n) < 0)
80106542:	83 ec 0c             	sub    $0xc,%esp
  addr = myproc()->sz;
80106545:	8b 18                	mov    (%eax),%ebx
  if(growproc(n) < 0)
80106547:	ff 75 f4             	pushl  -0xc(%ebp)
8010654a:	e8 91 e0 ff ff       	call   801045e0 <growproc>
8010654f:	83 c4 10             	add    $0x10,%esp
80106552:	85 c0                	test   %eax,%eax
80106554:	78 0a                	js     80106560 <sys_sbrk+0x40>
    return -1;
  return addr;
}
80106556:	89 d8                	mov    %ebx,%eax
80106558:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010655b:	c9                   	leave  
8010655c:	c3                   	ret    
8010655d:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80106560:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80106565:	eb ef                	jmp    80106556 <sys_sbrk+0x36>
80106567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010656e:	66 90                	xchg   %ax,%ax

80106570 <sys_sleep>:

int
sys_sleep(void)
{
80106570:	f3 0f 1e fb          	endbr32 
80106574:	55                   	push   %ebp
80106575:	89 e5                	mov    %esp,%ebp
80106577:	53                   	push   %ebx
  int n;
  uint ticks0;

  if(argint(0, &n) < 0)
80106578:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
8010657b:	83 ec 1c             	sub    $0x1c,%esp
  if(argint(0, &n) < 0)
8010657e:	50                   	push   %eax
8010657f:	6a 00                	push   $0x0
80106581:	e8 ca f0 ff ff       	call   80105650 <argint>
80106586:	83 c4 10             	add    $0x10,%esp
80106589:	85 c0                	test   %eax,%eax
8010658b:	0f 88 86 00 00 00    	js     80106617 <sys_sleep+0xa7>
    return -1;
  acquire(&tickslock);
80106591:	83 ec 0c             	sub    $0xc,%esp
80106594:	68 a0 09 14 80       	push   $0x801409a0
80106599:	e8 12 eb ff ff       	call   801050b0 <acquire>
  ticks0 = ticks;
  while(ticks - ticks0 < n){
8010659e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  ticks0 = ticks;
801065a1:	8b 1d e0 11 14 80    	mov    0x801411e0,%ebx
  while(ticks - ticks0 < n){
801065a7:	83 c4 10             	add    $0x10,%esp
801065aa:	85 d2                	test   %edx,%edx
801065ac:	75 23                	jne    801065d1 <sys_sleep+0x61>
801065ae:	eb 50                	jmp    80106600 <sys_sleep+0x90>
    if(myproc()->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
801065b0:	83 ec 08             	sub    $0x8,%esp
801065b3:	68 a0 09 14 80       	push   $0x801409a0
801065b8:	68 e0 11 14 80       	push   $0x801411e0
801065bd:	e8 ae e4 ff ff       	call   80104a70 <sleep>
  while(ticks - ticks0 < n){
801065c2:	a1 e0 11 14 80       	mov    0x801411e0,%eax
801065c7:	83 c4 10             	add    $0x10,%esp
801065ca:	29 d8                	sub    %ebx,%eax
801065cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801065cf:	73 2f                	jae    80106600 <sys_sleep+0x90>
    if(myproc()->killed){
801065d1:	e8 da de ff ff       	call   801044b0 <myproc>
801065d6:	8b 40 24             	mov    0x24(%eax),%eax
801065d9:	85 c0                	test   %eax,%eax
801065db:	74 d3                	je     801065b0 <sys_sleep+0x40>
      release(&tickslock);
801065dd:	83 ec 0c             	sub    $0xc,%esp
801065e0:	68 a0 09 14 80       	push   $0x801409a0
801065e5:	e8 86 eb ff ff       	call   80105170 <release>
  }
  release(&tickslock);
  return 0;
}
801065ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
      return -1;
801065ed:	83 c4 10             	add    $0x10,%esp
801065f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801065f5:	c9                   	leave  
801065f6:	c3                   	ret    
801065f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801065fe:	66 90                	xchg   %ax,%ax
  release(&tickslock);
80106600:	83 ec 0c             	sub    $0xc,%esp
80106603:	68 a0 09 14 80       	push   $0x801409a0
80106608:	e8 63 eb ff ff       	call   80105170 <release>
  return 0;
8010660d:	83 c4 10             	add    $0x10,%esp
80106610:	31 c0                	xor    %eax,%eax
}
80106612:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80106615:	c9                   	leave  
80106616:	c3                   	ret    
    return -1;
80106617:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010661c:	eb f4                	jmp    80106612 <sys_sleep+0xa2>
8010661e:	66 90                	xchg   %ax,%ax

80106620 <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
80106620:	f3 0f 1e fb          	endbr32 
80106624:	55                   	push   %ebp
80106625:	89 e5                	mov    %esp,%ebp
80106627:	53                   	push   %ebx
80106628:	83 ec 10             	sub    $0x10,%esp
  uint xticks;

  acquire(&tickslock);
8010662b:	68 a0 09 14 80       	push   $0x801409a0
80106630:	e8 7b ea ff ff       	call   801050b0 <acquire>
  xticks = ticks;
80106635:	8b 1d e0 11 14 80    	mov    0x801411e0,%ebx
  release(&tickslock);
8010663b:	c7 04 24 a0 09 14 80 	movl   $0x801409a0,(%esp)
80106642:	e8 29 eb ff ff       	call   80105170 <release>
  return xticks;
}
80106647:	89 d8                	mov    %ebx,%eax
80106649:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010664c:	c9                   	leave  
8010664d:	c3                   	ret    

8010664e <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
8010664e:	1e                   	push   %ds
  pushl %es
8010664f:	06                   	push   %es
  pushl %fs
80106650:	0f a0                	push   %fs
  pushl %gs
80106652:	0f a8                	push   %gs
  pushal
80106654:	60                   	pusha  
  
  # Set up data segments.
  movw $(SEG_KDATA<<3), %ax
80106655:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80106659:	8e d8                	mov    %eax,%ds
  movw %ax, %es
8010665b:	8e c0                	mov    %eax,%es

  # Call trap(tf), where tf=%esp
  pushl %esp
8010665d:	54                   	push   %esp
  call trap
8010665e:	e8 cd 00 00 00       	call   80106730 <trap>
  addl $4, %esp
80106663:	83 c4 04             	add    $0x4,%esp

80106666 <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80106666:	61                   	popa   
  popl %gs
80106667:	0f a9                	pop    %gs
  popl %fs
80106669:	0f a1                	pop    %fs
  popl %es
8010666b:	07                   	pop    %es
  popl %ds
8010666c:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
8010666d:	83 c4 08             	add    $0x8,%esp
  iret
80106670:	cf                   	iret   
80106671:	66 90                	xchg   %ax,%ax
80106673:	66 90                	xchg   %ax,%ax
80106675:	66 90                	xchg   %ax,%ax
80106677:	66 90                	xchg   %ax,%ax
80106679:	66 90                	xchg   %ax,%ax
8010667b:	66 90                	xchg   %ax,%ax
8010667d:	66 90                	xchg   %ax,%ax
8010667f:	90                   	nop

80106680 <tvinit>:
struct spinlock tickslock;
uint ticks;

void
tvinit(void)
{
80106680:	f3 0f 1e fb          	endbr32 
80106684:	55                   	push   %ebp
  int i;

  for(i = 0; i < 256; i++)
80106685:	31 c0                	xor    %eax,%eax
{
80106687:	89 e5                	mov    %esp,%ebp
80106689:	83 ec 08             	sub    $0x8,%esp
8010668c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
80106690:	8b 14 85 38 10 11 80 	mov    -0x7feeefc8(,%eax,4),%edx
80106697:	c7 04 c5 e2 09 14 80 	movl   $0x8e000008,-0x7febf61e(,%eax,8)
8010669e:	08 00 00 8e 
801066a2:	66 89 14 c5 e0 09 14 	mov    %dx,-0x7febf620(,%eax,8)
801066a9:	80 
801066aa:	c1 ea 10             	shr    $0x10,%edx
801066ad:	66 89 14 c5 e6 09 14 	mov    %dx,-0x7febf61a(,%eax,8)
801066b4:	80 
  for(i = 0; i < 256; i++)
801066b5:	83 c0 01             	add    $0x1,%eax
801066b8:	3d 00 01 00 00       	cmp    $0x100,%eax
801066bd:	75 d1                	jne    80106690 <tvinit+0x10>
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);

  initlock(&tickslock, "time");
801066bf:	83 ec 08             	sub    $0x8,%esp
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
801066c2:	a1 38 11 11 80       	mov    0x80111138,%eax
801066c7:	c7 05 e2 0b 14 80 08 	movl   $0xef000008,0x80140be2
801066ce:	00 00 ef 
  initlock(&tickslock, "time");
801066d1:	68 61 dd 10 80       	push   $0x8010dd61
801066d6:	68 a0 09 14 80       	push   $0x801409a0
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
801066db:	66 a3 e0 0b 14 80    	mov    %ax,0x80140be0
801066e1:	c1 e8 10             	shr    $0x10,%eax
801066e4:	66 a3 e6 0b 14 80    	mov    %ax,0x80140be6
  initlock(&tickslock, "time");
801066ea:	e8 41 e8 ff ff       	call   80104f30 <initlock>
}
801066ef:	83 c4 10             	add    $0x10,%esp
801066f2:	c9                   	leave  
801066f3:	c3                   	ret    
801066f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801066fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801066ff:	90                   	nop

80106700 <idtinit>:

void
idtinit(void)
{
80106700:	f3 0f 1e fb          	endbr32 
80106704:	55                   	push   %ebp
  pd[0] = size-1;
80106705:	b8 ff 07 00 00       	mov    $0x7ff,%eax
8010670a:	89 e5                	mov    %esp,%ebp
8010670c:	83 ec 10             	sub    $0x10,%esp
8010670f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
80106713:	b8 e0 09 14 80       	mov    $0x801409e0,%eax
80106718:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
8010671c:	c1 e8 10             	shr    $0x10,%eax
8010671f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  asm volatile("lidt (%0)" : : "r" (pd));
80106723:	8d 45 fa             	lea    -0x6(%ebp),%eax
80106726:	0f 01 18             	lidtl  (%eax)
  lidt(idt, sizeof(idt));
}
80106729:	c9                   	leave  
8010672a:	c3                   	ret    
8010672b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010672f:	90                   	nop

80106730 <trap>:

//PAGEBREAK: 41
void
trap(struct trapframe *tf)
{
80106730:	f3 0f 1e fb          	endbr32 
80106734:	55                   	push   %ebp
80106735:	89 e5                	mov    %esp,%ebp
80106737:	57                   	push   %edi
80106738:	56                   	push   %esi
80106739:	53                   	push   %ebx
8010673a:	83 ec 1c             	sub    $0x1c,%esp
8010673d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(tf->trapno == T_SYSCALL){
80106740:	8b 43 30             	mov    0x30(%ebx),%eax
80106743:	83 f8 40             	cmp    $0x40,%eax
80106746:	0f 84 dc 01 00 00    	je     80106928 <trap+0x1f8>
    if(myproc()->killed)
      exit();
    return;
  }

  switch(tf->trapno){
8010674c:	83 e8 20             	sub    $0x20,%eax
8010674f:	83 f8 1f             	cmp    $0x1f,%eax
80106752:	77 08                	ja     8010675c <trap+0x2c>
80106754:	3e ff 24 85 08 de 10 	notrack jmp *-0x7fef21f8(,%eax,4)
8010675b:	80 
    lapiceoi();
    break;

  //PAGEBREAK: 13
  default:
    if(myproc() == 0 || (tf->cs&3) == 0){
8010675c:	e8 4f dd ff ff       	call   801044b0 <myproc>
80106761:	8b 7b 38             	mov    0x38(%ebx),%edi
80106764:	85 c0                	test   %eax,%eax
80106766:	0f 84 0b 02 00 00    	je     80106977 <trap+0x247>
8010676c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
80106770:	0f 84 01 02 00 00    	je     80106977 <trap+0x247>
  asm volatile("movl %%cr2,%0" : "=r" (val));
80106776:	0f 20 d1             	mov    %cr2,%ecx
80106779:	89 4d d8             	mov    %ecx,-0x28(%ebp)
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpuid(), tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
8010677c:	e8 0f dd ff ff       	call   80104490 <cpuid>
80106781:	8b 73 30             	mov    0x30(%ebx),%esi
80106784:	89 45 dc             	mov    %eax,-0x24(%ebp)
80106787:	8b 43 34             	mov    0x34(%ebx),%eax
8010678a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            "eip 0x%x addr 0x%x--kill proc\n",
            myproc()->pid, myproc()->name, tf->trapno,
8010678d:	e8 1e dd ff ff       	call   801044b0 <myproc>
80106792:	89 45 e0             	mov    %eax,-0x20(%ebp)
80106795:	e8 16 dd ff ff       	call   801044b0 <myproc>
    cprintf("pid %d %s: trap %d err %d on cpu %d "
8010679a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
8010679d:	8b 55 dc             	mov    -0x24(%ebp),%edx
801067a0:	51                   	push   %ecx
801067a1:	57                   	push   %edi
801067a2:	52                   	push   %edx
801067a3:	ff 75 e4             	pushl  -0x1c(%ebp)
801067a6:	56                   	push   %esi
            myproc()->pid, myproc()->name, tf->trapno,
801067a7:	8b 75 e0             	mov    -0x20(%ebp),%esi
801067aa:	83 c6 6c             	add    $0x6c,%esi
    cprintf("pid %d %s: trap %d err %d on cpu %d "
801067ad:	56                   	push   %esi
801067ae:	ff 70 10             	pushl  0x10(%eax)
801067b1:	68 c4 dd 10 80       	push   $0x8010ddc4
801067b6:	e8 d5 9b ff ff       	call   80100390 <cprintf>
            tf->err, cpuid(), tf->eip, rcr2());
    myproc()->killed = 1;
801067bb:	83 c4 20             	add    $0x20,%esp
801067be:	e8 ed dc ff ff       	call   801044b0 <myproc>
801067c3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
  }

  // Force process exit if it has been killed and is in user space.
  // (If it is still executing in the kernel, let it keep running
  // until it gets to the regular system call return.)
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
801067ca:	e8 e1 dc ff ff       	call   801044b0 <myproc>
801067cf:	85 c0                	test   %eax,%eax
801067d1:	74 1d                	je     801067f0 <trap+0xc0>
801067d3:	e8 d8 dc ff ff       	call   801044b0 <myproc>
801067d8:	8b 50 24             	mov    0x24(%eax),%edx
801067db:	85 d2                	test   %edx,%edx
801067dd:	74 11                	je     801067f0 <trap+0xc0>
801067df:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
801067e3:	83 e0 03             	and    $0x3,%eax
801067e6:	66 83 f8 03          	cmp    $0x3,%ax
801067ea:	0f 84 70 01 00 00    	je     80106960 <trap+0x230>
    exit();

  // Force process to give up CPU on clock tick.
  // If interrupts were on while locks held, would need to check nlock.
  if(myproc() && myproc()->state == RUNNING &&
801067f0:	e8 bb dc ff ff       	call   801044b0 <myproc>
801067f5:	85 c0                	test   %eax,%eax
801067f7:	74 0f                	je     80106808 <trap+0xd8>
801067f9:	e8 b2 dc ff ff       	call   801044b0 <myproc>
801067fe:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
80106802:	0f 84 08 01 00 00    	je     80106910 <trap+0x1e0>
     tf->trapno == T_IRQ0+IRQ_TIMER)
    yield();

  // Check if the process has been killed since we yielded
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
80106808:	e8 a3 dc ff ff       	call   801044b0 <myproc>
8010680d:	85 c0                	test   %eax,%eax
8010680f:	74 1d                	je     8010682e <trap+0xfe>
80106811:	e8 9a dc ff ff       	call   801044b0 <myproc>
80106816:	8b 40 24             	mov    0x24(%eax),%eax
80106819:	85 c0                	test   %eax,%eax
8010681b:	74 11                	je     8010682e <trap+0xfe>
8010681d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
80106821:	83 e0 03             	and    $0x3,%eax
80106824:	66 83 f8 03          	cmp    $0x3,%ax
80106828:	0f 84 23 01 00 00    	je     80106951 <trap+0x221>
    exit();
}
8010682e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106831:	5b                   	pop    %ebx
80106832:	5e                   	pop    %esi
80106833:	5f                   	pop    %edi
80106834:	5d                   	pop    %ebp
80106835:	c3                   	ret    
    ideintr();
80106836:	e8 85 b8 ff ff       	call   801020c0 <ideintr>
    lapiceoi();
8010683b:	e8 60 bf ff ff       	call   801027a0 <lapiceoi>
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
80106840:	e8 6b dc ff ff       	call   801044b0 <myproc>
80106845:	85 c0                	test   %eax,%eax
80106847:	75 8a                	jne    801067d3 <trap+0xa3>
80106849:	eb a5                	jmp    801067f0 <trap+0xc0>
    if(cpuid() == 0){
8010684b:	e8 40 dc ff ff       	call   80104490 <cpuid>
80106850:	85 c0                	test   %eax,%eax
80106852:	75 e7                	jne    8010683b <trap+0x10b>
      acquire(&tickslock);
80106854:	83 ec 0c             	sub    $0xc,%esp
80106857:	68 a0 09 14 80       	push   $0x801409a0
8010685c:	e8 4f e8 ff ff       	call   801050b0 <acquire>
      wakeup(&ticks);
80106861:	c7 04 24 e0 11 14 80 	movl   $0x801411e0,(%esp)
      ticks++;
80106868:	83 05 e0 11 14 80 01 	addl   $0x1,0x801411e0
      wakeup(&ticks);
8010686f:	e8 bc e3 ff ff       	call   80104c30 <wakeup>
      release(&tickslock);
80106874:	c7 04 24 a0 09 14 80 	movl   $0x801409a0,(%esp)
8010687b:	e8 f0 e8 ff ff       	call   80105170 <release>
80106880:	83 c4 10             	add    $0x10,%esp
    lapiceoi();
80106883:	eb b6                	jmp    8010683b <trap+0x10b>
    kbdintr();
80106885:	e8 d6 bd ff ff       	call   80102660 <kbdintr>
    lapiceoi();
8010688a:	e8 11 bf ff ff       	call   801027a0 <lapiceoi>
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
8010688f:	e8 1c dc ff ff       	call   801044b0 <myproc>
80106894:	85 c0                	test   %eax,%eax
80106896:	0f 85 37 ff ff ff    	jne    801067d3 <trap+0xa3>
8010689c:	e9 4f ff ff ff       	jmp    801067f0 <trap+0xc0>
    uartintr();
801068a1:	e8 6a 02 00 00       	call   80106b10 <uartintr>
    lapiceoi();
801068a6:	e8 f5 be ff ff       	call   801027a0 <lapiceoi>
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
801068ab:	e8 00 dc ff ff       	call   801044b0 <myproc>
801068b0:	85 c0                	test   %eax,%eax
801068b2:	0f 85 1b ff ff ff    	jne    801067d3 <trap+0xa3>
801068b8:	e9 33 ff ff ff       	jmp    801067f0 <trap+0xc0>
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
801068bd:	8b 7b 38             	mov    0x38(%ebx),%edi
801068c0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
801068c4:	e8 c7 db ff ff       	call   80104490 <cpuid>
801068c9:	57                   	push   %edi
801068ca:	56                   	push   %esi
801068cb:	50                   	push   %eax
801068cc:	68 6c dd 10 80       	push   $0x8010dd6c
801068d1:	e8 ba 9a ff ff       	call   80100390 <cprintf>
    lapiceoi();
801068d6:	e8 c5 be ff ff       	call   801027a0 <lapiceoi>
    break;
801068db:	83 c4 10             	add    $0x10,%esp
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
801068de:	e8 cd db ff ff       	call   801044b0 <myproc>
801068e3:	85 c0                	test   %eax,%eax
801068e5:	0f 85 e8 fe ff ff    	jne    801067d3 <trap+0xa3>
801068eb:	e9 00 ff ff ff       	jmp    801067f0 <trap+0xc0>
    e1000intr();
801068f0:	e8 db 21 00 00       	call   80108ad0 <e1000intr>
    lapiceoi();
801068f5:	e8 a6 be ff ff       	call   801027a0 <lapiceoi>
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
801068fa:	e8 b1 db ff ff       	call   801044b0 <myproc>
801068ff:	85 c0                	test   %eax,%eax
80106901:	0f 85 cc fe ff ff    	jne    801067d3 <trap+0xa3>
80106907:	e9 e4 fe ff ff       	jmp    801067f0 <trap+0xc0>
8010690c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  if(myproc() && myproc()->state == RUNNING &&
80106910:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
80106914:	0f 85 ee fe ff ff    	jne    80106808 <trap+0xd8>
    yield();
8010691a:	e8 01 e1 ff ff       	call   80104a20 <yield>
8010691f:	e9 e4 fe ff ff       	jmp    80106808 <trap+0xd8>
80106924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    if(myproc()->killed)
80106928:	e8 83 db ff ff       	call   801044b0 <myproc>
8010692d:	8b 70 24             	mov    0x24(%eax),%esi
80106930:	85 f6                	test   %esi,%esi
80106932:	75 3c                	jne    80106970 <trap+0x240>
    myproc()->tf = tf;
80106934:	e8 77 db ff ff       	call   801044b0 <myproc>
80106939:	89 58 18             	mov    %ebx,0x18(%eax)
    syscall();
8010693c:	e8 ff ed ff ff       	call   80105740 <syscall>
    if(myproc()->killed)
80106941:	e8 6a db ff ff       	call   801044b0 <myproc>
80106946:	8b 48 24             	mov    0x24(%eax),%ecx
80106949:	85 c9                	test   %ecx,%ecx
8010694b:	0f 84 dd fe ff ff    	je     8010682e <trap+0xfe>
}
80106951:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106954:	5b                   	pop    %ebx
80106955:	5e                   	pop    %esi
80106956:	5f                   	pop    %edi
80106957:	5d                   	pop    %ebp
      exit();
80106958:	e9 83 df ff ff       	jmp    801048e0 <exit>
8010695d:	8d 76 00             	lea    0x0(%esi),%esi
    exit();
80106960:	e8 7b df ff ff       	call   801048e0 <exit>
80106965:	e9 86 fe ff ff       	jmp    801067f0 <trap+0xc0>
8010696a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      exit();
80106970:	e8 6b df ff ff       	call   801048e0 <exit>
80106975:	eb bd                	jmp    80106934 <trap+0x204>
80106977:	0f 20 d6             	mov    %cr2,%esi
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
8010697a:	e8 11 db ff ff       	call   80104490 <cpuid>
8010697f:	83 ec 0c             	sub    $0xc,%esp
80106982:	56                   	push   %esi
80106983:	57                   	push   %edi
80106984:	50                   	push   %eax
80106985:	ff 73 30             	pushl  0x30(%ebx)
80106988:	68 90 dd 10 80       	push   $0x8010dd90
8010698d:	e8 fe 99 ff ff       	call   80100390 <cprintf>
      panic("trap");
80106992:	83 c4 14             	add    $0x14,%esp
80106995:	68 66 dd 10 80       	push   $0x8010dd66
8010699a:	e8 81 9a ff ff       	call   80100420 <panic>
8010699f:	90                   	nop

801069a0 <uartgetc>:
  outb(COM1+0, c);
}

static int
uartgetc(void)
{
801069a0:	f3 0f 1e fb          	endbr32 
  if(!uart)
801069a4:	a1 04 16 11 80       	mov    0x80111604,%eax
801069a9:	85 c0                	test   %eax,%eax
801069ab:	74 1b                	je     801069c8 <uartgetc+0x28>
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801069ad:	ba fd 03 00 00       	mov    $0x3fd,%edx
801069b2:	ec                   	in     (%dx),%al
    return -1;
  if(!(inb(COM1+5) & 0x01))
801069b3:	a8 01                	test   $0x1,%al
801069b5:	74 11                	je     801069c8 <uartgetc+0x28>
801069b7:	ba f8 03 00 00       	mov    $0x3f8,%edx
801069bc:	ec                   	in     (%dx),%al
    return -1;
  return inb(COM1+0);
801069bd:	0f b6 c0             	movzbl %al,%eax
801069c0:	c3                   	ret    
801069c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    return -1;
801069c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801069cd:	c3                   	ret    
801069ce:	66 90                	xchg   %ax,%ax

801069d0 <uartputc.part.0>:
uartputc(int c)
801069d0:	55                   	push   %ebp
801069d1:	89 e5                	mov    %esp,%ebp
801069d3:	57                   	push   %edi
801069d4:	89 c7                	mov    %eax,%edi
801069d6:	56                   	push   %esi
801069d7:	be fd 03 00 00       	mov    $0x3fd,%esi
801069dc:	53                   	push   %ebx
801069dd:	bb 80 00 00 00       	mov    $0x80,%ebx
801069e2:	83 ec 0c             	sub    $0xc,%esp
801069e5:	eb 1b                	jmp    80106a02 <uartputc.part.0+0x32>
801069e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801069ee:	66 90                	xchg   %ax,%ax
    microdelay(10);
801069f0:	83 ec 0c             	sub    $0xc,%esp
801069f3:	6a 0a                	push   $0xa
801069f5:	e8 c6 bd ff ff       	call   801027c0 <microdelay>
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
801069fa:	83 c4 10             	add    $0x10,%esp
801069fd:	83 eb 01             	sub    $0x1,%ebx
80106a00:	74 07                	je     80106a09 <uartputc.part.0+0x39>
80106a02:	89 f2                	mov    %esi,%edx
80106a04:	ec                   	in     (%dx),%al
80106a05:	a8 20                	test   $0x20,%al
80106a07:	74 e7                	je     801069f0 <uartputc.part.0+0x20>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80106a09:	ba f8 03 00 00       	mov    $0x3f8,%edx
80106a0e:	89 f8                	mov    %edi,%eax
80106a10:	ee                   	out    %al,(%dx)
}
80106a11:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106a14:	5b                   	pop    %ebx
80106a15:	5e                   	pop    %esi
80106a16:	5f                   	pop    %edi
80106a17:	5d                   	pop    %ebp
80106a18:	c3                   	ret    
80106a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106a20 <uartinit>:
{
80106a20:	f3 0f 1e fb          	endbr32 
80106a24:	55                   	push   %ebp
80106a25:	31 c9                	xor    %ecx,%ecx
80106a27:	89 c8                	mov    %ecx,%eax
80106a29:	89 e5                	mov    %esp,%ebp
80106a2b:	57                   	push   %edi
80106a2c:	56                   	push   %esi
80106a2d:	53                   	push   %ebx
80106a2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
80106a33:	89 da                	mov    %ebx,%edx
80106a35:	83 ec 0c             	sub    $0xc,%esp
80106a38:	ee                   	out    %al,(%dx)
80106a39:	bf fb 03 00 00       	mov    $0x3fb,%edi
80106a3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
80106a43:	89 fa                	mov    %edi,%edx
80106a45:	ee                   	out    %al,(%dx)
80106a46:	b8 0c 00 00 00       	mov    $0xc,%eax
80106a4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
80106a50:	ee                   	out    %al,(%dx)
80106a51:	be f9 03 00 00       	mov    $0x3f9,%esi
80106a56:	89 c8                	mov    %ecx,%eax
80106a58:	89 f2                	mov    %esi,%edx
80106a5a:	ee                   	out    %al,(%dx)
80106a5b:	b8 03 00 00 00       	mov    $0x3,%eax
80106a60:	89 fa                	mov    %edi,%edx
80106a62:	ee                   	out    %al,(%dx)
80106a63:	ba fc 03 00 00       	mov    $0x3fc,%edx
80106a68:	89 c8                	mov    %ecx,%eax
80106a6a:	ee                   	out    %al,(%dx)
80106a6b:	b8 01 00 00 00       	mov    $0x1,%eax
80106a70:	89 f2                	mov    %esi,%edx
80106a72:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80106a73:	ba fd 03 00 00       	mov    $0x3fd,%edx
80106a78:	ec                   	in     (%dx),%al
  if(inb(COM1+5) == 0xFF)
80106a79:	3c ff                	cmp    $0xff,%al
80106a7b:	74 52                	je     80106acf <uartinit+0xaf>
  uart = 1;
80106a7d:	c7 05 04 16 11 80 01 	movl   $0x1,0x80111604
80106a84:	00 00 00 
80106a87:	89 da                	mov    %ebx,%edx
80106a89:	ec                   	in     (%dx),%al
80106a8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
80106a8f:	ec                   	in     (%dx),%al
  ioapicenable(IRQ_COM1, 0);
80106a90:	83 ec 08             	sub    $0x8,%esp
80106a93:	be 76 00 00 00       	mov    $0x76,%esi
  for(p="xv6...\n"; *p; p++)
80106a98:	bb 88 de 10 80       	mov    $0x8010de88,%ebx
  ioapicenable(IRQ_COM1, 0);
80106a9d:	6a 00                	push   $0x0
80106a9f:	6a 04                	push   $0x4
80106aa1:	e8 6a b8 ff ff       	call   80102310 <ioapicenable>
80106aa6:	83 c4 10             	add    $0x10,%esp
  for(p="xv6...\n"; *p; p++)
80106aa9:	b8 78 00 00 00       	mov    $0x78,%eax
80106aae:	eb 04                	jmp    80106ab4 <uartinit+0x94>
80106ab0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
  if(!uart)
80106ab4:	8b 15 04 16 11 80    	mov    0x80111604,%edx
80106aba:	85 d2                	test   %edx,%edx
80106abc:	74 08                	je     80106ac6 <uartinit+0xa6>
    uartputc(*p);
80106abe:	0f be c0             	movsbl %al,%eax
80106ac1:	e8 0a ff ff ff       	call   801069d0 <uartputc.part.0>
  for(p="xv6...\n"; *p; p++)
80106ac6:	89 f0                	mov    %esi,%eax
80106ac8:	83 c3 01             	add    $0x1,%ebx
80106acb:	84 c0                	test   %al,%al
80106acd:	75 e1                	jne    80106ab0 <uartinit+0x90>
}
80106acf:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106ad2:	5b                   	pop    %ebx
80106ad3:	5e                   	pop    %esi
80106ad4:	5f                   	pop    %edi
80106ad5:	5d                   	pop    %ebp
80106ad6:	c3                   	ret    
80106ad7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106ade:	66 90                	xchg   %ax,%ax

80106ae0 <uartputc>:
{
80106ae0:	f3 0f 1e fb          	endbr32 
80106ae4:	55                   	push   %ebp
  if(!uart)
80106ae5:	8b 15 04 16 11 80    	mov    0x80111604,%edx
{
80106aeb:	89 e5                	mov    %esp,%ebp
80106aed:	8b 45 08             	mov    0x8(%ebp),%eax
  if(!uart)
80106af0:	85 d2                	test   %edx,%edx
80106af2:	74 0c                	je     80106b00 <uartputc+0x20>
}
80106af4:	5d                   	pop    %ebp
80106af5:	e9 d6 fe ff ff       	jmp    801069d0 <uartputc.part.0>
80106afa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106b00:	5d                   	pop    %ebp
80106b01:	c3                   	ret    
80106b02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106b10 <uartintr>:

void
uartintr(void)
{
80106b10:	f3 0f 1e fb          	endbr32 
80106b14:	55                   	push   %ebp
80106b15:	89 e5                	mov    %esp,%ebp
80106b17:	83 ec 14             	sub    $0x14,%esp
  consoleintr(uartgetc);
80106b1a:	68 a0 69 10 80       	push   $0x801069a0
80106b1f:	e8 ac 9b ff ff       	call   801006d0 <consoleintr>
}
80106b24:	83 c4 10             	add    $0x10,%esp
80106b27:	c9                   	leave  
80106b28:	c3                   	ret    

80106b29 <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
80106b29:	6a 00                	push   $0x0
  pushl $0
80106b2b:	6a 00                	push   $0x0
  jmp alltraps
80106b2d:	e9 1c fb ff ff       	jmp    8010664e <alltraps>

80106b32 <vector1>:
.globl vector1
vector1:
  pushl $0
80106b32:	6a 00                	push   $0x0
  pushl $1
80106b34:	6a 01                	push   $0x1
  jmp alltraps
80106b36:	e9 13 fb ff ff       	jmp    8010664e <alltraps>

80106b3b <vector2>:
.globl vector2
vector2:
  pushl $0
80106b3b:	6a 00                	push   $0x0
  pushl $2
80106b3d:	6a 02                	push   $0x2
  jmp alltraps
80106b3f:	e9 0a fb ff ff       	jmp    8010664e <alltraps>

80106b44 <vector3>:
.globl vector3
vector3:
  pushl $0
80106b44:	6a 00                	push   $0x0
  pushl $3
80106b46:	6a 03                	push   $0x3
  jmp alltraps
80106b48:	e9 01 fb ff ff       	jmp    8010664e <alltraps>

80106b4d <vector4>:
.globl vector4
vector4:
  pushl $0
80106b4d:	6a 00                	push   $0x0
  pushl $4
80106b4f:	6a 04                	push   $0x4
  jmp alltraps
80106b51:	e9 f8 fa ff ff       	jmp    8010664e <alltraps>

80106b56 <vector5>:
.globl vector5
vector5:
  pushl $0
80106b56:	6a 00                	push   $0x0
  pushl $5
80106b58:	6a 05                	push   $0x5
  jmp alltraps
80106b5a:	e9 ef fa ff ff       	jmp    8010664e <alltraps>

80106b5f <vector6>:
.globl vector6
vector6:
  pushl $0
80106b5f:	6a 00                	push   $0x0
  pushl $6
80106b61:	6a 06                	push   $0x6
  jmp alltraps
80106b63:	e9 e6 fa ff ff       	jmp    8010664e <alltraps>

80106b68 <vector7>:
.globl vector7
vector7:
  pushl $0
80106b68:	6a 00                	push   $0x0
  pushl $7
80106b6a:	6a 07                	push   $0x7
  jmp alltraps
80106b6c:	e9 dd fa ff ff       	jmp    8010664e <alltraps>

80106b71 <vector8>:
.globl vector8
vector8:
  pushl $8
80106b71:	6a 08                	push   $0x8
  jmp alltraps
80106b73:	e9 d6 fa ff ff       	jmp    8010664e <alltraps>

80106b78 <vector9>:
.globl vector9
vector9:
  pushl $0
80106b78:	6a 00                	push   $0x0
  pushl $9
80106b7a:	6a 09                	push   $0x9
  jmp alltraps
80106b7c:	e9 cd fa ff ff       	jmp    8010664e <alltraps>

80106b81 <vector10>:
.globl vector10
vector10:
  pushl $10
80106b81:	6a 0a                	push   $0xa
  jmp alltraps
80106b83:	e9 c6 fa ff ff       	jmp    8010664e <alltraps>

80106b88 <vector11>:
.globl vector11
vector11:
  pushl $11
80106b88:	6a 0b                	push   $0xb
  jmp alltraps
80106b8a:	e9 bf fa ff ff       	jmp    8010664e <alltraps>

80106b8f <vector12>:
.globl vector12
vector12:
  pushl $12
80106b8f:	6a 0c                	push   $0xc
  jmp alltraps
80106b91:	e9 b8 fa ff ff       	jmp    8010664e <alltraps>

80106b96 <vector13>:
.globl vector13
vector13:
  pushl $13
80106b96:	6a 0d                	push   $0xd
  jmp alltraps
80106b98:	e9 b1 fa ff ff       	jmp    8010664e <alltraps>

80106b9d <vector14>:
.globl vector14
vector14:
  pushl $14
80106b9d:	6a 0e                	push   $0xe
  jmp alltraps
80106b9f:	e9 aa fa ff ff       	jmp    8010664e <alltraps>

80106ba4 <vector15>:
.globl vector15
vector15:
  pushl $0
80106ba4:	6a 00                	push   $0x0
  pushl $15
80106ba6:	6a 0f                	push   $0xf
  jmp alltraps
80106ba8:	e9 a1 fa ff ff       	jmp    8010664e <alltraps>

80106bad <vector16>:
.globl vector16
vector16:
  pushl $0
80106bad:	6a 00                	push   $0x0
  pushl $16
80106baf:	6a 10                	push   $0x10
  jmp alltraps
80106bb1:	e9 98 fa ff ff       	jmp    8010664e <alltraps>

80106bb6 <vector17>:
.globl vector17
vector17:
  pushl $17
80106bb6:	6a 11                	push   $0x11
  jmp alltraps
80106bb8:	e9 91 fa ff ff       	jmp    8010664e <alltraps>

80106bbd <vector18>:
.globl vector18
vector18:
  pushl $0
80106bbd:	6a 00                	push   $0x0
  pushl $18
80106bbf:	6a 12                	push   $0x12
  jmp alltraps
80106bc1:	e9 88 fa ff ff       	jmp    8010664e <alltraps>

80106bc6 <vector19>:
.globl vector19
vector19:
  pushl $0
80106bc6:	6a 00                	push   $0x0
  pushl $19
80106bc8:	6a 13                	push   $0x13
  jmp alltraps
80106bca:	e9 7f fa ff ff       	jmp    8010664e <alltraps>

80106bcf <vector20>:
.globl vector20
vector20:
  pushl $0
80106bcf:	6a 00                	push   $0x0
  pushl $20
80106bd1:	6a 14                	push   $0x14
  jmp alltraps
80106bd3:	e9 76 fa ff ff       	jmp    8010664e <alltraps>

80106bd8 <vector21>:
.globl vector21
vector21:
  pushl $0
80106bd8:	6a 00                	push   $0x0
  pushl $21
80106bda:	6a 15                	push   $0x15
  jmp alltraps
80106bdc:	e9 6d fa ff ff       	jmp    8010664e <alltraps>

80106be1 <vector22>:
.globl vector22
vector22:
  pushl $0
80106be1:	6a 00                	push   $0x0
  pushl $22
80106be3:	6a 16                	push   $0x16
  jmp alltraps
80106be5:	e9 64 fa ff ff       	jmp    8010664e <alltraps>

80106bea <vector23>:
.globl vector23
vector23:
  pushl $0
80106bea:	6a 00                	push   $0x0
  pushl $23
80106bec:	6a 17                	push   $0x17
  jmp alltraps
80106bee:	e9 5b fa ff ff       	jmp    8010664e <alltraps>

80106bf3 <vector24>:
.globl vector24
vector24:
  pushl $0
80106bf3:	6a 00                	push   $0x0
  pushl $24
80106bf5:	6a 18                	push   $0x18
  jmp alltraps
80106bf7:	e9 52 fa ff ff       	jmp    8010664e <alltraps>

80106bfc <vector25>:
.globl vector25
vector25:
  pushl $0
80106bfc:	6a 00                	push   $0x0
  pushl $25
80106bfe:	6a 19                	push   $0x19
  jmp alltraps
80106c00:	e9 49 fa ff ff       	jmp    8010664e <alltraps>

80106c05 <vector26>:
.globl vector26
vector26:
  pushl $0
80106c05:	6a 00                	push   $0x0
  pushl $26
80106c07:	6a 1a                	push   $0x1a
  jmp alltraps
80106c09:	e9 40 fa ff ff       	jmp    8010664e <alltraps>

80106c0e <vector27>:
.globl vector27
vector27:
  pushl $0
80106c0e:	6a 00                	push   $0x0
  pushl $27
80106c10:	6a 1b                	push   $0x1b
  jmp alltraps
80106c12:	e9 37 fa ff ff       	jmp    8010664e <alltraps>

80106c17 <vector28>:
.globl vector28
vector28:
  pushl $0
80106c17:	6a 00                	push   $0x0
  pushl $28
80106c19:	6a 1c                	push   $0x1c
  jmp alltraps
80106c1b:	e9 2e fa ff ff       	jmp    8010664e <alltraps>

80106c20 <vector29>:
.globl vector29
vector29:
  pushl $0
80106c20:	6a 00                	push   $0x0
  pushl $29
80106c22:	6a 1d                	push   $0x1d
  jmp alltraps
80106c24:	e9 25 fa ff ff       	jmp    8010664e <alltraps>

80106c29 <vector30>:
.globl vector30
vector30:
  pushl $0
80106c29:	6a 00                	push   $0x0
  pushl $30
80106c2b:	6a 1e                	push   $0x1e
  jmp alltraps
80106c2d:	e9 1c fa ff ff       	jmp    8010664e <alltraps>

80106c32 <vector31>:
.globl vector31
vector31:
  pushl $0
80106c32:	6a 00                	push   $0x0
  pushl $31
80106c34:	6a 1f                	push   $0x1f
  jmp alltraps
80106c36:	e9 13 fa ff ff       	jmp    8010664e <alltraps>

80106c3b <vector32>:
.globl vector32
vector32:
  pushl $0
80106c3b:	6a 00                	push   $0x0
  pushl $32
80106c3d:	6a 20                	push   $0x20
  jmp alltraps
80106c3f:	e9 0a fa ff ff       	jmp    8010664e <alltraps>

80106c44 <vector33>:
.globl vector33
vector33:
  pushl $0
80106c44:	6a 00                	push   $0x0
  pushl $33
80106c46:	6a 21                	push   $0x21
  jmp alltraps
80106c48:	e9 01 fa ff ff       	jmp    8010664e <alltraps>

80106c4d <vector34>:
.globl vector34
vector34:
  pushl $0
80106c4d:	6a 00                	push   $0x0
  pushl $34
80106c4f:	6a 22                	push   $0x22
  jmp alltraps
80106c51:	e9 f8 f9 ff ff       	jmp    8010664e <alltraps>

80106c56 <vector35>:
.globl vector35
vector35:
  pushl $0
80106c56:	6a 00                	push   $0x0
  pushl $35
80106c58:	6a 23                	push   $0x23
  jmp alltraps
80106c5a:	e9 ef f9 ff ff       	jmp    8010664e <alltraps>

80106c5f <vector36>:
.globl vector36
vector36:
  pushl $0
80106c5f:	6a 00                	push   $0x0
  pushl $36
80106c61:	6a 24                	push   $0x24
  jmp alltraps
80106c63:	e9 e6 f9 ff ff       	jmp    8010664e <alltraps>

80106c68 <vector37>:
.globl vector37
vector37:
  pushl $0
80106c68:	6a 00                	push   $0x0
  pushl $37
80106c6a:	6a 25                	push   $0x25
  jmp alltraps
80106c6c:	e9 dd f9 ff ff       	jmp    8010664e <alltraps>

80106c71 <vector38>:
.globl vector38
vector38:
  pushl $0
80106c71:	6a 00                	push   $0x0
  pushl $38
80106c73:	6a 26                	push   $0x26
  jmp alltraps
80106c75:	e9 d4 f9 ff ff       	jmp    8010664e <alltraps>

80106c7a <vector39>:
.globl vector39
vector39:
  pushl $0
80106c7a:	6a 00                	push   $0x0
  pushl $39
80106c7c:	6a 27                	push   $0x27
  jmp alltraps
80106c7e:	e9 cb f9 ff ff       	jmp    8010664e <alltraps>

80106c83 <vector40>:
.globl vector40
vector40:
  pushl $0
80106c83:	6a 00                	push   $0x0
  pushl $40
80106c85:	6a 28                	push   $0x28
  jmp alltraps
80106c87:	e9 c2 f9 ff ff       	jmp    8010664e <alltraps>

80106c8c <vector41>:
.globl vector41
vector41:
  pushl $0
80106c8c:	6a 00                	push   $0x0
  pushl $41
80106c8e:	6a 29                	push   $0x29
  jmp alltraps
80106c90:	e9 b9 f9 ff ff       	jmp    8010664e <alltraps>

80106c95 <vector42>:
.globl vector42
vector42:
  pushl $0
80106c95:	6a 00                	push   $0x0
  pushl $42
80106c97:	6a 2a                	push   $0x2a
  jmp alltraps
80106c99:	e9 b0 f9 ff ff       	jmp    8010664e <alltraps>

80106c9e <vector43>:
.globl vector43
vector43:
  pushl $0
80106c9e:	6a 00                	push   $0x0
  pushl $43
80106ca0:	6a 2b                	push   $0x2b
  jmp alltraps
80106ca2:	e9 a7 f9 ff ff       	jmp    8010664e <alltraps>

80106ca7 <vector44>:
.globl vector44
vector44:
  pushl $0
80106ca7:	6a 00                	push   $0x0
  pushl $44
80106ca9:	6a 2c                	push   $0x2c
  jmp alltraps
80106cab:	e9 9e f9 ff ff       	jmp    8010664e <alltraps>

80106cb0 <vector45>:
.globl vector45
vector45:
  pushl $0
80106cb0:	6a 00                	push   $0x0
  pushl $45
80106cb2:	6a 2d                	push   $0x2d
  jmp alltraps
80106cb4:	e9 95 f9 ff ff       	jmp    8010664e <alltraps>

80106cb9 <vector46>:
.globl vector46
vector46:
  pushl $0
80106cb9:	6a 00                	push   $0x0
  pushl $46
80106cbb:	6a 2e                	push   $0x2e
  jmp alltraps
80106cbd:	e9 8c f9 ff ff       	jmp    8010664e <alltraps>

80106cc2 <vector47>:
.globl vector47
vector47:
  pushl $0
80106cc2:	6a 00                	push   $0x0
  pushl $47
80106cc4:	6a 2f                	push   $0x2f
  jmp alltraps
80106cc6:	e9 83 f9 ff ff       	jmp    8010664e <alltraps>

80106ccb <vector48>:
.globl vector48
vector48:
  pushl $0
80106ccb:	6a 00                	push   $0x0
  pushl $48
80106ccd:	6a 30                	push   $0x30
  jmp alltraps
80106ccf:	e9 7a f9 ff ff       	jmp    8010664e <alltraps>

80106cd4 <vector49>:
.globl vector49
vector49:
  pushl $0
80106cd4:	6a 00                	push   $0x0
  pushl $49
80106cd6:	6a 31                	push   $0x31
  jmp alltraps
80106cd8:	e9 71 f9 ff ff       	jmp    8010664e <alltraps>

80106cdd <vector50>:
.globl vector50
vector50:
  pushl $0
80106cdd:	6a 00                	push   $0x0
  pushl $50
80106cdf:	6a 32                	push   $0x32
  jmp alltraps
80106ce1:	e9 68 f9 ff ff       	jmp    8010664e <alltraps>

80106ce6 <vector51>:
.globl vector51
vector51:
  pushl $0
80106ce6:	6a 00                	push   $0x0
  pushl $51
80106ce8:	6a 33                	push   $0x33
  jmp alltraps
80106cea:	e9 5f f9 ff ff       	jmp    8010664e <alltraps>

80106cef <vector52>:
.globl vector52
vector52:
  pushl $0
80106cef:	6a 00                	push   $0x0
  pushl $52
80106cf1:	6a 34                	push   $0x34
  jmp alltraps
80106cf3:	e9 56 f9 ff ff       	jmp    8010664e <alltraps>

80106cf8 <vector53>:
.globl vector53
vector53:
  pushl $0
80106cf8:	6a 00                	push   $0x0
  pushl $53
80106cfa:	6a 35                	push   $0x35
  jmp alltraps
80106cfc:	e9 4d f9 ff ff       	jmp    8010664e <alltraps>

80106d01 <vector54>:
.globl vector54
vector54:
  pushl $0
80106d01:	6a 00                	push   $0x0
  pushl $54
80106d03:	6a 36                	push   $0x36
  jmp alltraps
80106d05:	e9 44 f9 ff ff       	jmp    8010664e <alltraps>

80106d0a <vector55>:
.globl vector55
vector55:
  pushl $0
80106d0a:	6a 00                	push   $0x0
  pushl $55
80106d0c:	6a 37                	push   $0x37
  jmp alltraps
80106d0e:	e9 3b f9 ff ff       	jmp    8010664e <alltraps>

80106d13 <vector56>:
.globl vector56
vector56:
  pushl $0
80106d13:	6a 00                	push   $0x0
  pushl $56
80106d15:	6a 38                	push   $0x38
  jmp alltraps
80106d17:	e9 32 f9 ff ff       	jmp    8010664e <alltraps>

80106d1c <vector57>:
.globl vector57
vector57:
  pushl $0
80106d1c:	6a 00                	push   $0x0
  pushl $57
80106d1e:	6a 39                	push   $0x39
  jmp alltraps
80106d20:	e9 29 f9 ff ff       	jmp    8010664e <alltraps>

80106d25 <vector58>:
.globl vector58
vector58:
  pushl $0
80106d25:	6a 00                	push   $0x0
  pushl $58
80106d27:	6a 3a                	push   $0x3a
  jmp alltraps
80106d29:	e9 20 f9 ff ff       	jmp    8010664e <alltraps>

80106d2e <vector59>:
.globl vector59
vector59:
  pushl $0
80106d2e:	6a 00                	push   $0x0
  pushl $59
80106d30:	6a 3b                	push   $0x3b
  jmp alltraps
80106d32:	e9 17 f9 ff ff       	jmp    8010664e <alltraps>

80106d37 <vector60>:
.globl vector60
vector60:
  pushl $0
80106d37:	6a 00                	push   $0x0
  pushl $60
80106d39:	6a 3c                	push   $0x3c
  jmp alltraps
80106d3b:	e9 0e f9 ff ff       	jmp    8010664e <alltraps>

80106d40 <vector61>:
.globl vector61
vector61:
  pushl $0
80106d40:	6a 00                	push   $0x0
  pushl $61
80106d42:	6a 3d                	push   $0x3d
  jmp alltraps
80106d44:	e9 05 f9 ff ff       	jmp    8010664e <alltraps>

80106d49 <vector62>:
.globl vector62
vector62:
  pushl $0
80106d49:	6a 00                	push   $0x0
  pushl $62
80106d4b:	6a 3e                	push   $0x3e
  jmp alltraps
80106d4d:	e9 fc f8 ff ff       	jmp    8010664e <alltraps>

80106d52 <vector63>:
.globl vector63
vector63:
  pushl $0
80106d52:	6a 00                	push   $0x0
  pushl $63
80106d54:	6a 3f                	push   $0x3f
  jmp alltraps
80106d56:	e9 f3 f8 ff ff       	jmp    8010664e <alltraps>

80106d5b <vector64>:
.globl vector64
vector64:
  pushl $0
80106d5b:	6a 00                	push   $0x0
  pushl $64
80106d5d:	6a 40                	push   $0x40
  jmp alltraps
80106d5f:	e9 ea f8 ff ff       	jmp    8010664e <alltraps>

80106d64 <vector65>:
.globl vector65
vector65:
  pushl $0
80106d64:	6a 00                	push   $0x0
  pushl $65
80106d66:	6a 41                	push   $0x41
  jmp alltraps
80106d68:	e9 e1 f8 ff ff       	jmp    8010664e <alltraps>

80106d6d <vector66>:
.globl vector66
vector66:
  pushl $0
80106d6d:	6a 00                	push   $0x0
  pushl $66
80106d6f:	6a 42                	push   $0x42
  jmp alltraps
80106d71:	e9 d8 f8 ff ff       	jmp    8010664e <alltraps>

80106d76 <vector67>:
.globl vector67
vector67:
  pushl $0
80106d76:	6a 00                	push   $0x0
  pushl $67
80106d78:	6a 43                	push   $0x43
  jmp alltraps
80106d7a:	e9 cf f8 ff ff       	jmp    8010664e <alltraps>

80106d7f <vector68>:
.globl vector68
vector68:
  pushl $0
80106d7f:	6a 00                	push   $0x0
  pushl $68
80106d81:	6a 44                	push   $0x44
  jmp alltraps
80106d83:	e9 c6 f8 ff ff       	jmp    8010664e <alltraps>

80106d88 <vector69>:
.globl vector69
vector69:
  pushl $0
80106d88:	6a 00                	push   $0x0
  pushl $69
80106d8a:	6a 45                	push   $0x45
  jmp alltraps
80106d8c:	e9 bd f8 ff ff       	jmp    8010664e <alltraps>

80106d91 <vector70>:
.globl vector70
vector70:
  pushl $0
80106d91:	6a 00                	push   $0x0
  pushl $70
80106d93:	6a 46                	push   $0x46
  jmp alltraps
80106d95:	e9 b4 f8 ff ff       	jmp    8010664e <alltraps>

80106d9a <vector71>:
.globl vector71
vector71:
  pushl $0
80106d9a:	6a 00                	push   $0x0
  pushl $71
80106d9c:	6a 47                	push   $0x47
  jmp alltraps
80106d9e:	e9 ab f8 ff ff       	jmp    8010664e <alltraps>

80106da3 <vector72>:
.globl vector72
vector72:
  pushl $0
80106da3:	6a 00                	push   $0x0
  pushl $72
80106da5:	6a 48                	push   $0x48
  jmp alltraps
80106da7:	e9 a2 f8 ff ff       	jmp    8010664e <alltraps>

80106dac <vector73>:
.globl vector73
vector73:
  pushl $0
80106dac:	6a 00                	push   $0x0
  pushl $73
80106dae:	6a 49                	push   $0x49
  jmp alltraps
80106db0:	e9 99 f8 ff ff       	jmp    8010664e <alltraps>

80106db5 <vector74>:
.globl vector74
vector74:
  pushl $0
80106db5:	6a 00                	push   $0x0
  pushl $74
80106db7:	6a 4a                	push   $0x4a
  jmp alltraps
80106db9:	e9 90 f8 ff ff       	jmp    8010664e <alltraps>

80106dbe <vector75>:
.globl vector75
vector75:
  pushl $0
80106dbe:	6a 00                	push   $0x0
  pushl $75
80106dc0:	6a 4b                	push   $0x4b
  jmp alltraps
80106dc2:	e9 87 f8 ff ff       	jmp    8010664e <alltraps>

80106dc7 <vector76>:
.globl vector76
vector76:
  pushl $0
80106dc7:	6a 00                	push   $0x0
  pushl $76
80106dc9:	6a 4c                	push   $0x4c
  jmp alltraps
80106dcb:	e9 7e f8 ff ff       	jmp    8010664e <alltraps>

80106dd0 <vector77>:
.globl vector77
vector77:
  pushl $0
80106dd0:	6a 00                	push   $0x0
  pushl $77
80106dd2:	6a 4d                	push   $0x4d
  jmp alltraps
80106dd4:	e9 75 f8 ff ff       	jmp    8010664e <alltraps>

80106dd9 <vector78>:
.globl vector78
vector78:
  pushl $0
80106dd9:	6a 00                	push   $0x0
  pushl $78
80106ddb:	6a 4e                	push   $0x4e
  jmp alltraps
80106ddd:	e9 6c f8 ff ff       	jmp    8010664e <alltraps>

80106de2 <vector79>:
.globl vector79
vector79:
  pushl $0
80106de2:	6a 00                	push   $0x0
  pushl $79
80106de4:	6a 4f                	push   $0x4f
  jmp alltraps
80106de6:	e9 63 f8 ff ff       	jmp    8010664e <alltraps>

80106deb <vector80>:
.globl vector80
vector80:
  pushl $0
80106deb:	6a 00                	push   $0x0
  pushl $80
80106ded:	6a 50                	push   $0x50
  jmp alltraps
80106def:	e9 5a f8 ff ff       	jmp    8010664e <alltraps>

80106df4 <vector81>:
.globl vector81
vector81:
  pushl $0
80106df4:	6a 00                	push   $0x0
  pushl $81
80106df6:	6a 51                	push   $0x51
  jmp alltraps
80106df8:	e9 51 f8 ff ff       	jmp    8010664e <alltraps>

80106dfd <vector82>:
.globl vector82
vector82:
  pushl $0
80106dfd:	6a 00                	push   $0x0
  pushl $82
80106dff:	6a 52                	push   $0x52
  jmp alltraps
80106e01:	e9 48 f8 ff ff       	jmp    8010664e <alltraps>

80106e06 <vector83>:
.globl vector83
vector83:
  pushl $0
80106e06:	6a 00                	push   $0x0
  pushl $83
80106e08:	6a 53                	push   $0x53
  jmp alltraps
80106e0a:	e9 3f f8 ff ff       	jmp    8010664e <alltraps>

80106e0f <vector84>:
.globl vector84
vector84:
  pushl $0
80106e0f:	6a 00                	push   $0x0
  pushl $84
80106e11:	6a 54                	push   $0x54
  jmp alltraps
80106e13:	e9 36 f8 ff ff       	jmp    8010664e <alltraps>

80106e18 <vector85>:
.globl vector85
vector85:
  pushl $0
80106e18:	6a 00                	push   $0x0
  pushl $85
80106e1a:	6a 55                	push   $0x55
  jmp alltraps
80106e1c:	e9 2d f8 ff ff       	jmp    8010664e <alltraps>

80106e21 <vector86>:
.globl vector86
vector86:
  pushl $0
80106e21:	6a 00                	push   $0x0
  pushl $86
80106e23:	6a 56                	push   $0x56
  jmp alltraps
80106e25:	e9 24 f8 ff ff       	jmp    8010664e <alltraps>

80106e2a <vector87>:
.globl vector87
vector87:
  pushl $0
80106e2a:	6a 00                	push   $0x0
  pushl $87
80106e2c:	6a 57                	push   $0x57
  jmp alltraps
80106e2e:	e9 1b f8 ff ff       	jmp    8010664e <alltraps>

80106e33 <vector88>:
.globl vector88
vector88:
  pushl $0
80106e33:	6a 00                	push   $0x0
  pushl $88
80106e35:	6a 58                	push   $0x58
  jmp alltraps
80106e37:	e9 12 f8 ff ff       	jmp    8010664e <alltraps>

80106e3c <vector89>:
.globl vector89
vector89:
  pushl $0
80106e3c:	6a 00                	push   $0x0
  pushl $89
80106e3e:	6a 59                	push   $0x59
  jmp alltraps
80106e40:	e9 09 f8 ff ff       	jmp    8010664e <alltraps>

80106e45 <vector90>:
.globl vector90
vector90:
  pushl $0
80106e45:	6a 00                	push   $0x0
  pushl $90
80106e47:	6a 5a                	push   $0x5a
  jmp alltraps
80106e49:	e9 00 f8 ff ff       	jmp    8010664e <alltraps>

80106e4e <vector91>:
.globl vector91
vector91:
  pushl $0
80106e4e:	6a 00                	push   $0x0
  pushl $91
80106e50:	6a 5b                	push   $0x5b
  jmp alltraps
80106e52:	e9 f7 f7 ff ff       	jmp    8010664e <alltraps>

80106e57 <vector92>:
.globl vector92
vector92:
  pushl $0
80106e57:	6a 00                	push   $0x0
  pushl $92
80106e59:	6a 5c                	push   $0x5c
  jmp alltraps
80106e5b:	e9 ee f7 ff ff       	jmp    8010664e <alltraps>

80106e60 <vector93>:
.globl vector93
vector93:
  pushl $0
80106e60:	6a 00                	push   $0x0
  pushl $93
80106e62:	6a 5d                	push   $0x5d
  jmp alltraps
80106e64:	e9 e5 f7 ff ff       	jmp    8010664e <alltraps>

80106e69 <vector94>:
.globl vector94
vector94:
  pushl $0
80106e69:	6a 00                	push   $0x0
  pushl $94
80106e6b:	6a 5e                	push   $0x5e
  jmp alltraps
80106e6d:	e9 dc f7 ff ff       	jmp    8010664e <alltraps>

80106e72 <vector95>:
.globl vector95
vector95:
  pushl $0
80106e72:	6a 00                	push   $0x0
  pushl $95
80106e74:	6a 5f                	push   $0x5f
  jmp alltraps
80106e76:	e9 d3 f7 ff ff       	jmp    8010664e <alltraps>

80106e7b <vector96>:
.globl vector96
vector96:
  pushl $0
80106e7b:	6a 00                	push   $0x0
  pushl $96
80106e7d:	6a 60                	push   $0x60
  jmp alltraps
80106e7f:	e9 ca f7 ff ff       	jmp    8010664e <alltraps>

80106e84 <vector97>:
.globl vector97
vector97:
  pushl $0
80106e84:	6a 00                	push   $0x0
  pushl $97
80106e86:	6a 61                	push   $0x61
  jmp alltraps
80106e88:	e9 c1 f7 ff ff       	jmp    8010664e <alltraps>

80106e8d <vector98>:
.globl vector98
vector98:
  pushl $0
80106e8d:	6a 00                	push   $0x0
  pushl $98
80106e8f:	6a 62                	push   $0x62
  jmp alltraps
80106e91:	e9 b8 f7 ff ff       	jmp    8010664e <alltraps>

80106e96 <vector99>:
.globl vector99
vector99:
  pushl $0
80106e96:	6a 00                	push   $0x0
  pushl $99
80106e98:	6a 63                	push   $0x63
  jmp alltraps
80106e9a:	e9 af f7 ff ff       	jmp    8010664e <alltraps>

80106e9f <vector100>:
.globl vector100
vector100:
  pushl $0
80106e9f:	6a 00                	push   $0x0
  pushl $100
80106ea1:	6a 64                	push   $0x64
  jmp alltraps
80106ea3:	e9 a6 f7 ff ff       	jmp    8010664e <alltraps>

80106ea8 <vector101>:
.globl vector101
vector101:
  pushl $0
80106ea8:	6a 00                	push   $0x0
  pushl $101
80106eaa:	6a 65                	push   $0x65
  jmp alltraps
80106eac:	e9 9d f7 ff ff       	jmp    8010664e <alltraps>

80106eb1 <vector102>:
.globl vector102
vector102:
  pushl $0
80106eb1:	6a 00                	push   $0x0
  pushl $102
80106eb3:	6a 66                	push   $0x66
  jmp alltraps
80106eb5:	e9 94 f7 ff ff       	jmp    8010664e <alltraps>

80106eba <vector103>:
.globl vector103
vector103:
  pushl $0
80106eba:	6a 00                	push   $0x0
  pushl $103
80106ebc:	6a 67                	push   $0x67
  jmp alltraps
80106ebe:	e9 8b f7 ff ff       	jmp    8010664e <alltraps>

80106ec3 <vector104>:
.globl vector104
vector104:
  pushl $0
80106ec3:	6a 00                	push   $0x0
  pushl $104
80106ec5:	6a 68                	push   $0x68
  jmp alltraps
80106ec7:	e9 82 f7 ff ff       	jmp    8010664e <alltraps>

80106ecc <vector105>:
.globl vector105
vector105:
  pushl $0
80106ecc:	6a 00                	push   $0x0
  pushl $105
80106ece:	6a 69                	push   $0x69
  jmp alltraps
80106ed0:	e9 79 f7 ff ff       	jmp    8010664e <alltraps>

80106ed5 <vector106>:
.globl vector106
vector106:
  pushl $0
80106ed5:	6a 00                	push   $0x0
  pushl $106
80106ed7:	6a 6a                	push   $0x6a
  jmp alltraps
80106ed9:	e9 70 f7 ff ff       	jmp    8010664e <alltraps>

80106ede <vector107>:
.globl vector107
vector107:
  pushl $0
80106ede:	6a 00                	push   $0x0
  pushl $107
80106ee0:	6a 6b                	push   $0x6b
  jmp alltraps
80106ee2:	e9 67 f7 ff ff       	jmp    8010664e <alltraps>

80106ee7 <vector108>:
.globl vector108
vector108:
  pushl $0
80106ee7:	6a 00                	push   $0x0
  pushl $108
80106ee9:	6a 6c                	push   $0x6c
  jmp alltraps
80106eeb:	e9 5e f7 ff ff       	jmp    8010664e <alltraps>

80106ef0 <vector109>:
.globl vector109
vector109:
  pushl $0
80106ef0:	6a 00                	push   $0x0
  pushl $109
80106ef2:	6a 6d                	push   $0x6d
  jmp alltraps
80106ef4:	e9 55 f7 ff ff       	jmp    8010664e <alltraps>

80106ef9 <vector110>:
.globl vector110
vector110:
  pushl $0
80106ef9:	6a 00                	push   $0x0
  pushl $110
80106efb:	6a 6e                	push   $0x6e
  jmp alltraps
80106efd:	e9 4c f7 ff ff       	jmp    8010664e <alltraps>

80106f02 <vector111>:
.globl vector111
vector111:
  pushl $0
80106f02:	6a 00                	push   $0x0
  pushl $111
80106f04:	6a 6f                	push   $0x6f
  jmp alltraps
80106f06:	e9 43 f7 ff ff       	jmp    8010664e <alltraps>

80106f0b <vector112>:
.globl vector112
vector112:
  pushl $0
80106f0b:	6a 00                	push   $0x0
  pushl $112
80106f0d:	6a 70                	push   $0x70
  jmp alltraps
80106f0f:	e9 3a f7 ff ff       	jmp    8010664e <alltraps>

80106f14 <vector113>:
.globl vector113
vector113:
  pushl $0
80106f14:	6a 00                	push   $0x0
  pushl $113
80106f16:	6a 71                	push   $0x71
  jmp alltraps
80106f18:	e9 31 f7 ff ff       	jmp    8010664e <alltraps>

80106f1d <vector114>:
.globl vector114
vector114:
  pushl $0
80106f1d:	6a 00                	push   $0x0
  pushl $114
80106f1f:	6a 72                	push   $0x72
  jmp alltraps
80106f21:	e9 28 f7 ff ff       	jmp    8010664e <alltraps>

80106f26 <vector115>:
.globl vector115
vector115:
  pushl $0
80106f26:	6a 00                	push   $0x0
  pushl $115
80106f28:	6a 73                	push   $0x73
  jmp alltraps
80106f2a:	e9 1f f7 ff ff       	jmp    8010664e <alltraps>

80106f2f <vector116>:
.globl vector116
vector116:
  pushl $0
80106f2f:	6a 00                	push   $0x0
  pushl $116
80106f31:	6a 74                	push   $0x74
  jmp alltraps
80106f33:	e9 16 f7 ff ff       	jmp    8010664e <alltraps>

80106f38 <vector117>:
.globl vector117
vector117:
  pushl $0
80106f38:	6a 00                	push   $0x0
  pushl $117
80106f3a:	6a 75                	push   $0x75
  jmp alltraps
80106f3c:	e9 0d f7 ff ff       	jmp    8010664e <alltraps>

80106f41 <vector118>:
.globl vector118
vector118:
  pushl $0
80106f41:	6a 00                	push   $0x0
  pushl $118
80106f43:	6a 76                	push   $0x76
  jmp alltraps
80106f45:	e9 04 f7 ff ff       	jmp    8010664e <alltraps>

80106f4a <vector119>:
.globl vector119
vector119:
  pushl $0
80106f4a:	6a 00                	push   $0x0
  pushl $119
80106f4c:	6a 77                	push   $0x77
  jmp alltraps
80106f4e:	e9 fb f6 ff ff       	jmp    8010664e <alltraps>

80106f53 <vector120>:
.globl vector120
vector120:
  pushl $0
80106f53:	6a 00                	push   $0x0
  pushl $120
80106f55:	6a 78                	push   $0x78
  jmp alltraps
80106f57:	e9 f2 f6 ff ff       	jmp    8010664e <alltraps>

80106f5c <vector121>:
.globl vector121
vector121:
  pushl $0
80106f5c:	6a 00                	push   $0x0
  pushl $121
80106f5e:	6a 79                	push   $0x79
  jmp alltraps
80106f60:	e9 e9 f6 ff ff       	jmp    8010664e <alltraps>

80106f65 <vector122>:
.globl vector122
vector122:
  pushl $0
80106f65:	6a 00                	push   $0x0
  pushl $122
80106f67:	6a 7a                	push   $0x7a
  jmp alltraps
80106f69:	e9 e0 f6 ff ff       	jmp    8010664e <alltraps>

80106f6e <vector123>:
.globl vector123
vector123:
  pushl $0
80106f6e:	6a 00                	push   $0x0
  pushl $123
80106f70:	6a 7b                	push   $0x7b
  jmp alltraps
80106f72:	e9 d7 f6 ff ff       	jmp    8010664e <alltraps>

80106f77 <vector124>:
.globl vector124
vector124:
  pushl $0
80106f77:	6a 00                	push   $0x0
  pushl $124
80106f79:	6a 7c                	push   $0x7c
  jmp alltraps
80106f7b:	e9 ce f6 ff ff       	jmp    8010664e <alltraps>

80106f80 <vector125>:
.globl vector125
vector125:
  pushl $0
80106f80:	6a 00                	push   $0x0
  pushl $125
80106f82:	6a 7d                	push   $0x7d
  jmp alltraps
80106f84:	e9 c5 f6 ff ff       	jmp    8010664e <alltraps>

80106f89 <vector126>:
.globl vector126
vector126:
  pushl $0
80106f89:	6a 00                	push   $0x0
  pushl $126
80106f8b:	6a 7e                	push   $0x7e
  jmp alltraps
80106f8d:	e9 bc f6 ff ff       	jmp    8010664e <alltraps>

80106f92 <vector127>:
.globl vector127
vector127:
  pushl $0
80106f92:	6a 00                	push   $0x0
  pushl $127
80106f94:	6a 7f                	push   $0x7f
  jmp alltraps
80106f96:	e9 b3 f6 ff ff       	jmp    8010664e <alltraps>

80106f9b <vector128>:
.globl vector128
vector128:
  pushl $0
80106f9b:	6a 00                	push   $0x0
  pushl $128
80106f9d:	68 80 00 00 00       	push   $0x80
  jmp alltraps
80106fa2:	e9 a7 f6 ff ff       	jmp    8010664e <alltraps>

80106fa7 <vector129>:
.globl vector129
vector129:
  pushl $0
80106fa7:	6a 00                	push   $0x0
  pushl $129
80106fa9:	68 81 00 00 00       	push   $0x81
  jmp alltraps
80106fae:	e9 9b f6 ff ff       	jmp    8010664e <alltraps>

80106fb3 <vector130>:
.globl vector130
vector130:
  pushl $0
80106fb3:	6a 00                	push   $0x0
  pushl $130
80106fb5:	68 82 00 00 00       	push   $0x82
  jmp alltraps
80106fba:	e9 8f f6 ff ff       	jmp    8010664e <alltraps>

80106fbf <vector131>:
.globl vector131
vector131:
  pushl $0
80106fbf:	6a 00                	push   $0x0
  pushl $131
80106fc1:	68 83 00 00 00       	push   $0x83
  jmp alltraps
80106fc6:	e9 83 f6 ff ff       	jmp    8010664e <alltraps>

80106fcb <vector132>:
.globl vector132
vector132:
  pushl $0
80106fcb:	6a 00                	push   $0x0
  pushl $132
80106fcd:	68 84 00 00 00       	push   $0x84
  jmp alltraps
80106fd2:	e9 77 f6 ff ff       	jmp    8010664e <alltraps>

80106fd7 <vector133>:
.globl vector133
vector133:
  pushl $0
80106fd7:	6a 00                	push   $0x0
  pushl $133
80106fd9:	68 85 00 00 00       	push   $0x85
  jmp alltraps
80106fde:	e9 6b f6 ff ff       	jmp    8010664e <alltraps>

80106fe3 <vector134>:
.globl vector134
vector134:
  pushl $0
80106fe3:	6a 00                	push   $0x0
  pushl $134
80106fe5:	68 86 00 00 00       	push   $0x86
  jmp alltraps
80106fea:	e9 5f f6 ff ff       	jmp    8010664e <alltraps>

80106fef <vector135>:
.globl vector135
vector135:
  pushl $0
80106fef:	6a 00                	push   $0x0
  pushl $135
80106ff1:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80106ff6:	e9 53 f6 ff ff       	jmp    8010664e <alltraps>

80106ffb <vector136>:
.globl vector136
vector136:
  pushl $0
80106ffb:	6a 00                	push   $0x0
  pushl $136
80106ffd:	68 88 00 00 00       	push   $0x88
  jmp alltraps
80107002:	e9 47 f6 ff ff       	jmp    8010664e <alltraps>

80107007 <vector137>:
.globl vector137
vector137:
  pushl $0
80107007:	6a 00                	push   $0x0
  pushl $137
80107009:	68 89 00 00 00       	push   $0x89
  jmp alltraps
8010700e:	e9 3b f6 ff ff       	jmp    8010664e <alltraps>

80107013 <vector138>:
.globl vector138
vector138:
  pushl $0
80107013:	6a 00                	push   $0x0
  pushl $138
80107015:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
8010701a:	e9 2f f6 ff ff       	jmp    8010664e <alltraps>

8010701f <vector139>:
.globl vector139
vector139:
  pushl $0
8010701f:	6a 00                	push   $0x0
  pushl $139
80107021:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80107026:	e9 23 f6 ff ff       	jmp    8010664e <alltraps>

8010702b <vector140>:
.globl vector140
vector140:
  pushl $0
8010702b:	6a 00                	push   $0x0
  pushl $140
8010702d:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80107032:	e9 17 f6 ff ff       	jmp    8010664e <alltraps>

80107037 <vector141>:
.globl vector141
vector141:
  pushl $0
80107037:	6a 00                	push   $0x0
  pushl $141
80107039:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
8010703e:	e9 0b f6 ff ff       	jmp    8010664e <alltraps>

80107043 <vector142>:
.globl vector142
vector142:
  pushl $0
80107043:	6a 00                	push   $0x0
  pushl $142
80107045:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
8010704a:	e9 ff f5 ff ff       	jmp    8010664e <alltraps>

8010704f <vector143>:
.globl vector143
vector143:
  pushl $0
8010704f:	6a 00                	push   $0x0
  pushl $143
80107051:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
80107056:	e9 f3 f5 ff ff       	jmp    8010664e <alltraps>

8010705b <vector144>:
.globl vector144
vector144:
  pushl $0
8010705b:	6a 00                	push   $0x0
  pushl $144
8010705d:	68 90 00 00 00       	push   $0x90
  jmp alltraps
80107062:	e9 e7 f5 ff ff       	jmp    8010664e <alltraps>

80107067 <vector145>:
.globl vector145
vector145:
  pushl $0
80107067:	6a 00                	push   $0x0
  pushl $145
80107069:	68 91 00 00 00       	push   $0x91
  jmp alltraps
8010706e:	e9 db f5 ff ff       	jmp    8010664e <alltraps>

80107073 <vector146>:
.globl vector146
vector146:
  pushl $0
80107073:	6a 00                	push   $0x0
  pushl $146
80107075:	68 92 00 00 00       	push   $0x92
  jmp alltraps
8010707a:	e9 cf f5 ff ff       	jmp    8010664e <alltraps>

8010707f <vector147>:
.globl vector147
vector147:
  pushl $0
8010707f:	6a 00                	push   $0x0
  pushl $147
80107081:	68 93 00 00 00       	push   $0x93
  jmp alltraps
80107086:	e9 c3 f5 ff ff       	jmp    8010664e <alltraps>

8010708b <vector148>:
.globl vector148
vector148:
  pushl $0
8010708b:	6a 00                	push   $0x0
  pushl $148
8010708d:	68 94 00 00 00       	push   $0x94
  jmp alltraps
80107092:	e9 b7 f5 ff ff       	jmp    8010664e <alltraps>

80107097 <vector149>:
.globl vector149
vector149:
  pushl $0
80107097:	6a 00                	push   $0x0
  pushl $149
80107099:	68 95 00 00 00       	push   $0x95
  jmp alltraps
8010709e:	e9 ab f5 ff ff       	jmp    8010664e <alltraps>

801070a3 <vector150>:
.globl vector150
vector150:
  pushl $0
801070a3:	6a 00                	push   $0x0
  pushl $150
801070a5:	68 96 00 00 00       	push   $0x96
  jmp alltraps
801070aa:	e9 9f f5 ff ff       	jmp    8010664e <alltraps>

801070af <vector151>:
.globl vector151
vector151:
  pushl $0
801070af:	6a 00                	push   $0x0
  pushl $151
801070b1:	68 97 00 00 00       	push   $0x97
  jmp alltraps
801070b6:	e9 93 f5 ff ff       	jmp    8010664e <alltraps>

801070bb <vector152>:
.globl vector152
vector152:
  pushl $0
801070bb:	6a 00                	push   $0x0
  pushl $152
801070bd:	68 98 00 00 00       	push   $0x98
  jmp alltraps
801070c2:	e9 87 f5 ff ff       	jmp    8010664e <alltraps>

801070c7 <vector153>:
.globl vector153
vector153:
  pushl $0
801070c7:	6a 00                	push   $0x0
  pushl $153
801070c9:	68 99 00 00 00       	push   $0x99
  jmp alltraps
801070ce:	e9 7b f5 ff ff       	jmp    8010664e <alltraps>

801070d3 <vector154>:
.globl vector154
vector154:
  pushl $0
801070d3:	6a 00                	push   $0x0
  pushl $154
801070d5:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
801070da:	e9 6f f5 ff ff       	jmp    8010664e <alltraps>

801070df <vector155>:
.globl vector155
vector155:
  pushl $0
801070df:	6a 00                	push   $0x0
  pushl $155
801070e1:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
801070e6:	e9 63 f5 ff ff       	jmp    8010664e <alltraps>

801070eb <vector156>:
.globl vector156
vector156:
  pushl $0
801070eb:	6a 00                	push   $0x0
  pushl $156
801070ed:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
801070f2:	e9 57 f5 ff ff       	jmp    8010664e <alltraps>

801070f7 <vector157>:
.globl vector157
vector157:
  pushl $0
801070f7:	6a 00                	push   $0x0
  pushl $157
801070f9:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
801070fe:	e9 4b f5 ff ff       	jmp    8010664e <alltraps>

80107103 <vector158>:
.globl vector158
vector158:
  pushl $0
80107103:	6a 00                	push   $0x0
  pushl $158
80107105:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
8010710a:	e9 3f f5 ff ff       	jmp    8010664e <alltraps>

8010710f <vector159>:
.globl vector159
vector159:
  pushl $0
8010710f:	6a 00                	push   $0x0
  pushl $159
80107111:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
80107116:	e9 33 f5 ff ff       	jmp    8010664e <alltraps>

8010711b <vector160>:
.globl vector160
vector160:
  pushl $0
8010711b:	6a 00                	push   $0x0
  pushl $160
8010711d:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80107122:	e9 27 f5 ff ff       	jmp    8010664e <alltraps>

80107127 <vector161>:
.globl vector161
vector161:
  pushl $0
80107127:	6a 00                	push   $0x0
  pushl $161
80107129:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
8010712e:	e9 1b f5 ff ff       	jmp    8010664e <alltraps>

80107133 <vector162>:
.globl vector162
vector162:
  pushl $0
80107133:	6a 00                	push   $0x0
  pushl $162
80107135:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
8010713a:	e9 0f f5 ff ff       	jmp    8010664e <alltraps>

8010713f <vector163>:
.globl vector163
vector163:
  pushl $0
8010713f:	6a 00                	push   $0x0
  pushl $163
80107141:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
80107146:	e9 03 f5 ff ff       	jmp    8010664e <alltraps>

8010714b <vector164>:
.globl vector164
vector164:
  pushl $0
8010714b:	6a 00                	push   $0x0
  pushl $164
8010714d:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
80107152:	e9 f7 f4 ff ff       	jmp    8010664e <alltraps>

80107157 <vector165>:
.globl vector165
vector165:
  pushl $0
80107157:	6a 00                	push   $0x0
  pushl $165
80107159:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
8010715e:	e9 eb f4 ff ff       	jmp    8010664e <alltraps>

80107163 <vector166>:
.globl vector166
vector166:
  pushl $0
80107163:	6a 00                	push   $0x0
  pushl $166
80107165:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
8010716a:	e9 df f4 ff ff       	jmp    8010664e <alltraps>

8010716f <vector167>:
.globl vector167
vector167:
  pushl $0
8010716f:	6a 00                	push   $0x0
  pushl $167
80107171:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
80107176:	e9 d3 f4 ff ff       	jmp    8010664e <alltraps>

8010717b <vector168>:
.globl vector168
vector168:
  pushl $0
8010717b:	6a 00                	push   $0x0
  pushl $168
8010717d:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
80107182:	e9 c7 f4 ff ff       	jmp    8010664e <alltraps>

80107187 <vector169>:
.globl vector169
vector169:
  pushl $0
80107187:	6a 00                	push   $0x0
  pushl $169
80107189:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
8010718e:	e9 bb f4 ff ff       	jmp    8010664e <alltraps>

80107193 <vector170>:
.globl vector170
vector170:
  pushl $0
80107193:	6a 00                	push   $0x0
  pushl $170
80107195:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
8010719a:	e9 af f4 ff ff       	jmp    8010664e <alltraps>

8010719f <vector171>:
.globl vector171
vector171:
  pushl $0
8010719f:	6a 00                	push   $0x0
  pushl $171
801071a1:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
801071a6:	e9 a3 f4 ff ff       	jmp    8010664e <alltraps>

801071ab <vector172>:
.globl vector172
vector172:
  pushl $0
801071ab:	6a 00                	push   $0x0
  pushl $172
801071ad:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
801071b2:	e9 97 f4 ff ff       	jmp    8010664e <alltraps>

801071b7 <vector173>:
.globl vector173
vector173:
  pushl $0
801071b7:	6a 00                	push   $0x0
  pushl $173
801071b9:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
801071be:	e9 8b f4 ff ff       	jmp    8010664e <alltraps>

801071c3 <vector174>:
.globl vector174
vector174:
  pushl $0
801071c3:	6a 00                	push   $0x0
  pushl $174
801071c5:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
801071ca:	e9 7f f4 ff ff       	jmp    8010664e <alltraps>

801071cf <vector175>:
.globl vector175
vector175:
  pushl $0
801071cf:	6a 00                	push   $0x0
  pushl $175
801071d1:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
801071d6:	e9 73 f4 ff ff       	jmp    8010664e <alltraps>

801071db <vector176>:
.globl vector176
vector176:
  pushl $0
801071db:	6a 00                	push   $0x0
  pushl $176
801071dd:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
801071e2:	e9 67 f4 ff ff       	jmp    8010664e <alltraps>

801071e7 <vector177>:
.globl vector177
vector177:
  pushl $0
801071e7:	6a 00                	push   $0x0
  pushl $177
801071e9:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
801071ee:	e9 5b f4 ff ff       	jmp    8010664e <alltraps>

801071f3 <vector178>:
.globl vector178
vector178:
  pushl $0
801071f3:	6a 00                	push   $0x0
  pushl $178
801071f5:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
801071fa:	e9 4f f4 ff ff       	jmp    8010664e <alltraps>

801071ff <vector179>:
.globl vector179
vector179:
  pushl $0
801071ff:	6a 00                	push   $0x0
  pushl $179
80107201:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80107206:	e9 43 f4 ff ff       	jmp    8010664e <alltraps>

8010720b <vector180>:
.globl vector180
vector180:
  pushl $0
8010720b:	6a 00                	push   $0x0
  pushl $180
8010720d:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
80107212:	e9 37 f4 ff ff       	jmp    8010664e <alltraps>

80107217 <vector181>:
.globl vector181
vector181:
  pushl $0
80107217:	6a 00                	push   $0x0
  pushl $181
80107219:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
8010721e:	e9 2b f4 ff ff       	jmp    8010664e <alltraps>

80107223 <vector182>:
.globl vector182
vector182:
  pushl $0
80107223:	6a 00                	push   $0x0
  pushl $182
80107225:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
8010722a:	e9 1f f4 ff ff       	jmp    8010664e <alltraps>

8010722f <vector183>:
.globl vector183
vector183:
  pushl $0
8010722f:	6a 00                	push   $0x0
  pushl $183
80107231:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80107236:	e9 13 f4 ff ff       	jmp    8010664e <alltraps>

8010723b <vector184>:
.globl vector184
vector184:
  pushl $0
8010723b:	6a 00                	push   $0x0
  pushl $184
8010723d:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
80107242:	e9 07 f4 ff ff       	jmp    8010664e <alltraps>

80107247 <vector185>:
.globl vector185
vector185:
  pushl $0
80107247:	6a 00                	push   $0x0
  pushl $185
80107249:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
8010724e:	e9 fb f3 ff ff       	jmp    8010664e <alltraps>

80107253 <vector186>:
.globl vector186
vector186:
  pushl $0
80107253:	6a 00                	push   $0x0
  pushl $186
80107255:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
8010725a:	e9 ef f3 ff ff       	jmp    8010664e <alltraps>

8010725f <vector187>:
.globl vector187
vector187:
  pushl $0
8010725f:	6a 00                	push   $0x0
  pushl $187
80107261:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
80107266:	e9 e3 f3 ff ff       	jmp    8010664e <alltraps>

8010726b <vector188>:
.globl vector188
vector188:
  pushl $0
8010726b:	6a 00                	push   $0x0
  pushl $188
8010726d:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
80107272:	e9 d7 f3 ff ff       	jmp    8010664e <alltraps>

80107277 <vector189>:
.globl vector189
vector189:
  pushl $0
80107277:	6a 00                	push   $0x0
  pushl $189
80107279:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
8010727e:	e9 cb f3 ff ff       	jmp    8010664e <alltraps>

80107283 <vector190>:
.globl vector190
vector190:
  pushl $0
80107283:	6a 00                	push   $0x0
  pushl $190
80107285:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
8010728a:	e9 bf f3 ff ff       	jmp    8010664e <alltraps>

8010728f <vector191>:
.globl vector191
vector191:
  pushl $0
8010728f:	6a 00                	push   $0x0
  pushl $191
80107291:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
80107296:	e9 b3 f3 ff ff       	jmp    8010664e <alltraps>

8010729b <vector192>:
.globl vector192
vector192:
  pushl $0
8010729b:	6a 00                	push   $0x0
  pushl $192
8010729d:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
801072a2:	e9 a7 f3 ff ff       	jmp    8010664e <alltraps>

801072a7 <vector193>:
.globl vector193
vector193:
  pushl $0
801072a7:	6a 00                	push   $0x0
  pushl $193
801072a9:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
801072ae:	e9 9b f3 ff ff       	jmp    8010664e <alltraps>

801072b3 <vector194>:
.globl vector194
vector194:
  pushl $0
801072b3:	6a 00                	push   $0x0
  pushl $194
801072b5:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
801072ba:	e9 8f f3 ff ff       	jmp    8010664e <alltraps>

801072bf <vector195>:
.globl vector195
vector195:
  pushl $0
801072bf:	6a 00                	push   $0x0
  pushl $195
801072c1:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
801072c6:	e9 83 f3 ff ff       	jmp    8010664e <alltraps>

801072cb <vector196>:
.globl vector196
vector196:
  pushl $0
801072cb:	6a 00                	push   $0x0
  pushl $196
801072cd:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
801072d2:	e9 77 f3 ff ff       	jmp    8010664e <alltraps>

801072d7 <vector197>:
.globl vector197
vector197:
  pushl $0
801072d7:	6a 00                	push   $0x0
  pushl $197
801072d9:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
801072de:	e9 6b f3 ff ff       	jmp    8010664e <alltraps>

801072e3 <vector198>:
.globl vector198
vector198:
  pushl $0
801072e3:	6a 00                	push   $0x0
  pushl $198
801072e5:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
801072ea:	e9 5f f3 ff ff       	jmp    8010664e <alltraps>

801072ef <vector199>:
.globl vector199
vector199:
  pushl $0
801072ef:	6a 00                	push   $0x0
  pushl $199
801072f1:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
801072f6:	e9 53 f3 ff ff       	jmp    8010664e <alltraps>

801072fb <vector200>:
.globl vector200
vector200:
  pushl $0
801072fb:	6a 00                	push   $0x0
  pushl $200
801072fd:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
80107302:	e9 47 f3 ff ff       	jmp    8010664e <alltraps>

80107307 <vector201>:
.globl vector201
vector201:
  pushl $0
80107307:	6a 00                	push   $0x0
  pushl $201
80107309:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
8010730e:	e9 3b f3 ff ff       	jmp    8010664e <alltraps>

80107313 <vector202>:
.globl vector202
vector202:
  pushl $0
80107313:	6a 00                	push   $0x0
  pushl $202
80107315:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
8010731a:	e9 2f f3 ff ff       	jmp    8010664e <alltraps>

8010731f <vector203>:
.globl vector203
vector203:
  pushl $0
8010731f:	6a 00                	push   $0x0
  pushl $203
80107321:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80107326:	e9 23 f3 ff ff       	jmp    8010664e <alltraps>

8010732b <vector204>:
.globl vector204
vector204:
  pushl $0
8010732b:	6a 00                	push   $0x0
  pushl $204
8010732d:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80107332:	e9 17 f3 ff ff       	jmp    8010664e <alltraps>

80107337 <vector205>:
.globl vector205
vector205:
  pushl $0
80107337:	6a 00                	push   $0x0
  pushl $205
80107339:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
8010733e:	e9 0b f3 ff ff       	jmp    8010664e <alltraps>

80107343 <vector206>:
.globl vector206
vector206:
  pushl $0
80107343:	6a 00                	push   $0x0
  pushl $206
80107345:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
8010734a:	e9 ff f2 ff ff       	jmp    8010664e <alltraps>

8010734f <vector207>:
.globl vector207
vector207:
  pushl $0
8010734f:	6a 00                	push   $0x0
  pushl $207
80107351:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
80107356:	e9 f3 f2 ff ff       	jmp    8010664e <alltraps>

8010735b <vector208>:
.globl vector208
vector208:
  pushl $0
8010735b:	6a 00                	push   $0x0
  pushl $208
8010735d:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
80107362:	e9 e7 f2 ff ff       	jmp    8010664e <alltraps>

80107367 <vector209>:
.globl vector209
vector209:
  pushl $0
80107367:	6a 00                	push   $0x0
  pushl $209
80107369:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
8010736e:	e9 db f2 ff ff       	jmp    8010664e <alltraps>

80107373 <vector210>:
.globl vector210
vector210:
  pushl $0
80107373:	6a 00                	push   $0x0
  pushl $210
80107375:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
8010737a:	e9 cf f2 ff ff       	jmp    8010664e <alltraps>

8010737f <vector211>:
.globl vector211
vector211:
  pushl $0
8010737f:	6a 00                	push   $0x0
  pushl $211
80107381:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
80107386:	e9 c3 f2 ff ff       	jmp    8010664e <alltraps>

8010738b <vector212>:
.globl vector212
vector212:
  pushl $0
8010738b:	6a 00                	push   $0x0
  pushl $212
8010738d:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
80107392:	e9 b7 f2 ff ff       	jmp    8010664e <alltraps>

80107397 <vector213>:
.globl vector213
vector213:
  pushl $0
80107397:	6a 00                	push   $0x0
  pushl $213
80107399:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
8010739e:	e9 ab f2 ff ff       	jmp    8010664e <alltraps>

801073a3 <vector214>:
.globl vector214
vector214:
  pushl $0
801073a3:	6a 00                	push   $0x0
  pushl $214
801073a5:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
801073aa:	e9 9f f2 ff ff       	jmp    8010664e <alltraps>

801073af <vector215>:
.globl vector215
vector215:
  pushl $0
801073af:	6a 00                	push   $0x0
  pushl $215
801073b1:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
801073b6:	e9 93 f2 ff ff       	jmp    8010664e <alltraps>

801073bb <vector216>:
.globl vector216
vector216:
  pushl $0
801073bb:	6a 00                	push   $0x0
  pushl $216
801073bd:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
801073c2:	e9 87 f2 ff ff       	jmp    8010664e <alltraps>

801073c7 <vector217>:
.globl vector217
vector217:
  pushl $0
801073c7:	6a 00                	push   $0x0
  pushl $217
801073c9:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
801073ce:	e9 7b f2 ff ff       	jmp    8010664e <alltraps>

801073d3 <vector218>:
.globl vector218
vector218:
  pushl $0
801073d3:	6a 00                	push   $0x0
  pushl $218
801073d5:	68 da 00 00 00       	push   $0xda
  jmp alltraps
801073da:	e9 6f f2 ff ff       	jmp    8010664e <alltraps>

801073df <vector219>:
.globl vector219
vector219:
  pushl $0
801073df:	6a 00                	push   $0x0
  pushl $219
801073e1:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
801073e6:	e9 63 f2 ff ff       	jmp    8010664e <alltraps>

801073eb <vector220>:
.globl vector220
vector220:
  pushl $0
801073eb:	6a 00                	push   $0x0
  pushl $220
801073ed:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
801073f2:	e9 57 f2 ff ff       	jmp    8010664e <alltraps>

801073f7 <vector221>:
.globl vector221
vector221:
  pushl $0
801073f7:	6a 00                	push   $0x0
  pushl $221
801073f9:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
801073fe:	e9 4b f2 ff ff       	jmp    8010664e <alltraps>

80107403 <vector222>:
.globl vector222
vector222:
  pushl $0
80107403:	6a 00                	push   $0x0
  pushl $222
80107405:	68 de 00 00 00       	push   $0xde
  jmp alltraps
8010740a:	e9 3f f2 ff ff       	jmp    8010664e <alltraps>

8010740f <vector223>:
.globl vector223
vector223:
  pushl $0
8010740f:	6a 00                	push   $0x0
  pushl $223
80107411:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
80107416:	e9 33 f2 ff ff       	jmp    8010664e <alltraps>

8010741b <vector224>:
.globl vector224
vector224:
  pushl $0
8010741b:	6a 00                	push   $0x0
  pushl $224
8010741d:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80107422:	e9 27 f2 ff ff       	jmp    8010664e <alltraps>

80107427 <vector225>:
.globl vector225
vector225:
  pushl $0
80107427:	6a 00                	push   $0x0
  pushl $225
80107429:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
8010742e:	e9 1b f2 ff ff       	jmp    8010664e <alltraps>

80107433 <vector226>:
.globl vector226
vector226:
  pushl $0
80107433:	6a 00                	push   $0x0
  pushl $226
80107435:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
8010743a:	e9 0f f2 ff ff       	jmp    8010664e <alltraps>

8010743f <vector227>:
.globl vector227
vector227:
  pushl $0
8010743f:	6a 00                	push   $0x0
  pushl $227
80107441:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
80107446:	e9 03 f2 ff ff       	jmp    8010664e <alltraps>

8010744b <vector228>:
.globl vector228
vector228:
  pushl $0
8010744b:	6a 00                	push   $0x0
  pushl $228
8010744d:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
80107452:	e9 f7 f1 ff ff       	jmp    8010664e <alltraps>

80107457 <vector229>:
.globl vector229
vector229:
  pushl $0
80107457:	6a 00                	push   $0x0
  pushl $229
80107459:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
8010745e:	e9 eb f1 ff ff       	jmp    8010664e <alltraps>

80107463 <vector230>:
.globl vector230
vector230:
  pushl $0
80107463:	6a 00                	push   $0x0
  pushl $230
80107465:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
8010746a:	e9 df f1 ff ff       	jmp    8010664e <alltraps>

8010746f <vector231>:
.globl vector231
vector231:
  pushl $0
8010746f:	6a 00                	push   $0x0
  pushl $231
80107471:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
80107476:	e9 d3 f1 ff ff       	jmp    8010664e <alltraps>

8010747b <vector232>:
.globl vector232
vector232:
  pushl $0
8010747b:	6a 00                	push   $0x0
  pushl $232
8010747d:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
80107482:	e9 c7 f1 ff ff       	jmp    8010664e <alltraps>

80107487 <vector233>:
.globl vector233
vector233:
  pushl $0
80107487:	6a 00                	push   $0x0
  pushl $233
80107489:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
8010748e:	e9 bb f1 ff ff       	jmp    8010664e <alltraps>

80107493 <vector234>:
.globl vector234
vector234:
  pushl $0
80107493:	6a 00                	push   $0x0
  pushl $234
80107495:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
8010749a:	e9 af f1 ff ff       	jmp    8010664e <alltraps>

8010749f <vector235>:
.globl vector235
vector235:
  pushl $0
8010749f:	6a 00                	push   $0x0
  pushl $235
801074a1:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
801074a6:	e9 a3 f1 ff ff       	jmp    8010664e <alltraps>

801074ab <vector236>:
.globl vector236
vector236:
  pushl $0
801074ab:	6a 00                	push   $0x0
  pushl $236
801074ad:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
801074b2:	e9 97 f1 ff ff       	jmp    8010664e <alltraps>

801074b7 <vector237>:
.globl vector237
vector237:
  pushl $0
801074b7:	6a 00                	push   $0x0
  pushl $237
801074b9:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
801074be:	e9 8b f1 ff ff       	jmp    8010664e <alltraps>

801074c3 <vector238>:
.globl vector238
vector238:
  pushl $0
801074c3:	6a 00                	push   $0x0
  pushl $238
801074c5:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
801074ca:	e9 7f f1 ff ff       	jmp    8010664e <alltraps>

801074cf <vector239>:
.globl vector239
vector239:
  pushl $0
801074cf:	6a 00                	push   $0x0
  pushl $239
801074d1:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
801074d6:	e9 73 f1 ff ff       	jmp    8010664e <alltraps>

801074db <vector240>:
.globl vector240
vector240:
  pushl $0
801074db:	6a 00                	push   $0x0
  pushl $240
801074dd:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
801074e2:	e9 67 f1 ff ff       	jmp    8010664e <alltraps>

801074e7 <vector241>:
.globl vector241
vector241:
  pushl $0
801074e7:	6a 00                	push   $0x0
  pushl $241
801074e9:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
801074ee:	e9 5b f1 ff ff       	jmp    8010664e <alltraps>

801074f3 <vector242>:
.globl vector242
vector242:
  pushl $0
801074f3:	6a 00                	push   $0x0
  pushl $242
801074f5:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
801074fa:	e9 4f f1 ff ff       	jmp    8010664e <alltraps>

801074ff <vector243>:
.globl vector243
vector243:
  pushl $0
801074ff:	6a 00                	push   $0x0
  pushl $243
80107501:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80107506:	e9 43 f1 ff ff       	jmp    8010664e <alltraps>

8010750b <vector244>:
.globl vector244
vector244:
  pushl $0
8010750b:	6a 00                	push   $0x0
  pushl $244
8010750d:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
80107512:	e9 37 f1 ff ff       	jmp    8010664e <alltraps>

80107517 <vector245>:
.globl vector245
vector245:
  pushl $0
80107517:	6a 00                	push   $0x0
  pushl $245
80107519:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
8010751e:	e9 2b f1 ff ff       	jmp    8010664e <alltraps>

80107523 <vector246>:
.globl vector246
vector246:
  pushl $0
80107523:	6a 00                	push   $0x0
  pushl $246
80107525:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
8010752a:	e9 1f f1 ff ff       	jmp    8010664e <alltraps>

8010752f <vector247>:
.globl vector247
vector247:
  pushl $0
8010752f:	6a 00                	push   $0x0
  pushl $247
80107531:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80107536:	e9 13 f1 ff ff       	jmp    8010664e <alltraps>

8010753b <vector248>:
.globl vector248
vector248:
  pushl $0
8010753b:	6a 00                	push   $0x0
  pushl $248
8010753d:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80107542:	e9 07 f1 ff ff       	jmp    8010664e <alltraps>

80107547 <vector249>:
.globl vector249
vector249:
  pushl $0
80107547:	6a 00                	push   $0x0
  pushl $249
80107549:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
8010754e:	e9 fb f0 ff ff       	jmp    8010664e <alltraps>

80107553 <vector250>:
.globl vector250
vector250:
  pushl $0
80107553:	6a 00                	push   $0x0
  pushl $250
80107555:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
8010755a:	e9 ef f0 ff ff       	jmp    8010664e <alltraps>

8010755f <vector251>:
.globl vector251
vector251:
  pushl $0
8010755f:	6a 00                	push   $0x0
  pushl $251
80107561:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80107566:	e9 e3 f0 ff ff       	jmp    8010664e <alltraps>

8010756b <vector252>:
.globl vector252
vector252:
  pushl $0
8010756b:	6a 00                	push   $0x0
  pushl $252
8010756d:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80107572:	e9 d7 f0 ff ff       	jmp    8010664e <alltraps>

80107577 <vector253>:
.globl vector253
vector253:
  pushl $0
80107577:	6a 00                	push   $0x0
  pushl $253
80107579:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
8010757e:	e9 cb f0 ff ff       	jmp    8010664e <alltraps>

80107583 <vector254>:
.globl vector254
vector254:
  pushl $0
80107583:	6a 00                	push   $0x0
  pushl $254
80107585:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
8010758a:	e9 bf f0 ff ff       	jmp    8010664e <alltraps>

8010758f <vector255>:
.globl vector255
vector255:
  pushl $0
8010758f:	6a 00                	push   $0x0
  pushl $255
80107591:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80107596:	e9 b3 f0 ff ff       	jmp    8010664e <alltraps>
8010759b:	66 90                	xchg   %ax,%ax
8010759d:	66 90                	xchg   %ax,%ax
8010759f:	90                   	nop

801075a0 <walkpgdir>:
// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t *
walkpgdir(pde_t *pgdir, const void *va, int alloc)
{
801075a0:	55                   	push   %ebp
801075a1:	89 e5                	mov    %esp,%ebp
801075a3:	57                   	push   %edi
801075a4:	56                   	push   %esi
801075a5:	89 d6                	mov    %edx,%esi
  pde_t *pde;
  pte_t *pgtab;

  pde = &pgdir[PDX(va)];
801075a7:	c1 ea 16             	shr    $0x16,%edx
{
801075aa:	53                   	push   %ebx
  pde = &pgdir[PDX(va)];
801075ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
{
801075ae:	83 ec 0c             	sub    $0xc,%esp
  if(*pde & PTE_P){
801075b1:	8b 1f                	mov    (%edi),%ebx
801075b3:	f6 c3 01             	test   $0x1,%bl
801075b6:	74 28                	je     801075e0 <walkpgdir+0x40>
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
801075b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
801075be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
    // The permissions here are overly generous, but they can
    // be further restricted by the permissions in the page table
    // entries, if necessary.
    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
  }
  return &pgtab[PTX(va)];
801075c4:	89 f0                	mov    %esi,%eax
}
801075c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return &pgtab[PTX(va)];
801075c9:	c1 e8 0a             	shr    $0xa,%eax
801075cc:	25 fc 0f 00 00       	and    $0xffc,%eax
801075d1:	01 d8                	add    %ebx,%eax
}
801075d3:	5b                   	pop    %ebx
801075d4:	5e                   	pop    %esi
801075d5:	5f                   	pop    %edi
801075d6:	5d                   	pop    %ebp
801075d7:	c3                   	ret    
801075d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801075df:	90                   	nop
    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
801075e0:	85 c9                	test   %ecx,%ecx
801075e2:	74 2c                	je     80107610 <walkpgdir+0x70>
801075e4:	e8 27 af ff ff       	call   80102510 <kalloc>
801075e9:	89 c3                	mov    %eax,%ebx
801075eb:	85 c0                	test   %eax,%eax
801075ed:	74 21                	je     80107610 <walkpgdir+0x70>
    memset(pgtab, 0, PGSIZE);
801075ef:	83 ec 04             	sub    $0x4,%esp
801075f2:	68 00 10 00 00       	push   $0x1000
801075f7:	6a 00                	push   $0x0
801075f9:	50                   	push   %eax
801075fa:	e8 c1 db ff ff       	call   801051c0 <memset>
    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
801075ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80107605:	83 c4 10             	add    $0x10,%esp
80107608:	83 c8 07             	or     $0x7,%eax
8010760b:	89 07                	mov    %eax,(%edi)
8010760d:	eb b5                	jmp    801075c4 <walkpgdir+0x24>
8010760f:	90                   	nop
}
80107610:	8d 65 f4             	lea    -0xc(%ebp),%esp
      return 0;
80107613:	31 c0                	xor    %eax,%eax
}
80107615:	5b                   	pop    %ebx
80107616:	5e                   	pop    %esi
80107617:	5f                   	pop    %edi
80107618:	5d                   	pop    %ebp
80107619:	c3                   	ret    
8010761a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107620 <mappages>:
// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
static int
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
{
80107620:	55                   	push   %ebp
80107621:	89 e5                	mov    %esp,%ebp
80107623:	57                   	push   %edi
80107624:	89 c7                	mov    %eax,%edi
  char *a, *last;
  pte_t *pte;

  a = (char*)PGROUNDDOWN((uint)va);
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
80107626:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
{
8010762a:	56                   	push   %esi
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
8010762b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  a = (char*)PGROUNDDOWN((uint)va);
80107630:	89 d6                	mov    %edx,%esi
{
80107632:	53                   	push   %ebx
  a = (char*)PGROUNDDOWN((uint)va);
80107633:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
{
80107639:	83 ec 1c             	sub    $0x1c,%esp
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
8010763c:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010763f:	8b 45 08             	mov    0x8(%ebp),%eax
80107642:	29 f0                	sub    %esi,%eax
80107644:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80107647:	eb 1f                	jmp    80107668 <mappages+0x48>
80107649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  for(;;){
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
      return -1;
    if(*pte & PTE_P)
80107650:	f6 00 01             	testb  $0x1,(%eax)
80107653:	75 45                	jne    8010769a <mappages+0x7a>
      panic("remap");
    *pte = pa | perm | PTE_P;
80107655:	0b 5d 0c             	or     0xc(%ebp),%ebx
80107658:	83 cb 01             	or     $0x1,%ebx
8010765b:	89 18                	mov    %ebx,(%eax)
    if(a == last)
8010765d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
80107660:	74 2e                	je     80107690 <mappages+0x70>
      break;
    a += PGSIZE;
80107662:	81 c6 00 10 00 00    	add    $0x1000,%esi
  for(;;){
80107668:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
8010766b:	b9 01 00 00 00       	mov    $0x1,%ecx
80107670:	89 f2                	mov    %esi,%edx
80107672:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
80107675:	89 f8                	mov    %edi,%eax
80107677:	e8 24 ff ff ff       	call   801075a0 <walkpgdir>
8010767c:	85 c0                	test   %eax,%eax
8010767e:	75 d0                	jne    80107650 <mappages+0x30>
    pa += PGSIZE;
  }
  return 0;
}
80107680:	8d 65 f4             	lea    -0xc(%ebp),%esp
      return -1;
80107683:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107688:	5b                   	pop    %ebx
80107689:	5e                   	pop    %esi
8010768a:	5f                   	pop    %edi
8010768b:	5d                   	pop    %ebp
8010768c:	c3                   	ret    
8010768d:	8d 76 00             	lea    0x0(%esi),%esi
80107690:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
80107693:	31 c0                	xor    %eax,%eax
}
80107695:	5b                   	pop    %ebx
80107696:	5e                   	pop    %esi
80107697:	5f                   	pop    %edi
80107698:	5d                   	pop    %ebp
80107699:	c3                   	ret    
      panic("remap");
8010769a:	83 ec 0c             	sub    $0xc,%esp
8010769d:	68 90 de 10 80       	push   $0x8010de90
801076a2:	e8 79 8d ff ff       	call   80100420 <panic>
801076a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801076ae:	66 90                	xchg   %ax,%ax

801076b0 <deallocuvm.part.0>:
// Deallocate user pages to bring the process size from oldsz to
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
801076b0:	55                   	push   %ebp
801076b1:	89 e5                	mov    %esp,%ebp
801076b3:	57                   	push   %edi
801076b4:	56                   	push   %esi
801076b5:	89 c6                	mov    %eax,%esi
801076b7:	53                   	push   %ebx
801076b8:	89 d3                	mov    %edx,%ebx
  uint a, pa;

  if(newsz >= oldsz)
    return oldsz;

  a = PGROUNDUP(newsz);
801076ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
801076c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
801076c6:	83 ec 1c             	sub    $0x1c,%esp
801076c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  for(; a  < oldsz; a += PGSIZE){
801076cc:	39 da                	cmp    %ebx,%edx
801076ce:	73 5b                	jae    8010772b <deallocuvm.part.0+0x7b>
801076d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
801076d3:	89 d7                	mov    %edx,%edi
801076d5:	eb 14                	jmp    801076eb <deallocuvm.part.0+0x3b>
801076d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801076de:	66 90                	xchg   %ax,%ax
801076e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
801076e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
801076e9:	76 40                	jbe    8010772b <deallocuvm.part.0+0x7b>
    pte = walkpgdir(pgdir, (char*)a, 0);
801076eb:	31 c9                	xor    %ecx,%ecx
801076ed:	89 fa                	mov    %edi,%edx
801076ef:	89 f0                	mov    %esi,%eax
801076f1:	e8 aa fe ff ff       	call   801075a0 <walkpgdir>
801076f6:	89 c3                	mov    %eax,%ebx
    if(!pte)
801076f8:	85 c0                	test   %eax,%eax
801076fa:	74 44                	je     80107740 <deallocuvm.part.0+0x90>
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
    else if((*pte & PTE_P) != 0){
801076fc:	8b 00                	mov    (%eax),%eax
801076fe:	a8 01                	test   $0x1,%al
80107700:	74 de                	je     801076e0 <deallocuvm.part.0+0x30>
      pa = PTE_ADDR(*pte);
      if(pa == 0)
80107702:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107707:	74 47                	je     80107750 <deallocuvm.part.0+0xa0>
        panic("kfree");
      char *v = P2V(pa);
      kfree(v);
80107709:	83 ec 0c             	sub    $0xc,%esp
      char *v = P2V(pa);
8010770c:	05 00 00 00 80       	add    $0x80000000,%eax
80107711:	81 c7 00 10 00 00    	add    $0x1000,%edi
      kfree(v);
80107717:	50                   	push   %eax
80107718:	e8 33 ac ff ff       	call   80102350 <kfree>
      *pte = 0;
8010771d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
80107723:	83 c4 10             	add    $0x10,%esp
  for(; a  < oldsz; a += PGSIZE){
80107726:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
80107729:	77 c0                	ja     801076eb <deallocuvm.part.0+0x3b>
    }
  }
  return newsz;
}
8010772b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010772e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107731:	5b                   	pop    %ebx
80107732:	5e                   	pop    %esi
80107733:	5f                   	pop    %edi
80107734:	5d                   	pop    %ebp
80107735:	c3                   	ret    
80107736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010773d:	8d 76 00             	lea    0x0(%esi),%esi
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
80107740:	89 fa                	mov    %edi,%edx
80107742:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
80107748:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
8010774e:	eb 96                	jmp    801076e6 <deallocuvm.part.0+0x36>
        panic("kfree");
80107750:	83 ec 0c             	sub    $0xc,%esp
80107753:	68 42 d2 10 80       	push   $0x8010d242
80107758:	e8 c3 8c ff ff       	call   80100420 <panic>
8010775d:	8d 76 00             	lea    0x0(%esi),%esi

80107760 <seginit>:
{
80107760:	f3 0f 1e fb          	endbr32 
80107764:	55                   	push   %ebp
80107765:	89 e5                	mov    %esp,%ebp
80107767:	83 ec 18             	sub    $0x18,%esp
  c = &cpus[cpuid()];
8010776a:	e8 21 cd ff ff       	call   80104490 <cpuid>
  pd[0] = size-1;
8010776f:	ba 2f 00 00 00       	mov    $0x2f,%edx
80107774:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
8010777a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
8010777e:	c7 80 38 e5 13 80 ff 	movl   $0xffff,-0x7fec1ac8(%eax)
80107785:	ff 00 00 
80107788:	c7 80 3c e5 13 80 00 	movl   $0xcf9a00,-0x7fec1ac4(%eax)
8010778f:	9a cf 00 
  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
80107792:	c7 80 40 e5 13 80 ff 	movl   $0xffff,-0x7fec1ac0(%eax)
80107799:	ff 00 00 
8010779c:	c7 80 44 e5 13 80 00 	movl   $0xcf9200,-0x7fec1abc(%eax)
801077a3:	92 cf 00 
  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
801077a6:	c7 80 48 e5 13 80 ff 	movl   $0xffff,-0x7fec1ab8(%eax)
801077ad:	ff 00 00 
801077b0:	c7 80 4c e5 13 80 00 	movl   $0xcffa00,-0x7fec1ab4(%eax)
801077b7:	fa cf 00 
  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
801077ba:	c7 80 50 e5 13 80 ff 	movl   $0xffff,-0x7fec1ab0(%eax)
801077c1:	ff 00 00 
801077c4:	c7 80 54 e5 13 80 00 	movl   $0xcff200,-0x7fec1aac(%eax)
801077cb:	f2 cf 00 
  lgdt(c->gdt, sizeof(c->gdt));
801077ce:	05 30 e5 13 80       	add    $0x8013e530,%eax
  pd[1] = (uint)p;
801077d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint)p >> 16;
801077d7:	c1 e8 10             	shr    $0x10,%eax
801077da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
  asm volatile("lgdt (%0)" : : "r" (pd));
801077de:	8d 45 f2             	lea    -0xe(%ebp),%eax
801077e1:	0f 01 10             	lgdtl  (%eax)
}
801077e4:	c9                   	leave  
801077e5:	c3                   	ret    
801077e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801077ed:	8d 76 00             	lea    0x0(%esi),%esi

801077f0 <switchkvm>:
{
801077f0:	f3 0f 1e fb          	endbr32 
  lcr3(V2P(kpgdir));   // switch to the kernel page table
801077f4:	a1 e4 11 14 80       	mov    0x801411e4,%eax
801077f9:	05 00 00 00 80       	add    $0x80000000,%eax
  asm volatile("movl %0,%%cr3" : : "r" (val));
801077fe:	0f 22 d8             	mov    %eax,%cr3
}
80107801:	c3                   	ret    
80107802:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80107810 <switchuvm>:
{
80107810:	f3 0f 1e fb          	endbr32 
80107814:	55                   	push   %ebp
80107815:	89 e5                	mov    %esp,%ebp
80107817:	57                   	push   %edi
80107818:	56                   	push   %esi
80107819:	53                   	push   %ebx
8010781a:	83 ec 1c             	sub    $0x1c,%esp
8010781d:	8b 75 08             	mov    0x8(%ebp),%esi
  if(p == 0)
80107820:	85 f6                	test   %esi,%esi
80107822:	0f 84 cb 00 00 00    	je     801078f3 <switchuvm+0xe3>
  if(p->kstack == 0)
80107828:	8b 46 08             	mov    0x8(%esi),%eax
8010782b:	85 c0                	test   %eax,%eax
8010782d:	0f 84 da 00 00 00    	je     8010790d <switchuvm+0xfd>
  if(p->pgdir == 0)
80107833:	8b 46 04             	mov    0x4(%esi),%eax
80107836:	85 c0                	test   %eax,%eax
80107838:	0f 84 c2 00 00 00    	je     80107900 <switchuvm+0xf0>
  pushcli();
8010783e:	e8 6d d7 ff ff       	call   80104fb0 <pushcli>
  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
80107843:	e8 d8 cb ff ff       	call   80104420 <mycpu>
80107848:	89 c3                	mov    %eax,%ebx
8010784a:	e8 d1 cb ff ff       	call   80104420 <mycpu>
8010784f:	89 c7                	mov    %eax,%edi
80107851:	e8 ca cb ff ff       	call   80104420 <mycpu>
80107856:	83 c7 08             	add    $0x8,%edi
80107859:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010785c:	e8 bf cb ff ff       	call   80104420 <mycpu>
80107861:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80107864:	ba 67 00 00 00       	mov    $0x67,%edx
80107869:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
80107870:	83 c0 08             	add    $0x8,%eax
80107873:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
  mycpu()->ts.iomb = (ushort) 0xFFFF;
8010787a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
8010787f:	83 c1 08             	add    $0x8,%ecx
80107882:	c1 e8 18             	shr    $0x18,%eax
80107885:	c1 e9 10             	shr    $0x10,%ecx
80107888:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
8010788e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
80107894:	b9 99 40 00 00       	mov    $0x4099,%ecx
80107899:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
  mycpu()->ts.ss0 = SEG_KDATA << 3;
801078a0:	bb 10 00 00 00       	mov    $0x10,%ebx
  mycpu()->gdt[SEG_TSS].s = 0;
801078a5:	e8 76 cb ff ff       	call   80104420 <mycpu>
801078aa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
  mycpu()->ts.ss0 = SEG_KDATA << 3;
801078b1:	e8 6a cb ff ff       	call   80104420 <mycpu>
801078b6:	66 89 58 10          	mov    %bx,0x10(%eax)
  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
801078ba:	8b 5e 08             	mov    0x8(%esi),%ebx
801078bd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
801078c3:	e8 58 cb ff ff       	call   80104420 <mycpu>
801078c8:	89 58 0c             	mov    %ebx,0xc(%eax)
  mycpu()->ts.iomb = (ushort) 0xFFFF;
801078cb:	e8 50 cb ff ff       	call   80104420 <mycpu>
801078d0:	66 89 78 6e          	mov    %di,0x6e(%eax)
  asm volatile("ltr %0" : : "r" (sel));
801078d4:	b8 28 00 00 00       	mov    $0x28,%eax
801078d9:	0f 00 d8             	ltr    %ax
  lcr3(V2P(p->pgdir));  // switch to process's address space
801078dc:	8b 46 04             	mov    0x4(%esi),%eax
801078df:	05 00 00 00 80       	add    $0x80000000,%eax
  asm volatile("movl %0,%%cr3" : : "r" (val));
801078e4:	0f 22 d8             	mov    %eax,%cr3
}
801078e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
801078ea:	5b                   	pop    %ebx
801078eb:	5e                   	pop    %esi
801078ec:	5f                   	pop    %edi
801078ed:	5d                   	pop    %ebp
  popcli();
801078ee:	e9 0d d7 ff ff       	jmp    80105000 <popcli>
    panic("switchuvm: no process");
801078f3:	83 ec 0c             	sub    $0xc,%esp
801078f6:	68 96 de 10 80       	push   $0x8010de96
801078fb:	e8 20 8b ff ff       	call   80100420 <panic>
    panic("switchuvm: no pgdir");
80107900:	83 ec 0c             	sub    $0xc,%esp
80107903:	68 c1 de 10 80       	push   $0x8010dec1
80107908:	e8 13 8b ff ff       	call   80100420 <panic>
    panic("switchuvm: no kstack");
8010790d:	83 ec 0c             	sub    $0xc,%esp
80107910:	68 ac de 10 80       	push   $0x8010deac
80107915:	e8 06 8b ff ff       	call   80100420 <panic>
8010791a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107920 <inituvm>:
{
80107920:	f3 0f 1e fb          	endbr32 
80107924:	55                   	push   %ebp
80107925:	89 e5                	mov    %esp,%ebp
80107927:	57                   	push   %edi
80107928:	56                   	push   %esi
80107929:	53                   	push   %ebx
8010792a:	83 ec 1c             	sub    $0x1c,%esp
8010792d:	8b 45 0c             	mov    0xc(%ebp),%eax
80107930:	8b 75 10             	mov    0x10(%ebp),%esi
80107933:	8b 7d 08             	mov    0x8(%ebp),%edi
80107936:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if(sz >= PGSIZE)
80107939:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
8010793f:	77 4b                	ja     8010798c <inituvm+0x6c>
  mem = kalloc();
80107941:	e8 ca ab ff ff       	call   80102510 <kalloc>
  memset(mem, 0, PGSIZE);
80107946:	83 ec 04             	sub    $0x4,%esp
80107949:	68 00 10 00 00       	push   $0x1000
  mem = kalloc();
8010794e:	89 c3                	mov    %eax,%ebx
  memset(mem, 0, PGSIZE);
80107950:	6a 00                	push   $0x0
80107952:	50                   	push   %eax
80107953:	e8 68 d8 ff ff       	call   801051c0 <memset>
  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
80107958:	58                   	pop    %eax
80107959:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
8010795f:	5a                   	pop    %edx
80107960:	6a 06                	push   $0x6
80107962:	b9 00 10 00 00       	mov    $0x1000,%ecx
80107967:	31 d2                	xor    %edx,%edx
80107969:	50                   	push   %eax
8010796a:	89 f8                	mov    %edi,%eax
8010796c:	e8 af fc ff ff       	call   80107620 <mappages>
  memmove(mem, init, sz);
80107971:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107974:	89 75 10             	mov    %esi,0x10(%ebp)
80107977:	83 c4 10             	add    $0x10,%esp
8010797a:	89 5d 08             	mov    %ebx,0x8(%ebp)
8010797d:	89 45 0c             	mov    %eax,0xc(%ebp)
}
80107980:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107983:	5b                   	pop    %ebx
80107984:	5e                   	pop    %esi
80107985:	5f                   	pop    %edi
80107986:	5d                   	pop    %ebp
  memmove(mem, init, sz);
80107987:	e9 d4 d8 ff ff       	jmp    80105260 <memmove>
    panic("inituvm: more than a page");
8010798c:	83 ec 0c             	sub    $0xc,%esp
8010798f:	68 d5 de 10 80       	push   $0x8010ded5
80107994:	e8 87 8a ff ff       	call   80100420 <panic>
80107999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801079a0 <loaduvm>:
{
801079a0:	f3 0f 1e fb          	endbr32 
801079a4:	55                   	push   %ebp
801079a5:	89 e5                	mov    %esp,%ebp
801079a7:	57                   	push   %edi
801079a8:	56                   	push   %esi
801079a9:	53                   	push   %ebx
801079aa:	83 ec 1c             	sub    $0x1c,%esp
801079ad:	8b 45 0c             	mov    0xc(%ebp),%eax
801079b0:	8b 75 18             	mov    0x18(%ebp),%esi
  if((uint) addr % PGSIZE != 0)
801079b3:	a9 ff 0f 00 00       	test   $0xfff,%eax
801079b8:	0f 85 99 00 00 00    	jne    80107a57 <loaduvm+0xb7>
  for(i = 0; i < sz; i += PGSIZE){
801079be:	01 f0                	add    %esi,%eax
801079c0:	89 f3                	mov    %esi,%ebx
801079c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(readi(ip, P2V(pa), offset+i, n) != n)
801079c5:	8b 45 14             	mov    0x14(%ebp),%eax
801079c8:	01 f0                	add    %esi,%eax
801079ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
  for(i = 0; i < sz; i += PGSIZE){
801079cd:	85 f6                	test   %esi,%esi
801079cf:	75 15                	jne    801079e6 <loaduvm+0x46>
801079d1:	eb 6d                	jmp    80107a40 <loaduvm+0xa0>
801079d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801079d7:	90                   	nop
801079d8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
801079de:	89 f0                	mov    %esi,%eax
801079e0:	29 d8                	sub    %ebx,%eax
801079e2:	39 c6                	cmp    %eax,%esi
801079e4:	76 5a                	jbe    80107a40 <loaduvm+0xa0>
    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
801079e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801079e9:	8b 45 08             	mov    0x8(%ebp),%eax
801079ec:	31 c9                	xor    %ecx,%ecx
801079ee:	29 da                	sub    %ebx,%edx
801079f0:	e8 ab fb ff ff       	call   801075a0 <walkpgdir>
801079f5:	85 c0                	test   %eax,%eax
801079f7:	74 51                	je     80107a4a <loaduvm+0xaa>
    pa = PTE_ADDR(*pte);
801079f9:	8b 00                	mov    (%eax),%eax
    if(readi(ip, P2V(pa), offset+i, n) != n)
801079fb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    if(sz - i < PGSIZE)
801079fe:	bf 00 10 00 00       	mov    $0x1000,%edi
    pa = PTE_ADDR(*pte);
80107a03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    if(sz - i < PGSIZE)
80107a08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
80107a0e:	0f 46 fb             	cmovbe %ebx,%edi
    if(readi(ip, P2V(pa), offset+i, n) != n)
80107a11:	29 d9                	sub    %ebx,%ecx
80107a13:	05 00 00 00 80       	add    $0x80000000,%eax
80107a18:	57                   	push   %edi
80107a19:	51                   	push   %ecx
80107a1a:	50                   	push   %eax
80107a1b:	ff 75 10             	pushl  0x10(%ebp)
80107a1e:	e8 1d 9f ff ff       	call   80101940 <readi>
80107a23:	83 c4 10             	add    $0x10,%esp
80107a26:	39 f8                	cmp    %edi,%eax
80107a28:	74 ae                	je     801079d8 <loaduvm+0x38>
}
80107a2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
      return -1;
80107a2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107a32:	5b                   	pop    %ebx
80107a33:	5e                   	pop    %esi
80107a34:	5f                   	pop    %edi
80107a35:	5d                   	pop    %ebp
80107a36:	c3                   	ret    
80107a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107a3e:	66 90                	xchg   %ax,%ax
80107a40:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
80107a43:	31 c0                	xor    %eax,%eax
}
80107a45:	5b                   	pop    %ebx
80107a46:	5e                   	pop    %esi
80107a47:	5f                   	pop    %edi
80107a48:	5d                   	pop    %ebp
80107a49:	c3                   	ret    
      panic("loaduvm: address should exist");
80107a4a:	83 ec 0c             	sub    $0xc,%esp
80107a4d:	68 ef de 10 80       	push   $0x8010deef
80107a52:	e8 c9 89 ff ff       	call   80100420 <panic>
    panic("loaduvm: addr must be page aligned");
80107a57:	83 ec 0c             	sub    $0xc,%esp
80107a5a:	68 90 df 10 80       	push   $0x8010df90
80107a5f:	e8 bc 89 ff ff       	call   80100420 <panic>
80107a64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107a6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107a6f:	90                   	nop

80107a70 <allocuvm>:
{
80107a70:	f3 0f 1e fb          	endbr32 
80107a74:	55                   	push   %ebp
80107a75:	89 e5                	mov    %esp,%ebp
80107a77:	57                   	push   %edi
80107a78:	56                   	push   %esi
80107a79:	53                   	push   %ebx
80107a7a:	83 ec 1c             	sub    $0x1c,%esp
  if(newsz >= KERNBASE)
80107a7d:	8b 45 10             	mov    0x10(%ebp),%eax
{
80107a80:	8b 7d 08             	mov    0x8(%ebp),%edi
  if(newsz >= KERNBASE)
80107a83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80107a86:	85 c0                	test   %eax,%eax
80107a88:	0f 88 b2 00 00 00    	js     80107b40 <allocuvm+0xd0>
  if(newsz < oldsz)
80107a8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
    return oldsz;
80107a91:	8b 45 0c             	mov    0xc(%ebp),%eax
  if(newsz < oldsz)
80107a94:	0f 82 96 00 00 00    	jb     80107b30 <allocuvm+0xc0>
  a = PGROUNDUP(oldsz);
80107a9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
80107aa0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  for(; a < newsz; a += PGSIZE){
80107aa6:	39 75 10             	cmp    %esi,0x10(%ebp)
80107aa9:	77 40                	ja     80107aeb <allocuvm+0x7b>
80107aab:	e9 83 00 00 00       	jmp    80107b33 <allocuvm+0xc3>
    memset(mem, 0, PGSIZE);
80107ab0:	83 ec 04             	sub    $0x4,%esp
80107ab3:	68 00 10 00 00       	push   $0x1000
80107ab8:	6a 00                	push   $0x0
80107aba:	50                   	push   %eax
80107abb:	e8 00 d7 ff ff       	call   801051c0 <memset>
    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
80107ac0:	58                   	pop    %eax
80107ac1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80107ac7:	5a                   	pop    %edx
80107ac8:	6a 06                	push   $0x6
80107aca:	b9 00 10 00 00       	mov    $0x1000,%ecx
80107acf:	89 f2                	mov    %esi,%edx
80107ad1:	50                   	push   %eax
80107ad2:	89 f8                	mov    %edi,%eax
80107ad4:	e8 47 fb ff ff       	call   80107620 <mappages>
80107ad9:	83 c4 10             	add    $0x10,%esp
80107adc:	85 c0                	test   %eax,%eax
80107ade:	78 78                	js     80107b58 <allocuvm+0xe8>
  for(; a < newsz; a += PGSIZE){
80107ae0:	81 c6 00 10 00 00    	add    $0x1000,%esi
80107ae6:	39 75 10             	cmp    %esi,0x10(%ebp)
80107ae9:	76 48                	jbe    80107b33 <allocuvm+0xc3>
    mem = kalloc();
80107aeb:	e8 20 aa ff ff       	call   80102510 <kalloc>
80107af0:	89 c3                	mov    %eax,%ebx
    if(mem == 0){
80107af2:	85 c0                	test   %eax,%eax
80107af4:	75 ba                	jne    80107ab0 <allocuvm+0x40>
      cprintf("allocuvm out of memory\n");
80107af6:	83 ec 0c             	sub    $0xc,%esp
80107af9:	68 0d df 10 80       	push   $0x8010df0d
80107afe:	e8 8d 88 ff ff       	call   80100390 <cprintf>
  if(newsz >= oldsz)
80107b03:	8b 45 0c             	mov    0xc(%ebp),%eax
80107b06:	83 c4 10             	add    $0x10,%esp
80107b09:	39 45 10             	cmp    %eax,0x10(%ebp)
80107b0c:	74 32                	je     80107b40 <allocuvm+0xd0>
80107b0e:	8b 55 10             	mov    0x10(%ebp),%edx
80107b11:	89 c1                	mov    %eax,%ecx
80107b13:	89 f8                	mov    %edi,%eax
80107b15:	e8 96 fb ff ff       	call   801076b0 <deallocuvm.part.0>
      return 0;
80107b1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
}
80107b21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107b24:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107b27:	5b                   	pop    %ebx
80107b28:	5e                   	pop    %esi
80107b29:	5f                   	pop    %edi
80107b2a:	5d                   	pop    %ebp
80107b2b:	c3                   	ret    
80107b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    return oldsz;
80107b30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}
80107b33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107b36:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107b39:	5b                   	pop    %ebx
80107b3a:	5e                   	pop    %esi
80107b3b:	5f                   	pop    %edi
80107b3c:	5d                   	pop    %ebp
80107b3d:	c3                   	ret    
80107b3e:	66 90                	xchg   %ax,%ax
    return 0;
80107b40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
}
80107b47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107b4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107b4d:	5b                   	pop    %ebx
80107b4e:	5e                   	pop    %esi
80107b4f:	5f                   	pop    %edi
80107b50:	5d                   	pop    %ebp
80107b51:	c3                   	ret    
80107b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      cprintf("allocuvm out of memory (2)\n");
80107b58:	83 ec 0c             	sub    $0xc,%esp
80107b5b:	68 25 df 10 80       	push   $0x8010df25
80107b60:	e8 2b 88 ff ff       	call   80100390 <cprintf>
  if(newsz >= oldsz)
80107b65:	8b 45 0c             	mov    0xc(%ebp),%eax
80107b68:	83 c4 10             	add    $0x10,%esp
80107b6b:	39 45 10             	cmp    %eax,0x10(%ebp)
80107b6e:	74 0c                	je     80107b7c <allocuvm+0x10c>
80107b70:	8b 55 10             	mov    0x10(%ebp),%edx
80107b73:	89 c1                	mov    %eax,%ecx
80107b75:	89 f8                	mov    %edi,%eax
80107b77:	e8 34 fb ff ff       	call   801076b0 <deallocuvm.part.0>
      kfree(mem);
80107b7c:	83 ec 0c             	sub    $0xc,%esp
80107b7f:	53                   	push   %ebx
80107b80:	e8 cb a7 ff ff       	call   80102350 <kfree>
      return 0;
80107b85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80107b8c:	83 c4 10             	add    $0x10,%esp
}
80107b8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107b92:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107b95:	5b                   	pop    %ebx
80107b96:	5e                   	pop    %esi
80107b97:	5f                   	pop    %edi
80107b98:	5d                   	pop    %ebp
80107b99:	c3                   	ret    
80107b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107ba0 <deallocuvm>:
{
80107ba0:	f3 0f 1e fb          	endbr32 
80107ba4:	55                   	push   %ebp
80107ba5:	89 e5                	mov    %esp,%ebp
80107ba7:	8b 55 0c             	mov    0xc(%ebp),%edx
80107baa:	8b 4d 10             	mov    0x10(%ebp),%ecx
80107bad:	8b 45 08             	mov    0x8(%ebp),%eax
  if(newsz >= oldsz)
80107bb0:	39 d1                	cmp    %edx,%ecx
80107bb2:	73 0c                	jae    80107bc0 <deallocuvm+0x20>
}
80107bb4:	5d                   	pop    %ebp
80107bb5:	e9 f6 fa ff ff       	jmp    801076b0 <deallocuvm.part.0>
80107bba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107bc0:	89 d0                	mov    %edx,%eax
80107bc2:	5d                   	pop    %ebp
80107bc3:	c3                   	ret    
80107bc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107bcf:	90                   	nop

80107bd0 <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
80107bd0:	f3 0f 1e fb          	endbr32 
80107bd4:	55                   	push   %ebp
80107bd5:	89 e5                	mov    %esp,%ebp
80107bd7:	57                   	push   %edi
80107bd8:	56                   	push   %esi
80107bd9:	53                   	push   %ebx
80107bda:	83 ec 0c             	sub    $0xc,%esp
80107bdd:	8b 75 08             	mov    0x8(%ebp),%esi
  uint i;

  if(pgdir == 0)
80107be0:	85 f6                	test   %esi,%esi
80107be2:	74 55                	je     80107c39 <freevm+0x69>
  if(newsz >= oldsz)
80107be4:	31 c9                	xor    %ecx,%ecx
80107be6:	ba 00 00 00 80       	mov    $0x80000000,%edx
80107beb:	89 f0                	mov    %esi,%eax
80107bed:	89 f3                	mov    %esi,%ebx
80107bef:	e8 bc fa ff ff       	call   801076b0 <deallocuvm.part.0>
    panic("freevm: no pgdir");
  deallocuvm(pgdir, KERNBASE, 0);
  for(i = 0; i < NPDENTRIES; i++){
80107bf4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
80107bfa:	eb 0b                	jmp    80107c07 <freevm+0x37>
80107bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107c00:	83 c3 04             	add    $0x4,%ebx
80107c03:	39 df                	cmp    %ebx,%edi
80107c05:	74 23                	je     80107c2a <freevm+0x5a>
    if(pgdir[i] & PTE_P){
80107c07:	8b 03                	mov    (%ebx),%eax
80107c09:	a8 01                	test   $0x1,%al
80107c0b:	74 f3                	je     80107c00 <freevm+0x30>
      char * v = P2V(PTE_ADDR(pgdir[i]));
80107c0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
      kfree(v);
80107c12:	83 ec 0c             	sub    $0xc,%esp
80107c15:	83 c3 04             	add    $0x4,%ebx
      char * v = P2V(PTE_ADDR(pgdir[i]));
80107c18:	05 00 00 00 80       	add    $0x80000000,%eax
      kfree(v);
80107c1d:	50                   	push   %eax
80107c1e:	e8 2d a7 ff ff       	call   80102350 <kfree>
80107c23:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < NPDENTRIES; i++){
80107c26:	39 df                	cmp    %ebx,%edi
80107c28:	75 dd                	jne    80107c07 <freevm+0x37>
    }
  }
  kfree((char*)pgdir);
80107c2a:	89 75 08             	mov    %esi,0x8(%ebp)
}
80107c2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107c30:	5b                   	pop    %ebx
80107c31:	5e                   	pop    %esi
80107c32:	5f                   	pop    %edi
80107c33:	5d                   	pop    %ebp
  kfree((char*)pgdir);
80107c34:	e9 17 a7 ff ff       	jmp    80102350 <kfree>
    panic("freevm: no pgdir");
80107c39:	83 ec 0c             	sub    $0xc,%esp
80107c3c:	68 41 df 10 80       	push   $0x8010df41
80107c41:	e8 da 87 ff ff       	call   80100420 <panic>
80107c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107c4d:	8d 76 00             	lea    0x0(%esi),%esi

80107c50 <setupkvm>:
{
80107c50:	f3 0f 1e fb          	endbr32 
80107c54:	55                   	push   %ebp
80107c55:	89 e5                	mov    %esp,%ebp
80107c57:	56                   	push   %esi
80107c58:	53                   	push   %ebx
  if((pgdir = (pde_t*)kalloc()) == 0)
80107c59:	e8 b2 a8 ff ff       	call   80102510 <kalloc>
80107c5e:	89 c6                	mov    %eax,%esi
80107c60:	85 c0                	test   %eax,%eax
80107c62:	74 42                	je     80107ca6 <setupkvm+0x56>
  memset(pgdir, 0, PGSIZE);
80107c64:	83 ec 04             	sub    $0x4,%esp
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107c67:	bb 40 14 11 80       	mov    $0x80111440,%ebx
  memset(pgdir, 0, PGSIZE);
80107c6c:	68 00 10 00 00       	push   $0x1000
80107c71:	6a 00                	push   $0x0
80107c73:	50                   	push   %eax
80107c74:	e8 47 d5 ff ff       	call   801051c0 <memset>
80107c79:	83 c4 10             	add    $0x10,%esp
                (uint)k->phys_start, k->perm) < 0) {
80107c7c:	8b 43 04             	mov    0x4(%ebx),%eax
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
80107c7f:	83 ec 08             	sub    $0x8,%esp
80107c82:	8b 4b 08             	mov    0x8(%ebx),%ecx
80107c85:	ff 73 0c             	pushl  0xc(%ebx)
80107c88:	8b 13                	mov    (%ebx),%edx
80107c8a:	50                   	push   %eax
80107c8b:	29 c1                	sub    %eax,%ecx
80107c8d:	89 f0                	mov    %esi,%eax
80107c8f:	e8 8c f9 ff ff       	call   80107620 <mappages>
80107c94:	83 c4 10             	add    $0x10,%esp
80107c97:	85 c0                	test   %eax,%eax
80107c99:	78 15                	js     80107cb0 <setupkvm+0x60>
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107c9b:	83 c3 10             	add    $0x10,%ebx
80107c9e:	81 fb 80 14 11 80    	cmp    $0x80111480,%ebx
80107ca4:	75 d6                	jne    80107c7c <setupkvm+0x2c>
}
80107ca6:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107ca9:	89 f0                	mov    %esi,%eax
80107cab:	5b                   	pop    %ebx
80107cac:	5e                   	pop    %esi
80107cad:	5d                   	pop    %ebp
80107cae:	c3                   	ret    
80107caf:	90                   	nop
      freevm(pgdir);
80107cb0:	83 ec 0c             	sub    $0xc,%esp
80107cb3:	56                   	push   %esi
      return 0;
80107cb4:	31 f6                	xor    %esi,%esi
      freevm(pgdir);
80107cb6:	e8 15 ff ff ff       	call   80107bd0 <freevm>
      return 0;
80107cbb:	83 c4 10             	add    $0x10,%esp
}
80107cbe:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107cc1:	89 f0                	mov    %esi,%eax
80107cc3:	5b                   	pop    %ebx
80107cc4:	5e                   	pop    %esi
80107cc5:	5d                   	pop    %ebp
80107cc6:	c3                   	ret    
80107cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107cce:	66 90                	xchg   %ax,%ax

80107cd0 <kvmalloc>:
{
80107cd0:	f3 0f 1e fb          	endbr32 
80107cd4:	55                   	push   %ebp
80107cd5:	89 e5                	mov    %esp,%ebp
80107cd7:	83 ec 08             	sub    $0x8,%esp
  kpgdir = setupkvm();
80107cda:	e8 71 ff ff ff       	call   80107c50 <setupkvm>
80107cdf:	a3 e4 11 14 80       	mov    %eax,0x801411e4
  lcr3(V2P(kpgdir));   // switch to the kernel page table
80107ce4:	05 00 00 00 80       	add    $0x80000000,%eax
80107ce9:	0f 22 d8             	mov    %eax,%cr3
}
80107cec:	c9                   	leave  
80107ced:	c3                   	ret    
80107cee:	66 90                	xchg   %ax,%ax

80107cf0 <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
80107cf0:	f3 0f 1e fb          	endbr32 
80107cf4:	55                   	push   %ebp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80107cf5:	31 c9                	xor    %ecx,%ecx
{
80107cf7:	89 e5                	mov    %esp,%ebp
80107cf9:	83 ec 08             	sub    $0x8,%esp
  pte = walkpgdir(pgdir, uva, 0);
80107cfc:	8b 55 0c             	mov    0xc(%ebp),%edx
80107cff:	8b 45 08             	mov    0x8(%ebp),%eax
80107d02:	e8 99 f8 ff ff       	call   801075a0 <walkpgdir>
  if(pte == 0)
80107d07:	85 c0                	test   %eax,%eax
80107d09:	74 05                	je     80107d10 <clearpteu+0x20>
    panic("clearpteu");
  *pte &= ~PTE_U;
80107d0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
}
80107d0e:	c9                   	leave  
80107d0f:	c3                   	ret    
    panic("clearpteu");
80107d10:	83 ec 0c             	sub    $0xc,%esp
80107d13:	68 52 df 10 80       	push   $0x8010df52
80107d18:	e8 03 87 ff ff       	call   80100420 <panic>
80107d1d:	8d 76 00             	lea    0x0(%esi),%esi

80107d20 <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t*
copyuvm(pde_t *pgdir, uint sz)
{
80107d20:	f3 0f 1e fb          	endbr32 
80107d24:	55                   	push   %ebp
80107d25:	89 e5                	mov    %esp,%ebp
80107d27:	57                   	push   %edi
80107d28:	56                   	push   %esi
80107d29:	53                   	push   %ebx
80107d2a:	83 ec 1c             	sub    $0x1c,%esp
  pde_t *d;
  pte_t *pte;
  uint pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
80107d2d:	e8 1e ff ff ff       	call   80107c50 <setupkvm>
80107d32:	89 45 e0             	mov    %eax,-0x20(%ebp)
80107d35:	85 c0                	test   %eax,%eax
80107d37:	0f 84 9b 00 00 00    	je     80107dd8 <copyuvm+0xb8>
    return 0;
  for(i = 0; i < sz; i += PGSIZE){
80107d3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80107d40:	85 c9                	test   %ecx,%ecx
80107d42:	0f 84 90 00 00 00    	je     80107dd8 <copyuvm+0xb8>
80107d48:	31 f6                	xor    %esi,%esi
80107d4a:	eb 46                	jmp    80107d92 <copyuvm+0x72>
80107d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      panic("copyuvm: page not present");
    pa = PTE_ADDR(*pte);
    flags = PTE_FLAGS(*pte);
    if((mem = kalloc()) == 0)
      goto bad;
    memmove(mem, (char*)P2V(pa), PGSIZE);
80107d50:	83 ec 04             	sub    $0x4,%esp
80107d53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
80107d59:	68 00 10 00 00       	push   $0x1000
80107d5e:	57                   	push   %edi
80107d5f:	50                   	push   %eax
80107d60:	e8 fb d4 ff ff       	call   80105260 <memmove>
    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
80107d65:	58                   	pop    %eax
80107d66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80107d6c:	5a                   	pop    %edx
80107d6d:	ff 75 e4             	pushl  -0x1c(%ebp)
80107d70:	b9 00 10 00 00       	mov    $0x1000,%ecx
80107d75:	89 f2                	mov    %esi,%edx
80107d77:	50                   	push   %eax
80107d78:	8b 45 e0             	mov    -0x20(%ebp),%eax
80107d7b:	e8 a0 f8 ff ff       	call   80107620 <mappages>
80107d80:	83 c4 10             	add    $0x10,%esp
80107d83:	85 c0                	test   %eax,%eax
80107d85:	78 61                	js     80107de8 <copyuvm+0xc8>
  for(i = 0; i < sz; i += PGSIZE){
80107d87:	81 c6 00 10 00 00    	add    $0x1000,%esi
80107d8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
80107d90:	76 46                	jbe    80107dd8 <copyuvm+0xb8>
    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
80107d92:	8b 45 08             	mov    0x8(%ebp),%eax
80107d95:	31 c9                	xor    %ecx,%ecx
80107d97:	89 f2                	mov    %esi,%edx
80107d99:	e8 02 f8 ff ff       	call   801075a0 <walkpgdir>
80107d9e:	85 c0                	test   %eax,%eax
80107da0:	74 61                	je     80107e03 <copyuvm+0xe3>
    if(!(*pte & PTE_P))
80107da2:	8b 00                	mov    (%eax),%eax
80107da4:	a8 01                	test   $0x1,%al
80107da6:	74 4e                	je     80107df6 <copyuvm+0xd6>
    pa = PTE_ADDR(*pte);
80107da8:	89 c7                	mov    %eax,%edi
    flags = PTE_FLAGS(*pte);
80107daa:	25 ff 0f 00 00       	and    $0xfff,%eax
80107daf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pa = PTE_ADDR(*pte);
80107db2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
    if((mem = kalloc()) == 0)
80107db8:	e8 53 a7 ff ff       	call   80102510 <kalloc>
80107dbd:	89 c3                	mov    %eax,%ebx
80107dbf:	85 c0                	test   %eax,%eax
80107dc1:	75 8d                	jne    80107d50 <copyuvm+0x30>
    }
  }
  return d;

bad:
  freevm(d);
80107dc3:	83 ec 0c             	sub    $0xc,%esp
80107dc6:	ff 75 e0             	pushl  -0x20(%ebp)
80107dc9:	e8 02 fe ff ff       	call   80107bd0 <freevm>
  return 0;
80107dce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
80107dd5:	83 c4 10             	add    $0x10,%esp
}
80107dd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
80107ddb:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107dde:	5b                   	pop    %ebx
80107ddf:	5e                   	pop    %esi
80107de0:	5f                   	pop    %edi
80107de1:	5d                   	pop    %ebp
80107de2:	c3                   	ret    
80107de3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107de7:	90                   	nop
      kfree(mem);
80107de8:	83 ec 0c             	sub    $0xc,%esp
80107deb:	53                   	push   %ebx
80107dec:	e8 5f a5 ff ff       	call   80102350 <kfree>
      goto bad;
80107df1:	83 c4 10             	add    $0x10,%esp
80107df4:	eb cd                	jmp    80107dc3 <copyuvm+0xa3>
      panic("copyuvm: page not present");
80107df6:	83 ec 0c             	sub    $0xc,%esp
80107df9:	68 76 df 10 80       	push   $0x8010df76
80107dfe:	e8 1d 86 ff ff       	call   80100420 <panic>
      panic("copyuvm: pte should exist");
80107e03:	83 ec 0c             	sub    $0xc,%esp
80107e06:	68 5c df 10 80       	push   $0x8010df5c
80107e0b:	e8 10 86 ff ff       	call   80100420 <panic>

80107e10 <uva2ka>:

//PAGEBREAK!
// Map user virtual address to kernel address.
char*
uva2ka(pde_t *pgdir, char *uva)
{
80107e10:	f3 0f 1e fb          	endbr32 
80107e14:	55                   	push   %ebp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80107e15:	31 c9                	xor    %ecx,%ecx
{
80107e17:	89 e5                	mov    %esp,%ebp
80107e19:	83 ec 08             	sub    $0x8,%esp
  pte = walkpgdir(pgdir, uva, 0);
80107e1c:	8b 55 0c             	mov    0xc(%ebp),%edx
80107e1f:	8b 45 08             	mov    0x8(%ebp),%eax
80107e22:	e8 79 f7 ff ff       	call   801075a0 <walkpgdir>
  if((*pte & PTE_P) == 0)
80107e27:	8b 00                	mov    (%eax),%eax
    return 0;
  if((*pte & PTE_U) == 0)
    return 0;
  return (char*)P2V(PTE_ADDR(*pte));
}
80107e29:	c9                   	leave  
  if((*pte & PTE_U) == 0)
80107e2a:	89 c2                	mov    %eax,%edx
  return (char*)P2V(PTE_ADDR(*pte));
80107e2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  if((*pte & PTE_U) == 0)
80107e31:	83 e2 05             	and    $0x5,%edx
  return (char*)P2V(PTE_ADDR(*pte));
80107e34:	05 00 00 00 80       	add    $0x80000000,%eax
80107e39:	83 fa 05             	cmp    $0x5,%edx
80107e3c:	ba 00 00 00 00       	mov    $0x0,%edx
80107e41:	0f 45 c2             	cmovne %edx,%eax
}
80107e44:	c3                   	ret    
80107e45:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107e4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107e50 <copyout>:
// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
80107e50:	f3 0f 1e fb          	endbr32 
80107e54:	55                   	push   %ebp
80107e55:	89 e5                	mov    %esp,%ebp
80107e57:	57                   	push   %edi
80107e58:	56                   	push   %esi
80107e59:	53                   	push   %ebx
80107e5a:	83 ec 0c             	sub    $0xc,%esp
80107e5d:	8b 75 14             	mov    0x14(%ebp),%esi
80107e60:	8b 55 0c             	mov    0xc(%ebp),%edx
  char *buf, *pa0;
  uint n, va0;

  buf = (char*)p;
  while(len > 0){
80107e63:	85 f6                	test   %esi,%esi
80107e65:	75 3c                	jne    80107ea3 <copyout+0x53>
80107e67:	eb 67                	jmp    80107ed0 <copyout+0x80>
80107e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    va0 = (uint)PGROUNDDOWN(va);
    pa0 = uva2ka(pgdir, (char*)va0);
    if(pa0 == 0)
      return -1;
    n = PGSIZE - (va - va0);
80107e70:	8b 55 0c             	mov    0xc(%ebp),%edx
80107e73:	89 fb                	mov    %edi,%ebx
80107e75:	29 d3                	sub    %edx,%ebx
80107e77:	81 c3 00 10 00 00    	add    $0x1000,%ebx
    if(n > len)
80107e7d:	39 f3                	cmp    %esi,%ebx
80107e7f:	0f 47 de             	cmova  %esi,%ebx
      n = len;
    memmove(pa0 + (va - va0), buf, n);
80107e82:	29 fa                	sub    %edi,%edx
80107e84:	83 ec 04             	sub    $0x4,%esp
80107e87:	01 c2                	add    %eax,%edx
80107e89:	53                   	push   %ebx
80107e8a:	ff 75 10             	pushl  0x10(%ebp)
80107e8d:	52                   	push   %edx
80107e8e:	e8 cd d3 ff ff       	call   80105260 <memmove>
    len -= n;
    buf += n;
80107e93:	01 5d 10             	add    %ebx,0x10(%ebp)
    va = va0 + PGSIZE;
80107e96:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
  while(len > 0){
80107e9c:	83 c4 10             	add    $0x10,%esp
80107e9f:	29 de                	sub    %ebx,%esi
80107ea1:	74 2d                	je     80107ed0 <copyout+0x80>
    va0 = (uint)PGROUNDDOWN(va);
80107ea3:	89 d7                	mov    %edx,%edi
    pa0 = uva2ka(pgdir, (char*)va0);
80107ea5:	83 ec 08             	sub    $0x8,%esp
    va0 = (uint)PGROUNDDOWN(va);
80107ea8:	89 55 0c             	mov    %edx,0xc(%ebp)
80107eab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
    pa0 = uva2ka(pgdir, (char*)va0);
80107eb1:	57                   	push   %edi
80107eb2:	ff 75 08             	pushl  0x8(%ebp)
80107eb5:	e8 56 ff ff ff       	call   80107e10 <uva2ka>
    if(pa0 == 0)
80107eba:	83 c4 10             	add    $0x10,%esp
80107ebd:	85 c0                	test   %eax,%eax
80107ebf:	75 af                	jne    80107e70 <copyout+0x20>
  }
  return 0;
}
80107ec1:	8d 65 f4             	lea    -0xc(%ebp),%esp
      return -1;
80107ec4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107ec9:	5b                   	pop    %ebx
80107eca:	5e                   	pop    %esi
80107ecb:	5f                   	pop    %edi
80107ecc:	5d                   	pop    %ebp
80107ecd:	c3                   	ret    
80107ece:	66 90                	xchg   %ax,%ax
80107ed0:	8d 65 f4             	lea    -0xc(%ebp),%esp
  return 0;
80107ed3:	31 c0                	xor    %eax,%eax
}
80107ed5:	5b                   	pop    %ebx
80107ed6:	5e                   	pop    %esi
80107ed7:	5f                   	pop    %edi
80107ed8:	5d                   	pop    %ebp
80107ed9:	c3                   	ret    
80107eda:	66 90                	xchg   %ax,%ax
80107edc:	66 90                	xchg   %ax,%ax
80107ede:	66 90                	xchg   %ax,%ax

80107ee0 <arp_send_request>:

static int
arp_send_request (struct netif *netif, const ip_addr_t *tpa) {
    struct arp_ethernet request;

    if (!tpa) {
80107ee0:	85 d2                	test   %edx,%edx
80107ee2:	0f 84 a3 00 00 00    	je     80107f8b <arp_send_request+0xab>
arp_send_request (struct netif *netif, const ip_addr_t *tpa) {
80107ee8:	55                   	push   %ebp
80107ee9:	89 e5                	mov    %esp,%ebp
80107eeb:	57                   	push   %edi
80107eec:	56                   	push   %esi
80107eed:	89 d6                	mov    %edx,%esi
    request.hdr.hrd = hton16(ARP_HRD_ETHERNET);
    request.hdr.pro = hton16(ETHERNET_TYPE_IP);
    request.hdr.hln = ETHERNET_ADDR_LEN;
    request.hdr.pln = IP_ADDR_LEN;
    request.hdr.op = hton16(ARP_OP_REQUEST);
    memcpy(request.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
80107eef:	8d 7d cc             	lea    -0x34(%ebp),%edi
arp_send_request (struct netif *netif, const ip_addr_t *tpa) {
80107ef2:	53                   	push   %ebx
80107ef3:	89 c3                	mov    %eax,%ebx
80107ef5:	83 ec 38             	sub    $0x38,%esp
    request.hdr.hrd = hton16(ARP_HRD_ETHERNET);
80107ef8:	6a 01                	push   $0x1
80107efa:	e8 61 07 00 00       	call   80108660 <hton16>
    request.hdr.pro = hton16(ETHERNET_TYPE_IP);
80107eff:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
    request.hdr.hrd = hton16(ARP_HRD_ETHERNET);
80107f06:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
    request.hdr.pro = hton16(ETHERNET_TYPE_IP);
80107f0a:	e8 51 07 00 00       	call   80108660 <hton16>
    request.hdr.op = hton16(ARP_OP_REQUEST);
80107f0f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
    request.hdr.pro = hton16(ETHERNET_TYPE_IP);
80107f16:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
    request.hdr.hln = ETHERNET_ADDR_LEN;
80107f1a:	b8 06 04 00 00       	mov    $0x406,%eax
80107f1f:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    request.hdr.op = hton16(ARP_OP_REQUEST);
80107f23:	e8 38 07 00 00       	call   80108660 <hton16>
    memcpy(request.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
80107f28:	83 c4 0c             	add    $0xc,%esp
80107f2b:	6a 06                	push   $0x6
    request.hdr.op = hton16(ARP_OP_REQUEST);
80107f2d:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
    memcpy(request.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
80107f31:	8b 43 08             	mov    0x8(%ebx),%eax
80107f34:	83 c0 26             	add    $0x26,%eax
80107f37:	50                   	push   %eax
80107f38:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80107f3b:	50                   	push   %eax
80107f3c:	e8 7f d3 ff ff       	call   801052c0 <memcpy>
    request.spa = ((struct netif_ip *)netif)->unicast;
80107f41:	8b 43 0c             	mov    0xc(%ebx),%eax
    memset(request.tha, 0, ETHERNET_ADDR_LEN);
80107f44:	83 c4 0c             	add    $0xc,%esp
80107f47:	6a 06                	push   $0x6
    request.spa = ((struct netif_ip *)netif)->unicast;
80107f49:	89 45 da             	mov    %eax,-0x26(%ebp)
    memset(request.tha, 0, ETHERNET_ADDR_LEN);
80107f4c:	8d 45 de             	lea    -0x22(%ebp),%eax
80107f4f:	6a 00                	push   $0x0
80107f51:	50                   	push   %eax
80107f52:	e8 69 d2 ff ff       	call   801051c0 <memset>
    request.tpa = *tpa;
80107f57:	8b 06                	mov    (%esi),%eax
80107f59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
#ifdef DEBUG
    fprintf(stderr, ">>> arp_send_request <<<\n");
    arp_dump((uint8_t *)&request, sizeof(request));
#endif
    if (netif->dev->ops->xmit(netif->dev, ETHERNET_TYPE_ARP, (uint8_t *)&request, sizeof(request), ETHERNET_ADDR_BROADCAST) == -1) {
80107f5c:	8b 43 08             	mov    0x8(%ebx),%eax
80107f5f:	8b 50 58             	mov    0x58(%eax),%edx
80107f62:	c7 04 24 a8 e2 10 80 	movl   $0x8010e2a8,(%esp)
80107f69:	6a 1c                	push   $0x1c
80107f6b:	57                   	push   %edi
80107f6c:	68 06 08 00 00       	push   $0x806
80107f71:	50                   	push   %eax
80107f72:	ff 52 08             	call   *0x8(%edx)
80107f75:	83 c4 20             	add    $0x20,%esp
80107f78:	83 f8 ff             	cmp    $0xffffffff,%eax
80107f7b:	0f 94 c0             	sete   %al
        return -1;
    }
    return 0;
}
80107f7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    if (netif->dev->ops->xmit(netif->dev, ETHERNET_TYPE_ARP, (uint8_t *)&request, sizeof(request), ETHERNET_ADDR_BROADCAST) == -1) {
80107f81:	0f b6 c0             	movzbl %al,%eax
}
80107f84:	5b                   	pop    %ebx
80107f85:	5e                   	pop    %esi
    if (netif->dev->ops->xmit(netif->dev, ETHERNET_TYPE_ARP, (uint8_t *)&request, sizeof(request), ETHERNET_ADDR_BROADCAST) == -1) {
80107f86:	f7 d8                	neg    %eax
}
80107f88:	5f                   	pop    %edi
80107f89:	5d                   	pop    %ebp
80107f8a:	c3                   	ret    
        return -1;
80107f8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107f90:	c3                   	ret    
80107f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107f98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107f9f:	90                   	nop

80107fa0 <arp_rx>:
    }
    return 0;
}

static void
arp_rx (uint8_t *packet, size_t plen, struct netdev *dev) {
80107fa0:	f3 0f 1e fb          	endbr32 
80107fa4:	55                   	push   %ebp
80107fa5:	89 e5                	mov    %esp,%ebp
80107fa7:	57                   	push   %edi
80107fa8:	56                   	push   %esi
80107fa9:	53                   	push   %ebx
80107faa:	83 ec 2c             	sub    $0x2c,%esp
    struct arp_ethernet *message;
    time_t now;
    int marge = 0;
    struct netif *netif;

    if (plen < sizeof(struct arp_ethernet)) {
80107fad:	83 7d 0c 1b          	cmpl   $0x1b,0xc(%ebp)
80107fb1:	77 0d                	ja     80107fc0 <arp_rx+0x20>
        if (ntoh16(message->hdr.op) == ARP_OP_REQUEST) {
            arp_send_reply(netif, message->sha, &message->spa, message->sha);
        }
    }
    return;
}
80107fb3:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107fb6:	5b                   	pop    %ebx
80107fb7:	5e                   	pop    %esi
80107fb8:	5f                   	pop    %edi
80107fb9:	5d                   	pop    %ebp
80107fba:	c3                   	ret    
80107fbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107fbf:	90                   	nop
    if (ntoh16(message->hdr.hrd) != ARP_HRD_ETHERNET) {
80107fc0:	8b 45 08             	mov    0x8(%ebp),%eax
80107fc3:	83 ec 0c             	sub    $0xc,%esp
80107fc6:	0f b7 00             	movzwl (%eax),%eax
80107fc9:	50                   	push   %eax
80107fca:	e8 d1 06 00 00       	call   801086a0 <ntoh16>
80107fcf:	83 c4 10             	add    $0x10,%esp
80107fd2:	66 83 f8 01          	cmp    $0x1,%ax
80107fd6:	75 db                	jne    80107fb3 <arp_rx+0x13>
    if (ntoh16(message->hdr.pro) != ETHERNET_TYPE_IP) {
80107fd8:	8b 45 08             	mov    0x8(%ebp),%eax
80107fdb:	83 ec 0c             	sub    $0xc,%esp
80107fde:	0f b7 40 02          	movzwl 0x2(%eax),%eax
80107fe2:	50                   	push   %eax
80107fe3:	e8 b8 06 00 00       	call   801086a0 <ntoh16>
80107fe8:	83 c4 10             	add    $0x10,%esp
80107feb:	66 3d 00 08          	cmp    $0x800,%ax
80107fef:	75 c2                	jne    80107fb3 <arp_rx+0x13>
    if (message->hdr.hln != ETHERNET_ADDR_LEN) {
80107ff1:	8b 45 08             	mov    0x8(%ebp),%eax
80107ff4:	80 78 04 06          	cmpb   $0x6,0x4(%eax)
80107ff8:	75 b9                	jne    80107fb3 <arp_rx+0x13>
    if (message->hdr.pln != IP_ADDR_LEN) {
80107ffa:	80 78 05 04          	cmpb   $0x4,0x5(%eax)
80107ffe:	75 b3                	jne    80107fb3 <arp_rx+0x13>
    acquire(&arplock);
80108000:	83 ec 0c             	sub    $0xc,%esp
80108003:	68 40 16 13 80       	push   $0x80131640
80108008:	e8 a3 d0 ff ff       	call   801050b0 <acquire>
    time(&now);
8010800d:	8d 45 c8             	lea    -0x38(%ebp),%eax
80108010:	89 04 24             	mov    %eax,(%esp)
80108013:	e8 08 08 00 00       	call   80108820 <time>
    if (now - timestamp > 10) {
80108018:	8b 45 c8             	mov    -0x38(%ebp),%eax
8010801b:	83 c4 10             	add    $0x10,%esp
8010801e:	89 c2                	mov    %eax,%edx
80108020:	2b 15 20 16 11 80    	sub    0x80111620,%edx
80108026:	83 fa 0a             	cmp    $0xa,%edx
80108029:	0f 8f 62 01 00 00    	jg     80108191 <arp_rx+0x1f1>
    marge = (arp_table_update(dev, &message->spa, message->sha) == 0) ? 1 : 0;
8010802f:	8b 45 08             	mov    0x8(%ebp),%eax
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
80108032:	bb 40 16 11 80       	mov    $0x80111640,%ebx
    marge = (arp_table_update(dev, &message->spa, message->sha) == 0) ? 1 : 0;
80108037:	8d 70 08             	lea    0x8(%eax),%esi
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
8010803a:	eb 13                	jmp    8010804f <arp_rx+0xaf>
8010803c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108040:	83 c3 20             	add    $0x20,%ebx
80108043:	81 fb 40 16 13 80    	cmp    $0x80131640,%ebx
80108049:	0f 84 af 01 00 00    	je     801081fe <arp_rx+0x25e>
        if (entry->used && entry->pa == *pa) {
8010804f:	80 3b 00             	cmpb   $0x0,(%ebx)
80108052:	74 ec                	je     80108040 <arp_rx+0xa0>
80108054:	8b 45 08             	mov    0x8(%ebp),%eax
80108057:	8b 40 0e             	mov    0xe(%eax),%eax
8010805a:	39 43 04             	cmp    %eax,0x4(%ebx)
8010805d:	75 e1                	jne    80108040 <arp_rx+0xa0>
    memcpy(entry->ha, ha, ETHERNET_ADDR_LEN);
8010805f:	83 ec 04             	sub    $0x4,%esp
80108062:	8d 7b 08             	lea    0x8(%ebx),%edi
80108065:	6a 06                	push   $0x6
80108067:	56                   	push   %esi
80108068:	57                   	push   %edi
80108069:	e8 52 d2 ff ff       	call   801052c0 <memcpy>
    time(&entry->timestamp);
8010806e:	8d 43 10             	lea    0x10(%ebx),%eax
80108071:	89 04 24             	mov    %eax,(%esp)
80108074:	e8 a7 07 00 00       	call   80108820 <time>
    if (entry->data) {
80108079:	8b 53 14             	mov    0x14(%ebx),%edx
8010807c:	83 c4 10             	add    $0x10,%esp
8010807f:	85 d2                	test   %edx,%edx
80108081:	74 2b                	je     801080ae <arp_rx+0x10e>
        if (entry->netif->dev != dev) {
80108083:	8b 43 1c             	mov    0x1c(%ebx),%eax
        dev->ops->xmit(dev, ETHERNET_TYPE_IP, (uint8_t *)entry->data, entry->len, entry->ha);
80108086:	83 ec 0c             	sub    $0xc,%esp
        if (entry->netif->dev != dev) {
80108089:	8b 40 08             	mov    0x8(%eax),%eax
        dev->ops->xmit(dev, ETHERNET_TYPE_IP, (uint8_t *)entry->data, entry->len, entry->ha);
8010808c:	8b 48 58             	mov    0x58(%eax),%ecx
8010808f:	57                   	push   %edi
80108090:	ff 73 18             	pushl  0x18(%ebx)
80108093:	52                   	push   %edx
80108094:	68 00 08 00 00       	push   $0x800
80108099:	50                   	push   %eax
8010809a:	ff 51 08             	call   *0x8(%ecx)
        entry->data = NULL;
8010809d:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
        entry->len = 0;
801080a4:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
801080ab:	83 c4 20             	add    $0x20,%esp
    return 0;
801080ae:	31 db                	xor    %ebx,%ebx
    release(&arplock);
801080b0:	83 ec 0c             	sub    $0xc,%esp
801080b3:	68 40 16 13 80       	push   $0x80131640
801080b8:	e8 b3 d0 ff ff       	call   80105170 <release>
    netif = netdev_get_netif(dev, NETIF_FAMILY_IPV4);
801080bd:	58                   	pop    %eax
801080be:	5a                   	pop    %edx
801080bf:	6a 02                	push   $0x2
801080c1:	ff 75 10             	pushl  0x10(%ebp)
801080c4:	e8 17 25 00 00       	call   8010a5e0 <netdev_get_netif>
    if (netif && ((struct netif_ip *)netif)->unicast == message->tpa) {
801080c9:	83 c4 10             	add    $0x10,%esp
    netif = netdev_get_netif(dev, NETIF_FAMILY_IPV4);
801080cc:	89 c7                	mov    %eax,%edi
    if (netif && ((struct netif_ip *)netif)->unicast == message->tpa) {
801080ce:	85 c0                	test   %eax,%eax
801080d0:	0f 84 dd fe ff ff    	je     80107fb3 <arp_rx+0x13>
801080d6:	8b 45 08             	mov    0x8(%ebp),%eax
801080d9:	8b 40 18             	mov    0x18(%eax),%eax
801080dc:	39 47 0c             	cmp    %eax,0xc(%edi)
801080df:	0f 85 ce fe ff ff    	jne    80107fb3 <arp_rx+0x13>
        if (!marge) {
801080e5:	85 db                	test   %ebx,%ebx
801080e7:	0f 85 1b 01 00 00    	jne    80108208 <arp_rx+0x268>
        if (ntoh16(message->hdr.op) == ARP_OP_REQUEST) {
801080ed:	8b 45 08             	mov    0x8(%ebp),%eax
801080f0:	83 ec 0c             	sub    $0xc,%esp
801080f3:	0f b7 40 06          	movzwl 0x6(%eax),%eax
801080f7:	50                   	push   %eax
801080f8:	e8 a3 05 00 00       	call   801086a0 <ntoh16>
801080fd:	83 c4 10             	add    $0x10,%esp
80108100:	66 83 f8 01          	cmp    $0x1,%ax
80108104:	0f 85 a9 fe ff ff    	jne    80107fb3 <arp_rx+0x13>
    reply.hdr.hrd = hton16(ARP_HRD_ETHERNET);
8010810a:	83 ec 0c             	sub    $0xc,%esp
    memcpy(reply.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
8010810d:	8d 5d cc             	lea    -0x34(%ebp),%ebx
    reply.hdr.hrd = hton16(ARP_HRD_ETHERNET);
80108110:	6a 01                	push   $0x1
80108112:	e8 49 05 00 00       	call   80108660 <hton16>
    reply.hdr.pro = hton16(ETHERNET_TYPE_IP);
80108117:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
    reply.hdr.hrd = hton16(ARP_HRD_ETHERNET);
8010811e:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
    reply.hdr.pro = hton16(ETHERNET_TYPE_IP);
80108122:	e8 39 05 00 00       	call   80108660 <hton16>
    reply.hdr.op = hton16(ARP_OP_REPLY);
80108127:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
    reply.hdr.pro = hton16(ETHERNET_TYPE_IP);
8010812e:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
    reply.hdr.hln = ETHERNET_ADDR_LEN;
80108132:	66 c7 45 d0 06 04    	movw   $0x406,-0x30(%ebp)
    reply.hdr.op = hton16(ARP_OP_REPLY);
80108138:	e8 23 05 00 00       	call   80108660 <hton16>
    memcpy(reply.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
8010813d:	83 c4 0c             	add    $0xc,%esp
80108140:	6a 06                	push   $0x6
    reply.hdr.op = hton16(ARP_OP_REPLY);
80108142:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
    memcpy(reply.sha, netif->dev->addr, ETHERNET_ADDR_LEN);
80108146:	8b 47 08             	mov    0x8(%edi),%eax
80108149:	83 c0 26             	add    $0x26,%eax
8010814c:	50                   	push   %eax
8010814d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80108150:	50                   	push   %eax
80108151:	e8 6a d1 ff ff       	call   801052c0 <memcpy>
    reply.spa = ((struct netif_ip *)netif)->unicast;
80108156:	8b 47 0c             	mov    0xc(%edi),%eax
    memcpy(reply.tha, tha, ETHERNET_ADDR_LEN);
80108159:	83 c4 0c             	add    $0xc,%esp
8010815c:	6a 06                	push   $0x6
    reply.spa = ((struct netif_ip *)netif)->unicast;
8010815e:	89 45 da             	mov    %eax,-0x26(%ebp)
    memcpy(reply.tha, tha, ETHERNET_ADDR_LEN);
80108161:	8d 45 de             	lea    -0x22(%ebp),%eax
80108164:	56                   	push   %esi
80108165:	50                   	push   %eax
80108166:	e8 55 d1 ff ff       	call   801052c0 <memcpy>
    reply.tpa = *tpa;
8010816b:	8b 45 08             	mov    0x8(%ebp),%eax
8010816e:	8b 40 0e             	mov    0xe(%eax),%eax
80108171:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (netif->dev->ops->xmit(netif->dev, ETHERNET_TYPE_ARP, (uint8_t *)&reply, sizeof(reply), dst) < 0) {
80108174:	8b 47 08             	mov    0x8(%edi),%eax
80108177:	8b 50 58             	mov    0x58(%eax),%edx
8010817a:	89 34 24             	mov    %esi,(%esp)
8010817d:	6a 1c                	push   $0x1c
8010817f:	53                   	push   %ebx
80108180:	68 06 08 00 00       	push   $0x806
80108185:	50                   	push   %eax
80108186:	ff 52 08             	call   *0x8(%edx)
80108189:	83 c4 20             	add    $0x20,%esp
8010818c:	e9 22 fe ff ff       	jmp    80107fb3 <arp_rx+0x13>
        timestamp = now;
80108191:	a3 20 16 11 80       	mov    %eax,0x80111620
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
80108196:	bb 40 16 11 80       	mov    $0x80111640,%ebx
8010819b:	eb 12                	jmp    801081af <arp_rx+0x20f>
8010819d:	8d 76 00             	lea    0x0(%esi),%esi
801081a0:	83 c3 20             	add    $0x20,%ebx
801081a3:	81 fb 40 16 13 80    	cmp    $0x80131640,%ebx
801081a9:	0f 84 80 fe ff ff    	je     8010802f <arp_rx+0x8f>
        if (entry->used && timestamp - entry->timestamp > ARP_TABLE_TIMEOUT_SEC) {
801081af:	80 3b 00             	cmpb   $0x0,(%ebx)
801081b2:	74 ec                	je     801081a0 <arp_rx+0x200>
801081b4:	a1 20 16 11 80       	mov    0x80111620,%eax
801081b9:	2b 43 10             	sub    0x10(%ebx),%eax
801081bc:	3d 2c 01 00 00       	cmp    $0x12c,%eax
801081c1:	7e dd                	jle    801081a0 <arp_rx+0x200>
    memset(entry->ha, 0, ETHERNET_ADDR_LEN);
801081c3:	83 ec 04             	sub    $0x4,%esp
801081c6:	8d 43 08             	lea    0x8(%ebx),%eax
    entry->used = 0;
801081c9:	c6 03 00             	movb   $0x0,(%ebx)
    entry->pa = 0;
801081cc:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    memset(entry->ha, 0, ETHERNET_ADDR_LEN);
801081d3:	6a 06                	push   $0x6
801081d5:	6a 00                	push   $0x0
801081d7:	50                   	push   %eax
801081d8:	e8 e3 cf ff ff       	call   801051c0 <memset>
    if (entry->data) {
801081dd:	8b 4b 14             	mov    0x14(%ebx),%ecx
801081e0:	83 c4 10             	add    $0x10,%esp
801081e3:	85 c9                	test   %ecx,%ecx
801081e5:	74 0e                	je     801081f5 <arp_rx+0x255>
        entry->data = NULL;
801081e7:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
        entry->len = 0;
801081ee:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
    entry->netif = NULL;
801081f5:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
}
801081fc:	eb a2                	jmp    801081a0 <arp_rx+0x200>
        return -1;
801081fe:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80108203:	e9 a8 fe ff ff       	jmp    801080b0 <arp_rx+0x110>
            acquire(&arplock);
80108208:	83 ec 0c             	sub    $0xc,%esp
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
8010820b:	bb 40 16 11 80       	mov    $0x80111640,%ebx
            acquire(&arplock);
80108210:	68 40 16 13 80       	push   $0x80131640
80108215:	e8 96 ce ff ff       	call   801050b0 <acquire>
8010821a:	83 c4 10             	add    $0x10,%esp
8010821d:	eb 0c                	jmp    8010822b <arp_rx+0x28b>
8010821f:	90                   	nop
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
80108220:	83 c3 20             	add    $0x20,%ebx
80108223:	81 fb 40 16 13 80    	cmp    $0x80131640,%ebx
80108229:	74 2e                	je     80108259 <arp_rx+0x2b9>
        if (!entry->used) {
8010822b:	80 3b 00             	cmpb   $0x0,(%ebx)
8010822e:	75 f0                	jne    80108220 <arp_rx+0x280>
    entry->pa = *pa;
80108230:	8b 45 08             	mov    0x8(%ebp),%eax
    entry->used = 1;
80108233:	c6 03 01             	movb   $0x1,(%ebx)
    memcpy(entry->ha, ha, ETHERNET_ADDR_LEN);
80108236:	83 ec 04             	sub    $0x4,%esp
    entry->pa = *pa;
80108239:	8b 40 0e             	mov    0xe(%eax),%eax
8010823c:	89 43 04             	mov    %eax,0x4(%ebx)
    memcpy(entry->ha, ha, ETHERNET_ADDR_LEN);
8010823f:	8d 43 08             	lea    0x8(%ebx),%eax
    time(&entry->timestamp);
80108242:	83 c3 10             	add    $0x10,%ebx
    memcpy(entry->ha, ha, ETHERNET_ADDR_LEN);
80108245:	6a 06                	push   $0x6
80108247:	56                   	push   %esi
80108248:	50                   	push   %eax
80108249:	e8 72 d0 ff ff       	call   801052c0 <memcpy>
    time(&entry->timestamp);
8010824e:	89 1c 24             	mov    %ebx,(%esp)
80108251:	e8 ca 05 00 00       	call   80108820 <time>
    return 0;
80108256:	83 c4 10             	add    $0x10,%esp
            release(&arplock);
80108259:	83 ec 0c             	sub    $0xc,%esp
8010825c:	68 40 16 13 80       	push   $0x80131640
80108261:	e8 0a cf ff ff       	call   80105170 <release>
80108266:	83 c4 10             	add    $0x10,%esp
80108269:	e9 7f fe ff ff       	jmp    801080ed <arp_rx+0x14d>
8010826e:	66 90                	xchg   %ax,%ax

80108270 <arp_dump>:
arp_dump (uint8_t *packet, size_t plen) {
80108270:	f3 0f 1e fb          	endbr32 
80108274:	55                   	push   %ebp
80108275:	89 e5                	mov    %esp,%ebp
80108277:	56                   	push   %esi
80108278:	53                   	push   %ebx
80108279:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
8010827f:	8b 5d 08             	mov    0x8(%ebp),%ebx
    cprintf(" hrd: 0x%04x\n", ntoh16(message->hdr.hrd));
80108282:	0f b7 03             	movzwl (%ebx),%eax
80108285:	50                   	push   %eax
80108286:	e8 15 04 00 00       	call   801086a0 <ntoh16>
8010828b:	5a                   	pop    %edx
8010828c:	59                   	pop    %ecx
8010828d:	0f b7 c0             	movzwl %ax,%eax
80108290:	50                   	push   %eax
80108291:	68 c9 df 10 80       	push   $0x8010dfc9
80108296:	e8 f5 80 ff ff       	call   80100390 <cprintf>
    cprintf(" pro: 0x%04x\n", ntoh16(message->hdr.pro));
8010829b:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
8010829f:	89 04 24             	mov    %eax,(%esp)
801082a2:	e8 f9 03 00 00       	call   801086a0 <ntoh16>
801082a7:	5e                   	pop    %esi
801082a8:	5a                   	pop    %edx
801082a9:	0f b7 c0             	movzwl %ax,%eax
801082ac:	50                   	push   %eax
801082ad:	68 d7 df 10 80       	push   $0x8010dfd7
801082b2:	e8 d9 80 ff ff       	call   80100390 <cprintf>
    cprintf(" hln: %u\n", message->hdr.hln);
801082b7:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
801082bb:	59                   	pop    %ecx
801082bc:	5e                   	pop    %esi
801082bd:	be bb df 10 80       	mov    $0x8010dfbb,%esi
801082c2:	50                   	push   %eax
801082c3:	68 e5 df 10 80       	push   $0x8010dfe5
801082c8:	e8 c3 80 ff ff       	call   80100390 <cprintf>
    cprintf(" pln: %u\n", message->hdr.pln);
801082cd:	58                   	pop    %eax
801082ce:	0f b6 43 05          	movzbl 0x5(%ebx),%eax
801082d2:	5a                   	pop    %edx
801082d3:	50                   	push   %eax
801082d4:	68 ef df 10 80       	push   $0x8010dfef
801082d9:	e8 b2 80 ff ff       	call   80100390 <cprintf>
    cprintf("  op: %u (%s)\n", ntoh16(message->hdr.op), arp_opcode_ntop(message->hdr.op));
801082de:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
    switch (ntoh16(opcode)) {
801082e2:	89 04 24             	mov    %eax,(%esp)
801082e5:	e8 b6 03 00 00       	call   801086a0 <ntoh16>
801082ea:	83 c4 10             	add    $0x10,%esp
801082ed:	66 83 f8 01          	cmp    $0x1,%ax
801082f1:	74 11                	je     80108304 <arp_dump+0x94>
801082f3:	66 83 f8 02          	cmp    $0x2,%ax
801082f7:	be b3 df 10 80       	mov    $0x8010dfb3,%esi
801082fc:	b8 c3 df 10 80       	mov    $0x8010dfc3,%eax
80108301:	0f 44 f0             	cmove  %eax,%esi
    cprintf("  op: %u (%s)\n", ntoh16(message->hdr.op), arp_opcode_ntop(message->hdr.op));
80108304:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
80108308:	83 ec 0c             	sub    $0xc,%esp
8010830b:	50                   	push   %eax
8010830c:	e8 8f 03 00 00       	call   801086a0 <ntoh16>
80108311:	83 c4 0c             	add    $0xc,%esp
80108314:	0f b7 c0             	movzwl %ax,%eax
80108317:	56                   	push   %esi
    cprintf(" sha: %s\n", ethernet_addr_ntop(message->sha, addr, sizeof(addr)));
80108318:	8d b5 78 ff ff ff    	lea    -0x88(%ebp),%esi
    cprintf("  op: %u (%s)\n", ntoh16(message->hdr.op), arp_opcode_ntop(message->hdr.op));
8010831e:	50                   	push   %eax
8010831f:	68 f9 df 10 80       	push   $0x8010dff9
80108324:	e8 67 80 ff ff       	call   80100390 <cprintf>
    cprintf(" sha: %s\n", ethernet_addr_ntop(message->sha, addr, sizeof(addr)));
80108329:	83 c4 0c             	add    $0xc,%esp
8010832c:	8d 43 08             	lea    0x8(%ebx),%eax
8010832f:	68 80 00 00 00       	push   $0x80
80108334:	56                   	push   %esi
80108335:	50                   	push   %eax
80108336:	e8 35 0c 00 00       	call   80108f70 <ethernet_addr_ntop>
8010833b:	5a                   	pop    %edx
8010833c:	59                   	pop    %ecx
8010833d:	50                   	push   %eax
8010833e:	68 08 e0 10 80       	push   $0x8010e008
80108343:	e8 48 80 ff ff       	call   80100390 <cprintf>
    cprintf(" spa: %s\n", ip_addr_ntop(&message->spa, addr, sizeof(addr)));
80108348:	83 c4 0c             	add    $0xc,%esp
8010834b:	8d 43 0e             	lea    0xe(%ebx),%eax
8010834e:	68 80 00 00 00       	push   $0x80
80108353:	56                   	push   %esi
80108354:	50                   	push   %eax
80108355:	e8 26 12 00 00       	call   80109580 <ip_addr_ntop>
8010835a:	5a                   	pop    %edx
8010835b:	59                   	pop    %ecx
8010835c:	50                   	push   %eax
8010835d:	68 12 e0 10 80       	push   $0x8010e012
80108362:	e8 29 80 ff ff       	call   80100390 <cprintf>
    cprintf(" tha: %s\n", ethernet_addr_ntop(message->tha, addr, sizeof(addr)));
80108367:	83 c4 0c             	add    $0xc,%esp
8010836a:	8d 43 12             	lea    0x12(%ebx),%eax
    cprintf(" tpa: %s\n", ip_addr_ntop(&message->tpa, addr, sizeof(addr)));
8010836d:	83 c3 18             	add    $0x18,%ebx
    cprintf(" tha: %s\n", ethernet_addr_ntop(message->tha, addr, sizeof(addr)));
80108370:	68 80 00 00 00       	push   $0x80
80108375:	56                   	push   %esi
80108376:	50                   	push   %eax
80108377:	e8 f4 0b 00 00       	call   80108f70 <ethernet_addr_ntop>
8010837c:	5a                   	pop    %edx
8010837d:	59                   	pop    %ecx
8010837e:	50                   	push   %eax
8010837f:	68 1c e0 10 80       	push   $0x8010e01c
80108384:	e8 07 80 ff ff       	call   80100390 <cprintf>
    cprintf(" tpa: %s\n", ip_addr_ntop(&message->tpa, addr, sizeof(addr)));
80108389:	83 c4 0c             	add    $0xc,%esp
8010838c:	68 80 00 00 00       	push   $0x80
80108391:	56                   	push   %esi
80108392:	53                   	push   %ebx
80108393:	e8 e8 11 00 00       	call   80109580 <ip_addr_ntop>
80108398:	5b                   	pop    %ebx
80108399:	5e                   	pop    %esi
8010839a:	50                   	push   %eax
8010839b:	68 26 e0 10 80       	push   $0x8010e026
801083a0:	e8 eb 7f ff ff       	call   80100390 <cprintf>
}
801083a5:	83 c4 10             	add    $0x10,%esp
801083a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
801083ab:	5b                   	pop    %ebx
801083ac:	5e                   	pop    %esi
801083ad:	5d                   	pop    %ebp
801083ae:	c3                   	ret    
801083af:	90                   	nop

801083b0 <arp_resolve>:

int
arp_resolve (struct netif *netif, const ip_addr_t *pa, uint8_t *ha, const void *data, size_t len) {
801083b0:	f3 0f 1e fb          	endbr32 
801083b4:	55                   	push   %ebp
801083b5:	89 e5                	mov    %esp,%ebp
801083b7:	57                   	push   %edi
801083b8:	56                   	push   %esi
801083b9:	53                   	push   %ebx
801083ba:	83 ec 18             	sub    $0x18,%esp
801083bd:	8b 7d 0c             	mov    0xc(%ebp),%edi
    struct arp_entry *entry;
    int ret;

    acquire(&arplock);
801083c0:	68 40 16 13 80       	push   $0x80131640
801083c5:	e8 e6 cc ff ff       	call   801050b0 <acquire>
801083ca:	83 c4 10             	add    $0x10,%esp
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
801083cd:	b8 40 16 11 80       	mov    $0x80111640,%eax
801083d2:	eb 0e                	jmp    801083e2 <arp_resolve+0x32>
801083d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801083d8:	83 c0 20             	add    $0x20,%eax
801083db:	3d 40 16 13 80       	cmp    $0x80131640,%eax
801083e0:	74 78                	je     8010845a <arp_resolve+0xaa>
        if (entry->used && entry->pa == *pa) {
801083e2:	80 38 00             	cmpb   $0x0,(%eax)
801083e5:	74 f1                	je     801083d8 <arp_resolve+0x28>
801083e7:	8b 0f                	mov    (%edi),%ecx
801083e9:	39 48 04             	cmp    %ecx,0x4(%eax)
801083ec:	75 ea                	jne    801083d8 <arp_resolve+0x28>
    entry = arp_table_select(pa);
    if (entry) {
        if (memcmp(entry->ha, ETHERNET_ADDR_ANY, ETHERNET_ADDR_LEN) == 0) {
801083ee:	83 ec 04             	sub    $0x4,%esp
801083f1:	8d 58 08             	lea    0x8(%eax),%ebx
801083f4:	6a 06                	push   $0x6
801083f6:	68 b0 e2 10 80       	push   $0x8010e2b0
801083fb:	53                   	push   %ebx
801083fc:	e8 0f ce ff ff       	call   80105210 <memcmp>
80108401:	83 c4 10             	add    $0x10,%esp
80108404:	89 c6                	mov    %eax,%esi
80108406:	85 c0                	test   %eax,%eax
80108408:	74 2c                	je     80108436 <arp_resolve+0x86>
            arp_send_request(netif, pa); /* just in case packet loss */
            release(&arplock);
            return ARP_RESOLVE_QUERY;
        }
        memcpy(ha, entry->ha, ETHERNET_ADDR_LEN);
8010840a:	83 ec 04             	sub    $0x4,%esp
        release(&arplock);
        return ARP_RESOLVE_FOUND;
8010840d:	be 01 00 00 00       	mov    $0x1,%esi
        memcpy(ha, entry->ha, ETHERNET_ADDR_LEN);
80108412:	6a 06                	push   $0x6
80108414:	53                   	push   %ebx
80108415:	ff 75 10             	pushl  0x10(%ebp)
80108418:	e8 a3 ce ff ff       	call   801052c0 <memcpy>
        release(&arplock);
8010841d:	c7 04 24 40 16 13 80 	movl   $0x80131640,(%esp)
80108424:	e8 47 cd ff ff       	call   80105170 <release>
        return ARP_RESOLVE_FOUND;
80108429:	83 c4 10             	add    $0x10,%esp
    time(&entry->timestamp);
    entry->netif = netif;
    arp_send_request(netif, pa);
    release(&arplock);
    return ARP_RESOLVE_QUERY;
}
8010842c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010842f:	89 f0                	mov    %esi,%eax
80108431:	5b                   	pop    %ebx
80108432:	5e                   	pop    %esi
80108433:	5f                   	pop    %edi
80108434:	5d                   	pop    %ebp
80108435:	c3                   	ret    
            arp_send_request(netif, pa); /* just in case packet loss */
80108436:	8b 45 08             	mov    0x8(%ebp),%eax
80108439:	89 fa                	mov    %edi,%edx
8010843b:	e8 a0 fa ff ff       	call   80107ee0 <arp_send_request>
            release(&arplock);
80108440:	83 ec 0c             	sub    $0xc,%esp
80108443:	68 40 16 13 80       	push   $0x80131640
80108448:	e8 23 cd ff ff       	call   80105170 <release>
            return ARP_RESOLVE_QUERY;
8010844d:	83 c4 10             	add    $0x10,%esp
}
80108450:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108453:	89 f0                	mov    %esi,%eax
80108455:	5b                   	pop    %ebx
80108456:	5e                   	pop    %esi
80108457:	5f                   	pop    %edi
80108458:	5d                   	pop    %ebp
80108459:	c3                   	ret    
8010845a:	bb 40 16 11 80       	mov    $0x80111640,%ebx
8010845f:	eb 12                	jmp    80108473 <arp_resolve+0xc3>
80108461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    for (entry = arp_table; entry < array_tailof(arp_table); entry++) {
80108468:	83 c3 20             	add    $0x20,%ebx
8010846b:	81 fb 40 16 13 80    	cmp    $0x80131640,%ebx
80108471:	74 41                	je     801084b4 <arp_resolve+0x104>
        if (!entry->used) {
80108473:	80 3b 00             	cmpb   $0x0,(%ebx)
80108476:	75 f0                	jne    80108468 <arp_resolve+0xb8>
    entry->used = 1;
80108478:	c6 03 01             	movb   $0x1,(%ebx)
    entry->pa = *pa;
8010847b:	8b 07                	mov    (%edi),%eax
    time(&entry->timestamp);
8010847d:	83 ec 0c             	sub    $0xc,%esp
    return ARP_RESOLVE_QUERY;
80108480:	31 f6                	xor    %esi,%esi
    entry->pa = *pa;
80108482:	89 43 04             	mov    %eax,0x4(%ebx)
    time(&entry->timestamp);
80108485:	8d 43 10             	lea    0x10(%ebx),%eax
80108488:	50                   	push   %eax
80108489:	e8 92 03 00 00       	call   80108820 <time>
    entry->netif = netif;
8010848e:	8b 45 08             	mov    0x8(%ebp),%eax
    arp_send_request(netif, pa);
80108491:	89 fa                	mov    %edi,%edx
    entry->netif = netif;
80108493:	89 43 1c             	mov    %eax,0x1c(%ebx)
    arp_send_request(netif, pa);
80108496:	e8 45 fa ff ff       	call   80107ee0 <arp_send_request>
    release(&arplock);
8010849b:	c7 04 24 40 16 13 80 	movl   $0x80131640,(%esp)
801084a2:	e8 c9 cc ff ff       	call   80105170 <release>
    return ARP_RESOLVE_QUERY;
801084a7:	83 c4 10             	add    $0x10,%esp
}
801084aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
801084ad:	89 f0                	mov    %esi,%eax
801084af:	5b                   	pop    %ebx
801084b0:	5e                   	pop    %esi
801084b1:	5f                   	pop    %edi
801084b2:	5d                   	pop    %ebp
801084b3:	c3                   	ret    
        release(&arplock);
801084b4:	83 ec 0c             	sub    $0xc,%esp
        return ARP_RESOLVE_ERROR;
801084b7:	be ff ff ff ff       	mov    $0xffffffff,%esi
        release(&arplock);
801084bc:	68 40 16 13 80       	push   $0x80131640
801084c1:	e8 aa cc ff ff       	call   80105170 <release>
        return ARP_RESOLVE_ERROR;
801084c6:	83 c4 10             	add    $0x10,%esp
801084c9:	e9 5e ff ff ff       	jmp    8010842c <arp_resolve+0x7c>
801084ce:	66 90                	xchg   %ax,%ax

801084d0 <arp_init>:

int
arp_init (void) {
801084d0:	f3 0f 1e fb          	endbr32 
801084d4:	55                   	push   %ebp
801084d5:	89 e5                	mov    %esp,%ebp
801084d7:	83 ec 14             	sub    $0x14,%esp
    struct arp_entry *entry;

    time(&timestamp);
801084da:	68 20 16 11 80       	push   $0x80111620
801084df:	e8 3c 03 00 00       	call   80108820 <time>
    initlock(&arplock, "arp");
801084e4:	58                   	pop    %eax
801084e5:	5a                   	pop    %edx
801084e6:	68 30 e0 10 80       	push   $0x8010e030
801084eb:	68 40 16 13 80       	push   $0x80131640
801084f0:	e8 3b ca ff ff       	call   80104f30 <initlock>
    netproto_register(NETPROTO_TYPE_ARP, arp_rx);
801084f5:	59                   	pop    %ecx
801084f6:	58                   	pop    %eax
801084f7:	68 a0 7f 10 80       	push   $0x80107fa0
801084fc:	68 06 08 00 00       	push   $0x806
80108501:	e8 0a 21 00 00       	call   8010a610 <netproto_register>
    return 0;
}
80108506:	31 c0                	xor    %eax,%eax
80108508:	c9                   	leave  
80108509:	c3                   	ret    
8010850a:	66 90                	xchg   %ax,%ax
8010850c:	66 90                	xchg   %ax,%ax
8010850e:	66 90                	xchg   %ax,%ax

80108510 <hexdump>:
#define isascii(x) ((x >= 0x00) && (x <= 0x7f))
#define isprint(x) ((x >= 0x20) && (x <= 0x7e))

void
hexdump(void *data, size_t size)
{
80108510:	f3 0f 1e fb          	endbr32 
80108514:	55                   	push   %ebp
80108515:	89 e5                	mov    %esp,%ebp
80108517:	57                   	push   %edi
80108518:	56                   	push   %esi
80108519:	53                   	push   %ebx
8010851a:	83 ec 28             	sub    $0x28,%esp
8010851d:	8b 45 08             	mov    0x8(%ebp),%eax
    int offset, index;
    unsigned char *src;

    src = (unsigned char *)data;
    cprintf("+------+-------------------------------------------------+------------------+\n");
80108520:	68 34 e0 10 80       	push   $0x8010e034
{
80108525:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108528:	8b 45 0c             	mov    0xc(%ebp),%eax
8010852b:	89 c6                	mov    %eax,%esi
8010852d:	89 45 dc             	mov    %eax,-0x24(%ebp)
    cprintf("+------+-------------------------------------------------+------------------+\n");
80108530:	e8 5b 7e ff ff       	call   80100390 <cprintf>
    for (offset = 0; offset < (int)size; offset += 16) {
80108535:	83 c4 10             	add    $0x10,%esp
80108538:	85 f6                	test   %esi,%esi
8010853a:	0f 8e ed 00 00 00    	jle    8010862d <hexdump+0x11d>
80108540:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
80108547:	be 10 00 00 00       	mov    $0x10,%esi
8010854c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        cprintf("| %04x | ", offset);
80108550:	8b 7d e0             	mov    -0x20(%ebp),%edi
80108553:	83 ec 08             	sub    $0x8,%esp
80108556:	57                   	push   %edi
80108557:	68 83 e0 10 80       	push   $0x8010e083
8010855c:	e8 2f 7e ff ff       	call   80100390 <cprintf>
80108561:	89 7d d8             	mov    %edi,-0x28(%ebp)
80108564:	8b 5d dc             	mov    -0x24(%ebp),%ebx
80108567:	83 c4 10             	add    $0x10,%esp
8010856a:	eb 23                	jmp    8010858f <hexdump+0x7f>
8010856c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        for (index = 0; index < 16; index++) {
            if (offset + index < (int)size) {
                cprintf("%02x ", 0xff & src[offset + index]);
80108570:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80108573:	83 ec 08             	sub    $0x8,%esp
80108576:	0f b6 04 38          	movzbl (%eax,%edi,1),%eax
8010857a:	83 c7 01             	add    $0x1,%edi
8010857d:	50                   	push   %eax
8010857e:	68 8d e0 10 80       	push   $0x8010e08d
80108583:	e8 08 7e ff ff       	call   80100390 <cprintf>
80108588:	83 c4 10             	add    $0x10,%esp
        for (index = 0; index < 16; index++) {
8010858b:	39 f7                	cmp    %esi,%edi
8010858d:	74 1b                	je     801085aa <hexdump+0x9a>
            if (offset + index < (int)size) {
8010858f:	39 df                	cmp    %ebx,%edi
80108591:	7c dd                	jl     80108570 <hexdump+0x60>
            } else {
                cprintf("   ");
80108593:	83 ec 0c             	sub    $0xc,%esp
80108596:	83 c7 01             	add    $0x1,%edi
80108599:	68 d6 db 10 80       	push   $0x8010dbd6
8010859e:	e8 ed 7d ff ff       	call   80100390 <cprintf>
801085a3:	83 c4 10             	add    $0x10,%esp
        for (index = 0; index < 16; index++) {
801085a6:	39 f7                	cmp    %esi,%edi
801085a8:	75 e5                	jne    8010858f <hexdump+0x7f>
            }
        }
        cprintf("| ");
801085aa:	83 ec 0c             	sub    $0xc,%esp
801085ad:	8b 5d d8             	mov    -0x28(%ebp),%ebx
801085b0:	68 8a e0 10 80       	push   $0x8010e08a
801085b5:	e8 d6 7d ff ff       	call   80100390 <cprintf>
801085ba:	8b 7d dc             	mov    -0x24(%ebp),%edi
801085bd:	83 c4 10             	add    $0x10,%esp
801085c0:	eb 1e                	jmp    801085e0 <hexdump+0xd0>
801085c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        for (index = 0; index < 16; index++) {
            if (offset + index < (int)size) {
                if (isascii(src[offset + index]) && isprint(src[offset + index])) {
                    cprintf("%c", src[offset + index]);
801085c8:	83 ec 08             	sub    $0x8,%esp
801085cb:	50                   	push   %eax
801085cc:	68 93 e0 10 80       	push   $0x8010e093
801085d1:	e8 ba 7d ff ff       	call   80100390 <cprintf>
801085d6:	83 c4 10             	add    $0x10,%esp
        for (index = 0; index < 16; index++) {
801085d9:	83 c3 01             	add    $0x1,%ebx
801085dc:	39 f3                	cmp    %esi,%ebx
801085de:	74 2a                	je     8010860a <hexdump+0xfa>
            if (offset + index < (int)size) {
801085e0:	39 fb                	cmp    %edi,%ebx
801085e2:	7d 5c                	jge    80108640 <hexdump+0x130>
                if (isascii(src[offset + index]) && isprint(src[offset + index])) {
801085e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801085e7:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
801085eb:	8d 48 e0             	lea    -0x20(%eax),%ecx
801085ee:	80 f9 5e             	cmp    $0x5e,%cl
801085f1:	76 d5                	jbe    801085c8 <hexdump+0xb8>
                } else {
                    cprintf(".");
801085f3:	83 ec 0c             	sub    $0xc,%esp
801085f6:	83 c3 01             	add    $0x1,%ebx
801085f9:	68 1c dd 10 80       	push   $0x8010dd1c
801085fe:	e8 8d 7d ff ff       	call   80100390 <cprintf>
80108603:	83 c4 10             	add    $0x10,%esp
        for (index = 0; index < 16; index++) {
80108606:	39 f3                	cmp    %esi,%ebx
80108608:	75 d6                	jne    801085e0 <hexdump+0xd0>
                }
            } else {
                cprintf(" ");
            }
        }
        cprintf(" |\n");
8010860a:	83 ec 0c             	sub    $0xc,%esp
8010860d:	83 c6 10             	add    $0x10,%esi
80108610:	68 96 e0 10 80       	push   $0x8010e096
80108615:	e8 76 7d ff ff       	call   80100390 <cprintf>
    for (offset = 0; offset < (int)size; offset += 16) {
8010861a:	83 45 e0 10          	addl   $0x10,-0x20(%ebp)
8010861e:	83 c4 10             	add    $0x10,%esp
80108621:	8b 45 e0             	mov    -0x20(%ebp),%eax
80108624:	3b 45 dc             	cmp    -0x24(%ebp),%eax
80108627:	0f 8c 23 ff ff ff    	jl     80108550 <hexdump+0x40>
    }
    cprintf("+------+-------------------------------------------------+------------------+\n");
8010862d:	c7 45 08 34 e0 10 80 	movl   $0x8010e034,0x8(%ebp)
}
80108634:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108637:	5b                   	pop    %ebx
80108638:	5e                   	pop    %esi
80108639:	5f                   	pop    %edi
8010863a:	5d                   	pop    %ebp
    cprintf("+------+-------------------------------------------------+------------------+\n");
8010863b:	e9 50 7d ff ff       	jmp    80100390 <cprintf>
                cprintf(" ");
80108640:	83 ec 0c             	sub    $0xc,%esp
80108643:	68 d8 db 10 80       	push   $0x8010dbd8
80108648:	e8 43 7d ff ff       	call   80100390 <cprintf>
8010864d:	83 c4 10             	add    $0x10,%esp
80108650:	eb 87                	jmp    801085d9 <hexdump+0xc9>
80108652:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80108660 <hton16>:
    return (v & 0x000000ff) << 24 | (v & 0x0000ff00) << 8 | (v & 0x00ff0000) >> 8 | (v & 0xff000000) >> 24;
}

uint16_t
hton16 (uint16_t h)
{
80108660:	f3 0f 1e fb          	endbr32 
80108664:	55                   	push   %ebp
    if (!endian)
80108665:	a1 78 16 13 80       	mov    0x80131678,%eax
{
8010866a:	89 e5                	mov    %esp,%ebp
8010866c:	8b 4d 08             	mov    0x8(%ebp),%ecx
    if (!endian)
8010866f:	85 c0                	test   %eax,%eax
80108671:	75 1d                	jne    80108690 <hton16+0x30>
        endian = byteorder();
80108673:	c7 05 78 16 13 80 d2 	movl   $0x4d2,0x80131678
8010867a:	04 00 00 
    return (v & 0x00ff) << 8 | (v & 0xff00 ) >> 8;
8010867d:	89 ca                	mov    %ecx,%edx
    return endian == __LITTLE_ENDIAN ? byteswap16(h) : h;
}
8010867f:	5d                   	pop    %ebp
80108680:	66 c1 c2 08          	rol    $0x8,%dx
80108684:	89 d0                	mov    %edx,%eax
80108686:	c3                   	ret    
80108687:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010868e:	66 90                	xchg   %ax,%ax
80108690:	89 ca                	mov    %ecx,%edx
    return endian == __LITTLE_ENDIAN ? byteswap16(h) : h;
80108692:	3d d2 04 00 00       	cmp    $0x4d2,%eax
80108697:	74 e4                	je     8010867d <hton16+0x1d>
}
80108699:	89 d0                	mov    %edx,%eax
8010869b:	5d                   	pop    %ebp
8010869c:	c3                   	ret    
8010869d:	8d 76 00             	lea    0x0(%esi),%esi

801086a0 <ntoh16>:
801086a0:	f3 0f 1e fb          	endbr32 
801086a4:	eb ba                	jmp    80108660 <hton16>
801086a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801086ad:	8d 76 00             	lea    0x0(%esi),%esi

801086b0 <hton32>:
    return endian == __LITTLE_ENDIAN ? byteswap16(n) : n;
}

uint32_t
hton32(uint32_t h)
{
801086b0:	f3 0f 1e fb          	endbr32 
801086b4:	55                   	push   %ebp
    if (!endian)
801086b5:	8b 15 78 16 13 80    	mov    0x80131678,%edx
{
801086bb:	89 e5                	mov    %esp,%ebp
801086bd:	8b 45 08             	mov    0x8(%ebp),%eax
    if (!endian)
801086c0:	85 d2                	test   %edx,%edx
801086c2:	75 14                	jne    801086d8 <hton32+0x28>
        endian = byteorder();
801086c4:	c7 05 78 16 13 80 d2 	movl   $0x4d2,0x80131678
801086cb:	04 00 00 
    return (v & 0x000000ff) << 24 | (v & 0x0000ff00) << 8 | (v & 0x00ff0000) >> 8 | (v & 0xff000000) >> 24;
801086ce:	0f c8                	bswap  %eax
    return endian == __LITTLE_ENDIAN ? byteswap32(h) : h;
}
801086d0:	5d                   	pop    %ebp
801086d1:	c3                   	ret    
801086d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    return endian == __LITTLE_ENDIAN ? byteswap32(h) : h;
801086d8:	81 fa d2 04 00 00    	cmp    $0x4d2,%edx
801086de:	74 ee                	je     801086ce <hton32+0x1e>
}
801086e0:	5d                   	pop    %ebp
801086e1:	c3                   	ret    
801086e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801086e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801086f0 <ntoh32>:
801086f0:	f3 0f 1e fb          	endbr32 
801086f4:	eb ba                	jmp    801086b0 <hton32>
801086f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801086fd:	8d 76 00             	lea    0x0(%esi),%esi

80108700 <cksum16>:
        endian = byteorder();
    return endian == __LITTLE_ENDIAN ? byteswap32(n) : n;
}

uint16_t
cksum16 (uint16_t *data, uint16_t size, uint32_t init) {
80108700:	f3 0f 1e fb          	endbr32 
80108704:	55                   	push   %ebp
80108705:	89 e5                	mov    %esp,%ebp
80108707:	56                   	push   %esi
80108708:	8b 75 0c             	mov    0xc(%ebp),%esi
8010870b:	8b 45 08             	mov    0x8(%ebp),%eax
8010870e:	53                   	push   %ebx
8010870f:	8b 55 10             	mov    0x10(%ebp),%edx
    uint32_t sum;

    sum = init;
    while(size > 1) {
80108712:	66 83 fe 01          	cmp    $0x1,%si
80108716:	76 48                	jbe    80108760 <cksum16+0x60>
80108718:	8d 4e fe             	lea    -0x2(%esi),%ecx
8010871b:	66 d1 e9             	shr    %cx
8010871e:	0f b7 c9             	movzwl %cx,%ecx
80108721:	8d 5c 48 02          	lea    0x2(%eax,%ecx,2),%ebx
80108725:	8d 76 00             	lea    0x0(%esi),%esi
        sum += *(data++);
80108728:	0f b7 08             	movzwl (%eax),%ecx
8010872b:	83 c0 02             	add    $0x2,%eax
8010872e:	01 ca                	add    %ecx,%edx
    while(size > 1) {
80108730:	39 c3                	cmp    %eax,%ebx
80108732:	75 f4                	jne    80108728 <cksum16+0x28>
80108734:	89 f1                	mov    %esi,%ecx
80108736:	83 e1 01             	and    $0x1,%ecx
        size -= 2;
    }
    if(size) {
80108739:	66 85 c9             	test   %cx,%cx
8010873c:	74 05                	je     80108743 <cksum16+0x43>
        sum += *(uint8_t *)data;
8010873e:	0f b6 03             	movzbl (%ebx),%eax
80108741:	01 c2                	add    %eax,%edx
    }
    sum  = (sum & 0xffff) + (sum >> 16);
80108743:	0f b7 c2             	movzwl %dx,%eax
80108746:	c1 ea 10             	shr    $0x10,%edx
    sum  = (sum & 0xffff) + (sum >> 16);
    return ~(uint16_t)sum;
}
80108749:	5b                   	pop    %ebx
8010874a:	5e                   	pop    %esi
    sum  = (sum & 0xffff) + (sum >> 16);
8010874b:	01 c2                	add    %eax,%edx
}
8010874d:	5d                   	pop    %ebp
    sum  = (sum & 0xffff) + (sum >> 16);
8010874e:	89 d0                	mov    %edx,%eax
80108750:	c1 e8 10             	shr    $0x10,%eax
80108753:	01 d0                	add    %edx,%eax
    return ~(uint16_t)sum;
80108755:	f7 d0                	not    %eax
}
80108757:	c3                   	ret    
80108758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010875f:	90                   	nop
80108760:	89 f1                	mov    %esi,%ecx
    while(size > 1) {
80108762:	89 c3                	mov    %eax,%ebx
80108764:	eb d3                	jmp    80108739 <cksum16+0x39>
80108766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010876d:	8d 76 00             	lea    0x0(%esi),%esi

80108770 <queue_push>:

struct queue_entry *
queue_push (struct queue_head *queue, void *data, size_t size) {
80108770:	f3 0f 1e fb          	endbr32 
80108774:	55                   	push   %ebp
80108775:	89 e5                	mov    %esp,%ebp
80108777:	56                   	push   %esi
80108778:	8b 75 08             	mov    0x8(%ebp),%esi
8010877b:	53                   	push   %ebx
8010877c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    struct queue_entry *entry;

    if (!queue || !data) {
8010877f:	85 f6                	test   %esi,%esi
80108781:	74 3d                	je     801087c0 <queue_push+0x50>
80108783:	85 db                	test   %ebx,%ebx
80108785:	74 39                	je     801087c0 <queue_push+0x50>
        return NULL;
    }
    entry = (struct queue_entry *)kalloc();
80108787:	e8 84 9d ff ff       	call   80102510 <kalloc>
    if (!entry) {
8010878c:	85 c0                	test   %eax,%eax
8010878e:	74 30                	je     801087c0 <queue_push+0x50>
        return NULL;
    }
    entry->data = data;
    entry->size = size;
80108790:	8b 55 10             	mov    0x10(%ebp),%edx
    entry->data = data;
80108793:	89 18                	mov    %ebx,(%eax)
    entry->next = NULL;
80108795:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    entry->size = size;
8010879c:	89 50 04             	mov    %edx,0x4(%eax)
    if (queue->tail) {
8010879f:	8b 56 04             	mov    0x4(%esi),%edx
801087a2:	85 d2                	test   %edx,%edx
801087a4:	74 03                	je     801087a9 <queue_push+0x39>
        queue->tail->next = entry;
801087a6:	89 42 08             	mov    %eax,0x8(%edx)
    }
    queue->tail = entry;
    if (!queue->next) {
801087a9:	8b 16                	mov    (%esi),%edx
    queue->tail = entry;
801087ab:	89 46 04             	mov    %eax,0x4(%esi)
    if (!queue->next) {
801087ae:	85 d2                	test   %edx,%edx
801087b0:	74 1e                	je     801087d0 <queue_push+0x60>
        queue->next = entry;
    }
    queue->num++;
801087b2:	83 46 08 01          	addl   $0x1,0x8(%esi)
    return entry;
}
801087b6:	5b                   	pop    %ebx
801087b7:	5e                   	pop    %esi
801087b8:	5d                   	pop    %ebp
801087b9:	c3                   	ret    
801087ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801087c0:	5b                   	pop    %ebx
        return NULL;
801087c1:	31 c0                	xor    %eax,%eax
}
801087c3:	5e                   	pop    %esi
801087c4:	5d                   	pop    %ebp
801087c5:	c3                   	ret    
801087c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801087cd:	8d 76 00             	lea    0x0(%esi),%esi
        queue->next = entry;
801087d0:	89 06                	mov    %eax,(%esi)
801087d2:	eb de                	jmp    801087b2 <queue_push+0x42>
801087d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801087db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801087df:	90                   	nop

801087e0 <queue_pop>:

struct queue_entry *
queue_pop (struct queue_head *queue) {
801087e0:	f3 0f 1e fb          	endbr32 
801087e4:	55                   	push   %ebp
801087e5:	89 e5                	mov    %esp,%ebp
801087e7:	8b 45 08             	mov    0x8(%ebp),%eax
    struct queue_entry *entry;

    if (!queue || !queue->next) {
801087ea:	85 c0                	test   %eax,%eax
801087ec:	74 2a                	je     80108818 <queue_pop+0x38>
801087ee:	8b 10                	mov    (%eax),%edx
801087f0:	85 d2                	test   %edx,%edx
801087f2:	74 0d                	je     80108801 <queue_pop+0x21>
        return NULL;
    }
    entry = queue->next;
    queue->next = entry->next;
801087f4:	8b 4a 08             	mov    0x8(%edx),%ecx
801087f7:	89 08                	mov    %ecx,(%eax)
    if (!queue->next) {
801087f9:	85 c9                	test   %ecx,%ecx
801087fb:	74 0b                	je     80108808 <queue_pop+0x28>
        queue->tail = NULL;
    }
    queue->num--;
801087fd:	83 68 08 01          	subl   $0x1,0x8(%eax)
    return entry;
}
80108801:	89 d0                	mov    %edx,%eax
80108803:	5d                   	pop    %ebp
80108804:	c3                   	ret    
80108805:	8d 76 00             	lea    0x0(%esi),%esi
        queue->tail = NULL;
80108808:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
8010880f:	eb ec                	jmp    801087fd <queue_pop+0x1d>
80108811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        return NULL;
80108818:	31 d2                	xor    %edx,%edx
8010881a:	eb e5                	jmp    80108801 <queue_pop+0x21>
8010881c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80108820 <time>:

time_t
time(time_t *t)
{
80108820:	f3 0f 1e fb          	endbr32 
80108824:	55                   	push   %ebp
80108825:	89 e5                	mov    %esp,%ebp
80108827:	56                   	push   %esi
80108828:	53                   	push   %ebx
80108829:	8b 75 08             	mov    0x8(%ebp),%esi
    time_t tmp;
    acquire(&tickslock);
8010882c:	83 ec 0c             	sub    $0xc,%esp
8010882f:	68 a0 09 14 80       	push   $0x801409a0
80108834:	e8 77 c8 ff ff       	call   801050b0 <acquire>
    tmp = ticks / 100;
80108839:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    release(&tickslock);
8010883e:	c7 04 24 a0 09 14 80 	movl   $0x801409a0,(%esp)
    tmp = ticks / 100;
80108845:	89 d0                	mov    %edx,%eax
80108847:	f7 25 e0 11 14 80    	mull   0x801411e0
8010884d:	89 d3                	mov    %edx,%ebx
    release(&tickslock);
8010884f:	e8 1c c9 ff ff       	call   80105170 <release>
    tmp = ticks / 100;
80108854:	c1 eb 05             	shr    $0x5,%ebx
    if (t) *t = tmp;
80108857:	83 c4 10             	add    $0x10,%esp
8010885a:	85 f6                	test   %esi,%esi
8010885c:	74 02                	je     80108860 <time+0x40>
8010885e:	89 1e                	mov    %ebx,(%esi)
    return tmp;
}
80108860:	8d 65 f8             	lea    -0x8(%ebp),%esp
80108863:	89 d8                	mov    %ebx,%eax
80108865:	5b                   	pop    %ebx
80108866:	5e                   	pop    %esi
80108867:	5d                   	pop    %ebp
80108868:	c3                   	ret    
80108869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80108870 <random>:

unsigned long
random(void)
{
80108870:	f3 0f 1e fb          	endbr32 
    static int initialized = 0;

    if (!initialized) {
80108874:	8b 15 74 16 13 80    	mov    0x80131674,%edx
8010887a:	85 d2                	test   %edx,%edx
8010887c:	74 0a                	je     80108888 <random+0x18>
            initialized = 1;
            init_genrand(ticks);
        }
        release(&tickslock);
    }
    return genrand_int32();
8010887e:	e9 ad 18 00 00       	jmp    8010a130 <genrand_int32>
80108883:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108887:	90                   	nop
{
80108888:	55                   	push   %ebp
80108889:	89 e5                	mov    %esp,%ebp
8010888b:	83 ec 14             	sub    $0x14,%esp
        acquire(&tickslock);
8010888e:	68 a0 09 14 80       	push   $0x801409a0
80108893:	e8 18 c8 ff ff       	call   801050b0 <acquire>
        if (!initialized) {
80108898:	a1 74 16 13 80       	mov    0x80131674,%eax
8010889d:	83 c4 10             	add    $0x10,%esp
801088a0:	85 c0                	test   %eax,%eax
801088a2:	74 1c                	je     801088c0 <random+0x50>
        release(&tickslock);
801088a4:	83 ec 0c             	sub    $0xc,%esp
801088a7:	68 a0 09 14 80       	push   $0x801409a0
801088ac:	e8 bf c8 ff ff       	call   80105170 <release>
801088b1:	83 c4 10             	add    $0x10,%esp
}
801088b4:	c9                   	leave  
    return genrand_int32();
801088b5:	e9 76 18 00 00       	jmp    8010a130 <genrand_int32>
801088ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            initialized = 1;
801088c0:	c7 05 74 16 13 80 01 	movl   $0x1,0x80131674
801088c7:	00 00 00 
            init_genrand(ticks);
801088ca:	83 ec 0c             	sub    $0xc,%esp
801088cd:	ff 35 e0 11 14 80    	pushl  0x801411e0
801088d3:	e8 d8 16 00 00       	call   80109fb0 <init_genrand>
801088d8:	83 c4 10             	add    $0x10,%esp
801088db:	eb c7                	jmp    801088a4 <random+0x34>
801088dd:	66 90                	xchg   %ax,%ax
801088df:	90                   	nop

801088e0 <e1000_open>:
    );
}

static int
e1000_open(struct netdev *netdev)
{
801088e0:	f3 0f 1e fb          	endbr32 
801088e4:	55                   	push   %ebp
801088e5:	89 e5                	mov    %esp,%ebp
801088e7:	53                   	push   %ebx
801088e8:	8b 55 08             	mov    0x8(%ebp),%edx
    struct e1000 *dev = (struct e1000 *)netdev->priv;
801088eb:	8b 42 5c             	mov    0x5c(%edx),%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
801088ee:	8b 08                	mov    (%eax),%ecx
801088f0:	c7 81 d0 00 00 00 80 	movl   $0x80,0xd0(%ecx)
801088f7:	00 00 00 
    return *(volatile uint32_t *)(dev->mmio_base + reg);
801088fa:	8b 08                	mov    (%eax),%ecx
801088fc:	8b 99 c0 00 00 00    	mov    0xc0(%ecx),%ebx
80108902:	8b 99 00 01 00 00    	mov    0x100(%ecx),%ebx
    // enable interrupts
    e1000_reg_write(dev, E1000_IMS, E1000_IMS_RXT0);
    // clear existing pending interrupts
    e1000_reg_read(dev, E1000_ICR);
    // enable RX/TX
    e1000_reg_write(dev, E1000_RCTL, e1000_reg_read(dev, E1000_RCTL) | E1000_RCTL_EN);
80108908:	83 cb 02             	or     $0x2,%ebx
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
8010890b:	89 99 00 01 00 00    	mov    %ebx,0x100(%ecx)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108911:	8b 18                	mov    (%eax),%ebx
80108913:	8b 8b 00 04 00 00    	mov    0x400(%ebx),%ecx
    e1000_reg_write(dev, E1000_TCTL, e1000_reg_read(dev, E1000_TCTL) | E1000_TCTL_EN);
80108919:	83 c9 02             	or     $0x2,%ecx
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
8010891c:	89 8b 00 04 00 00    	mov    %ecx,0x400(%ebx)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108922:	8b 08                	mov    (%eax),%ecx
80108924:	8b 01                	mov    (%ecx),%eax
    // link up
    e1000_reg_write(dev, E1000_CTL, e1000_reg_read(dev, E1000_CTL) | E1000_CTL_SLU);
80108926:	83 c8 40             	or     $0x40,%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108929:	89 01                	mov    %eax,(%ecx)
    netdev->flags |= NETDEV_FLAG_UP;
    return 0;
}
8010892b:	31 c0                	xor    %eax,%eax
    netdev->flags |= NETDEV_FLAG_UP;
8010892d:	66 83 4a 20 01       	orw    $0x1,0x20(%edx)
}
80108932:	5b                   	pop    %ebx
80108933:	5d                   	pop    %ebp
80108934:	c3                   	ret    
80108935:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010893c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80108940 <e1000_stop>:

static int
e1000_stop(struct netdev *netdev)
{
80108940:	f3 0f 1e fb          	endbr32 
80108944:	55                   	push   %ebp
80108945:	89 e5                	mov    %esp,%ebp
80108947:	53                   	push   %ebx
80108948:	8b 55 08             	mov    0x8(%ebp),%edx
    struct e1000 *dev = (struct e1000 *)netdev->priv;
8010894b:	8b 42 5c             	mov    0x5c(%edx),%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
8010894e:	8b 08                	mov    (%eax),%ecx
80108950:	c7 81 d8 00 00 00 80 	movl   $0x80,0xd8(%ecx)
80108957:	00 00 00 
    return *(volatile uint32_t *)(dev->mmio_base + reg);
8010895a:	8b 08                	mov    (%eax),%ecx
8010895c:	8b 99 c0 00 00 00    	mov    0xc0(%ecx),%ebx
80108962:	8b 99 00 01 00 00    	mov    0x100(%ecx),%ebx
    // disable interrupts
    e1000_reg_write(dev, E1000_IMC, E1000_IMS_RXT0);
    // clear existing pending interrupts
    e1000_reg_read(dev, E1000_ICR);
    // disable RX/TX
    e1000_reg_write(dev, E1000_RCTL, e1000_reg_read(dev, E1000_RCTL) & ~E1000_RCTL_EN);
80108968:	83 e3 fd             	and    $0xfffffffd,%ebx
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
8010896b:	89 99 00 01 00 00    	mov    %ebx,0x100(%ecx)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108971:	8b 18                	mov    (%eax),%ebx
80108973:	8b 8b 00 04 00 00    	mov    0x400(%ebx),%ecx
    e1000_reg_write(dev, E1000_TCTL, e1000_reg_read(dev, E1000_TCTL) & ~E1000_TCTL_EN);
80108979:	83 e1 fd             	and    $0xfffffffd,%ecx
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
8010897c:	89 8b 00 04 00 00    	mov    %ecx,0x400(%ebx)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108982:	8b 08                	mov    (%eax),%ecx
80108984:	8b 01                	mov    (%ecx),%eax
    // link down
    e1000_reg_write(dev, E1000_CTL, e1000_reg_read(dev, E1000_CTL) & ~E1000_CTL_SLU);
80108986:	83 e0 bf             	and    $0xffffffbf,%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108989:	89 01                	mov    %eax,(%ecx)
    netdev->flags &= ~NETDEV_FLAG_UP;
    return 0;
}
8010898b:	31 c0                	xor    %eax,%eax
    netdev->flags &= ~NETDEV_FLAG_UP;
8010898d:	66 83 62 20 fe       	andw   $0xfffe,0x20(%edx)
}
80108992:	5b                   	pop    %ebx
80108993:	5d                   	pop    %ebp
80108994:	c3                   	ret    
80108995:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010899c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801089a0 <e1000_setup>:
#endif
}

void
e1000_setup(struct netdev *dev)
{
801089a0:	f3 0f 1e fb          	endbr32 
    ethernet_netdev_setup(dev);
801089a4:	e9 77 07 00 00       	jmp    80109120 <ethernet_netdev_setup>
801089a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801089b0 <e1000_tx>:
{
801089b0:	f3 0f 1e fb          	endbr32 
801089b4:	55                   	push   %ebp
801089b5:	89 e5                	mov    %esp,%ebp
801089b7:	83 ec 10             	sub    $0x10,%esp
    return ethernet_tx_helper(dev, type, packet, len, dst, e1000_tx_cb);
801089ba:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
801089be:	68 e0 89 10 80       	push   $0x801089e0
801089c3:	ff 75 18             	pushl  0x18(%ebp)
801089c6:	ff 75 14             	pushl  0x14(%ebp)
801089c9:	ff 75 10             	pushl  0x10(%ebp)
801089cc:	50                   	push   %eax
801089cd:	ff 75 08             	pushl  0x8(%ebp)
801089d0:	e8 7b 06 00 00       	call   80109050 <ethernet_tx_helper>
}
801089d5:	c9                   	leave  
801089d6:	c3                   	ret    
801089d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801089de:	66 90                	xchg   %ax,%ax

801089e0 <e1000_tx_cb>:
{
801089e0:	f3 0f 1e fb          	endbr32 
801089e4:	55                   	push   %ebp
801089e5:	89 e5                	mov    %esp,%ebp
801089e7:	57                   	push   %edi
801089e8:	56                   	push   %esi
801089e9:	53                   	push   %ebx
801089ea:	83 ec 20             	sub    $0x20,%esp
    struct e1000 *dev = (struct e1000 *)netdev->priv;
801089ed:	8b 45 08             	mov    0x8(%ebp),%eax
{
801089f0:	8b 7d 10             	mov    0x10(%ebp),%edi
    struct e1000 *dev = (struct e1000 *)netdev->priv;
801089f3:	8b 50 5c             	mov    0x5c(%eax),%edx
    return *(volatile uint32_t *)(dev->mmio_base + reg);
801089f6:	8b 02                	mov    (%edx),%eax
    cprintf("[e1000] %s: %u bytes data transmit\n", dev->netdev->name, desc->length);
801089f8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
801089fb:	8b b0 18 38 00 00    	mov    0x3818(%eax),%esi
    desc->addr = (uint64_t)V2P(data);
80108a01:	8b 45 0c             	mov    0xc(%ebp),%eax
80108a04:	89 f1                	mov    %esi,%ecx
80108a06:	05 00 00 00 80       	add    $0x80000000,%eax
    e1000_reg_write(dev, E1000_TDT, (tail + 1) % TX_RING_SIZE);
80108a0b:	83 c6 01             	add    $0x1,%esi
80108a0e:	c1 e1 04             	shl    $0x4,%ecx
80108a11:	83 e6 0f             	and    $0xf,%esi
    desc->addr = (uint64_t)V2P(data);
80108a14:	89 84 0a 10 01 00 00 	mov    %eax,0x110(%edx,%ecx,1)
80108a1b:	8d 1c 0a             	lea    (%edx,%ecx,1),%ebx
    desc->cmd = (E1000_TXD_CMD_EOP | E1000_TXD_CMD_RS);
80108a1e:	b8 09 00 00 00       	mov    $0x9,%eax
    desc->addr = (uint64_t)V2P(data);
80108a23:	c7 84 0a 14 01 00 00 	movl   $0x0,0x114(%edx,%ecx,1)
80108a2a:	00 00 00 00 
    desc->cmd = (E1000_TXD_CMD_EOP | E1000_TXD_CMD_RS);
80108a2e:	66 89 83 1b 01 00 00 	mov    %ax,0x11b(%ebx)
    cprintf("[e1000] %s: %u bytes data transmit\n", dev->netdev->name, desc->length);
80108a35:	0f b7 c7             	movzwl %di,%eax
    desc->length = len;
80108a38:	66 89 bb 18 01 00 00 	mov    %di,0x118(%ebx)
    cprintf("[e1000] %s: %u bytes data transmit\n", dev->netdev->name, desc->length);
80108a3f:	50                   	push   %eax
80108a40:	8b 82 18 02 00 00    	mov    0x218(%edx),%eax
80108a46:	83 c0 0c             	add    $0xc,%eax
80108a49:	50                   	push   %eax
80108a4a:	68 9c e0 10 80       	push   $0x8010e09c
80108a4f:	e8 3c 79 ff ff       	call   80100390 <cprintf>
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108a54:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    while(!(desc->status & 0x0f)) {
80108a57:	83 c4 10             	add    $0x10,%esp
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108a5a:	8b 02                	mov    (%edx),%eax
80108a5c:	89 b0 18 38 00 00    	mov    %esi,0x3818(%eax)
    while(!(desc->status & 0x0f)) {
80108a62:	f6 83 1c 01 00 00 0f 	testb  $0xf,0x11c(%ebx)
80108a69:	75 1b                	jne    80108a86 <e1000_tx_cb+0xa6>
80108a6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108a6f:	90                   	nop
        microdelay(1);
80108a70:	83 ec 0c             	sub    $0xc,%esp
80108a73:	6a 01                	push   $0x1
80108a75:	e8 46 9d ff ff       	call   801027c0 <microdelay>
    while(!(desc->status & 0x0f)) {
80108a7a:	83 c4 10             	add    $0x10,%esp
80108a7d:	f6 83 1c 01 00 00 0f 	testb  $0xf,0x11c(%ebx)
80108a84:	74 ea                	je     80108a70 <e1000_tx_cb+0x90>
}
80108a86:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108a89:	89 f8                	mov    %edi,%eax
80108a8b:	5b                   	pop    %ebx
80108a8c:	5e                   	pop    %esi
80108a8d:	5f                   	pop    %edi
80108a8e:	5d                   	pop    %ebp
80108a8f:	c3                   	ret    

80108a90 <e1000_reg_read>:
{
80108a90:	f3 0f 1e fb          	endbr32 
80108a94:	55                   	push   %ebp
80108a95:	89 e5                	mov    %esp,%ebp
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108a97:	8b 55 08             	mov    0x8(%ebp),%edx
80108a9a:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
}
80108a9e:	5d                   	pop    %ebp
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108a9f:	03 02                	add    (%edx),%eax
80108aa1:	8b 00                	mov    (%eax),%eax
}
80108aa3:	c3                   	ret    
80108aa4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108aaf:	90                   	nop

80108ab0 <e1000_reg_write>:
{
80108ab0:	f3 0f 1e fb          	endbr32 
80108ab4:	55                   	push   %ebp
80108ab5:	89 e5                	mov    %esp,%ebp
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108ab7:	8b 55 08             	mov    0x8(%ebp),%edx
80108aba:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
80108abe:	03 02                	add    (%edx),%eax
80108ac0:	8b 55 10             	mov    0x10(%ebp),%edx
80108ac3:	89 10                	mov    %edx,(%eax)
}
80108ac5:	5d                   	pop    %ebp
80108ac6:	c3                   	ret    
80108ac7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108ace:	66 90                	xchg   %ax,%ax

80108ad0 <e1000intr>:
{
80108ad0:	f3 0f 1e fb          	endbr32 
80108ad4:	55                   	push   %ebp
80108ad5:	89 e5                	mov    %esp,%ebp
80108ad7:	57                   	push   %edi
80108ad8:	56                   	push   %esi
80108ad9:	53                   	push   %ebx
80108ada:	83 ec 18             	sub    $0x18,%esp
    cprintf("[e1000] interrupt: etner\n");
80108add:	68 22 e2 10 80       	push   $0x8010e222
80108ae2:	e8 a9 78 ff ff       	call   80100390 <cprintf>
    for (dev = devices; dev; dev = dev->next) {
80108ae7:	8b 35 7c 16 13 80    	mov    0x8013167c,%esi
80108aed:	83 c4 10             	add    $0x10,%esp
80108af0:	85 f6                	test   %esi,%esi
80108af2:	75 1a                	jne    80108b0e <e1000intr+0x3e>
80108af4:	e9 43 01 00 00       	jmp    80108c3c <e1000intr+0x16c>
80108af9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108b00:	8b b6 1c 02 00 00    	mov    0x21c(%esi),%esi
80108b06:	85 f6                	test   %esi,%esi
80108b08:	0f 84 2e 01 00 00    	je     80108c3c <e1000intr+0x16c>
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108b0e:	8b 06                	mov    (%esi),%eax
80108b10:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
        if (icr & E1000_ICR_RXT0) {
80108b16:	a8 80                	test   $0x80,%al
80108b18:	74 e6                	je     80108b00 <e1000intr+0x30>
    cprintf("[e1000] %s: check rx descriptors...\n", dev->netdev->name);
80108b1a:	8b 86 18 02 00 00    	mov    0x218(%esi),%eax
80108b20:	83 ec 08             	sub    $0x8,%esp
80108b23:	83 c0 0c             	add    $0xc,%eax
80108b26:	50                   	push   %eax
80108b27:	68 c0 e0 10 80       	push   $0x8010e0c0
80108b2c:	e8 5f 78 ff ff       	call   80100390 <cprintf>
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108b31:	8b 06                	mov    (%esi),%eax
        if (!(desc->status & E1000_RXD_STAT_DD)) {
80108b33:	83 c4 10             	add    $0x10,%esp
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108b36:	8b 98 18 28 00 00    	mov    0x2818(%eax),%ebx
        uint32_t tail = (e1000_reg_read(dev, E1000_RDT)+1) % RX_RING_SIZE;
80108b3c:	83 c3 01             	add    $0x1,%ebx
80108b3f:	83 e3 0f             	and    $0xf,%ebx
        if (!(desc->status & E1000_RXD_STAT_DD)) {
80108b42:	89 da                	mov    %ebx,%edx
80108b44:	c1 e2 04             	shl    $0x4,%edx
80108b47:	0f b6 54 32 1c       	movzbl 0x1c(%edx,%esi,1),%edx
80108b4c:	f6 c2 01             	test   $0x1,%dl
80108b4f:	75 5a                	jne    80108bab <e1000intr+0xdb>
80108b51:	e9 d2 00 00 00       	jmp    80108c28 <e1000intr+0x158>
80108b56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108b5d:	8d 76 00             	lea    0x0(%esi),%esi
            if (!(desc->status & E1000_RXD_STAT_EOP)) {
80108b60:	83 e2 02             	and    $0x2,%edx
80108b63:	0f 84 a7 00 00 00    	je     80108c10 <e1000intr+0x140>
            if (desc->errors) {
80108b69:	0f b6 57 1d          	movzbl 0x1d(%edi),%edx
80108b6d:	84 d2                	test   %dl,%dl
80108b6f:	74 5f                	je     80108bd0 <e1000intr+0x100>
                cprintf("[e1000] rx errors (0x%x)\n", desc->errors);
80108b71:	83 ec 08             	sub    $0x8,%esp
80108b74:	52                   	push   %edx
80108b75:	68 3c e2 10 80       	push   $0x8010e23c
80108b7a:	e8 11 78 ff ff       	call   80100390 <cprintf>
                break;
80108b7f:	83 c4 10             	add    $0x10,%esp
        desc->status = (uint16_t)(0);
80108b82:	c6 47 1c 00          	movb   $0x0,0x1c(%edi)
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108b86:	8b 06                	mov    (%esi),%eax
80108b88:	89 98 18 28 00 00    	mov    %ebx,0x2818(%eax)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108b8e:	8b 06                	mov    (%esi),%eax
80108b90:	8b 98 18 28 00 00    	mov    0x2818(%eax),%ebx
        uint32_t tail = (e1000_reg_read(dev, E1000_RDT)+1) % RX_RING_SIZE;
80108b96:	83 c3 01             	add    $0x1,%ebx
80108b99:	83 e3 0f             	and    $0xf,%ebx
        if (!(desc->status & E1000_RXD_STAT_DD)) {
80108b9c:	89 da                	mov    %ebx,%edx
80108b9e:	c1 e2 04             	shl    $0x4,%edx
80108ba1:	0f b6 54 32 1c       	movzbl 0x1c(%edx,%esi,1),%edx
80108ba6:	f6 c2 01             	test   $0x1,%dl
80108ba9:	74 7d                	je     80108c28 <e1000intr+0x158>
            if (desc->length < 60) {
80108bab:	89 df                	mov    %ebx,%edi
80108bad:	c1 e7 04             	shl    $0x4,%edi
80108bb0:	01 f7                	add    %esi,%edi
80108bb2:	0f b7 47 18          	movzwl 0x18(%edi),%eax
80108bb6:	66 83 f8 3b          	cmp    $0x3b,%ax
80108bba:	77 a4                	ja     80108b60 <e1000intr+0x90>
                cprintf("[e1000] short packet (%d bytes)\n", desc->length);
80108bbc:	83 ec 08             	sub    $0x8,%esp
80108bbf:	50                   	push   %eax
80108bc0:	68 e8 e0 10 80       	push   $0x8010e0e8
80108bc5:	e8 c6 77 ff ff       	call   80100390 <cprintf>
                break;
80108bca:	83 c4 10             	add    $0x10,%esp
80108bcd:	eb b3                	jmp    80108b82 <e1000intr+0xb2>
80108bcf:	90                   	nop
            cprintf("[e1000] %s: %u bytes data received\n", dev->netdev->name, desc->length);
80108bd0:	83 ec 04             	sub    $0x4,%esp
80108bd3:	50                   	push   %eax
80108bd4:	8b 86 18 02 00 00    	mov    0x218(%esi),%eax
80108bda:	83 c0 0c             	add    $0xc,%eax
80108bdd:	50                   	push   %eax
80108bde:	68 60 e1 10 80       	push   $0x8010e160
80108be3:	e8 a8 77 ff ff       	call   80100390 <cprintf>
            ethernet_rx_helper(dev->netdev, P2V((uint32_t)desc->addr), desc->length, netdev_receive);
80108be8:	68 c0 a4 10 80       	push   $0x8010a4c0
80108bed:	0f b7 47 18          	movzwl 0x18(%edi),%eax
80108bf1:	50                   	push   %eax
80108bf2:	8b 47 10             	mov    0x10(%edi),%eax
80108bf5:	05 00 00 00 80       	add    $0x80000000,%eax
80108bfa:	50                   	push   %eax
80108bfb:	ff b6 18 02 00 00    	pushl  0x218(%esi)
80108c01:	e8 ca 03 00 00       	call   80108fd0 <ethernet_rx_helper>
80108c06:	83 c4 20             	add    $0x20,%esp
80108c09:	e9 74 ff ff ff       	jmp    80108b82 <e1000intr+0xb2>
80108c0e:	66 90                	xchg   %ax,%ax
                cprintf("[e1000] not EOP! this driver does not support packet that do not fit in one buffer\n");
80108c10:	83 ec 0c             	sub    $0xc,%esp
80108c13:	68 0c e1 10 80       	push   $0x8010e10c
80108c18:	e8 73 77 ff ff       	call   80100390 <cprintf>
                break;
80108c1d:	83 c4 10             	add    $0x10,%esp
80108c20:	e9 5d ff ff ff       	jmp    80108b82 <e1000intr+0xb2>
80108c25:	8d 76 00             	lea    0x0(%esi),%esi
    for (dev = devices; dev; dev = dev->next) {
80108c28:	8b b6 1c 02 00 00    	mov    0x21c(%esi),%esi
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108c2e:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
    for (dev = devices; dev; dev = dev->next) {
80108c34:	85 f6                	test   %esi,%esi
80108c36:	0f 85 d2 fe ff ff    	jne    80108b0e <e1000intr+0x3e>
    cprintf("[e1000] interrupt: leave\n");
80108c3c:	83 ec 0c             	sub    $0xc,%esp
80108c3f:	68 56 e2 10 80       	push   $0x8010e256
80108c44:	e8 47 77 ff ff       	call   80100390 <cprintf>
}
80108c49:	83 c4 10             	add    $0x10,%esp
80108c4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108c4f:	5b                   	pop    %ebx
80108c50:	5e                   	pop    %esi
80108c51:	5f                   	pop    %edi
80108c52:	5d                   	pop    %ebp
80108c53:	c3                   	ret    
80108c54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108c5f:	90                   	nop

80108c60 <e1000_init>:
    .xmit = e1000_tx,
};

int
e1000_init(struct pci_func *pcif)
{
80108c60:	f3 0f 1e fb          	endbr32 
80108c64:	55                   	push   %ebp
80108c65:	89 e5                	mov    %esp,%ebp
80108c67:	57                   	push   %edi
80108c68:	56                   	push   %esi
80108c69:	53                   	push   %ebx
80108c6a:	83 ec 28             	sub    $0x28,%esp
80108c6d:	8b 7d 08             	mov    0x8(%ebp),%edi
    pci_func_enable(pcif);
80108c70:	57                   	push   %edi
80108c71:	e8 4a aa ff ff       	call   801036c0 <pci_func_enable>
    struct e1000 *dev = (struct e1000 *)kalloc();
80108c76:	e8 95 98 ff ff       	call   80102510 <kalloc>
80108c7b:	83 c4 10             	add    $0x10,%esp
80108c7e:	89 c6                	mov    %eax,%esi
    for (int n = 0; n < 6; n++) {
80108c80:	31 c0                	xor    %eax,%eax
        if (pcif->reg_base[n] > 0xffff) {
80108c82:	8b 4c 87 14          	mov    0x14(%edi,%eax,4),%ecx
80108c86:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
80108c8c:	77 22                	ja     80108cb0 <e1000_init+0x50>
    for (int n = 0; n < 6; n++) {
80108c8e:	83 c0 01             	add    $0x1,%eax
80108c91:	83 f8 06             	cmp    $0x6,%eax
80108c94:	75 ec                	jne    80108c82 <e1000_init+0x22>
    // Resolve MMIO base address
    dev->mmio_base = e1000_resolve_mmio_base(pcif);
    assert(dev->mmio_base);
80108c96:	83 ec 0c             	sub    $0xc,%esp
    dev->mmio_base = e1000_resolve_mmio_base(pcif);
80108c99:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
    assert(dev->mmio_base);
80108c9f:	68 f0 e1 10 80       	push   $0x8010e1f0
80108ca4:	e8 77 77 ff ff       	call   80100420 <panic>
80108ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
            assert(pcif->reg_size[n] == (1<<17));
80108cb0:	81 7c 87 2c 00 00 02 	cmpl   $0x20000,0x2c(%edi,%eax,4)
80108cb7:	00 
80108cb8:	0f 85 24 02 00 00    	jne    80108ee2 <e1000_init+0x282>
    cprintf("[e1000] mmio_base=0x%08x\n", dev->mmio_base);
80108cbe:	83 ec 08             	sub    $0x8,%esp
    dev->mmio_base = e1000_resolve_mmio_base(pcif);
80108cc1:	89 0e                	mov    %ecx,(%esi)
    for (int n = 0; n < 3; n++) {
80108cc3:	31 db                	xor    %ebx,%ebx
    cprintf("[e1000] mmio_base=0x%08x\n", dev->mmio_base);
80108cc5:	51                   	push   %ecx
80108cc6:	68 70 e2 10 80       	push   $0x8010e270
80108ccb:	e8 c0 76 ff ff       	call   80100390 <cprintf>
    // Read HW address from EEPROM
    e1000_read_addr_from_eeprom(dev, dev->addr);
80108cd0:	8d 86 10 02 00 00    	lea    0x210(%esi),%eax
80108cd6:	83 c4 10             	add    $0x10,%esp
80108cd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    e1000_reg_write(dev, E1000_EERD, E1000_EERD_READ | addr << E1000_EERD_ADDR);
80108cdc:	89 d8                	mov    %ebx,%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108cde:	8b 0e                	mov    (%esi),%ecx
    e1000_reg_write(dev, E1000_EERD, E1000_EERD_READ | addr << E1000_EERD_ADDR);
80108ce0:	c1 e0 08             	shl    $0x8,%eax
80108ce3:	83 c8 01             	or     $0x1,%eax
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108ce6:	89 41 14             	mov    %eax,0x14(%ecx)
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108ce9:	8b 06                	mov    (%esi),%eax
80108ceb:	8b 40 14             	mov    0x14(%eax),%eax
    while (!((eerd = e1000_reg_read(dev, E1000_EERD)) & E1000_EERD_DONE))
80108cee:	a8 10                	test   $0x10,%al
80108cf0:	75 1c                	jne    80108d0e <e1000_init+0xae>
80108cf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        microdelay(1);
80108cf8:	83 ec 0c             	sub    $0xc,%esp
80108cfb:	6a 01                	push   $0x1
80108cfd:	e8 be 9a ff ff       	call   801027c0 <microdelay>
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108d02:	8b 06                	mov    (%esi),%eax
    while (!((eerd = e1000_reg_read(dev, E1000_EERD)) & E1000_EERD_DONE))
80108d04:	83 c4 10             	add    $0x10,%esp
    return *(volatile uint32_t *)(dev->mmio_base + reg);
80108d07:	8b 40 14             	mov    0x14(%eax),%eax
    while (!((eerd = e1000_reg_read(dev, E1000_EERD)) & E1000_EERD_DONE))
80108d0a:	a8 10                	test   $0x10,%al
80108d0c:	74 ea                	je     80108cf8 <e1000_init+0x98>
    return (uint16_t)(eerd >> E1000_EERD_DATA);
80108d0e:	c1 e8 10             	shr    $0x10,%eax
        dst[n*2+0] = (data & 0xff);
80108d11:	88 84 5e 10 02 00 00 	mov    %al,0x210(%esi,%ebx,2)
        dst[n*2+1] = (data >> 8) & 0xff;
80108d18:	88 a4 5e 11 02 00 00 	mov    %ah,0x211(%esi,%ebx,2)
    for (int n = 0; n < 3; n++) {
80108d1f:	83 c3 01             	add    $0x1,%ebx
80108d22:	83 fb 03             	cmp    $0x3,%ebx
80108d25:	75 b5                	jne    80108cdc <e1000_init+0x7c>
    cprintf("[e1000] addr=%02x:%02x:%02x:%02x:%02x:%02x\n",
80108d27:	0f b6 86 15 02 00 00 	movzbl 0x215(%esi),%eax
80108d2e:	83 ec 04             	sub    $0x4,%esp
80108d31:	50                   	push   %eax
80108d32:	0f b6 86 14 02 00 00 	movzbl 0x214(%esi),%eax
80108d39:	50                   	push   %eax
80108d3a:	0f b6 86 13 02 00 00 	movzbl 0x213(%esi),%eax
80108d41:	50                   	push   %eax
80108d42:	0f b6 86 12 02 00 00 	movzbl 0x212(%esi),%eax
80108d49:	50                   	push   %eax
80108d4a:	0f b6 86 11 02 00 00 	movzbl 0x211(%esi),%eax
80108d51:	50                   	push   %eax
80108d52:	0f b6 86 10 02 00 00 	movzbl 0x210(%esi),%eax
80108d59:	50                   	push   %eax
80108d5a:	68 c4 e1 10 80       	push   $0x8010e1c4
80108d5f:	e8 2c 76 ff ff       	call   80100390 <cprintf>
            dev->addr[0], dev->addr[1], dev->addr[2],
            dev->addr[3], dev->addr[4], dev->addr[5]);
    // Register I/O APIC
    dev->irq = pcif->irq_line;
    ioapicenable(dev->irq, ncpu - 1);
80108d64:	8b 15 40 ea 13 80    	mov    0x8013ea40,%edx
    dev->irq = pcif->irq_line;
80108d6a:	0f b6 47 44          	movzbl 0x44(%edi),%eax
    ioapicenable(dev->irq, ncpu - 1);
80108d6e:	83 c4 18             	add    $0x18,%esp
80108d71:	8d 4a ff             	lea    -0x1(%edx),%ecx
    dev->irq = pcif->irq_line;
80108d74:	88 86 16 02 00 00    	mov    %al,0x216(%esi)
    ioapicenable(dev->irq, ncpu - 1);
80108d7a:	51                   	push   %ecx
80108d7b:	50                   	push   %eax
80108d7c:	e8 8f 95 ff ff       	call   80102310 <ioapicenable>
80108d81:	83 c4 10             	add    $0x10,%esp
80108d84:	b8 00 52 00 00       	mov    $0x5200,%eax
80108d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108d90:	8b 0e                	mov    (%esi),%ecx
80108d92:	01 c1                	add    %eax,%ecx
80108d94:	83 c0 04             	add    $0x4,%eax
80108d97:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
    // Initialize Multicast Table Array
    for (int n = 0; n < 128; n++)
80108d9d:	3d 00 54 00 00       	cmp    $0x5400,%eax
80108da2:	75 ec                	jne    80108d90 <e1000_init+0x130>
80108da4:	8d 7e 10             	lea    0x10(%esi),%edi
80108da7:	8d 9e 10 01 00 00    	lea    0x110(%esi),%ebx
80108dad:	8d 76 00             	lea    0x0(%esi),%esi
        memset(&dev->rx_ring[n], 0, sizeof(struct rx_desc));
80108db0:	83 ec 04             	sub    $0x4,%esp
80108db3:	6a 10                	push   $0x10
80108db5:	6a 00                	push   $0x0
80108db7:	57                   	push   %edi
80108db8:	83 c7 10             	add    $0x10,%edi
80108dbb:	e8 00 c4 ff ff       	call   801051c0 <memset>
        dev->rx_ring[n].addr = (uint64_t)V2P(kalloc());
80108dc0:	e8 4b 97 ff ff       	call   80102510 <kalloc>
80108dc5:	c7 47 f4 00 00 00 00 	movl   $0x0,-0xc(%edi)
    for(int n = 0; n < RX_RING_SIZE; n++) {
80108dcc:	83 c4 10             	add    $0x10,%esp
        dev->rx_ring[n].addr = (uint64_t)V2P(kalloc());
80108dcf:	05 00 00 00 80       	add    $0x80000000,%eax
80108dd4:	89 47 f0             	mov    %eax,-0x10(%edi)
    for(int n = 0; n < RX_RING_SIZE; n++) {
80108dd7:	39 fb                	cmp    %edi,%ebx
80108dd9:	75 d5                	jne    80108db0 <e1000_init+0x150>
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108ddb:	8b 06                	mov    (%esi),%eax
    uint64_t base = (uint64_t)(V2P(dev->rx_ring));
80108ddd:	8d 8e 10 00 00 80    	lea    -0x7ffffff0(%esi),%ecx
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108de3:	89 88 00 28 00 00    	mov    %ecx,0x2800(%eax)
80108de9:	8b 06                	mov    (%esi),%eax
80108deb:	c7 80 04 28 00 00 00 	movl   $0x0,0x2804(%eax)
80108df2:	00 00 00 
80108df5:	8b 06                	mov    (%esi),%eax
80108df7:	c7 80 08 28 00 00 00 	movl   $0x100,0x2808(%eax)
80108dfe:	01 00 00 
80108e01:	8b 06                	mov    (%esi),%eax
80108e03:	c7 80 10 28 00 00 00 	movl   $0x0,0x2810(%eax)
80108e0a:	00 00 00 
80108e0d:	8b 06                	mov    (%esi),%eax
80108e0f:	c7 80 18 28 00 00 0f 	movl   $0xf,0x2818(%eax)
80108e16:	00 00 00 
80108e19:	8b 06                	mov    (%esi),%eax
80108e1b:	c7 80 00 01 00 00 3c 	movl   $0x400803c,0x100(%eax)
80108e22:	80 00 04 
    for (int n = 0; n < TX_RING_SIZE; n++) {
80108e25:	8d 76 00             	lea    0x0(%esi),%esi
        memset(&dev->tx_ring[n], 0, sizeof(struct tx_desc));
80108e28:	83 ec 04             	sub    $0x4,%esp
80108e2b:	6a 10                	push   $0x10
80108e2d:	6a 00                	push   $0x0
80108e2f:	53                   	push   %ebx
80108e30:	83 c3 10             	add    $0x10,%ebx
80108e33:	e8 88 c3 ff ff       	call   801051c0 <memset>
    for (int n = 0; n < TX_RING_SIZE; n++) {
80108e38:	83 c4 10             	add    $0x10,%esp
80108e3b:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
80108e3e:	75 e8                	jne    80108e28 <e1000_init+0x1c8>
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108e40:	8b 06                	mov    (%esi),%eax
    uint64_t base = (uint64_t)(V2P(dev->tx_ring));
80108e42:	8d 8e 10 01 00 80    	lea    -0x7ffffef0(%esi),%ecx
        e1000_reg_write(dev, E1000_MTA + (n << 2), 0);
    // Initialize RX/TX
    e1000_rx_init(dev);
    e1000_tx_init(dev);
    // Alloc netdev
    struct netdev *netdev = netdev_alloc(e1000_setup);
80108e48:	83 ec 0c             	sub    $0xc,%esp
    *(volatile uint32_t *)(dev->mmio_base + reg) = val;
80108e4b:	89 88 00 38 00 00    	mov    %ecx,0x3800(%eax)
80108e51:	8b 06                	mov    (%esi),%eax
80108e53:	c7 80 04 38 00 00 00 	movl   $0x0,0x3804(%eax)
80108e5a:	00 00 00 
80108e5d:	8b 06                	mov    (%esi),%eax
80108e5f:	c7 80 08 38 00 00 00 	movl   $0x100,0x3808(%eax)
80108e66:	01 00 00 
80108e69:	8b 06                	mov    (%esi),%eax
80108e6b:	c7 80 10 38 00 00 00 	movl   $0x0,0x3810(%eax)
80108e72:	00 00 00 
80108e75:	8b 06                	mov    (%esi),%eax
80108e77:	c7 80 18 38 00 00 00 	movl   $0x0,0x3818(%eax)
80108e7e:	00 00 00 
80108e81:	8b 06                	mov    (%esi),%eax
80108e83:	c7 80 00 04 00 00 08 	movl   $0x8,0x400(%eax)
80108e8a:	00 00 00 
    struct netdev *netdev = netdev_alloc(e1000_setup);
80108e8d:	68 a0 89 10 80       	push   $0x801089a0
80108e92:	e8 09 15 00 00       	call   8010a3a0 <netdev_alloc>
    memcpy(netdev->addr, dev->addr, 6);
80108e97:	83 c4 0c             	add    $0xc,%esp
    struct netdev *netdev = netdev_alloc(e1000_setup);
80108e9a:	89 c3                	mov    %eax,%ebx
    memcpy(netdev->addr, dev->addr, 6);
80108e9c:	8d 40 26             	lea    0x26(%eax),%eax
80108e9f:	6a 06                	push   $0x6
80108ea1:	ff 75 e4             	pushl  -0x1c(%ebp)
80108ea4:	50                   	push   %eax
80108ea5:	e8 16 c4 ff ff       	call   801052c0 <memcpy>
    netdev->priv = dev;
    netdev->ops = &e1000_ops;
    netdev->flags |= NETDEV_FLAG_RUNNING;
80108eaa:	66 83 4b 20 40       	orw    $0x40,0x20(%ebx)
    netdev->priv = dev;
80108eaf:	89 73 5c             	mov    %esi,0x5c(%ebx)
    netdev->ops = &e1000_ops;
80108eb2:	c7 43 58 80 14 11 80 	movl   $0x80111480,0x58(%ebx)
    // Register netdev
    netdev_register(netdev);
80108eb9:	89 1c 24             	mov    %ebx,(%esp)
80108ebc:	e8 3f 15 00 00       	call   8010a400 <netdev_register>
    dev->netdev = netdev;
    // Link to e1000 device list
    dev->next = devices;
80108ec1:	a1 7c 16 13 80       	mov    0x8013167c,%eax
    dev->netdev = netdev;
80108ec6:	89 9e 18 02 00 00    	mov    %ebx,0x218(%esi)
    devices = dev;
80108ecc:	89 35 7c 16 13 80    	mov    %esi,0x8013167c
    dev->next = devices;
80108ed2:	89 86 1c 02 00 00    	mov    %eax,0x21c(%esi)
    return 0;
}
80108ed8:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108edb:	31 c0                	xor    %eax,%eax
80108edd:	5b                   	pop    %ebx
80108ede:	5e                   	pop    %esi
80108edf:	5f                   	pop    %edi
80108ee0:	5d                   	pop    %ebp
80108ee1:	c3                   	ret    
            assert(pcif->reg_size[n] == (1<<17));
80108ee2:	83 ec 0c             	sub    $0xc,%esp
80108ee5:	68 84 e1 10 80       	push   $0x8010e184
80108eea:	e8 31 75 ff ff       	call   80100420 <panic>
80108eef:	90                   	nop

80108ef0 <ethernet_addr_pton>:
const uint8_t ETHERNET_ADDR_ANY[ETHERNET_ADDR_LEN] = {"\x00\x00\x00\x00\x00\x00"};
const uint8_t ETHERNET_ADDR_BROADCAST[ETHERNET_ADDR_LEN] = {"\xff\xff\xff\xff\xff\xff"};

int
ethernet_addr_pton(const char *p, uint8_t *n)
{
80108ef0:	f3 0f 1e fb          	endbr32 
80108ef4:	55                   	push   %ebp
80108ef5:	89 e5                	mov    %esp,%ebp
80108ef7:	57                   	push   %edi
80108ef8:	56                   	push   %esi
80108ef9:	53                   	push   %ebx
80108efa:	83 ec 1c             	sub    $0x1c,%esp
80108efd:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int index;
    char *ep;
    long val;

    if (!p || !n) {
80108f00:	85 db                	test   %ebx,%ebx
80108f02:	74 5c                	je     80108f60 <ethernet_addr_pton+0x70>
80108f04:	8b 45 0c             	mov    0xc(%ebp),%eax
80108f07:	85 c0                	test   %eax,%eax
80108f09:	74 55                	je     80108f60 <ethernet_addr_pton+0x70>
        return -1;
    }
    for (index = 0; index < ETHERNET_ADDR_LEN; index++) {
80108f0b:	31 ff                	xor    %edi,%edi
80108f0d:	8d 75 e4             	lea    -0x1c(%ebp),%esi
        val = strtol(p, &ep, 16);
80108f10:	83 ec 04             	sub    $0x4,%esp
80108f13:	6a 10                	push   $0x10
80108f15:	56                   	push   %esi
80108f16:	53                   	push   %ebx
80108f17:	e8 54 c5 ff ff       	call   80105470 <strtol>
        if (ep == p || val < 0 || val > 0xff || (index < ETHERNET_ADDR_LEN - 1 && *ep != ':')) {
80108f1c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80108f1f:	83 c4 10             	add    $0x10,%esp
80108f22:	39 d9                	cmp    %ebx,%ecx
80108f24:	74 3a                	je     80108f60 <ethernet_addr_pton+0x70>
80108f26:	3d ff 00 00 00       	cmp    $0xff,%eax
80108f2b:	77 33                	ja     80108f60 <ethernet_addr_pton+0x70>
80108f2d:	83 ff 05             	cmp    $0x5,%edi
80108f30:	74 16                	je     80108f48 <ethernet_addr_pton+0x58>
80108f32:	80 39 3a             	cmpb   $0x3a,(%ecx)
80108f35:	75 29                	jne    80108f60 <ethernet_addr_pton+0x70>
            break;
        }
        n[index] = (uint8_t)val;
80108f37:	8b 55 0c             	mov    0xc(%ebp),%edx
        p = ep + 1;
80108f3a:	8d 59 01             	lea    0x1(%ecx),%ebx
        n[index] = (uint8_t)val;
80108f3d:	88 04 3a             	mov    %al,(%edx,%edi,1)
    for (index = 0; index < ETHERNET_ADDR_LEN; index++) {
80108f40:	83 c7 01             	add    $0x1,%edi
80108f43:	eb cb                	jmp    80108f10 <ethernet_addr_pton+0x20>
80108f45:	8d 76 00             	lea    0x0(%esi),%esi
        n[index] = (uint8_t)val;
80108f48:	8b 75 0c             	mov    0xc(%ebp),%esi
80108f4b:	88 46 05             	mov    %al,0x5(%esi)
    }
    if (index != ETHERNET_ADDR_LEN || *ep != '\0') {
80108f4e:	31 c0                	xor    %eax,%eax
80108f50:	80 39 00             	cmpb   $0x0,(%ecx)
80108f53:	0f 95 c0             	setne  %al
        return -1;
    }
    return  0;
}
80108f56:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108f59:	5b                   	pop    %ebx
    if (index != ETHERNET_ADDR_LEN || *ep != '\0') {
80108f5a:	f7 d8                	neg    %eax
}
80108f5c:	5e                   	pop    %esi
80108f5d:	5f                   	pop    %edi
80108f5e:	5d                   	pop    %ebp
80108f5f:	c3                   	ret    
80108f60:	8d 65 f4             	lea    -0xc(%ebp),%esp
        return -1;
80108f63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80108f68:	5b                   	pop    %ebx
80108f69:	5e                   	pop    %esi
80108f6a:	5f                   	pop    %edi
80108f6b:	5d                   	pop    %ebp
80108f6c:	c3                   	ret    
80108f6d:	8d 76 00             	lea    0x0(%esi),%esi

80108f70 <ethernet_addr_ntop>:
    return "UNKNOWN";
}

char *
ethernet_addr_ntop(const uint8_t *n, char *p, size_t size)
{
80108f70:	f3 0f 1e fb          	endbr32 
80108f74:	55                   	push   %ebp
80108f75:	89 e5                	mov    %esp,%ebp
80108f77:	53                   	push   %ebx
80108f78:	83 ec 04             	sub    $0x4,%esp
80108f7b:	8b 45 08             	mov    0x8(%ebp),%eax
80108f7e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    if (!n || !p) {
80108f81:	85 c0                	test   %eax,%eax
80108f83:	74 43                	je     80108fc8 <ethernet_addr_ntop+0x58>
80108f85:	85 db                	test   %ebx,%ebx
80108f87:	74 3f                	je     80108fc8 <ethernet_addr_ntop+0x58>
        return NULL;
    }
    snprintf(p, size, "%02x:%02x:%02x:%02x:%02x:%02x", n[0], n[1], n[2], n[3], n[4], n[5]);
80108f89:	0f b6 50 05          	movzbl 0x5(%eax),%edx
80108f8d:	83 ec 0c             	sub    $0xc,%esp
80108f90:	52                   	push   %edx
80108f91:	0f b6 50 04          	movzbl 0x4(%eax),%edx
80108f95:	52                   	push   %edx
80108f96:	0f b6 50 03          	movzbl 0x3(%eax),%edx
80108f9a:	52                   	push   %edx
80108f9b:	0f b6 50 02          	movzbl 0x2(%eax),%edx
80108f9f:	52                   	push   %edx
80108fa0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
80108fa4:	52                   	push   %edx
80108fa5:	0f b6 00             	movzbl (%eax),%eax
80108fa8:	50                   	push   %eax
80108fa9:	68 8a e2 10 80       	push   $0x8010e28a
80108fae:	ff 75 10             	pushl  0x10(%ebp)
80108fb1:	53                   	push   %ebx
80108fb2:	e8 09 b3 ff ff       	call   801042c0 <snprintf>
    return p;
80108fb7:	89 d8                	mov    %ebx,%eax
80108fb9:	83 c4 30             	add    $0x30,%esp
}
80108fbc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80108fbf:	c9                   	leave  
80108fc0:	c3                   	ret    
80108fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108fc8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
        return NULL;
80108fcb:	31 c0                	xor    %eax,%eax
}
80108fcd:	c9                   	leave  
80108fce:	c3                   	ret    
80108fcf:	90                   	nop

80108fd0 <ethernet_rx_helper>:
    hexdump(frame, flen);
}

ssize_t
ethernet_rx_helper(struct netdev *dev, uint8_t *frame, size_t flen, void (*cb)(struct netdev*, uint16_t, uint8_t*, size_t))
{
80108fd0:	f3 0f 1e fb          	endbr32 
80108fd4:	55                   	push   %ebp
80108fd5:	89 e5                	mov    %esp,%ebp
80108fd7:	57                   	push   %edi
80108fd8:	56                   	push   %esi
80108fd9:	53                   	push   %ebx
80108fda:	83 ec 0c             	sub    $0xc,%esp
80108fdd:	8b 5d 10             	mov    0x10(%ebp),%ebx
80108fe0:	8b 7d 08             	mov    0x8(%ebp),%edi
80108fe3:	8b 75 0c             	mov    0xc(%ebp),%esi
    struct ethernet_hdr *hdr;
    uint8_t *payload;
    size_t plen;

    if (flen < sizeof(struct ethernet_hdr)) {
80108fe6:	83 fb 0d             	cmp    $0xd,%ebx
80108fe9:	76 55                	jbe    80109040 <ethernet_rx_helper+0x70>
        return -1;
    }
    hdr = (struct ethernet_hdr *)frame;
    if (memcmp(dev->addr, hdr->dst, ETHERNET_ADDR_LEN) != 0) {
80108feb:	83 ec 04             	sub    $0x4,%esp
80108fee:	8d 47 26             	lea    0x26(%edi),%eax
80108ff1:	6a 06                	push   $0x6
80108ff3:	56                   	push   %esi
80108ff4:	50                   	push   %eax
80108ff5:	e8 16 c2 ff ff       	call   80105210 <memcmp>
80108ffa:	83 c4 10             	add    $0x10,%esp
80108ffd:	85 c0                	test   %eax,%eax
80108fff:	75 1f                	jne    80109020 <ethernet_rx_helper+0x50>
    }
#ifdef DEBUG
    cprintf(">>> ethernet_rx <<<\n");
    ethernet_dump(dev, frame, flen);
#endif
    payload = (uint8_t *)(hdr + 1);
80109001:	8d 46 0e             	lea    0xe(%esi),%eax
    plen = flen - sizeof(struct ethernet_hdr);
80109004:	83 eb 0e             	sub    $0xe,%ebx
    cb(dev, hdr->type, payload, plen);
80109007:	53                   	push   %ebx
80109008:	50                   	push   %eax
80109009:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
8010900d:	50                   	push   %eax
8010900e:	57                   	push   %edi
8010900f:	ff 55 14             	call   *0x14(%ebp)
    return 0;
80109012:	31 c0                	xor    %eax,%eax
80109014:	83 c4 10             	add    $0x10,%esp
}
80109017:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010901a:	5b                   	pop    %ebx
8010901b:	5e                   	pop    %esi
8010901c:	5f                   	pop    %edi
8010901d:	5d                   	pop    %ebp
8010901e:	c3                   	ret    
8010901f:	90                   	nop
        if (memcmp(ETHERNET_ADDR_BROADCAST, hdr->dst, ETHERNET_ADDR_LEN) != 0) {
80109020:	83 ec 04             	sub    $0x4,%esp
80109023:	6a 06                	push   $0x6
80109025:	56                   	push   %esi
80109026:	68 a8 e2 10 80       	push   $0x8010e2a8
8010902b:	e8 e0 c1 ff ff       	call   80105210 <memcmp>
80109030:	83 c4 10             	add    $0x10,%esp
80109033:	85 c0                	test   %eax,%eax
80109035:	74 ca                	je     80109001 <ethernet_rx_helper+0x31>
80109037:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010903e:	66 90                	xchg   %ax,%ax
        return -1;
80109040:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80109045:	eb d0                	jmp    80109017 <ethernet_rx_helper+0x47>
80109047:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010904e:	66 90                	xchg   %ax,%ax

80109050 <ethernet_tx_helper>:

ssize_t
ethernet_tx_helper(struct netdev *dev, uint16_t type, const uint8_t *payload, size_t plen, const void *dst, ssize_t (*cb)(struct netdev*, uint8_t*, size_t))
{
80109050:	f3 0f 1e fb          	endbr32 
80109054:	55                   	push   %ebp
80109055:	89 e5                	mov    %esp,%ebp
80109057:	57                   	push   %edi
80109058:	56                   	push   %esi
80109059:	53                   	push   %ebx
8010905a:	81 ec fc 05 00 00    	sub    $0x5fc,%esp
80109060:	8b 5d 14             	mov    0x14(%ebp),%ebx
    uint8_t frame[ETHERNET_FRAME_SIZE_MAX];
    struct ethernet_hdr *hdr;
    size_t flen;

    if (!payload || plen > ETHERNET_PAYLOAD_SIZE_MAX || !dst) {
80109063:	8b 4d 18             	mov    0x18(%ebp),%ecx
{
80109066:	8b 75 0c             	mov    0xc(%ebp),%esi
    if (!payload || plen > ETHERNET_PAYLOAD_SIZE_MAX || !dst) {
80109069:	81 fb dc 05 00 00    	cmp    $0x5dc,%ebx
8010906f:	0f 97 c2             	seta   %dl
80109072:	85 c9                	test   %ecx,%ecx
80109074:	0f 94 c0             	sete   %al
80109077:	08 c2                	or     %al,%dl
80109079:	0f 85 99 00 00 00    	jne    80109118 <ethernet_tx_helper+0xc8>
8010907f:	8b 45 10             	mov    0x10(%ebp),%eax
80109082:	85 c0                	test   %eax,%eax
80109084:	0f 84 8e 00 00 00    	je     80109118 <ethernet_tx_helper+0xc8>
        return -1;
    }
    memset(frame, 0, sizeof(frame));
8010908a:	83 ec 04             	sub    $0x4,%esp
8010908d:	8d bd fa f9 ff ff    	lea    -0x606(%ebp),%edi
    hdr = (struct ethernet_hdr *)frame;
    memcpy(hdr->dst, dst, ETHERNET_ADDR_LEN);
    memcpy(hdr->src, dev->addr, ETHERNET_ADDR_LEN);
    hdr->type = hton16(type);
80109093:	0f b7 f6             	movzwl %si,%esi
    memset(frame, 0, sizeof(frame));
80109096:	68 ee 05 00 00       	push   $0x5ee
8010909b:	6a 00                	push   $0x0
8010909d:	57                   	push   %edi
8010909e:	e8 1d c1 ff ff       	call   801051c0 <memset>
    memcpy(hdr->dst, dst, ETHERNET_ADDR_LEN);
801090a3:	83 c4 0c             	add    $0xc,%esp
801090a6:	6a 06                	push   $0x6
801090a8:	ff 75 18             	pushl  0x18(%ebp)
801090ab:	57                   	push   %edi
801090ac:	e8 0f c2 ff ff       	call   801052c0 <memcpy>
    memcpy(hdr->src, dev->addr, ETHERNET_ADDR_LEN);
801090b1:	8b 45 08             	mov    0x8(%ebp),%eax
801090b4:	83 c4 0c             	add    $0xc,%esp
801090b7:	6a 06                	push   $0x6
801090b9:	83 c0 26             	add    $0x26,%eax
801090bc:	50                   	push   %eax
801090bd:	8d 85 00 fa ff ff    	lea    -0x600(%ebp),%eax
801090c3:	50                   	push   %eax
801090c4:	e8 f7 c1 ff ff       	call   801052c0 <memcpy>
    hdr->type = hton16(type);
801090c9:	89 34 24             	mov    %esi,(%esp)
    memcpy(hdr + 1, payload, plen);
    flen = sizeof(struct ethernet_hdr) + (plen < ETHERNET_PAYLOAD_SIZE_MIN ? ETHERNET_PAYLOAD_SIZE_MIN : plen);
801090cc:	be 2e 00 00 00       	mov    $0x2e,%esi
    hdr->type = hton16(type);
801090d1:	e8 8a f5 ff ff       	call   80108660 <hton16>
    memcpy(hdr + 1, payload, plen);
801090d6:	83 c4 0c             	add    $0xc,%esp
    hdr->type = hton16(type);
801090d9:	66 89 85 06 fa ff ff 	mov    %ax,-0x5fa(%ebp)
    memcpy(hdr + 1, payload, plen);
801090e0:	8d 85 08 fa ff ff    	lea    -0x5f8(%ebp),%eax
801090e6:	53                   	push   %ebx
801090e7:	ff 75 10             	pushl  0x10(%ebp)
801090ea:	50                   	push   %eax
801090eb:	e8 d0 c1 ff ff       	call   801052c0 <memcpy>
    flen = sizeof(struct ethernet_hdr) + (plen < ETHERNET_PAYLOAD_SIZE_MIN ? ETHERNET_PAYLOAD_SIZE_MIN : plen);
801090f0:	83 c4 0c             	add    $0xc,%esp
801090f3:	83 fb 2e             	cmp    $0x2e,%ebx
801090f6:	0f 43 f3             	cmovae %ebx,%esi
801090f9:	83 c6 0e             	add    $0xe,%esi
#ifdef DEBUG
    cprintf(">>> ethernet_tx <<<\n");
    ethernet_dump(dev, frame, flen);
#endif
    return cb(dev, frame, flen) == (ssize_t)flen ? (ssize_t)plen : -1;
801090fc:	56                   	push   %esi
801090fd:	57                   	push   %edi
801090fe:	ff 75 08             	pushl  0x8(%ebp)
80109101:	ff 55 1c             	call   *0x1c(%ebp)
80109104:	83 c4 10             	add    $0x10,%esp
80109107:	39 f0                	cmp    %esi,%eax
80109109:	75 0d                	jne    80109118 <ethernet_tx_helper+0xc8>
8010910b:	89 d8                	mov    %ebx,%eax
}
8010910d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109110:	5b                   	pop    %ebx
80109111:	5e                   	pop    %esi
80109112:	5f                   	pop    %edi
80109113:	5d                   	pop    %ebp
80109114:	c3                   	ret    
80109115:	8d 76 00             	lea    0x0(%esi),%esi
        return -1;
80109118:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010911d:	eb ee                	jmp    8010910d <ethernet_tx_helper+0xbd>
8010911f:	90                   	nop

80109120 <ethernet_netdev_setup>:

void
ethernet_netdev_setup(struct netdev *dev)
{
80109120:	f3 0f 1e fb          	endbr32 
80109124:	55                   	push   %ebp
    dev->type = NETDEV_TYPE_ETHERNET;
    dev->mtu = ETHERNET_PAYLOAD_SIZE_MAX;
    dev->flags = NETDEV_FLAG_BROADCAST;
    dev->hlen = ETHERNET_HDR_SIZE;
    dev->alen = ETHERNET_ADDR_LEN;
80109125:	ba 06 00 00 00       	mov    $0x6,%edx
{
8010912a:	89 e5                	mov    %esp,%ebp
8010912c:	8b 45 08             	mov    0x8(%ebp),%eax
    dev->type = NETDEV_TYPE_ETHERNET;
8010912f:	c7 40 1c 01 00 dc 05 	movl   $0x5dc0001,0x1c(%eax)
    dev->flags = NETDEV_FLAG_BROADCAST;
80109136:	c7 40 20 02 00 0e 00 	movl   $0xe0002,0x20(%eax)
    dev->alen = ETHERNET_ADDR_LEN;
8010913d:	66 89 50 24          	mov    %dx,0x24(%eax)
}
80109141:	5d                   	pop    %ebp
80109142:	c3                   	ret    
80109143:	66 90                	xchg   %ax,%ax
80109145:	66 90                	xchg   %ax,%ax
80109147:	66 90                	xchg   %ax,%ax
80109149:	66 90                	xchg   %ax,%ax
8010914b:	66 90                	xchg   %ax,%ax
8010914d:	66 90                	xchg   %ax,%ax
8010914f:	90                   	nop

80109150 <icmp_dump>:
    }
    return "UNKNOWN";
}

void
icmp_dump (struct netif *netif, ip_addr_t *src, ip_addr_t *dst, uint8_t *packet, size_t plen) {
80109150:	f3 0f 1e fb          	endbr32 
80109154:	55                   	push   %ebp
80109155:	89 e5                	mov    %esp,%ebp
80109157:	57                   	push   %edi
80109158:	56                   	push   %esi
    char addr[IP_ADDR_STR_LEN];
    struct icmp_hdr *hdr;
    uint32_t *timestamp;

    iface = (struct netif_ip *)netif;
    cprintf("   dev: %s (%s)\n", netif->dev->name, ip_addr_ntop(&iface->unicast, addr, sizeof(addr)));
80109159:	8d 75 d8             	lea    -0x28(%ebp),%esi
icmp_dump (struct netif *netif, ip_addr_t *src, ip_addr_t *dst, uint8_t *packet, size_t plen) {
8010915c:	53                   	push   %ebx
8010915d:	83 ec 20             	sub    $0x20,%esp
80109160:	8b 7d 08             	mov    0x8(%ebp),%edi
80109163:	8b 5d 14             	mov    0x14(%ebp),%ebx
    cprintf("   dev: %s (%s)\n", netif->dev->name, ip_addr_ntop(&iface->unicast, addr, sizeof(addr)));
80109166:	6a 10                	push   $0x10
80109168:	8d 47 0c             	lea    0xc(%edi),%eax
8010916b:	56                   	push   %esi
8010916c:	50                   	push   %eax
8010916d:	e8 0e 04 00 00       	call   80109580 <ip_addr_ntop>
80109172:	83 c4 0c             	add    $0xc,%esp
80109175:	50                   	push   %eax
80109176:	8b 47 08             	mov    0x8(%edi),%eax
80109179:	83 c0 0c             	add    $0xc,%eax
8010917c:	50                   	push   %eax
8010917d:	68 bd e2 10 80       	push   $0x8010e2bd
80109182:	e8 09 72 ff ff       	call   80100390 <cprintf>
    cprintf("   src: %s\n", src ? ip_addr_ntop(src, addr, sizeof(addr)) : "(self)");
80109187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010918a:	83 c4 10             	add    $0x10,%esp
8010918d:	b8 b6 e2 10 80       	mov    $0x8010e2b6,%eax
80109192:	85 c9                	test   %ecx,%ecx
80109194:	74 11                	je     801091a7 <icmp_dump+0x57>
80109196:	83 ec 04             	sub    $0x4,%esp
80109199:	6a 10                	push   $0x10
8010919b:	56                   	push   %esi
8010919c:	ff 75 0c             	pushl  0xc(%ebp)
8010919f:	e8 dc 03 00 00       	call   80109580 <ip_addr_ntop>
801091a4:	83 c4 10             	add    $0x10,%esp
801091a7:	83 ec 08             	sub    $0x8,%esp
801091aa:	50                   	push   %eax
801091ab:	68 b3 e4 10 80       	push   $0x8010e4b3
801091b0:	e8 db 71 ff ff       	call   80100390 <cprintf>
    cprintf("   dst: %s\n", ip_addr_ntop(dst, addr, sizeof(addr)));
801091b5:	83 c4 0c             	add    $0xc,%esp
801091b8:	6a 10                	push   $0x10
801091ba:	56                   	push   %esi
801091bb:	ff 75 10             	pushl  0x10(%ebp)
801091be:	e8 bd 03 00 00       	call   80109580 <ip_addr_ntop>
801091c3:	5f                   	pop    %edi
801091c4:	5a                   	pop    %edx
801091c5:	50                   	push   %eax
801091c6:	68 c2 e4 10 80       	push   $0x8010e4c2
801091cb:	e8 c0 71 ff ff       	call   80100390 <cprintf>
    hdr = (struct icmp_hdr *)packet;
    cprintf("  type: %u (%s)\n", hdr->type, icmp_type_ntoa(hdr->type));
801091d0:	0f b6 13             	movzbl (%ebx),%edx
    switch (type) {
801091d3:	83 c4 10             	add    $0x10,%esp
    cprintf("  type: %u (%s)\n", hdr->type, icmp_type_ntoa(hdr->type));
801091d6:	b9 b3 df 10 80       	mov    $0x8010dfb3,%ecx
801091db:	80 fa 10             	cmp    $0x10,%dl
801091de:	77 07                	ja     801091e7 <icmp_dump+0x97>
801091e0:	8b 0c 95 00 e4 10 80 	mov    -0x7fef1c00(,%edx,4),%ecx
801091e7:	83 ec 04             	sub    $0x4,%esp
801091ea:	51                   	push   %ecx
801091eb:	52                   	push   %edx
801091ec:	68 ce e2 10 80       	push   $0x8010e2ce
801091f1:	e8 9a 71 ff ff       	call   80100390 <cprintf>
    cprintf("  code: %u\n", hdr->code);
801091f6:	5f                   	pop    %edi
801091f7:	58                   	pop    %eax
801091f8:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
801091fc:	50                   	push   %eax
801091fd:	68 df e2 10 80       	push   $0x8010e2df
80109202:	e8 89 71 ff ff       	call   80100390 <cprintf>
    cprintf("   sum: %u\n", ntoh16(hdr->sum));
80109207:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
8010920b:	89 04 24             	mov    %eax,(%esp)
8010920e:	e8 8d f4 ff ff       	call   801086a0 <ntoh16>
80109213:	5a                   	pop    %edx
80109214:	59                   	pop    %ecx
80109215:	0f b7 c0             	movzwl %ax,%eax
80109218:	50                   	push   %eax
80109219:	68 eb e2 10 80       	push   $0x8010e2eb
8010921e:	e8 6d 71 ff ff       	call   80100390 <cprintf>
    switch (hdr->type) {
80109223:	0f b6 03             	movzbl (%ebx),%eax
80109226:	83 c4 10             	add    $0x10,%esp
80109229:	3c 05                	cmp    $0x5,%al
8010922b:	0f 84 cf 00 00 00    	je     80109300 <icmp_dump+0x1b0>
80109231:	0f 86 a1 00 00 00    	jbe    801092d8 <icmp_dump+0x188>
80109237:	3c 08                	cmp    $0x8,%al
80109239:	74 08                	je     80109243 <icmp_dump+0xf3>
8010923b:	8d 50 f3             	lea    -0xd(%eax),%edx
8010923e:	80 fa 03             	cmp    $0x3,%dl
80109241:	77 3f                	ja     80109282 <icmp_dump+0x132>
    case ICMP_TYPE_ECHO:
    case ICMP_TYPE_TIMESTAMP:
    case ICMP_TYPE_TIMESTAMPREPLY:
    case ICMP_TYPE_INFO_REQUEST:
    case ICMP_TYPE_INFO_REPLY:
        cprintf("    id: %u\n", ntoh16(hdr->ih_id));
80109243:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
80109247:	83 ec 0c             	sub    $0xc,%esp
8010924a:	50                   	push   %eax
8010924b:	e8 50 f4 ff ff       	call   801086a0 <ntoh16>
80109250:	5e                   	pop    %esi
80109251:	5f                   	pop    %edi
80109252:	0f b7 c0             	movzwl %ax,%eax
80109255:	50                   	push   %eax
80109256:	68 73 e4 10 80       	push   $0x8010e473
8010925b:	e8 30 71 ff ff       	call   80100390 <cprintf>
        cprintf("   seq: %u\n", ntoh16(hdr->ih_seq));
80109260:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
80109264:	89 04 24             	mov    %eax,(%esp)
80109267:	e8 34 f4 ff ff       	call   801086a0 <ntoh16>
8010926c:	5a                   	pop    %edx
8010926d:	59                   	pop    %ecx
8010926e:	0f b7 c0             	movzwl %ax,%eax
80109271:	50                   	push   %eax
80109272:	68 f7 e2 10 80       	push   $0x8010e2f7
80109277:	e8 14 71 ff ff       	call   80100390 <cprintf>
        break;
8010927c:	0f b6 03             	movzbl (%ebx),%eax
8010927f:	83 c4 10             	add    $0x10,%esp
    case ICMP_TYPE_REDIRECT:
        cprintf("    gw: %s\n", ip_addr_ntop(&hdr->ih_gateway, addr, sizeof(addr)));
        break;
    }
    if (hdr->type == ICMP_TYPE_TIMESTAMP || hdr->type == ICMP_TYPE_TIMESTAMPREPLY) {
80109282:	83 e8 0d             	sub    $0xd,%eax
80109285:	3c 01                	cmp    $0x1,%al
80109287:	77 57                	ja     801092e0 <icmp_dump+0x190>
        timestamp = (uint32_t *)hdr->data;
        cprintf(" otime: %u\n", ntoh32(*timestamp++));
80109289:	83 ec 0c             	sub    $0xc,%esp
8010928c:	ff 73 08             	pushl  0x8(%ebx)
8010928f:	e8 5c f4 ff ff       	call   801086f0 <ntoh32>
80109294:	5a                   	pop    %edx
80109295:	59                   	pop    %ecx
80109296:	50                   	push   %eax
80109297:	68 0f e3 10 80       	push   $0x8010e30f
8010929c:	e8 ef 70 ff ff       	call   80100390 <cprintf>
        cprintf(" rtime: %u\n", ntoh32(*timestamp++));
801092a1:	5e                   	pop    %esi
801092a2:	ff 73 0c             	pushl  0xc(%ebx)
801092a5:	e8 46 f4 ff ff       	call   801086f0 <ntoh32>
801092aa:	5f                   	pop    %edi
801092ab:	5a                   	pop    %edx
801092ac:	50                   	push   %eax
801092ad:	68 1b e3 10 80       	push   $0x8010e31b
801092b2:	e8 d9 70 ff ff       	call   80100390 <cprintf>
        cprintf(" ttime: %u\n", ntoh32(*timestamp++));
801092b7:	59                   	pop    %ecx
801092b8:	ff 73 10             	pushl  0x10(%ebx)
801092bb:	e8 30 f4 ff ff       	call   801086f0 <ntoh32>
801092c0:	5e                   	pop    %esi
801092c1:	5f                   	pop    %edi
801092c2:	50                   	push   %eax
801092c3:	68 27 e3 10 80       	push   $0x8010e327
801092c8:	e8 c3 70 ff ff       	call   80100390 <cprintf>
801092cd:	83 c4 10             	add    $0x10,%esp
801092d0:	eb 0e                	jmp    801092e0 <icmp_dump+0x190>
801092d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    switch (hdr->type) {
801092d8:	84 c0                	test   %al,%al
801092da:	0f 84 63 ff ff ff    	je     80109243 <icmp_dump+0xf3>
    }
    hexdump(packet, plen);
801092e0:	83 ec 08             	sub    $0x8,%esp
801092e3:	ff 75 18             	pushl  0x18(%ebp)
801092e6:	53                   	push   %ebx
801092e7:	e8 24 f2 ff ff       	call   80108510 <hexdump>
}
801092ec:	83 c4 10             	add    $0x10,%esp
801092ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
801092f2:	5b                   	pop    %ebx
801092f3:	5e                   	pop    %esi
801092f4:	5f                   	pop    %edi
801092f5:	5d                   	pop    %ebp
801092f6:	c3                   	ret    
801092f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801092fe:	66 90                	xchg   %ax,%ax
        cprintf("    gw: %s\n", ip_addr_ntop(&hdr->ih_gateway, addr, sizeof(addr)));
80109300:	83 ec 04             	sub    $0x4,%esp
80109303:	8d 43 04             	lea    0x4(%ebx),%eax
80109306:	6a 10                	push   $0x10
80109308:	56                   	push   %esi
80109309:	50                   	push   %eax
8010930a:	e8 71 02 00 00       	call   80109580 <ip_addr_ntop>
8010930f:	5a                   	pop    %edx
80109310:	59                   	pop    %ecx
80109311:	50                   	push   %eax
80109312:	68 03 e3 10 80       	push   $0x8010e303
80109317:	e8 74 70 ff ff       	call   80100390 <cprintf>
        break;
8010931c:	0f b6 03             	movzbl (%ebx),%eax
8010931f:	83 c4 10             	add    $0x10,%esp
80109322:	e9 5b ff ff ff       	jmp    80109282 <icmp_dump+0x132>
80109327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010932e:	66 90                	xchg   %ax,%ax

80109330 <icmp_tx>:
        break;
    }
}

int
icmp_tx (struct netif *netif, uint8_t type, uint8_t code, uint32_t values, uint8_t *data, size_t len, ip_addr_t *dst) {
80109330:	f3 0f 1e fb          	endbr32 
80109334:	55                   	push   %ebp
80109335:	89 e5                	mov    %esp,%ebp
80109337:	57                   	push   %edi
80109338:	56                   	push   %esi
80109339:	53                   	push   %ebx
8010933a:	8d 84 24 00 10 ff ff 	lea    -0xf000(%esp),%eax
80109341:	81 ec 00 10 00 00    	sub    $0x1000,%esp
80109347:	83 0c 24 00          	orl    $0x0,(%esp)
8010934b:	39 c4                	cmp    %eax,%esp
8010934d:	75 f2                	jne    80109341 <icmp_tx+0x11>
8010934f:	81 ec 00 10 00 00    	sub    $0x1000,%esp
    uint8_t buf[ICMP_BUFSIZ];
    struct icmp_hdr *hdr;
    size_t msg_len;

    hdr = (struct icmp_hdr *)buf;
    hdr->type = type;
80109355:	8b 45 0c             	mov    0xc(%ebp),%eax
icmp_tx (struct netif *netif, uint8_t type, uint8_t code, uint32_t values, uint8_t *data, size_t len, ip_addr_t *dst) {
80109358:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
8010935b:	8b 7d 20             	mov    0x20(%ebp),%edi
    hdr->type = type;
8010935e:	88 85 fd ff fe ff    	mov    %al,-0x10003(%ebp)
    hdr->code = code;
80109364:	8b 45 10             	mov    0x10(%ebp),%eax
    hdr->sum = 0;
    hdr->ih_values = values;
    memcpy(hdr->data, data, len);
80109367:	8d b5 fd ff fe ff    	lea    -0x10003(%ebp),%esi
8010936d:	53                   	push   %ebx
    msg_len = sizeof(struct icmp_hdr) + len;
8010936e:	83 c3 08             	add    $0x8,%ebx
    hdr->code = code;
80109371:	88 85 fe ff fe ff    	mov    %al,-0x10002(%ebp)
    hdr->sum = 0;
80109377:	31 c0                	xor    %eax,%eax
80109379:	66 89 85 ff ff fe ff 	mov    %ax,-0x10001(%ebp)
    hdr->ih_values = values;
80109380:	8b 45 14             	mov    0x14(%ebp),%eax
    memcpy(hdr->data, data, len);
80109383:	ff 75 18             	pushl  0x18(%ebp)
    hdr->ih_values = values;
80109386:	89 85 01 00 ff ff    	mov    %eax,-0xffff(%ebp)
    memcpy(hdr->data, data, len);
8010938c:	8d 85 05 00 ff ff    	lea    -0xfffb(%ebp),%eax
80109392:	50                   	push   %eax
80109393:	e8 28 bf ff ff       	call   801052c0 <memcpy>
    hdr->sum = cksum16((uint16_t *)hdr, msg_len, 0);
80109398:	83 c4 0c             	add    $0xc,%esp
8010939b:	0f b7 c3             	movzwl %bx,%eax
8010939e:	6a 00                	push   $0x0
801093a0:	50                   	push   %eax
801093a1:	56                   	push   %esi
801093a2:	e8 59 f3 ff ff       	call   80108700 <cksum16>
#ifdef DEBUG
    cprintf(">>> icmp_tx <<<\n");
801093a7:	c7 04 24 33 e3 10 80 	movl   $0x8010e333,(%esp)
    hdr->sum = cksum16((uint16_t *)hdr, msg_len, 0);
801093ae:	66 89 85 ff ff fe ff 	mov    %ax,-0x10001(%ebp)
    cprintf(">>> icmp_tx <<<\n");
801093b5:	e8 d6 6f ff ff       	call   80100390 <cprintf>
    icmp_dump(netif, NULL, dst, (uint8_t *)hdr, msg_len);
801093ba:	89 1c 24             	mov    %ebx,(%esp)
801093bd:	56                   	push   %esi
801093be:	57                   	push   %edi
801093bf:	6a 00                	push   $0x0
801093c1:	ff 75 08             	pushl  0x8(%ebp)
801093c4:	e8 87 fd ff ff       	call   80109150 <icmp_dump>
#endif
    return ip_tx(netif, IP_PROTOCOL_ICMP, (uint8_t *)hdr, msg_len, dst);
801093c9:	83 c4 14             	add    $0x14,%esp
801093cc:	57                   	push   %edi
801093cd:	53                   	push   %ebx
801093ce:	56                   	push   %esi
801093cf:	6a 01                	push   $0x1
801093d1:	ff 75 08             	pushl  0x8(%ebp)
801093d4:	e8 07 0a 00 00       	call   80109de0 <ip_tx>
}
801093d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
801093dc:	5b                   	pop    %ebx
801093dd:	5e                   	pop    %esi
801093de:	5f                   	pop    %edi
801093df:	5d                   	pop    %ebp
801093e0:	c3                   	ret    
801093e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801093e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801093ef:	90                   	nop

801093f0 <icmp_rx>:
icmp_rx (uint8_t *packet, size_t plen, ip_addr_t *src, ip_addr_t *dst, struct netif *netif) {
801093f0:	f3 0f 1e fb          	endbr32 
801093f4:	55                   	push   %ebp
801093f5:	89 e5                	mov    %esp,%ebp
801093f7:	56                   	push   %esi
801093f8:	53                   	push   %ebx
801093f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
801093fc:	8b 75 08             	mov    0x8(%ebp),%esi
    if (plen < sizeof(struct icmp_hdr)) {
801093ff:	83 fb 07             	cmp    $0x7,%ebx
80109402:	77 0c                	ja     80109410 <icmp_rx+0x20>
}
80109404:	8d 65 f8             	lea    -0x8(%ebp),%esp
80109407:	5b                   	pop    %ebx
80109408:	5e                   	pop    %esi
80109409:	5d                   	pop    %ebp
8010940a:	c3                   	ret    
8010940b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010940f:	90                   	nop
    cprintf(">>> icmp_rx <<<\n");
80109410:	83 ec 0c             	sub    $0xc,%esp
80109413:	68 44 e3 10 80       	push   $0x8010e344
80109418:	e8 73 6f ff ff       	call   80100390 <cprintf>
    icmp_dump(netif, src, dst, packet, plen);
8010941d:	89 1c 24             	mov    %ebx,(%esp)
80109420:	56                   	push   %esi
80109421:	ff 75 14             	pushl  0x14(%ebp)
80109424:	ff 75 10             	pushl  0x10(%ebp)
80109427:	ff 75 18             	pushl  0x18(%ebp)
8010942a:	e8 21 fd ff ff       	call   80109150 <icmp_dump>
    switch (hdr->type) {
8010942f:	83 c4 20             	add    $0x20,%esp
80109432:	80 3e 08             	cmpb   $0x8,(%esi)
80109435:	75 cd                	jne    80109404 <icmp_rx+0x14>
        icmp_tx(netif, ICMP_TYPE_ECHOREPLY, hdr->code, hdr->ih_values, hdr->data, plen - sizeof(struct icmp_hdr), src);
80109437:	83 ec 04             	sub    $0x4,%esp
8010943a:	8d 46 08             	lea    0x8(%esi),%eax
8010943d:	83 eb 08             	sub    $0x8,%ebx
80109440:	ff 75 10             	pushl  0x10(%ebp)
80109443:	53                   	push   %ebx
80109444:	50                   	push   %eax
80109445:	ff 76 04             	pushl  0x4(%esi)
80109448:	0f b6 46 01          	movzbl 0x1(%esi),%eax
8010944c:	50                   	push   %eax
8010944d:	6a 00                	push   $0x0
8010944f:	ff 75 18             	pushl  0x18(%ebp)
80109452:	e8 d9 fe ff ff       	call   80109330 <icmp_tx>
80109457:	83 c4 20             	add    $0x20,%esp
8010945a:	eb a8                	jmp    80109404 <icmp_rx+0x14>
8010945c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109460 <icmp_init>:

int
icmp_init (void) {
80109460:	f3 0f 1e fb          	endbr32 
80109464:	55                   	push   %ebp
80109465:	89 e5                	mov    %esp,%ebp
80109467:	83 ec 10             	sub    $0x10,%esp
    ip_add_protocol(IP_PROTOCOL_ICMP, icmp_rx);
8010946a:	68 f0 93 10 80       	push   $0x801093f0
8010946f:	6a 01                	push   $0x1
80109471:	e8 ca 0a 00 00       	call   80109f40 <ip_add_protocol>
    return 0;
}
80109476:	31 c0                	xor    %eax,%eax
80109478:	c9                   	leave  
80109479:	c3                   	ret    
8010947a:	66 90                	xchg   %ax,%ax
8010947c:	66 90                	xchg   %ax,%ax
8010947e:	66 90                	xchg   %ax,%ax

80109480 <ip_route_lookup.constprop.0>:
    }
    return 0;
}

static struct ip_route *
ip_route_lookup (const struct netif *netif, const ip_addr_t *dst) {
80109480:	55                   	push   %ebp
80109481:	89 e5                	mov    %esp,%ebp
80109483:	57                   	push   %edi
    struct ip_route *route, *candidate = NULL;
80109484:	31 ff                	xor    %edi,%edi
ip_route_lookup (const struct netif *netif, const ip_addr_t *dst) {
80109486:	56                   	push   %esi
80109487:	89 c6                	mov    %eax,%esi
80109489:	53                   	push   %ebx

    for (route = route_table; route < array_tailof(route_table); route++) {
8010948a:	bb a0 16 13 80       	mov    $0x801316a0,%ebx
ip_route_lookup (const struct netif *netif, const ip_addr_t *dst) {
8010948f:	83 ec 1c             	sub    $0x1c,%esp
80109492:	eb 0f                	jmp    801094a3 <ip_route_lookup.constprop.0+0x23>
80109494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    for (route = route_table; route < array_tailof(route_table); route++) {
80109498:	83 c3 14             	add    $0x14,%ebx
8010949b:	81 fb 40 17 13 80    	cmp    $0x80131740,%ebx
801094a1:	74 3e                	je     801094e1 <ip_route_lookup.constprop.0+0x61>
        if (route->used && (*dst & route->netmask) == route->network && (!netif || route->netif == netif)) {
801094a3:	80 3b 00             	cmpb   $0x0,(%ebx)
801094a6:	74 f0                	je     80109498 <ip_route_lookup.constprop.0+0x18>
801094a8:	8b 06                	mov    (%esi),%eax
801094aa:	23 43 08             	and    0x8(%ebx),%eax
801094ad:	3b 43 04             	cmp    0x4(%ebx),%eax
801094b0:	75 e6                	jne    80109498 <ip_route_lookup.constprop.0+0x18>
            if (!candidate || ntoh32(candidate->netmask) < ntoh32(route->netmask)) {
801094b2:	85 ff                	test   %edi,%edi
801094b4:	74 3a                	je     801094f0 <ip_route_lookup.constprop.0+0x70>
801094b6:	83 ec 0c             	sub    $0xc,%esp
801094b9:	ff 77 08             	pushl  0x8(%edi)
801094bc:	e8 2f f2 ff ff       	call   801086f0 <ntoh32>
801094c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801094c4:	58                   	pop    %eax
801094c5:	ff 73 08             	pushl  0x8(%ebx)
801094c8:	e8 23 f2 ff ff       	call   801086f0 <ntoh32>
801094cd:	83 c4 10             	add    $0x10,%esp
801094d0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
801094d3:	0f 42 fb             	cmovb  %ebx,%edi
    for (route = route_table; route < array_tailof(route_table); route++) {
801094d6:	83 c3 14             	add    $0x14,%ebx
801094d9:	81 fb 40 17 13 80    	cmp    $0x80131740,%ebx
801094df:	75 c2                	jne    801094a3 <ip_route_lookup.constprop.0+0x23>
                candidate = route;
            }
        }
    }
    return candidate;
}
801094e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801094e4:	89 f8                	mov    %edi,%eax
801094e6:	5b                   	pop    %ebx
801094e7:	5e                   	pop    %esi
801094e8:	5f                   	pop    %edi
801094e9:	5d                   	pop    %ebp
801094ea:	c3                   	ret    
801094eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801094ef:	90                   	nop
801094f0:	89 df                	mov    %ebx,%edi
801094f2:	eb a4                	jmp    80109498 <ip_route_lookup.constprop.0+0x18>
801094f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801094fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801094ff:	90                   	nop

80109500 <ip_addr_pton>:
ip_addr_pton (const char *p, ip_addr_t *n) {
80109500:	f3 0f 1e fb          	endbr32 
80109504:	55                   	push   %ebp
80109505:	89 e5                	mov    %esp,%ebp
80109507:	57                   	push   %edi
    for (idx = 0; idx < 4; idx++) {
80109508:	31 ff                	xor    %edi,%edi
ip_addr_pton (const char *p, ip_addr_t *n) {
8010950a:	56                   	push   %esi
8010950b:	53                   	push   %ebx
8010950c:	8d 5d e4             	lea    -0x1c(%ebp),%ebx
8010950f:	83 ec 1c             	sub    $0x1c,%esp
80109512:	8b 75 08             	mov    0x8(%ebp),%esi
        ret = strtol(sp, &ep, 10);
80109515:	83 ec 04             	sub    $0x4,%esp
80109518:	6a 0a                	push   $0xa
8010951a:	53                   	push   %ebx
8010951b:	56                   	push   %esi
8010951c:	e8 4f bf ff ff       	call   80105470 <strtol>
        if (ret < 0 || ret > 255) {
80109521:	83 c4 10             	add    $0x10,%esp
80109524:	3d ff 00 00 00       	cmp    $0xff,%eax
80109529:	77 3d                	ja     80109568 <ip_addr_pton+0x68>
        if (ep == sp) {
8010952b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010952e:	39 f1                	cmp    %esi,%ecx
80109530:	74 36                	je     80109568 <ip_addr_pton+0x68>
        if ((idx == 3 && *ep != '\0') || (idx != 3 && *ep != '.')) {
80109532:	0f b6 11             	movzbl (%ecx),%edx
80109535:	83 ff 03             	cmp    $0x3,%edi
80109538:	74 16                	je     80109550 <ip_addr_pton+0x50>
8010953a:	80 fa 2e             	cmp    $0x2e,%dl
8010953d:	75 29                	jne    80109568 <ip_addr_pton+0x68>
        ((uint8_t *)n)[idx] = ret;
8010953f:	8b 55 0c             	mov    0xc(%ebp),%edx
        sp = ep + 1;
80109542:	8d 71 01             	lea    0x1(%ecx),%esi
        ((uint8_t *)n)[idx] = ret;
80109545:	88 04 3a             	mov    %al,(%edx,%edi,1)
    for (idx = 0; idx < 4; idx++) {
80109548:	83 c7 01             	add    $0x1,%edi
8010954b:	eb c8                	jmp    80109515 <ip_addr_pton+0x15>
8010954d:	8d 76 00             	lea    0x0(%esi),%esi
        if ((idx == 3 && *ep != '\0') || (idx != 3 && *ep != '.')) {
80109550:	84 d2                	test   %dl,%dl
80109552:	75 14                	jne    80109568 <ip_addr_pton+0x68>
        ((uint8_t *)n)[idx] = ret;
80109554:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80109557:	88 43 03             	mov    %al,0x3(%ebx)
}
8010955a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    return 0;
8010955d:	31 c0                	xor    %eax,%eax
}
8010955f:	5b                   	pop    %ebx
80109560:	5e                   	pop    %esi
80109561:	5f                   	pop    %edi
80109562:	5d                   	pop    %ebp
80109563:	c3                   	ret    
80109564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109568:	8d 65 f4             	lea    -0xc(%ebp),%esp
            return -1;
8010956b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80109570:	5b                   	pop    %ebx
80109571:	5e                   	pop    %esi
80109572:	5f                   	pop    %edi
80109573:	5d                   	pop    %ebp
80109574:	c3                   	ret    
80109575:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010957c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109580 <ip_addr_ntop>:
ip_addr_ntop (const ip_addr_t *n, char *p, size_t size) {
80109580:	f3 0f 1e fb          	endbr32 
80109584:	55                   	push   %ebp
80109585:	89 e5                	mov    %esp,%ebp
80109587:	53                   	push   %ebx
80109588:	83 ec 08             	sub    $0x8,%esp
8010958b:	8b 45 08             	mov    0x8(%ebp),%eax
8010958e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    snprintf(p, size, "%d.%d.%d.%d",
80109591:	0f b6 50 03          	movzbl 0x3(%eax),%edx
80109595:	52                   	push   %edx
80109596:	0f b6 50 02          	movzbl 0x2(%eax),%edx
8010959a:	52                   	push   %edx
8010959b:	0f b6 50 01          	movzbl 0x1(%eax),%edx
8010959f:	52                   	push   %edx
801095a0:	0f b6 00             	movzbl (%eax),%eax
801095a3:	50                   	push   %eax
801095a4:	68 44 e4 10 80       	push   $0x8010e444
801095a9:	ff 75 10             	pushl  0x10(%ebp)
801095ac:	53                   	push   %ebx
801095ad:	e8 0e ad ff ff       	call   801042c0 <snprintf>
}
801095b2:	89 d8                	mov    %ebx,%eax
801095b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801095b7:	c9                   	leave  
801095b8:	c3                   	ret    
801095b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801095c0 <ip_dump>:
ip_dump (struct netif *netif, uint8_t *packet, size_t plen) {
801095c0:	f3 0f 1e fb          	endbr32 
801095c4:	55                   	push   %ebp
801095c5:	89 e5                	mov    %esp,%ebp
801095c7:	57                   	push   %edi
801095c8:	56                   	push   %esi
    snprintf(p, size, "%d.%d.%d.%d",
801095c9:	8d 75 d8             	lea    -0x28(%ebp),%esi
ip_dump (struct netif *netif, uint8_t *packet, size_t plen) {
801095cc:	53                   	push   %ebx
801095cd:	83 ec 20             	sub    $0x20,%esp
801095d0:	8b 7d 08             	mov    0x8(%ebp),%edi
801095d3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    snprintf(p, size, "%d.%d.%d.%d",
801095d6:	0f b6 47 0f          	movzbl 0xf(%edi),%eax
801095da:	50                   	push   %eax
801095db:	0f b6 47 0e          	movzbl 0xe(%edi),%eax
801095df:	50                   	push   %eax
801095e0:	0f b6 47 0d          	movzbl 0xd(%edi),%eax
801095e4:	50                   	push   %eax
801095e5:	0f b6 47 0c          	movzbl 0xc(%edi),%eax
801095e9:	50                   	push   %eax
801095ea:	68 44 e4 10 80       	push   $0x8010e444
801095ef:	6a 10                	push   $0x10
801095f1:	56                   	push   %esi
801095f2:	e8 c9 ac ff ff       	call   801042c0 <snprintf>
    cprintf(" dev: %s (%s)\n", netif->dev->name, ip_addr_ntop(&iface->unicast, addr, sizeof(addr)));
801095f7:	83 c4 1c             	add    $0x1c,%esp
801095fa:	56                   	push   %esi
801095fb:	8b 47 08             	mov    0x8(%edi),%eax
801095fe:	83 c0 0c             	add    $0xc,%eax
80109601:	50                   	push   %eax
80109602:	68 bf e2 10 80       	push   $0x8010e2bf
80109607:	e8 84 6d ff ff       	call   80100390 <cprintf>
    hl = hdr->vhl & 0x0f;
8010960c:	0f b6 03             	movzbl (%ebx),%eax
    cprintf("      vhl: %02x [v: %u, hl: %u (%u)]\n", hdr->vhl, (hdr->vhl & 0xf0) >> 4, hl, hl << 2);
8010960f:	89 c2                	mov    %eax,%edx
80109611:	83 e2 0f             	and    $0xf,%edx
80109614:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
8010961b:	89 0c 24             	mov    %ecx,(%esp)
8010961e:	52                   	push   %edx
8010961f:	89 c2                	mov    %eax,%edx
80109621:	c0 ea 04             	shr    $0x4,%dl
80109624:	0f b6 d2             	movzbl %dl,%edx
80109627:	52                   	push   %edx
80109628:	50                   	push   %eax
80109629:	68 cc e5 10 80       	push   $0x8010e5cc
8010962e:	e8 5d 6d ff ff       	call   80100390 <cprintf>
    cprintf("      tos: %02x\n", hdr->tos);
80109633:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
80109637:	83 c4 18             	add    $0x18,%esp
8010963a:	50                   	push   %eax
8010963b:	68 50 e4 10 80       	push   $0x8010e450
80109640:	e8 4b 6d ff ff       	call   80100390 <cprintf>
    cprintf("      len: %u\n", ntoh16(hdr->len));
80109645:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
80109649:	89 04 24             	mov    %eax,(%esp)
8010964c:	e8 4f f0 ff ff       	call   801086a0 <ntoh16>
80109651:	5a                   	pop    %edx
80109652:	59                   	pop    %ecx
80109653:	0f b7 c0             	movzwl %ax,%eax
80109656:	50                   	push   %eax
80109657:	68 61 e4 10 80       	push   $0x8010e461
8010965c:	e8 2f 6d ff ff       	call   80100390 <cprintf>
    cprintf("       id: %u\n", ntoh16(hdr->id));
80109661:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
80109665:	89 04 24             	mov    %eax,(%esp)
80109668:	e8 33 f0 ff ff       	call   801086a0 <ntoh16>
8010966d:	5f                   	pop    %edi
8010966e:	5a                   	pop    %edx
8010966f:	0f b7 c0             	movzwl %ax,%eax
80109672:	50                   	push   %eax
80109673:	68 70 e4 10 80       	push   $0x8010e470
80109678:	e8 13 6d ff ff       	call   80100390 <cprintf>
    offset = ntoh16(hdr->offset);
8010967d:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
80109681:	89 04 24             	mov    %eax,(%esp)
80109684:	e8 17 f0 ff ff       	call   801086a0 <ntoh16>
    cprintf("   offset: 0x%04x [flags=%x, offset=%u]\n", offset, (offset & 0xe0) >> 5, offset & 0x1f);
80109689:	0f b7 d0             	movzwl %ax,%edx
8010968c:	83 e0 1f             	and    $0x1f,%eax
8010968f:	50                   	push   %eax
80109690:	89 d0                	mov    %edx,%eax
80109692:	c1 f8 05             	sar    $0x5,%eax
80109695:	83 e0 07             	and    $0x7,%eax
80109698:	50                   	push   %eax
80109699:	52                   	push   %edx
8010969a:	68 f4 e5 10 80       	push   $0x8010e5f4
8010969f:	e8 ec 6c ff ff       	call   80100390 <cprintf>
    cprintf("      ttl: %u\n", hdr->ttl);
801096a4:	0f b6 43 08          	movzbl 0x8(%ebx),%eax
801096a8:	83 c4 18             	add    $0x18,%esp
801096ab:	50                   	push   %eax
801096ac:	68 7f e4 10 80       	push   $0x8010e47f
801096b1:	e8 da 6c ff ff       	call   80100390 <cprintf>
    cprintf(" protocol: %u\n", hdr->protocol);
801096b6:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
801096ba:	59                   	pop    %ecx
801096bb:	5f                   	pop    %edi
801096bc:	50                   	push   %eax
801096bd:	68 8e e4 10 80       	push   $0x8010e48e
801096c2:	e8 c9 6c ff ff       	call   80100390 <cprintf>
    cprintf("      sum: 0x%04x\n", ntoh16(hdr->sum));
801096c7:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
801096cb:	89 04 24             	mov    %eax,(%esp)
801096ce:	e8 cd ef ff ff       	call   801086a0 <ntoh16>
801096d3:	5a                   	pop    %edx
801096d4:	59                   	pop    %ecx
801096d5:	0f b7 c0             	movzwl %ax,%eax
801096d8:	50                   	push   %eax
801096d9:	68 9d e4 10 80       	push   $0x8010e49d
801096de:	e8 ad 6c ff ff       	call   80100390 <cprintf>
    snprintf(p, size, "%d.%d.%d.%d",
801096e3:	0f b6 43 0f          	movzbl 0xf(%ebx),%eax
801096e7:	83 c4 0c             	add    $0xc,%esp
801096ea:	50                   	push   %eax
801096eb:	0f b6 43 0e          	movzbl 0xe(%ebx),%eax
801096ef:	50                   	push   %eax
801096f0:	0f b6 43 0d          	movzbl 0xd(%ebx),%eax
801096f4:	50                   	push   %eax
801096f5:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
801096f9:	50                   	push   %eax
801096fa:	68 44 e4 10 80       	push   $0x8010e444
801096ff:	6a 10                	push   $0x10
80109701:	56                   	push   %esi
80109702:	e8 b9 ab ff ff       	call   801042c0 <snprintf>
    cprintf("      src: %s\n", ip_addr_ntop(&hdr->src, addr, sizeof(addr)));
80109707:	83 c4 18             	add    $0x18,%esp
8010970a:	56                   	push   %esi
8010970b:	68 b0 e4 10 80       	push   $0x8010e4b0
80109710:	e8 7b 6c ff ff       	call   80100390 <cprintf>
    snprintf(p, size, "%d.%d.%d.%d",
80109715:	0f b6 43 13          	movzbl 0x13(%ebx),%eax
80109719:	83 c4 0c             	add    $0xc,%esp
8010971c:	50                   	push   %eax
8010971d:	0f b6 43 12          	movzbl 0x12(%ebx),%eax
80109721:	50                   	push   %eax
80109722:	0f b6 43 11          	movzbl 0x11(%ebx),%eax
80109726:	50                   	push   %eax
80109727:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
8010972b:	50                   	push   %eax
8010972c:	68 44 e4 10 80       	push   $0x8010e444
80109731:	6a 10                	push   $0x10
80109733:	56                   	push   %esi
80109734:	e8 87 ab ff ff       	call   801042c0 <snprintf>
    cprintf("      dst: %s\n", ip_addr_ntop(&hdr->dst, addr, sizeof(addr)));
80109739:	83 c4 18             	add    $0x18,%esp
8010973c:	56                   	push   %esi
8010973d:	68 bf e4 10 80       	push   $0x8010e4bf
80109742:	e8 49 6c ff ff       	call   80100390 <cprintf>
    hexdump(packet, plen);
80109747:	5e                   	pop    %esi
80109748:	5f                   	pop    %edi
80109749:	ff 75 10             	pushl  0x10(%ebp)
8010974c:	53                   	push   %ebx
8010974d:	e8 be ed ff ff       	call   80108510 <hexdump>
}
80109752:	83 c4 10             	add    $0x10,%esp
80109755:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109758:	5b                   	pop    %ebx
80109759:	5e                   	pop    %esi
8010975a:	5f                   	pop    %edi
8010975b:	5d                   	pop    %ebp
8010975c:	c3                   	ret    
8010975d:	8d 76 00             	lea    0x0(%esi),%esi

80109760 <ip_tx_core>:
    }
    return 1;
}

static int
ip_tx_core (struct netif *netif, uint8_t protocol, const uint8_t *buf, size_t len, const ip_addr_t *src, const ip_addr_t *dst, const ip_addr_t *nexthop, uint16_t id, uint16_t offset) {
80109760:	55                   	push   %ebp
80109761:	89 e5                	mov    %esp,%ebp
80109763:	57                   	push   %edi
80109764:	56                   	push   %esi
80109765:	53                   	push   %ebx
80109766:	81 ec 00 10 00 00    	sub    $0x1000,%esp
8010976c:	83 0c 24 00          	orl    $0x0,(%esp)
80109770:	81 ec a8 00 00 00    	sub    $0xa8,%esp
80109776:	8b 75 18             	mov    0x18(%ebp),%esi
80109779:	8b 7d 1c             	mov    0x1c(%ebp),%edi
    hdr = (struct ip_hdr *)packet;
    hlen = sizeof(struct ip_hdr);
    hdr->vhl = (IP_VERSION_IPV4 << 4) | (hlen >> 2);
    hdr->tos = 0;
    hdr->len = hton16(hlen + len);
    hdr->id = hton16(id);
8010977c:	0f b7 f6             	movzwl %si,%esi
    hdr->offset = hton16(offset);
8010977f:	0f b7 ff             	movzwl %di,%edi
ip_tx_core (struct netif *netif, uint8_t protocol, const uint8_t *buf, size_t len, const ip_addr_t *src, const ip_addr_t *dst, const ip_addr_t *nexthop, uint16_t id, uint16_t offset) {
80109782:	89 85 64 ef ff ff    	mov    %eax,-0x109c(%ebp)
    hdr->len = hton16(hlen + len);
80109788:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
ip_tx_core (struct netif *netif, uint8_t protocol, const uint8_t *buf, size_t len, const ip_addr_t *src, const ip_addr_t *dst, const ip_addr_t *nexthop, uint16_t id, uint16_t offset) {
8010978c:	89 cb                	mov    %ecx,%ebx
    hdr->vhl = (IP_VERSION_IPV4 << 4) | (hlen >> 2);
8010978e:	b9 45 00 00 00       	mov    $0x45,%ecx
ip_tx_core (struct netif *netif, uint8_t protocol, const uint8_t *buf, size_t len, const ip_addr_t *src, const ip_addr_t *dst, const ip_addr_t *nexthop, uint16_t id, uint16_t offset) {
80109793:	89 95 60 ef ff ff    	mov    %edx,-0x10a0(%ebp)
    hdr->len = hton16(hlen + len);
80109799:	83 c0 14             	add    $0x14,%eax
    hdr->vhl = (IP_VERSION_IPV4 << 4) | (hlen >> 2);
8010979c:	66 89 8d e8 ef ff ff 	mov    %cx,-0x1018(%ebp)
    hdr->len = hton16(hlen + len);
801097a3:	0f b7 c0             	movzwl %ax,%eax
801097a6:	50                   	push   %eax
801097a7:	e8 b4 ee ff ff       	call   80108660 <hton16>
    hdr->id = hton16(id);
801097ac:	89 34 24             	mov    %esi,(%esp)
    hdr->ttl = 0xff;
    hdr->protocol = protocol;
    hdr->sum = 0;
801097af:	31 f6                	xor    %esi,%esi
    hdr->len = hton16(hlen + len);
801097b1:	66 89 85 ea ef ff ff 	mov    %ax,-0x1016(%ebp)
    hdr->id = hton16(id);
801097b8:	e8 a3 ee ff ff       	call   80108660 <hton16>
    hdr->offset = hton16(offset);
801097bd:	89 3c 24             	mov    %edi,(%esp)
    hdr->id = hton16(id);
801097c0:	66 89 85 ec ef ff ff 	mov    %ax,-0x1014(%ebp)
    hdr->offset = hton16(offset);
801097c7:	e8 94 ee ff ff       	call   80108660 <hton16>
    hdr->protocol = protocol;
801097cc:	8b 95 60 ef ff ff    	mov    -0x10a0(%ebp),%edx
    hdr->src = src ? *src : ((struct netif_ip *)netif)->unicast;
801097d2:	8b 7d 0c             	mov    0xc(%ebp),%edi
    hdr->ttl = 0xff;
801097d5:	c6 85 f0 ef ff ff ff 	movb   $0xff,-0x1010(%ebp)
    hdr->offset = hton16(offset);
801097dc:	66 89 85 ee ef ff ff 	mov    %ax,-0x1012(%ebp)
    hdr->src = src ? *src : ((struct netif_ip *)netif)->unicast;
801097e3:	83 c4 10             	add    $0x10,%esp
    hdr->protocol = protocol;
801097e6:	88 95 f1 ef ff ff    	mov    %dl,-0x100f(%ebp)
    hdr->sum = 0;
801097ec:	66 89 b5 f2 ef ff ff 	mov    %si,-0x100e(%ebp)
    hdr->src = src ? *src : ((struct netif_ip *)netif)->unicast;
801097f3:	85 ff                	test   %edi,%edi
801097f5:	0f 84 f5 00 00 00    	je     801098f0 <ip_tx_core+0x190>
801097fb:	8b 45 0c             	mov    0xc(%ebp),%eax
801097fe:	8b 00                	mov    (%eax),%eax
80109800:	89 85 f4 ef ff ff    	mov    %eax,-0x100c(%ebp)
    hdr->dst = *dst;
80109806:	8b 45 10             	mov    0x10(%ebp),%eax
    hdr->sum = cksum16((uint16_t *)hdr, hlen, 0);
80109809:	83 ec 04             	sub    $0x4,%esp
8010980c:	8d b5 e8 ef ff ff    	lea    -0x1018(%ebp),%esi
    uint8_t ha[128] = {};
80109812:	8d bd 6c ef ff ff    	lea    -0x1094(%ebp),%edi
    hdr->dst = *dst;
80109818:	8b 00                	mov    (%eax),%eax
    hdr->sum = cksum16((uint16_t *)hdr, hlen, 0);
8010981a:	6a 00                	push   $0x0
8010981c:	6a 14                	push   $0x14
8010981e:	56                   	push   %esi
    hdr->dst = *dst;
8010981f:	89 85 f8 ef ff ff    	mov    %eax,-0x1008(%ebp)
    hdr->sum = cksum16((uint16_t *)hdr, hlen, 0);
80109825:	e8 d6 ee ff ff       	call   80108700 <cksum16>
    memcpy(hdr + 1, buf, len);
8010982a:	83 c4 0c             	add    $0xc,%esp
8010982d:	ff 75 08             	pushl  0x8(%ebp)
    hdr->sum = cksum16((uint16_t *)hdr, hlen, 0);
80109830:	66 89 85 f2 ef ff ff 	mov    %ax,-0x100e(%ebp)
    memcpy(hdr + 1, buf, len);
80109837:	8d 85 fc ef ff ff    	lea    -0x1004(%ebp),%eax
8010983d:	53                   	push   %ebx
8010983e:	50                   	push   %eax
8010983f:	e8 7c ba ff ff       	call   801052c0 <memcpy>
#ifdef DEBUG
    cprintf(">>> ip_tx_core <<<\n");
80109844:	c7 04 24 ce e4 10 80 	movl   $0x8010e4ce,(%esp)
8010984b:	e8 40 6b ff ff       	call   80100390 <cprintf>
    ip_dump(netif, (uint8_t *)packet, hlen + len);
80109850:	8b 45 08             	mov    0x8(%ebp),%eax
80109853:	83 c4 0c             	add    $0xc,%esp
80109856:	8d 58 14             	lea    0x14(%eax),%ebx
80109859:	53                   	push   %ebx
8010985a:	56                   	push   %esi
8010985b:	ff b5 64 ef ff ff    	pushl  -0x109c(%ebp)
80109861:	e8 5a fd ff ff       	call   801095c0 <ip_dump>
    uint8_t ha[128] = {};
80109866:	31 c0                	xor    %eax,%eax
80109868:	b9 1f 00 00 00       	mov    $0x1f,%ecx
    if (!(netif->dev->flags & NETDEV_FLAG_NOARP)) {
8010986d:	83 c4 10             	add    $0x10,%esp
    uint8_t ha[128] = {};
80109870:	f3 ab                	rep stos %eax,%es:(%edi)
    if (!(netif->dev->flags & NETDEV_FLAG_NOARP)) {
80109872:	8b 85 64 ef ff ff    	mov    -0x109c(%ebp),%eax
    uint8_t ha[128] = {};
80109878:	c7 85 68 ef ff ff 00 	movl   $0x0,-0x1098(%ebp)
8010987f:	00 00 00 
80109882:	8d bd 68 ef ff ff    	lea    -0x1098(%ebp),%edi
    if (!(netif->dev->flags & NETDEV_FLAG_NOARP)) {
80109888:	8b 40 08             	mov    0x8(%eax),%eax
8010988b:	f6 40 20 80          	testb  $0x80,0x20(%eax)
8010988f:	75 32                	jne    801098c3 <ip_tx_core+0x163>
        if (dst) {
80109891:	8b 55 14             	mov    0x14(%ebp),%edx
80109894:	85 d2                	test   %edx,%edx
80109896:	74 68                	je     80109900 <ip_tx_core+0x1a0>
            ret = arp_resolve(netif, dst, (void *)ha, packet, plen);
80109898:	83 ec 0c             	sub    $0xc,%esp
8010989b:	8d bd 68 ef ff ff    	lea    -0x1098(%ebp),%edi
801098a1:	53                   	push   %ebx
801098a2:	56                   	push   %esi
801098a3:	57                   	push   %edi
801098a4:	ff 75 14             	pushl  0x14(%ebp)
801098a7:	ff b5 64 ef ff ff    	pushl  -0x109c(%ebp)
801098ad:	e8 fe ea ff ff       	call   801083b0 <arp_resolve>
            if (ret != 1) {
801098b2:	83 c4 20             	add    $0x20,%esp
801098b5:	83 f8 01             	cmp    $0x1,%eax
801098b8:	75 2a                	jne    801098e4 <ip_tx_core+0x184>
801098ba:	8b 85 64 ef ff ff    	mov    -0x109c(%ebp),%eax
801098c0:	8b 40 08             	mov    0x8(%eax),%eax
    if (netif->dev->ops->xmit(netif->dev, ETHERNET_TYPE_IP, packet, plen, (void *)ha) != (ssize_t)plen) {
801098c3:	83 ec 0c             	sub    $0xc,%esp
801098c6:	8b 50 58             	mov    0x58(%eax),%edx
801098c9:	57                   	push   %edi
801098ca:	53                   	push   %ebx
801098cb:	56                   	push   %esi
801098cc:	68 00 08 00 00       	push   $0x800
801098d1:	50                   	push   %eax
801098d2:	ff 52 08             	call   *0x8(%edx)
801098d5:	83 c4 20             	add    $0x20,%esp
        return -1;
801098d8:	39 d8                	cmp    %ebx,%eax
801098da:	0f 94 c0             	sete   %al
801098dd:	0f b6 c0             	movzbl %al,%eax
801098e0:	8d 44 00 ff          	lea    -0x1(%eax,%eax,1),%eax
#endif
    return ip_tx_netdev(netif, (uint8_t *)packet, hlen + len, nexthop);
}
801098e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801098e7:	5b                   	pop    %ebx
801098e8:	5e                   	pop    %esi
801098e9:	5f                   	pop    %edi
801098ea:	5d                   	pop    %ebp
801098eb:	c3                   	ret    
801098ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    hdr->src = src ? *src : ((struct netif_ip *)netif)->unicast;
801098f0:	8b 85 64 ef ff ff    	mov    -0x109c(%ebp),%eax
801098f6:	8b 40 0c             	mov    0xc(%eax),%eax
801098f9:	e9 02 ff ff ff       	jmp    80109800 <ip_tx_core+0xa0>
801098fe:	66 90                	xchg   %ax,%ax
            memcpy(ha, netif->dev->broadcast, netif->dev->alen);
80109900:	0f b7 50 24          	movzwl 0x24(%eax),%edx
80109904:	83 ec 04             	sub    $0x4,%esp
80109907:	83 c0 46             	add    $0x46,%eax
8010990a:	8d bd 68 ef ff ff    	lea    -0x1098(%ebp),%edi
80109910:	52                   	push   %edx
80109911:	50                   	push   %eax
80109912:	57                   	push   %edi
80109913:	e8 a8 b9 ff ff       	call   801052c0 <memcpy>
80109918:	8b 85 64 ef ff ff    	mov    -0x109c(%ebp),%eax
8010991e:	83 c4 10             	add    $0x10,%esp
80109921:	8b 40 08             	mov    0x8(%eax),%eax
80109924:	eb 9d                	jmp    801098c3 <ip_tx_core+0x163>
80109926:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010992d:	8d 76 00             	lea    0x0(%esi),%esi

80109930 <ip_rx>:
ip_rx (uint8_t *dgram, size_t dlen, struct netdev *dev) {
80109930:	f3 0f 1e fb          	endbr32 
80109934:	55                   	push   %ebp
80109935:	89 e5                	mov    %esp,%ebp
80109937:	57                   	push   %edi
80109938:	56                   	push   %esi
80109939:	53                   	push   %ebx
8010993a:	83 ec 1c             	sub    $0x1c,%esp
8010993d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80109940:	8b 7d 08             	mov    0x8(%ebp),%edi
80109943:	8b 55 10             	mov    0x10(%ebp),%edx
    if (dlen < sizeof(struct ip_hdr)) {
80109946:	83 fb 13             	cmp    $0x13,%ebx
80109949:	0f 86 34 01 00 00    	jbe    80109a83 <ip_rx+0x153>
    if ((hdr->vhl >> 4) != IP_VERSION_IPV4) {
8010994f:	0f b6 07             	movzbl (%edi),%eax
80109952:	89 c1                	mov    %eax,%ecx
80109954:	c0 e9 04             	shr    $0x4,%cl
80109957:	80 f9 04             	cmp    $0x4,%cl
8010995a:	75 44                	jne    801099a0 <ip_rx+0x70>
    hlen = (hdr->vhl & 0x0f) << 2;
8010995c:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
    if (dlen < hlen || dlen < ntoh16(hdr->len)) {
80109963:	83 e6 3c             	and    $0x3c,%esi
80109966:	39 f3                	cmp    %esi,%ebx
80109968:	72 1a                	jb     80109984 <ip_rx+0x54>
8010996a:	0f b7 47 02          	movzwl 0x2(%edi),%eax
8010996e:	83 ec 0c             	sub    $0xc,%esp
80109971:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80109974:	50                   	push   %eax
80109975:	e8 26 ed ff ff       	call   801086a0 <ntoh16>
8010997a:	83 c4 10             	add    $0x10,%esp
8010997d:	0f b7 c0             	movzwl %ax,%eax
80109980:	39 c3                	cmp    %eax,%ebx
80109982:	73 34                	jae    801099b8 <ip_rx+0x88>
        cprintf("ip packet length error.\n");
80109984:	c7 45 08 f4 e4 10 80 	movl   $0x8010e4f4,0x8(%ebp)
}
8010998b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010998e:	5b                   	pop    %ebx
8010998f:	5e                   	pop    %esi
80109990:	5f                   	pop    %edi
80109991:	5d                   	pop    %ebp
        cprintf("don't support IP fragments\n");
80109992:	e9 f9 69 ff ff       	jmp    80100390 <cprintf>
80109997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010999e:	66 90                	xchg   %ax,%ax
        cprintf("not ipv4 packet.\n");
801099a0:	c7 45 08 e2 e4 10 80 	movl   $0x8010e4e2,0x8(%ebp)
}
801099a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
801099aa:	5b                   	pop    %ebx
801099ab:	5e                   	pop    %esi
801099ac:	5f                   	pop    %edi
801099ad:	5d                   	pop    %ebp
        cprintf("don't support IP fragments\n");
801099ae:	e9 dd 69 ff ff       	jmp    80100390 <cprintf>
801099b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801099b7:	90                   	nop
    if (cksum16((uint16_t *)hdr, hlen, 0) != 0) {
801099b8:	83 ec 04             	sub    $0x4,%esp
801099bb:	6a 00                	push   $0x0
801099bd:	56                   	push   %esi
801099be:	57                   	push   %edi
801099bf:	e8 3c ed ff ff       	call   80108700 <cksum16>
801099c4:	83 c4 10             	add    $0x10,%esp
801099c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801099ca:	66 85 c0             	test   %ax,%ax
801099cd:	0f 85 cd 00 00 00    	jne    80109aa0 <ip_rx+0x170>
    if (!hdr->ttl) {
801099d3:	80 7f 08 00          	cmpb   $0x0,0x8(%edi)
801099d7:	0f 84 b3 00 00 00    	je     80109a90 <ip_rx+0x160>
    iface = (struct netif_ip *)netdev_get_netif(dev, NETIF_FAMILY_IPV4);
801099dd:	83 ec 08             	sub    $0x8,%esp
801099e0:	6a 02                	push   $0x2
801099e2:	52                   	push   %edx
801099e3:	e8 f8 0b 00 00       	call   8010a5e0 <netdev_get_netif>
    if (!iface) {
801099e8:	83 c4 10             	add    $0x10,%esp
    iface = (struct netif_ip *)netdev_get_netif(dev, NETIF_FAMILY_IPV4);
801099eb:	89 c2                	mov    %eax,%edx
    if (!iface) {
801099ed:	85 c0                	test   %eax,%eax
801099ef:	0f 84 c7 00 00 00    	je     80109abc <ip_rx+0x18c>
    if (hdr->dst != iface->unicast) {
801099f5:	8b 47 10             	mov    0x10(%edi),%eax
801099f8:	3b 42 0c             	cmp    0xc(%edx),%eax
801099fb:	74 0a                	je     80109a07 <ip_rx+0xd7>
        if (hdr->dst != iface->broadcast && hdr->dst != IP_ADDR_BROADCAST) {
801099fd:	39 42 18             	cmp    %eax,0x18(%edx)
80109a00:	74 05                	je     80109a07 <ip_rx+0xd7>
80109a02:	83 f8 ff             	cmp    $0xffffffff,%eax
80109a05:	75 7c                	jne    80109a83 <ip_rx+0x153>
    cprintf(">>> ip_rx <<<\n");
80109a07:	83 ec 0c             	sub    $0xc,%esp
80109a0a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80109a0d:	68 55 e5 10 80       	push   $0x8010e555
80109a12:	e8 79 69 ff ff       	call   80100390 <cprintf>
    ip_dump((struct netif *)iface, dgram, dlen);
80109a17:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80109a1a:	83 c4 0c             	add    $0xc,%esp
80109a1d:	53                   	push   %ebx
80109a1e:	57                   	push   %edi
80109a1f:	52                   	push   %edx
80109a20:	e8 9b fb ff ff       	call   801095c0 <ip_dump>
    plen = ntoh16(hdr->len) - hlen;
80109a25:	0f b7 47 02          	movzwl 0x2(%edi),%eax
80109a29:	89 04 24             	mov    %eax,(%esp)
80109a2c:	e8 6f ec ff ff       	call   801086a0 <ntoh16>
80109a31:	0f b7 d8             	movzwl %ax,%ebx
    offset = ntoh16(hdr->offset);
80109a34:	0f b7 47 06          	movzwl 0x6(%edi),%eax
80109a38:	89 04 24             	mov    %eax,(%esp)
80109a3b:	e8 60 ec ff ff       	call   801086a0 <ntoh16>
    if (offset & 0x2000 || offset & 0x1fff) {
80109a40:	83 c4 10             	add    $0x10,%esp
80109a43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80109a46:	66 a9 ff 3f          	test   $0x3fff,%ax
80109a4a:	75 64                	jne    80109ab0 <ip_rx+0x180>
    for (protocol = protocols; protocol; protocol = protocol->next) {
80109a4c:	8b 0d 80 16 13 80    	mov    0x80131680,%ecx
80109a52:	85 c9                	test   %ecx,%ecx
80109a54:	74 2d                	je     80109a83 <ip_rx+0x153>
        if (protocol->type == hdr->protocol) {
80109a56:	0f b6 47 09          	movzbl 0x9(%edi),%eax
80109a5a:	eb 0a                	jmp    80109a66 <ip_rx+0x136>
80109a5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    for (protocol = protocols; protocol; protocol = protocol->next) {
80109a60:	8b 09                	mov    (%ecx),%ecx
80109a62:	85 c9                	test   %ecx,%ecx
80109a64:	74 1d                	je     80109a83 <ip_rx+0x153>
        if (protocol->type == hdr->protocol) {
80109a66:	38 41 04             	cmp    %al,0x4(%ecx)
80109a69:	75 f5                	jne    80109a60 <ip_rx+0x130>
            protocol->handler(payload, plen, &hdr->src, &hdr->dst, (struct netif *)iface);
80109a6b:	83 ec 0c             	sub    $0xc,%esp
80109a6e:	8d 47 10             	lea    0x10(%edi),%eax
    plen = ntoh16(hdr->len) - hlen;
80109a71:	29 f3                	sub    %esi,%ebx
    payload = (uint8_t *)hdr + hlen;
80109a73:	01 fe                	add    %edi,%esi
            protocol->handler(payload, plen, &hdr->src, &hdr->dst, (struct netif *)iface);
80109a75:	52                   	push   %edx
80109a76:	50                   	push   %eax
80109a77:	8d 47 0c             	lea    0xc(%edi),%eax
80109a7a:	50                   	push   %eax
80109a7b:	53                   	push   %ebx
80109a7c:	56                   	push   %esi
80109a7d:	ff 51 08             	call   *0x8(%ecx)
            break;
80109a80:	83 c4 20             	add    $0x20,%esp
}
80109a83:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109a86:	5b                   	pop    %ebx
80109a87:	5e                   	pop    %esi
80109a88:	5f                   	pop    %edi
80109a89:	5d                   	pop    %ebp
80109a8a:	c3                   	ret    
80109a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109a8f:	90                   	nop
        cprintf("ip packet was dead (TTL=0).\n");
80109a90:	c7 45 08 21 e5 10 80 	movl   $0x8010e521,0x8(%ebp)
80109a97:	e9 0b ff ff ff       	jmp    801099a7 <ip_rx+0x77>
80109a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        cprintf("ip checksum error.\n");
80109aa0:	c7 45 08 0d e5 10 80 	movl   $0x8010e50d,0x8(%ebp)
80109aa7:	e9 fb fe ff ff       	jmp    801099a7 <ip_rx+0x77>
80109aac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        cprintf("don't support IP fragments\n");
80109ab0:	c7 45 08 64 e5 10 80 	movl   $0x8010e564,0x8(%ebp)
80109ab7:	e9 eb fe ff ff       	jmp    801099a7 <ip_rx+0x77>
        cprintf("ip unknown interface.\n");
80109abc:	c7 45 08 3e e5 10 80 	movl   $0x8010e53e,0x8(%ebp)
80109ac3:	e9 df fe ff ff       	jmp    801099a7 <ip_rx+0x77>
80109ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109acf:	90                   	nop

80109ad0 <ip_netif_alloc>:
ip_netif_alloc (ip_addr_t unicast, ip_addr_t netmask, ip_addr_t gateway) {
80109ad0:	f3 0f 1e fb          	endbr32 
80109ad4:	55                   	push   %ebp
80109ad5:	89 e5                	mov    %esp,%ebp
80109ad7:	57                   	push   %edi
80109ad8:	56                   	push   %esi
80109ad9:	53                   	push   %ebx
80109ada:	83 ec 0c             	sub    $0xc,%esp
80109add:	8b 7d 08             	mov    0x8(%ebp),%edi
80109ae0:	8b 75 0c             	mov    0xc(%ebp),%esi
    iface = (struct netif_ip *)kalloc();
80109ae3:	e8 28 8a ff ff       	call   80102510 <kalloc>
80109ae8:	89 c3                	mov    %eax,%ebx
    if (!iface) {
80109aea:	85 c0                	test   %eax,%eax
80109aec:	74 5b                	je     80109b49 <ip_netif_alloc+0x79>
    iface->network = iface->unicast & iface->netmask;
80109aee:	89 fa                	mov    %edi,%edx
    iface->unicast = unicast;
80109af0:	89 78 0c             	mov    %edi,0xc(%eax)
    iface->network = iface->unicast & iface->netmask;
80109af3:	21 f2                	and    %esi,%edx
    ((struct netif *)iface)->next = NULL;
80109af5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    ((struct netif *)iface)->family = NETIF_FAMILY_IPV4;
80109afb:	c6 40 04 02          	movb   $0x2,0x4(%eax)
    ((struct netif *)iface)->dev = NULL;
80109aff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    iface->netmask = netmask;
80109b06:	89 70 10             	mov    %esi,0x10(%eax)
    iface->network = iface->unicast & iface->netmask;
80109b09:	89 50 14             	mov    %edx,0x14(%eax)
    iface->broadcast = iface->network | ~iface->netmask;
80109b0c:	89 f0                	mov    %esi,%eax
80109b0e:	f7 d0                	not    %eax
80109b10:	09 c7                	or     %eax,%edi
    for (route = route_table; route < array_tailof(route_table); route++) {
80109b12:	b8 a0 16 13 80       	mov    $0x801316a0,%eax
    iface->broadcast = iface->network | ~iface->netmask;
80109b17:	89 7b 18             	mov    %edi,0x18(%ebx)
    for (route = route_table; route < array_tailof(route_table); route++) {
80109b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        if (!route->used) {
80109b20:	80 38 00             	cmpb   $0x0,(%eax)
80109b23:	74 33                	je     80109b58 <ip_netif_alloc+0x88>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109b25:	83 c0 14             	add    $0x14,%eax
80109b28:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109b2d:	75 f1                	jne    80109b20 <ip_netif_alloc+0x50>
	cprintf(">>>>>>>>>>>>>>>>>>> kfree 1. \n");
80109b2f:	83 ec 0c             	sub    $0xc,%esp
80109b32:	68 20 e6 10 80       	push   $0x8010e620
	    cprintf(">>>>>>>>>>>>>>>> kfree2. \n");
80109b37:	e8 54 68 ff ff       	call   80100390 <cprintf>
            kfree((char*)iface);
80109b3c:	89 1c 24             	mov    %ebx,(%esp)
            return NULL;
80109b3f:	31 db                	xor    %ebx,%ebx
            kfree((char*)iface);
80109b41:	e8 0a 88 ff ff       	call   80102350 <kfree>
            return NULL;
80109b46:	83 c4 10             	add    $0x10,%esp
}
80109b49:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109b4c:	89 d8                	mov    %ebx,%eax
80109b4e:	5b                   	pop    %ebx
80109b4f:	5e                   	pop    %esi
80109b50:	5f                   	pop    %edi
80109b51:	5d                   	pop    %ebp
80109b52:	c3                   	ret    
80109b53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109b57:	90                   	nop
            route->used = 1;
80109b58:	c6 00 01             	movb   $0x1,(%eax)
            route->network = network;
80109b5b:	89 50 04             	mov    %edx,0x4(%eax)
            route->netmask = netmask;
80109b5e:	89 70 08             	mov    %esi,0x8(%eax)
            route->nexthop = nexthop;
80109b61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            route->netif = netif;
80109b68:	89 58 10             	mov    %ebx,0x10(%eax)
    if (gateway) {
80109b6b:	8b 45 10             	mov    0x10(%ebp),%eax
80109b6e:	85 c0                	test   %eax,%eax
80109b70:	74 d7                	je     80109b49 <ip_netif_alloc+0x79>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109b72:	b8 a0 16 13 80       	mov    $0x801316a0,%eax
80109b77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109b7e:	66 90                	xchg   %ax,%ax
        if (!route->used) {
80109b80:	80 38 00             	cmpb   $0x0,(%eax)
80109b83:	74 14                	je     80109b99 <ip_netif_alloc+0xc9>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109b85:	83 c0 14             	add    $0x14,%eax
80109b88:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109b8d:	75 f1                	jne    80109b80 <ip_netif_alloc+0xb0>
	    cprintf(">>>>>>>>>>>>>>>> kfree2. \n");
80109b8f:	83 ec 0c             	sub    $0xc,%esp
80109b92:	68 80 e5 10 80       	push   $0x8010e580
80109b97:	eb 9e                	jmp    80109b37 <ip_netif_alloc+0x67>
            route->nexthop = nexthop;
80109b99:	8b 4d 10             	mov    0x10(%ebp),%ecx
            route->used = 1;
80109b9c:	c6 00 01             	movb   $0x1,(%eax)
            route->network = network;
80109b9f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            route->netmask = netmask;
80109ba6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            route->nexthop = nexthop;
80109bad:	89 48 0c             	mov    %ecx,0xc(%eax)
            route->netif = netif;
80109bb0:	89 58 10             	mov    %ebx,0x10(%eax)
            return 0;
80109bb3:	eb 94                	jmp    80109b49 <ip_netif_alloc+0x79>
80109bb5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109bc0 <ip_netif_register>:
ip_netif_register (struct netdev *dev, const char *addr, const char *netmask, const char *gateway) {
80109bc0:	f3 0f 1e fb          	endbr32 
80109bc4:	55                   	push   %ebp
80109bc5:	89 e5                	mov    %esp,%ebp
80109bc7:	53                   	push   %ebx
    if (ip_addr_pton(addr, &unicast) == -1) {
80109bc8:	8d 45 ec             	lea    -0x14(%ebp),%eax
ip_netif_register (struct netdev *dev, const char *addr, const char *netmask, const char *gateway) {
80109bcb:	83 ec 1c             	sub    $0x1c,%esp
    ip_addr_t unicast, mask, gw = 0;
80109bce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
ip_netif_register (struct netdev *dev, const char *addr, const char *netmask, const char *gateway) {
80109bd5:	8b 5d 14             	mov    0x14(%ebp),%ebx
    if (ip_addr_pton(addr, &unicast) == -1) {
80109bd8:	50                   	push   %eax
80109bd9:	ff 75 0c             	pushl  0xc(%ebp)
80109bdc:	e8 1f f9 ff ff       	call   80109500 <ip_addr_pton>
80109be1:	83 c4 10             	add    $0x10,%esp
80109be4:	83 f8 ff             	cmp    $0xffffffff,%eax
80109be7:	74 7f                	je     80109c68 <ip_netif_register+0xa8>
    if (ip_addr_pton(netmask, &mask) == -1) {
80109be9:	83 ec 08             	sub    $0x8,%esp
80109bec:	8d 45 f0             	lea    -0x10(%ebp),%eax
80109bef:	50                   	push   %eax
80109bf0:	ff 75 10             	pushl  0x10(%ebp)
80109bf3:	e8 08 f9 ff ff       	call   80109500 <ip_addr_pton>
80109bf8:	83 c4 10             	add    $0x10,%esp
80109bfb:	83 f8 ff             	cmp    $0xffffffff,%eax
80109bfe:	74 68                	je     80109c68 <ip_netif_register+0xa8>
    if (gateway) {
80109c00:	85 db                	test   %ebx,%ebx
80109c02:	74 15                	je     80109c19 <ip_netif_register+0x59>
        if (ip_addr_pton(gateway, &gw) == -1) {
80109c04:	83 ec 08             	sub    $0x8,%esp
80109c07:	8d 45 f4             	lea    -0xc(%ebp),%eax
80109c0a:	50                   	push   %eax
80109c0b:	53                   	push   %ebx
80109c0c:	e8 ef f8 ff ff       	call   80109500 <ip_addr_pton>
80109c11:	83 c4 10             	add    $0x10,%esp
80109c14:	83 f8 ff             	cmp    $0xffffffff,%eax
80109c17:	74 4f                	je     80109c68 <ip_netif_register+0xa8>
    netif = ip_netif_alloc(unicast, mask, gw);
80109c19:	83 ec 04             	sub    $0x4,%esp
80109c1c:	ff 75 f4             	pushl  -0xc(%ebp)
80109c1f:	ff 75 f0             	pushl  -0x10(%ebp)
80109c22:	ff 75 ec             	pushl  -0x14(%ebp)
80109c25:	e8 a6 fe ff ff       	call   80109ad0 <ip_netif_alloc>
    if (!netif) {
80109c2a:	83 c4 10             	add    $0x10,%esp
    netif = ip_netif_alloc(unicast, mask, gw);
80109c2d:	89 c3                	mov    %eax,%ebx
    if (!netif) {
80109c2f:	85 c0                	test   %eax,%eax
80109c31:	74 35                	je     80109c68 <ip_netif_register+0xa8>
    if (netdev_add_netif(dev, netif) == -1) {
80109c33:	83 ec 08             	sub    $0x8,%esp
80109c36:	50                   	push   %eax
80109c37:	ff 75 08             	pushl  0x8(%ebp)
80109c3a:	e8 11 09 00 00       	call   8010a550 <netdev_add_netif>
80109c3f:	83 c4 10             	add    $0x10,%esp
80109c42:	83 f8 ff             	cmp    $0xffffffff,%eax
80109c45:	74 09                	je     80109c50 <ip_netif_register+0x90>
}
80109c47:	89 d8                	mov    %ebx,%eax
80109c49:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80109c4c:	c9                   	leave  
80109c4d:	c3                   	ret    
80109c4e:	66 90                	xchg   %ax,%ax
	cprintf("\n>>>>>>>>>>> kfree 3.\n");
80109c50:	83 ec 0c             	sub    $0xc,%esp
80109c53:	68 9b e5 10 80       	push   $0x8010e59b
80109c58:	e8 33 67 ff ff       	call   80100390 <cprintf>
        kfree((char*)netif);
80109c5d:	89 1c 24             	mov    %ebx,(%esp)
80109c60:	e8 eb 86 ff ff       	call   80102350 <kfree>
        return NULL;
80109c65:	83 c4 10             	add    $0x10,%esp
80109c68:	31 db                	xor    %ebx,%ebx
}
80109c6a:	89 d8                	mov    %ebx,%eax
80109c6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80109c6f:	c9                   	leave  
80109c70:	c3                   	ret    
80109c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109c7f:	90                   	nop

80109c80 <ip_netif_reconfigure>:
ip_netif_reconfigure (struct netif *netif, ip_addr_t unicast, ip_addr_t netmask, ip_addr_t gateway) {
80109c80:	f3 0f 1e fb          	endbr32 
80109c84:	55                   	push   %ebp
    for (route = route_table; route < array_tailof(route_table); route++) {
80109c85:	b8 a0 16 13 80       	mov    $0x801316a0,%eax
ip_netif_reconfigure (struct netif *netif, ip_addr_t unicast, ip_addr_t netmask, ip_addr_t gateway) {
80109c8a:	89 e5                	mov    %esp,%ebp
80109c8c:	56                   	push   %esi
80109c8d:	8b 55 08             	mov    0x8(%ebp),%edx
80109c90:	8b 75 0c             	mov    0xc(%ebp),%esi
80109c93:	53                   	push   %ebx
80109c94:	8b 4d 10             	mov    0x10(%ebp),%ecx
80109c97:	eb 11                	jmp    80109caa <ip_netif_reconfigure+0x2a>
80109c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    for (route = route_table; route < array_tailof(route_table); route++) {
80109ca0:	83 c0 14             	add    $0x14,%eax
80109ca3:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109ca8:	74 1e                	je     80109cc8 <ip_netif_reconfigure+0x48>
        if (route->used) {
80109caa:	80 38 00             	cmpb   $0x0,(%eax)
80109cad:	74 f1                	je     80109ca0 <ip_netif_reconfigure+0x20>
            if (route->netif == netif) {
80109caf:	3b 50 10             	cmp    0x10(%eax),%edx
80109cb2:	75 ec                	jne    80109ca0 <ip_netif_reconfigure+0x20>
                route->used = 0;
80109cb4:	c6 00 00             	movb   $0x0,(%eax)
    for (route = route_table; route < array_tailof(route_table); route++) {
80109cb7:	83 c0 14             	add    $0x14,%eax
80109cba:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109cbf:	75 e9                	jne    80109caa <ip_netif_reconfigure+0x2a>
80109cc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    iface->network = iface->unicast & iface->netmask;
80109cc8:	89 f3                	mov    %esi,%ebx
    iface->broadcast = iface->network | ~iface->netmask;
80109cca:	89 c8                	mov    %ecx,%eax
    iface->unicast = unicast;
80109ccc:	89 72 0c             	mov    %esi,0xc(%edx)
    iface->network = iface->unicast & iface->netmask;
80109ccf:	21 cb                	and    %ecx,%ebx
    iface->broadcast = iface->network | ~iface->netmask;
80109cd1:	f7 d0                	not    %eax
    iface->netmask = netmask;
80109cd3:	89 4a 10             	mov    %ecx,0x10(%edx)
    iface->network = iface->unicast & iface->netmask;
80109cd6:	89 5a 14             	mov    %ebx,0x14(%edx)
    iface->broadcast = iface->network | ~iface->netmask;
80109cd9:	09 f0                	or     %esi,%eax
80109cdb:	89 42 18             	mov    %eax,0x18(%edx)
    for (route = route_table; route < array_tailof(route_table); route++) {
80109cde:	b8 a0 16 13 80       	mov    $0x801316a0,%eax
80109ce3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109ce7:	90                   	nop
        if (!route->used) {
80109ce8:	80 38 00             	cmpb   $0x0,(%eax)
80109ceb:	74 13                	je     80109d00 <ip_netif_reconfigure+0x80>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109ced:	83 c0 14             	add    $0x14,%eax
80109cf0:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109cf5:	75 f1                	jne    80109ce8 <ip_netif_reconfigure+0x68>
}
80109cf7:	5b                   	pop    %ebx
        return -1;
80109cf8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80109cfd:	5e                   	pop    %esi
80109cfe:	5d                   	pop    %ebp
80109cff:	c3                   	ret    
            route->used = 1;
80109d00:	c6 00 01             	movb   $0x1,(%eax)
            route->network = network;
80109d03:	89 58 04             	mov    %ebx,0x4(%eax)
            route->netmask = netmask;
80109d06:	89 48 08             	mov    %ecx,0x8(%eax)
            route->nexthop = nexthop;
80109d09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            route->netif = netif;
80109d10:	89 50 10             	mov    %edx,0x10(%eax)
    if (gateway) {
80109d13:	8b 45 14             	mov    0x14(%ebp),%eax
80109d16:	85 c0                	test   %eax,%eax
80109d18:	74 31                	je     80109d4b <ip_netif_reconfigure+0xcb>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109d1a:	b8 a0 16 13 80       	mov    $0x801316a0,%eax
80109d1f:	90                   	nop
        if (!route->used) {
80109d20:	80 38 00             	cmpb   $0x0,(%eax)
80109d23:	74 0c                	je     80109d31 <ip_netif_reconfigure+0xb1>
    for (route = route_table; route < array_tailof(route_table); route++) {
80109d25:	83 c0 14             	add    $0x14,%eax
80109d28:	3d 40 17 13 80       	cmp    $0x80131740,%eax
80109d2d:	75 f1                	jne    80109d20 <ip_netif_reconfigure+0xa0>
80109d2f:	eb c6                	jmp    80109cf7 <ip_netif_reconfigure+0x77>
            route->nexthop = nexthop;
80109d31:	8b 75 14             	mov    0x14(%ebp),%esi
            route->used = 1;
80109d34:	c6 00 01             	movb   $0x1,(%eax)
            route->network = network;
80109d37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            route->netmask = netmask;
80109d3e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            route->nexthop = nexthop;
80109d45:	89 70 0c             	mov    %esi,0xc(%eax)
            route->netif = netif;
80109d48:	89 50 10             	mov    %edx,0x10(%eax)
}
80109d4b:	5b                   	pop    %ebx
    return 0;
80109d4c:	31 c0                	xor    %eax,%eax
}
80109d4e:	5e                   	pop    %esi
80109d4f:	5d                   	pop    %ebp
80109d50:	c3                   	ret    
80109d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109d58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109d5f:	90                   	nop

80109d60 <ip_netif_by_addr>:
ip_netif_by_addr (ip_addr_t *addr) {
80109d60:	f3 0f 1e fb          	endbr32 
80109d64:	55                   	push   %ebp
80109d65:	89 e5                	mov    %esp,%ebp
80109d67:	53                   	push   %ebx
80109d68:	83 ec 04             	sub    $0x4,%esp
80109d6b:	8b 5d 08             	mov    0x8(%ebp),%ebx
    for (dev = netdev_root(); dev; dev = dev->next) {
80109d6e:	e8 1d 06 00 00       	call   8010a390 <netdev_root>
80109d73:	85 c0                	test   %eax,%eax
80109d75:	74 37                	je     80109dae <ip_netif_by_addr+0x4e>
80109d77:	89 c2                	mov    %eax,%edx
        for (entry = dev->ifs; entry; entry = entry->next) {
80109d79:	8b 42 04             	mov    0x4(%edx),%eax
80109d7c:	85 c0                	test   %eax,%eax
80109d7e:	75 0e                	jne    80109d8e <ip_netif_by_addr+0x2e>
80109d80:	eb 26                	jmp    80109da8 <ip_netif_by_addr+0x48>
80109d82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109d88:	8b 00                	mov    (%eax),%eax
80109d8a:	85 c0                	test   %eax,%eax
80109d8c:	74 1a                	je     80109da8 <ip_netif_by_addr+0x48>
            if (entry->family == NETIF_FAMILY_IPV4 && ((struct netif_ip *)entry)->unicast == *addr) {
80109d8e:	80 78 04 02          	cmpb   $0x2,0x4(%eax)
80109d92:	75 f4                	jne    80109d88 <ip_netif_by_addr+0x28>
80109d94:	8b 0b                	mov    (%ebx),%ecx
80109d96:	39 48 0c             	cmp    %ecx,0xc(%eax)
80109d99:	75 ed                	jne    80109d88 <ip_netif_by_addr+0x28>
}
80109d9b:	83 c4 04             	add    $0x4,%esp
80109d9e:	5b                   	pop    %ebx
80109d9f:	5d                   	pop    %ebp
80109da0:	c3                   	ret    
80109da1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    for (dev = netdev_root(); dev; dev = dev->next) {
80109da8:	8b 12                	mov    (%edx),%edx
80109daa:	85 d2                	test   %edx,%edx
80109dac:	75 cb                	jne    80109d79 <ip_netif_by_addr+0x19>
}
80109dae:	83 c4 04             	add    $0x4,%esp
    return NULL;
80109db1:	31 c0                	xor    %eax,%eax
}
80109db3:	5b                   	pop    %ebx
80109db4:	5d                   	pop    %ebp
80109db5:	c3                   	ret    
80109db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109dbd:	8d 76 00             	lea    0x0(%esi),%esi

80109dc0 <ip_netif_by_peer>:
ip_netif_by_peer (ip_addr_t *peer) {
80109dc0:	f3 0f 1e fb          	endbr32 
80109dc4:	55                   	push   %ebp
80109dc5:	89 e5                	mov    %esp,%ebp
80109dc7:	83 ec 08             	sub    $0x8,%esp
    route = ip_route_lookup(NULL, peer);
80109dca:	8b 45 08             	mov    0x8(%ebp),%eax
80109dcd:	e8 ae f6 ff ff       	call   80109480 <ip_route_lookup.constprop.0>
    if (!route) {
80109dd2:	85 c0                	test   %eax,%eax
80109dd4:	74 03                	je     80109dd9 <ip_netif_by_peer+0x19>
    return route->netif;
80109dd6:	8b 40 10             	mov    0x10(%eax),%eax
}
80109dd9:	c9                   	leave  
80109dda:	c3                   	ret    
80109ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109ddf:	90                   	nop

80109de0 <ip_tx>:
    release(&iplock);
    return ret;
}

ssize_t
ip_tx (struct netif *netif, uint8_t protocol, const uint8_t *buf, size_t len, const ip_addr_t *dst) {
80109de0:	f3 0f 1e fb          	endbr32 
80109de4:	55                   	push   %ebp
80109de5:	89 e5                	mov    %esp,%ebp
80109de7:	57                   	push   %edi
80109de8:	56                   	push   %esi
80109de9:	53                   	push   %ebx
80109dea:	83 ec 1c             	sub    $0x1c,%esp
80109ded:	8b 75 08             	mov    0x8(%ebp),%esi
80109df0:	0f b6 5d 0c          	movzbl 0xc(%ebp),%ebx
    struct ip_route *route;
    ip_addr_t *nexthop = NULL, *src = NULL;
    uint16_t id, flag, offset;
    size_t done, slen;

    if (netif && *dst == IP_ADDR_BROADCAST) {
80109df4:	8b 45 18             	mov    0x18(%ebp),%eax
80109df7:	85 f6                	test   %esi,%esi
80109df9:	0f 84 09 01 00 00    	je     80109f08 <ip_tx+0x128>
80109dff:	83 38 ff             	cmpl   $0xffffffff,(%eax)
80109e02:	0f 84 e8 00 00 00    	je     80109ef0 <ip_tx+0x110>
        nexthop = NULL;
    } else {
        route = ip_route_lookup(NULL, dst);
80109e08:	8b 45 18             	mov    0x18(%ebp),%eax
80109e0b:	e8 70 f6 ff ff       	call   80109480 <ip_route_lookup.constprop.0>
        if (!route) {
80109e10:	85 c0                	test   %eax,%eax
80109e12:	0f 84 05 01 00 00    	je     80109f1d <ip_tx+0x13d>
            cprintf("ip no route to host.\n");
            return -1;
        }
        if (netif) {
            src = &((struct netif_ip *)netif)->unicast;
80109e18:	83 c6 0c             	add    $0xc,%esi
80109e1b:	89 75 d8             	mov    %esi,-0x28(%ebp)
        }
        netif = route->netif;
80109e1e:	8b 7d 18             	mov    0x18(%ebp),%edi
        nexthop = (ip_addr_t *)(route->nexthop ? &route->nexthop : dst);
80109e21:	8b 50 0c             	mov    0xc(%eax),%edx
        netif = route->netif;
80109e24:	8b 70 10             	mov    0x10(%eax),%esi
        nexthop = (ip_addr_t *)(route->nexthop ? &route->nexthop : dst);
80109e27:	89 7d e4             	mov    %edi,-0x1c(%ebp)
80109e2a:	85 d2                	test   %edx,%edx
80109e2c:	0f 85 ae 00 00 00    	jne    80109ee0 <ip_tx+0x100>
    acquire(&iplock);
80109e32:	83 ec 0c             	sub    $0xc,%esp
80109e35:	68 40 17 13 80       	push   $0x80131740
80109e3a:	e8 71 b2 ff ff       	call   801050b0 <acquire>
    ret = id++;
80109e3f:	0f b7 3d 8c 14 11 80 	movzwl 0x8011148c,%edi
    release(&iplock);
80109e46:	c7 04 24 40 17 13 80 	movl   $0x80131740,(%esp)
    ret = id++;
80109e4d:	8d 47 01             	lea    0x1(%edi),%eax
80109e50:	66 a3 8c 14 11 80    	mov    %ax,0x8011148c
    release(&iplock);
80109e56:	e8 15 b3 ff ff       	call   80105170 <release>
    id = ip_generate_id();
    for (done = 0; done < len; done += slen) {
        slen = MIN((len - done), (size_t)(netif->dev->mtu - IP_HDR_SIZE_MIN));
        flag = ((done + slen) < len) ? 0x2000 : 0x0000;
        offset = flag | ((done >> 3) & 0x1fff);
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109e5b:	89 5d e0             	mov    %ebx,-0x20(%ebp)
80109e5e:	0f b7 df             	movzwl %di,%ebx
    for (done = 0; done < len; done += slen) {
80109e61:	83 c4 10             	add    $0x10,%esp
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109e64:	89 5d dc             	mov    %ebx,-0x24(%ebp)
80109e67:	8b 7d 14             	mov    0x14(%ebp),%edi
    for (done = 0; done < len; done += slen) {
80109e6a:	31 c0                	xor    %eax,%eax
80109e6c:	89 75 08             	mov    %esi,0x8(%ebp)
80109e6f:	eb 60                	jmp    80109ed1 <ip_tx+0xf1>
80109e71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        slen = MIN((len - done), (size_t)(netif->dev->mtu - IP_HDR_SIZE_MIN));
80109e78:	8b 5d 08             	mov    0x8(%ebp),%ebx
80109e7b:	89 f9                	mov    %edi,%ecx
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109e7d:	8b 75 10             	mov    0x10(%ebp),%esi
        slen = MIN((len - done), (size_t)(netif->dev->mtu - IP_HDR_SIZE_MIN));
80109e80:	29 c1                	sub    %eax,%ecx
80109e82:	8b 53 08             	mov    0x8(%ebx),%edx
80109e85:	0f b7 52 1e          	movzwl 0x1e(%edx),%edx
80109e89:	83 ea 14             	sub    $0x14,%edx
80109e8c:	39 ca                	cmp    %ecx,%edx
80109e8e:	0f 47 d1             	cmova  %ecx,%edx
        flag = ((done + slen) < len) ? 0x2000 : 0x0000;
80109e91:	31 c9                	xor    %ecx,%ecx
80109e93:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
80109e96:	39 fb                	cmp    %edi,%ebx
80109e98:	0f 92 c1             	setb   %cl
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109e9b:	01 c6                	add    %eax,%esi
        offset = flag | ((done >> 3) & 0x1fff);
80109e9d:	66 c1 e8 03          	shr    $0x3,%ax
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109ea1:	83 ec 08             	sub    $0x8,%esp
        flag = ((done + slen) < len) ? 0x2000 : 0x0000;
80109ea4:	c1 e1 0d             	shl    $0xd,%ecx
        offset = flag | ((done >> 3) & 0x1fff);
80109ea7:	09 c8                	or     %ecx,%eax
        if (ip_tx_core(netif, protocol, buf + done, slen, src, dst, nexthop, id, offset) == -1) {
80109ea9:	89 f1                	mov    %esi,%ecx
80109eab:	0f b7 c0             	movzwl %ax,%eax
80109eae:	50                   	push   %eax
80109eaf:	8b 45 08             	mov    0x8(%ebp),%eax
80109eb2:	ff 75 dc             	pushl  -0x24(%ebp)
80109eb5:	ff 75 e4             	pushl  -0x1c(%ebp)
80109eb8:	ff 75 18             	pushl  0x18(%ebp)
80109ebb:	ff 75 d8             	pushl  -0x28(%ebp)
80109ebe:	52                   	push   %edx
80109ebf:	8b 55 e0             	mov    -0x20(%ebp),%edx
80109ec2:	e8 99 f8 ff ff       	call   80109760 <ip_tx_core>
80109ec7:	83 c4 20             	add    $0x20,%esp
80109eca:	83 f8 ff             	cmp    $0xffffffff,%eax
80109ecd:	74 09                	je     80109ed8 <ip_tx+0xf8>
        flag = ((done + slen) < len) ? 0x2000 : 0x0000;
80109ecf:	89 d8                	mov    %ebx,%eax
    for (done = 0; done < len; done += slen) {
80109ed1:	39 f8                	cmp    %edi,%eax
80109ed3:	72 a3                	jb     80109e78 <ip_tx+0x98>
            return -1;
        }
    }
    return len;
80109ed5:	8b 45 14             	mov    0x14(%ebp),%eax
}
80109ed8:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109edb:	5b                   	pop    %ebx
80109edc:	5e                   	pop    %esi
80109edd:	5f                   	pop    %edi
80109ede:	5d                   	pop    %ebp
80109edf:	c3                   	ret    
        nexthop = (ip_addr_t *)(route->nexthop ? &route->nexthop : dst);
80109ee0:	83 c0 0c             	add    $0xc,%eax
80109ee3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80109ee6:	e9 47 ff ff ff       	jmp    80109e32 <ip_tx+0x52>
80109eeb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109eef:	90                   	nop
    ip_addr_t *nexthop = NULL, *src = NULL;
80109ef0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        nexthop = NULL;
80109ef7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109efe:	e9 2f ff ff ff       	jmp    80109e32 <ip_tx+0x52>
80109f03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109f07:	90                   	nop
        route = ip_route_lookup(NULL, dst);
80109f08:	e8 73 f5 ff ff       	call   80109480 <ip_route_lookup.constprop.0>
        if (!route) {
80109f0d:	85 c0                	test   %eax,%eax
80109f0f:	74 0c                	je     80109f1d <ip_tx+0x13d>
    ip_addr_t *nexthop = NULL, *src = NULL;
80109f11:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
80109f18:	e9 01 ff ff ff       	jmp    80109e1e <ip_tx+0x3e>
            cprintf("ip no route to host.\n");
80109f1d:	83 ec 0c             	sub    $0xc,%esp
80109f20:	68 b2 e5 10 80       	push   $0x8010e5b2
80109f25:	e8 66 64 ff ff       	call   80100390 <cprintf>
            return -1;
80109f2a:	83 c4 10             	add    $0x10,%esp
80109f2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80109f32:	eb a4                	jmp    80109ed8 <ip_tx+0xf8>
80109f34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109f3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109f3f:	90                   	nop

80109f40 <ip_add_protocol>:

int
ip_add_protocol (uint8_t type, void (*handler)(uint8_t *payload, size_t len, ip_addr_t *src, ip_addr_t *dst, struct netif *netif)) {
80109f40:	f3 0f 1e fb          	endbr32 
80109f44:	55                   	push   %ebp
80109f45:	89 e5                	mov    %esp,%ebp
80109f47:	53                   	push   %ebx
80109f48:	83 ec 04             	sub    $0x4,%esp
80109f4b:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct ip_protocol *p;

    p = (struct ip_protocol *)kalloc();
80109f4e:	e8 bd 85 ff ff       	call   80102510 <kalloc>
    if (!p) {
80109f53:	85 c0                	test   %eax,%eax
80109f55:	74 1e                	je     80109f75 <ip_add_protocol+0x35>
        return -1;
    }
    p->next = protocols;
80109f57:	8b 15 80 16 13 80    	mov    0x80131680,%edx
    p->type = type;
80109f5d:	88 58 04             	mov    %bl,0x4(%eax)
    p->handler = handler;
    protocols = p;
80109f60:	a3 80 16 13 80       	mov    %eax,0x80131680
    p->next = protocols;
80109f65:	89 10                	mov    %edx,(%eax)
    p->handler = handler;
80109f67:	8b 55 0c             	mov    0xc(%ebp),%edx
80109f6a:	89 50 08             	mov    %edx,0x8(%eax)
    return 0;
80109f6d:	31 c0                	xor    %eax,%eax
}
80109f6f:	83 c4 04             	add    $0x4,%esp
80109f72:	5b                   	pop    %ebx
80109f73:	5d                   	pop    %ebp
80109f74:	c3                   	ret    
        return -1;
80109f75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80109f7a:	eb f3                	jmp    80109f6f <ip_add_protocol+0x2f>
80109f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109f80 <ip_init>:

int
ip_init (void) {
80109f80:	f3 0f 1e fb          	endbr32 
80109f84:	55                   	push   %ebp
80109f85:	89 e5                	mov    %esp,%ebp
80109f87:	83 ec 10             	sub    $0x10,%esp
    initlock(&iplock, "ip");
80109f8a:	68 c8 e5 10 80       	push   $0x8010e5c8
80109f8f:	68 40 17 13 80       	push   $0x80131740
80109f94:	e8 97 af ff ff       	call   80104f30 <initlock>
    netproto_register(NETPROTO_TYPE_IP, ip_rx);
80109f99:	58                   	pop    %eax
80109f9a:	5a                   	pop    %edx
80109f9b:	68 30 99 10 80       	push   $0x80109930
80109fa0:	68 00 08 00 00       	push   $0x800
80109fa5:	e8 66 06 00 00       	call   8010a610 <netproto_register>
    return 0;
}
80109faa:	31 c0                	xor    %eax,%eax
80109fac:	c9                   	leave  
80109fad:	c3                   	ret    
80109fae:	66 90                	xchg   %ax,%ax

80109fb0 <init_genrand>:
static unsigned long mt[N]; /* the array for the state vector  */
static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */

/* initializes mt[N] with a seed */
void init_genrand(unsigned long s)
{
80109fb0:	f3 0f 1e fb          	endbr32 
80109fb4:	55                   	push   %ebp
    mt[0]= s & 0xffffffffUL;
80109fb5:	ba 01 00 00 00       	mov    $0x1,%edx
{
80109fba:	89 e5                	mov    %esp,%ebp
80109fbc:	8b 4d 08             	mov    0x8(%ebp),%ecx
    mt[0]= s & 0xffffffffUL;
80109fbf:	89 0d 80 17 13 80    	mov    %ecx,0x80131780
    for (mti=1; mti<N; mti++) {
80109fc5:	eb 0c                	jmp    80109fd3 <init_genrand+0x23>
80109fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109fce:	66 90                	xchg   %ax,%ax
80109fd0:	83 c2 01             	add    $0x1,%edx
        mt[mti] = 
	    (1812433253UL * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti); 
80109fd3:	89 c8                	mov    %ecx,%eax
80109fd5:	c1 e8 1e             	shr    $0x1e,%eax
80109fd8:	31 c8                	xor    %ecx,%eax
80109fda:	69 c0 65 89 07 6c    	imul   $0x6c078965,%eax,%eax
80109fe0:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
        mt[mti] = 
80109fe3:	89 0c 95 80 17 13 80 	mov    %ecx,-0x7fece880(,%edx,4)
    for (mti=1; mti<N; mti++) {
80109fea:	81 fa 6f 02 00 00    	cmp    $0x26f,%edx
80109ff0:	75 de                	jne    80109fd0 <init_genrand+0x20>
80109ff2:	c7 05 90 14 11 80 70 	movl   $0x270,0x80111490
80109ff9:	02 00 00 
        /* only MSBs of the array mt[].                        */
        /* 2002/01/09 modified by Makoto Matsumoto             */
        mt[mti] &= 0xffffffffUL;
        /* for >32 bit machines */
    }
}
80109ffc:	5d                   	pop    %ebp
80109ffd:	c3                   	ret    
80109ffe:	66 90                	xchg   %ax,%ax

8010a000 <init_by_array>:
/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
void init_by_array(unsigned long init_key[], int key_length)
{
8010a000:	f3 0f 1e fb          	endbr32 
8010a004:	55                   	push   %ebp
    mt[0]= s & 0xffffffffUL;
8010a005:	b8 aa d6 2b 01       	mov    $0x12bd6aa,%eax
8010a00a:	89 c2                	mov    %eax,%edx
{
8010a00c:	89 e5                	mov    %esp,%ebp
8010a00e:	57                   	push   %edi
8010a00f:	56                   	push   %esi
8010a010:	53                   	push   %ebx
    mt[0]= s & 0xffffffffUL;
8010a011:	bb 01 00 00 00       	mov    $0x1,%ebx
{
8010a016:	83 ec 04             	sub    $0x4,%esp
    mt[0]= s & 0xffffffffUL;
8010a019:	c7 05 80 17 13 80 aa 	movl   $0x12bd6aa,0x80131780
8010a020:	d6 2b 01 
    for (mti=1; mti<N; mti++) {
8010a023:	eb 06                	jmp    8010a02b <init_by_array+0x2b>
8010a025:	8d 76 00             	lea    0x0(%esi),%esi
8010a028:	83 c3 01             	add    $0x1,%ebx
	    (1812433253UL * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti); 
8010a02b:	89 d0                	mov    %edx,%eax
8010a02d:	c1 e8 1e             	shr    $0x1e,%eax
8010a030:	31 d0                	xor    %edx,%eax
8010a032:	69 c0 65 89 07 6c    	imul   $0x6c078965,%eax,%eax
8010a038:	8d 14 18             	lea    (%eax,%ebx,1),%edx
        mt[mti] = 
8010a03b:	89 14 9d 80 17 13 80 	mov    %edx,-0x7fece880(,%ebx,4)
    for (mti=1; mti<N; mti++) {
8010a042:	81 fb 6f 02 00 00    	cmp    $0x26f,%ebx
8010a048:	75 de                	jne    8010a028 <init_by_array+0x28>
        mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525UL))
          + init_key[j] + j; /* non linear */
        mt[i] &= 0xffffffffUL; /* for WORDSIZE > 32 machines */
        i++; j++;
        if (i>=N) { mt[0] = mt[N-1]; i=1; }
        if (j>=key_length) j=0;
8010a04a:	89 5d f0             	mov    %ebx,-0x10(%ebp)
8010a04d:	8b 5d 08             	mov    0x8(%ebp),%ebx
    k = (N>key_length ? N : key_length);
8010a050:	bf 70 02 00 00       	mov    $0x270,%edi
    i=1; j=0;
8010a055:	b9 01 00 00 00       	mov    $0x1,%ecx
8010a05a:	a1 80 17 13 80       	mov    0x80131780,%eax
    k = (N>key_length ? N : key_length);
8010a05f:	81 7d 0c 70 02 00 00 	cmpl   $0x270,0xc(%ebp)
8010a066:	c7 05 90 14 11 80 70 	movl   $0x270,0x80111490
8010a06d:	02 00 00 
8010a070:	0f 4d 7d 0c          	cmovge 0xc(%ebp),%edi
    i=1; j=0;
8010a074:	31 f6                	xor    %esi,%esi
8010a076:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a07d:	8d 76 00             	lea    0x0(%esi),%esi
        mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525UL))
8010a080:	89 c2                	mov    %eax,%edx
8010a082:	c1 ea 1e             	shr    $0x1e,%edx
8010a085:	31 d0                	xor    %edx,%eax
8010a087:	69 c0 0d 66 19 00    	imul   $0x19660d,%eax,%eax
8010a08d:	33 04 8d 80 17 13 80 	xor    -0x7fece880(,%ecx,4),%eax
          + init_key[j] + j; /* non linear */
8010a094:	03 04 b3             	add    (%ebx,%esi,4),%eax
8010a097:	01 f0                	add    %esi,%eax
        i++; j++;
8010a099:	83 c6 01             	add    $0x1,%esi
        mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525UL))
8010a09c:	89 04 8d 80 17 13 80 	mov    %eax,-0x7fece880(,%ecx,4)
        i++; j++;
8010a0a3:	83 c1 01             	add    $0x1,%ecx
        if (i>=N) { mt[0] = mt[N-1]; i=1; }
8010a0a6:	81 f9 6f 02 00 00    	cmp    $0x26f,%ecx
8010a0ac:	7e 0f                	jle    8010a0bd <init_by_array+0xbd>
8010a0ae:	a1 3c 21 13 80       	mov    0x8013213c,%eax
8010a0b3:	b9 01 00 00 00       	mov    $0x1,%ecx
8010a0b8:	a3 80 17 13 80       	mov    %eax,0x80131780
        if (j>=key_length) j=0;
8010a0bd:	39 75 0c             	cmp    %esi,0xc(%ebp)
8010a0c0:	ba 00 00 00 00       	mov    $0x0,%edx
8010a0c5:	0f 4e f2             	cmovle %edx,%esi
    for (; k; k--) {
8010a0c8:	83 ef 01             	sub    $0x1,%edi
8010a0cb:	75 b3                	jne    8010a080 <init_by_array+0x80>
8010a0cd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
8010a0d0:	89 c2                	mov    %eax,%edx
8010a0d2:	eb 0b                	jmp    8010a0df <init_by_array+0xdf>
8010a0d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a0d8:	8b 14 8d 7c 17 13 80 	mov    -0x7fece884(,%ecx,4),%edx
    }
    for (k=N-1; k; k--) {
        mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941UL))
8010a0df:	89 d0                	mov    %edx,%eax
8010a0e1:	c1 e8 1e             	shr    $0x1e,%eax
8010a0e4:	31 d0                	xor    %edx,%eax
8010a0e6:	69 c0 65 8b 58 5d    	imul   $0x5d588b65,%eax,%eax
8010a0ec:	33 04 8d 80 17 13 80 	xor    -0x7fece880(,%ecx,4),%eax
          - i; /* non linear */
8010a0f3:	29 c8                	sub    %ecx,%eax
8010a0f5:	89 04 8d 80 17 13 80 	mov    %eax,-0x7fece880(,%ecx,4)
        mt[i] &= 0xffffffffUL; /* for WORDSIZE > 32 machines */
        i++;
8010a0fc:	83 c1 01             	add    $0x1,%ecx
        if (i>=N) { mt[0] = mt[N-1]; i=1; }
8010a0ff:	81 f9 70 02 00 00    	cmp    $0x270,%ecx
8010a105:	75 0f                	jne    8010a116 <init_by_array+0x116>
8010a107:	a1 3c 21 13 80       	mov    0x8013213c,%eax
8010a10c:	b9 01 00 00 00       	mov    $0x1,%ecx
8010a111:	a3 80 17 13 80       	mov    %eax,0x80131780
    for (k=N-1; k; k--) {
8010a116:	83 eb 01             	sub    $0x1,%ebx
8010a119:	75 bd                	jne    8010a0d8 <init_by_array+0xd8>
    }

    mt[0] = 0x80000000UL; /* MSB is 1; assuring non-zero initial array */ 
8010a11b:	c7 05 80 17 13 80 00 	movl   $0x80000000,0x80131780
8010a122:	00 00 80 
}
8010a125:	83 c4 04             	add    $0x4,%esp
8010a128:	5b                   	pop    %ebx
8010a129:	5e                   	pop    %esi
8010a12a:	5f                   	pop    %edi
8010a12b:	5d                   	pop    %ebp
8010a12c:	c3                   	ret    
8010a12d:	8d 76 00             	lea    0x0(%esi),%esi

8010a130 <genrand_int32>:

/* generates a random number on [0,0xffffffff]-interval */
unsigned long genrand_int32(void)
{
8010a130:	f3 0f 1e fb          	endbr32 
    unsigned long y;
    static unsigned long mag01[2]={0x0UL, MATRIX_A};
    /* mag01[x] = x * MATRIX_A  for x=0,1 */

    if (mti >= N) { /* generate N words at one time */
8010a134:	a1 90 14 11 80       	mov    0x80111490,%eax
8010a139:	3d 6f 02 00 00       	cmp    $0x26f,%eax
8010a13e:	7f 37                	jg     8010a177 <genrand_int32+0x47>
8010a140:	8d 50 01             	lea    0x1(%eax),%edx
8010a143:	8b 04 85 80 17 13 80 	mov    -0x7fece880(,%eax,4),%eax
        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1UL];

        mti = 0;
    }
  
    y = mt[mti++];
8010a14a:	89 15 90 14 11 80    	mov    %edx,0x80111490

    /* Tempering */
    y ^= (y >> 11);
8010a150:	89 c2                	mov    %eax,%edx
8010a152:	c1 ea 0b             	shr    $0xb,%edx
8010a155:	31 c2                	xor    %eax,%edx
    y ^= (y << 7) & 0x9d2c5680UL;
8010a157:	89 d0                	mov    %edx,%eax
8010a159:	c1 e0 07             	shl    $0x7,%eax
8010a15c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
8010a161:	31 c2                	xor    %eax,%edx
    y ^= (y << 15) & 0xefc60000UL;
8010a163:	89 d0                	mov    %edx,%eax
8010a165:	c1 e0 0f             	shl    $0xf,%eax
8010a168:	25 00 00 c6 ef       	and    $0xefc60000,%eax
8010a16d:	31 d0                	xor    %edx,%eax
    y ^= (y >> 18);
8010a16f:	89 c2                	mov    %eax,%edx
8010a171:	c1 ea 12             	shr    $0x12,%edx
8010a174:	31 d0                	xor    %edx,%eax

    return y;
}
8010a176:	c3                   	ret    
        if (mti == N+1)   /* if init_genrand() has not been called, */
8010a177:	3d 71 02 00 00       	cmp    $0x271,%eax
8010a17c:	0f 84 cf 00 00 00    	je     8010a251 <genrand_int32+0x121>
    mt[0]= s & 0xffffffffUL;
8010a182:	31 c0                	xor    %eax,%eax
8010a184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
8010a188:	8b 0c 85 80 17 13 80 	mov    -0x7fece880(,%eax,4),%ecx
8010a18f:	83 c0 01             	add    $0x1,%eax
8010a192:	8b 14 85 80 17 13 80 	mov    -0x7fece880(,%eax,4),%edx
8010a199:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
8010a19f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
8010a1a5:	09 ca                	or     %ecx,%edx
            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1UL];
8010a1a7:	89 d1                	mov    %edx,%ecx
8010a1a9:	83 e2 01             	and    $0x1,%edx
8010a1ac:	d1 e9                	shr    %ecx
8010a1ae:	33 0c 85 b0 1d 13 80 	xor    -0x7fece250(,%eax,4),%ecx
8010a1b5:	33 0c 95 48 e6 10 80 	xor    -0x7fef19b8(,%edx,4),%ecx
8010a1bc:	89 0c 85 7c 17 13 80 	mov    %ecx,-0x7fece884(,%eax,4)
        for (kk=0;kk<N-M;kk++) {
8010a1c3:	3d e3 00 00 00       	cmp    $0xe3,%eax
8010a1c8:	75 be                	jne    8010a188 <genrand_int32+0x58>
8010a1ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
8010a1d0:	8b 0c 85 80 17 13 80 	mov    -0x7fece880(,%eax,4),%ecx
8010a1d7:	83 c0 01             	add    $0x1,%eax
8010a1da:	8b 14 85 80 17 13 80 	mov    -0x7fece880(,%eax,4),%edx
8010a1e1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
8010a1e7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
8010a1ed:	09 ca                	or     %ecx,%edx
            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
8010a1ef:	89 d1                	mov    %edx,%ecx
8010a1f1:	83 e2 01             	and    $0x1,%edx
8010a1f4:	d1 e9                	shr    %ecx
8010a1f6:	33 0c 85 f0 13 13 80 	xor    -0x7fecec10(,%eax,4),%ecx
8010a1fd:	33 0c 95 48 e6 10 80 	xor    -0x7fef19b8(,%edx,4),%ecx
8010a204:	89 0c 85 7c 17 13 80 	mov    %ecx,-0x7fece884(,%eax,4)
        for (;kk<N-1;kk++) {
8010a20b:	3d 6f 02 00 00       	cmp    $0x26f,%eax
8010a210:	75 be                	jne    8010a1d0 <genrand_int32+0xa0>
        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
8010a212:	a1 80 17 13 80       	mov    0x80131780,%eax
8010a217:	8b 0d 3c 21 13 80    	mov    0x8013213c,%ecx
8010a21d:	89 c2                	mov    %eax,%edx
8010a21f:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
8010a225:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
8010a22b:	09 d1                	or     %edx,%ecx
        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1UL];
8010a22d:	89 ca                	mov    %ecx,%edx
8010a22f:	83 e1 01             	and    $0x1,%ecx
8010a232:	d1 ea                	shr    %edx
8010a234:	33 15 b0 1d 13 80    	xor    0x80131db0,%edx
8010a23a:	33 14 8d 48 e6 10 80 	xor    -0x7fef19b8(,%ecx,4),%edx
8010a241:	89 15 3c 21 13 80    	mov    %edx,0x8013213c
8010a247:	ba 01 00 00 00       	mov    $0x1,%edx
8010a24c:	e9 f9 fe ff ff       	jmp    8010a14a <genrand_int32+0x1a>
    mt[0]= s & 0xffffffffUL;
8010a251:	c7 05 80 17 13 80 71 	movl   $0x1571,0x80131780
8010a258:	15 00 00 
8010a25b:	ba 01 00 00 00       	mov    $0x1,%edx
8010a260:	b9 71 15 00 00       	mov    $0x1571,%ecx
8010a265:	eb 0c                	jmp    8010a273 <genrand_int32+0x143>
8010a267:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a26e:	66 90                	xchg   %ax,%ax
8010a270:	83 c2 01             	add    $0x1,%edx
	    (1812433253UL * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti); 
8010a273:	89 c8                	mov    %ecx,%eax
8010a275:	c1 e8 1e             	shr    $0x1e,%eax
8010a278:	31 c8                	xor    %ecx,%eax
8010a27a:	69 c0 65 89 07 6c    	imul   $0x6c078965,%eax,%eax
8010a280:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
        mt[mti] = 
8010a283:	89 0c 95 80 17 13 80 	mov    %ecx,-0x7fece880(,%edx,4)
    for (mti=1; mti<N; mti++) {
8010a28a:	81 fa 6f 02 00 00    	cmp    $0x26f,%edx
8010a290:	75 de                	jne    8010a270 <genrand_int32+0x140>
8010a292:	e9 eb fe ff ff       	jmp    8010a182 <genrand_int32+0x52>
8010a297:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a29e:	66 90                	xchg   %ax,%ax

8010a2a0 <genrand_int31>:

/* generates a random number on [0,0x7fffffff]-interval */
long genrand_int31(void)
{
8010a2a0:	f3 0f 1e fb          	endbr32 
8010a2a4:	55                   	push   %ebp
8010a2a5:	89 e5                	mov    %esp,%ebp
8010a2a7:	83 ec 08             	sub    $0x8,%esp
    return (long)(genrand_int32()>>1);
8010a2aa:	e8 81 fe ff ff       	call   8010a130 <genrand_int32>
}
8010a2af:	c9                   	leave  
    return (long)(genrand_int32()>>1);
8010a2b0:	d1 e8                	shr    %eax
}
8010a2b2:	c3                   	ret    
8010a2b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010a2c0 <genrand_real1>:

/* generates a random number on [0,1]-real-interval */
double genrand_real1(void)
{
8010a2c0:	f3 0f 1e fb          	endbr32 
8010a2c4:	55                   	push   %ebp
8010a2c5:	89 e5                	mov    %esp,%ebp
8010a2c7:	83 ec 18             	sub    $0x18,%esp
    return genrand_int32()*(1.0/4294967295.0); 
8010a2ca:	e8 61 fe ff ff       	call   8010a130 <genrand_int32>
8010a2cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010a2d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010a2d9:	df 6d f0             	fildll -0x10(%ebp)
8010a2dc:	dc 0d 50 e6 10 80    	fmull  0x8010e650
    /* divided by 2^32-1 */ 
}
8010a2e2:	c9                   	leave  
8010a2e3:	c3                   	ret    
8010a2e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a2eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a2ef:	90                   	nop

8010a2f0 <genrand_real2>:

/* generates a random number on [0,1)-real-interval */
double genrand_real2(void)
{
8010a2f0:	f3 0f 1e fb          	endbr32 
8010a2f4:	55                   	push   %ebp
8010a2f5:	89 e5                	mov    %esp,%ebp
8010a2f7:	83 ec 18             	sub    $0x18,%esp
    return genrand_int32()*(1.0/4294967296.0); 
8010a2fa:	e8 31 fe ff ff       	call   8010a130 <genrand_int32>
8010a2ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010a306:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010a309:	df 6d f0             	fildll -0x10(%ebp)
8010a30c:	d8 0d 58 e6 10 80    	fmuls  0x8010e658
    /* divided by 2^32 */
}
8010a312:	c9                   	leave  
8010a313:	c3                   	ret    
8010a314:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a31f:	90                   	nop

8010a320 <genrand_real3>:

/* generates a random number on (0,1)-real-interval */
double genrand_real3(void)
{
8010a320:	f3 0f 1e fb          	endbr32 
8010a324:	55                   	push   %ebp
8010a325:	89 e5                	mov    %esp,%ebp
8010a327:	83 ec 18             	sub    $0x18,%esp
    return (((double)genrand_int32()) + 0.5)*(1.0/4294967296.0); 
8010a32a:	e8 01 fe ff ff       	call   8010a130 <genrand_int32>
8010a32f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010a336:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010a339:	df 6d f0             	fildll -0x10(%ebp)
8010a33c:	d8 05 5c e6 10 80    	fadds  0x8010e65c
8010a342:	d8 0d 58 e6 10 80    	fmuls  0x8010e658
    /* divided by 2^32 */
}
8010a348:	c9                   	leave  
8010a349:	c3                   	ret    
8010a34a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010a350 <genrand_res53>:

/* generates a random number on [0,1) with 53-bit resolution*/
double genrand_res53(void) 
{ 
8010a350:	f3 0f 1e fb          	endbr32 
8010a354:	55                   	push   %ebp
8010a355:	89 e5                	mov    %esp,%ebp
8010a357:	53                   	push   %ebx
8010a358:	83 ec 14             	sub    $0x14,%esp
    unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6; 
8010a35b:	e8 d0 fd ff ff       	call   8010a130 <genrand_int32>
8010a360:	89 c3                	mov    %eax,%ebx
8010a362:	e8 c9 fd ff ff       	call   8010a130 <genrand_int32>
8010a367:	c1 eb 05             	shr    $0x5,%ebx
8010a36a:	c1 e8 06             	shr    $0x6,%eax
    return(a*67108864.0+b)*(1.0/9007199254740992.0); 
8010a36d:	89 5d f4             	mov    %ebx,-0xc(%ebp)
8010a370:	db 45 f4             	fildl  -0xc(%ebp)
8010a373:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010a376:	d8 0d 60 e6 10 80    	fmuls  0x8010e660
8010a37c:	db 45 f4             	fildl  -0xc(%ebp)
8010a37f:	de c1                	faddp  %st,%st(1)
8010a381:	d8 0d 64 e6 10 80    	fmuls  0x8010e664
} 
8010a387:	83 c4 14             	add    $0x14,%esp
8010a38a:	5b                   	pop    %ebx
8010a38b:	5d                   	pop    %ebp
8010a38c:	c3                   	ret    
8010a38d:	66 90                	xchg   %ax,%ax
8010a38f:	90                   	nop

8010a390 <netdev_root>:
static struct netdev *devices;
static struct netproto *protocols;

struct netdev *
netdev_root(void)
{
8010a390:	f3 0f 1e fb          	endbr32 
    return devices;
}
8010a394:	a1 48 21 13 80       	mov    0x80132148,%eax
8010a399:	c3                   	ret    
8010a39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010a3a0 <netdev_alloc>:

struct netdev *
netdev_alloc(void (*setup)(struct netdev *))
{
8010a3a0:	f3 0f 1e fb          	endbr32 
8010a3a4:	55                   	push   %ebp
8010a3a5:	89 e5                	mov    %esp,%ebp
8010a3a7:	53                   	push   %ebx
8010a3a8:	83 ec 04             	sub    $0x4,%esp
    struct netdev *dev;
    static unsigned int index = 0;

    dev = (struct netdev *)kalloc();
8010a3ab:	e8 60 81 ff ff       	call   80102510 <kalloc>
8010a3b0:	89 c3                	mov    %eax,%ebx
    if (!dev) {
8010a3b2:	85 c0                	test   %eax,%eax
8010a3b4:	74 39                	je     8010a3ef <netdev_alloc+0x4f>
        return NULL;
    }
    memset(dev, 0, sizeof(struct netdev));
8010a3b6:	83 ec 04             	sub    $0x4,%esp
8010a3b9:	6a 60                	push   $0x60
8010a3bb:	6a 00                	push   $0x0
8010a3bd:	50                   	push   %eax
8010a3be:	e8 fd ad ff ff       	call   801051c0 <memset>
    dev->index = index++;
8010a3c3:	a1 40 21 13 80       	mov    0x80132140,%eax
8010a3c8:	89 43 08             	mov    %eax,0x8(%ebx)
8010a3cb:	8d 50 01             	lea    0x1(%eax),%edx
    snprintf(dev->name, sizeof(dev->name), "net%d", dev->index);
8010a3ce:	50                   	push   %eax
8010a3cf:	8d 43 0c             	lea    0xc(%ebx),%eax
8010a3d2:	68 68 e6 10 80       	push   $0x8010e668
8010a3d7:	6a 10                	push   $0x10
8010a3d9:	50                   	push   %eax
    dev->index = index++;
8010a3da:	89 15 40 21 13 80    	mov    %edx,0x80132140
    snprintf(dev->name, sizeof(dev->name), "net%d", dev->index);
8010a3e0:	e8 db 9e ff ff       	call   801042c0 <snprintf>
    setup(dev);
8010a3e5:	83 c4 14             	add    $0x14,%esp
8010a3e8:	53                   	push   %ebx
8010a3e9:	ff 55 08             	call   *0x8(%ebp)
    return dev;
8010a3ec:	83 c4 10             	add    $0x10,%esp
}
8010a3ef:	89 d8                	mov    %ebx,%eax
8010a3f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010a3f4:	c9                   	leave  
8010a3f5:	c3                   	ret    
8010a3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a3fd:	8d 76 00             	lea    0x0(%esi),%esi

8010a400 <netdev_register>:

int
netdev_register(struct netdev *dev)
{
8010a400:	f3 0f 1e fb          	endbr32 
8010a404:	55                   	push   %ebp
8010a405:	89 e5                	mov    %esp,%ebp
8010a407:	53                   	push   %ebx
8010a408:	83 ec 0c             	sub    $0xc,%esp
8010a40b:	8b 5d 08             	mov    0x8(%ebp),%ebx
    cprintf("[net] netdev_register: <%s>\n", dev->name);
8010a40e:	8d 43 0c             	lea    0xc(%ebx),%eax
8010a411:	50                   	push   %eax
8010a412:	68 6e e6 10 80       	push   $0x8010e66e
8010a417:	e8 74 5f ff ff       	call   80100390 <cprintf>
    dev->next = devices;
8010a41c:	a1 48 21 13 80       	mov    0x80132148,%eax
    devices = dev;
8010a421:	89 1d 48 21 13 80    	mov    %ebx,0x80132148
    dev->next = devices;
8010a427:	89 03                	mov    %eax,(%ebx)
    return 0;
}
8010a429:	31 c0                	xor    %eax,%eax
8010a42b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010a42e:	c9                   	leave  
8010a42f:	c3                   	ret    

8010a430 <netdev_by_index>:

struct netdev *
netdev_by_index(int index)
{
8010a430:	f3 0f 1e fb          	endbr32 
8010a434:	55                   	push   %ebp
    struct netdev *dev;

    for (dev = devices; dev; dev = dev->next)
8010a435:	a1 48 21 13 80       	mov    0x80132148,%eax
{
8010a43a:	89 e5                	mov    %esp,%ebp
8010a43c:	8b 55 08             	mov    0x8(%ebp),%edx
    for (dev = devices; dev; dev = dev->next)
8010a43f:	85 c0                	test   %eax,%eax
8010a441:	75 0b                	jne    8010a44e <netdev_by_index+0x1e>
8010a443:	eb 0e                	jmp    8010a453 <netdev_by_index+0x23>
8010a445:	8d 76 00             	lea    0x0(%esi),%esi
8010a448:	8b 00                	mov    (%eax),%eax
8010a44a:	85 c0                	test   %eax,%eax
8010a44c:	74 05                	je     8010a453 <netdev_by_index+0x23>
        if (dev->index == index)
8010a44e:	39 50 08             	cmp    %edx,0x8(%eax)
8010a451:	75 f5                	jne    8010a448 <netdev_by_index+0x18>
            return dev;

    return NULL;
}
8010a453:	5d                   	pop    %ebp
8010a454:	c3                   	ret    
8010a455:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010a460 <netdev_by_name>:

struct netdev *
netdev_by_name(const char *name)
{
8010a460:	f3 0f 1e fb          	endbr32 
8010a464:	55                   	push   %ebp
8010a465:	89 e5                	mov    %esp,%ebp
8010a467:	56                   	push   %esi
8010a468:	53                   	push   %ebx
    struct netdev *dev;

    for (dev = devices; dev; dev = dev->next)
8010a469:	8b 1d 48 21 13 80    	mov    0x80132148,%ebx
{
8010a46f:	8b 75 08             	mov    0x8(%ebp),%esi
    for (dev = devices; dev; dev = dev->next)
8010a472:	85 db                	test   %ebx,%ebx
8010a474:	75 10                	jne    8010a486 <netdev_by_name+0x26>
8010a476:	eb 30                	jmp    8010a4a8 <netdev_by_name+0x48>
8010a478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a47f:	90                   	nop
8010a480:	8b 1b                	mov    (%ebx),%ebx
8010a482:	85 db                	test   %ebx,%ebx
8010a484:	74 22                	je     8010a4a8 <netdev_by_name+0x48>
        if (strcmp(dev->name, name) == 0)
8010a486:	83 ec 08             	sub    $0x8,%esp
8010a489:	8d 43 0c             	lea    0xc(%ebx),%eax
8010a48c:	56                   	push   %esi
8010a48d:	50                   	push   %eax
8010a48e:	e8 5d af ff ff       	call   801053f0 <strcmp>
8010a493:	83 c4 10             	add    $0x10,%esp
8010a496:	85 c0                	test   %eax,%eax
8010a498:	75 e6                	jne    8010a480 <netdev_by_name+0x20>
            return dev;

    return NULL;
}
8010a49a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010a49d:	89 d8                	mov    %ebx,%eax
8010a49f:	5b                   	pop    %ebx
8010a4a0:	5e                   	pop    %esi
8010a4a1:	5d                   	pop    %ebp
8010a4a2:	c3                   	ret    
8010a4a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a4a7:	90                   	nop
8010a4a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
    return NULL;
8010a4ab:	31 db                	xor    %ebx,%ebx
}
8010a4ad:	89 d8                	mov    %ebx,%eax
8010a4af:	5b                   	pop    %ebx
8010a4b0:	5e                   	pop    %esi
8010a4b1:	5d                   	pop    %ebp
8010a4b2:	c3                   	ret    
8010a4b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a4ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010a4c0 <netdev_receive>:

void
netdev_receive(struct netdev *dev, uint16_t type, uint8_t *packet, unsigned int plen)
{
8010a4c0:	f3 0f 1e fb          	endbr32 
8010a4c4:	55                   	push   %ebp
8010a4c5:	89 e5                	mov    %esp,%ebp
8010a4c7:	57                   	push   %edi
8010a4c8:	56                   	push   %esi
8010a4c9:	53                   	push   %ebx
8010a4ca:	83 ec 28             	sub    $0x28,%esp
8010a4cd:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a4d0:	8b 55 10             	mov    0x10(%ebp),%edx
8010a4d3:	8b 4d 14             	mov    0x14(%ebp),%ecx
8010a4d6:	8b 7d 08             	mov    0x8(%ebp),%edi
8010a4d9:	89 c3                	mov    %eax,%ebx
    struct netproto *entry;
#ifdef DEBUG
    cprintf("[net] netdev_receive: dev=%s, type=%04x, packet=%p, plen=%u\n", dev->name, type, packet, plen);
8010a4db:	0f b7 c0             	movzwl %ax,%eax
{
8010a4de:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    cprintf("[net] netdev_receive: dev=%s, type=%04x, packet=%p, plen=%u\n", dev->name, type, packet, plen);
8010a4e1:	51                   	push   %ecx
8010a4e2:	52                   	push   %edx
8010a4e3:	50                   	push   %eax
8010a4e4:	8d 47 0c             	lea    0xc(%edi),%eax
8010a4e7:	50                   	push   %eax
8010a4e8:	68 a4 e6 10 80       	push   $0x8010e6a4
{
8010a4ed:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    cprintf("[net] netdev_receive: dev=%s, type=%04x, packet=%p, plen=%u\n", dev->name, type, packet, plen);
8010a4f0:	e8 9b 5e ff ff       	call   80100390 <cprintf>
#endif
    for (entry = protocols; entry; entry = entry->next) {
8010a4f5:	8b 35 44 21 13 80    	mov    0x80132144,%esi
8010a4fb:	83 c4 20             	add    $0x20,%esp
8010a4fe:	85 f6                	test   %esi,%esi
8010a500:	75 0c                	jne    8010a50e <netdev_receive+0x4e>
8010a502:	eb 3c                	jmp    8010a540 <netdev_receive+0x80>
8010a504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a508:	8b 36                	mov    (%esi),%esi
8010a50a:	85 f6                	test   %esi,%esi
8010a50c:	74 32                	je     8010a540 <netdev_receive+0x80>
        if (hton16(entry->type) == type) {
8010a50e:	0f b7 46 04          	movzwl 0x4(%esi),%eax
8010a512:	83 ec 0c             	sub    $0xc,%esp
8010a515:	50                   	push   %eax
8010a516:	e8 45 e1 ff ff       	call   80108660 <hton16>
8010a51b:	83 c4 10             	add    $0x10,%esp
8010a51e:	66 39 d8             	cmp    %bx,%ax
8010a521:	75 e5                	jne    8010a508 <netdev_receive+0x48>
            entry->handler(packet, plen, dev);
8010a523:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010a526:	89 7d 10             	mov    %edi,0x10(%ebp)
8010a529:	89 45 0c             	mov    %eax,0xc(%ebp)
8010a52c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a52f:	89 45 08             	mov    %eax,0x8(%ebp)
8010a532:	8b 46 08             	mov    0x8(%esi),%eax
            return;
        }
    }
}
8010a535:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a538:	5b                   	pop    %ebx
8010a539:	5e                   	pop    %esi
8010a53a:	5f                   	pop    %edi
8010a53b:	5d                   	pop    %ebp
            entry->handler(packet, plen, dev);
8010a53c:	ff e0                	jmp    *%eax
8010a53e:	66 90                	xchg   %ax,%ax
}
8010a540:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a543:	5b                   	pop    %ebx
8010a544:	5e                   	pop    %esi
8010a545:	5f                   	pop    %edi
8010a546:	5d                   	pop    %ebp
8010a547:	c3                   	ret    
8010a548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a54f:	90                   	nop

8010a550 <netdev_add_netif>:

int
netdev_add_netif(struct netdev *dev, struct netif *netif)
{
8010a550:	f3 0f 1e fb          	endbr32 
8010a554:	55                   	push   %ebp
8010a555:	89 e5                	mov    %esp,%ebp
8010a557:	56                   	push   %esi
8010a558:	53                   	push   %ebx
8010a559:	83 ec 10             	sub    $0x10,%esp
8010a55c:	8b 75 08             	mov    0x8(%ebp),%esi
8010a55f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    struct netif *entry;

    for (entry = dev->ifs; entry; entry = entry->next) {
8010a562:	8b 4e 04             	mov    0x4(%esi),%ecx
8010a565:	0f b6 53 04          	movzbl 0x4(%ebx),%edx
8010a569:	85 c9                	test   %ecx,%ecx
8010a56b:	74 23                	je     8010a590 <netdev_add_netif+0x40>
8010a56d:	89 c8                	mov    %ecx,%eax
8010a56f:	eb 0d                	jmp    8010a57e <netdev_add_netif+0x2e>
8010a571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a578:	8b 00                	mov    (%eax),%eax
8010a57a:	85 c0                	test   %eax,%eax
8010a57c:	74 12                	je     8010a590 <netdev_add_netif+0x40>
        if (entry->family == netif->family) {
8010a57e:	38 50 04             	cmp    %dl,0x4(%eax)
8010a581:	75 f5                	jne    8010a578 <netdev_add_netif+0x28>
#endif
    netif->next = dev->ifs;
    netif->dev  = dev;
    dev->ifs = netif;
    return 0;
}
8010a583:	8d 65 f8             	lea    -0x8(%ebp),%esp
            return -1;
8010a586:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010a58b:	5b                   	pop    %ebx
8010a58c:	5e                   	pop    %esi
8010a58d:	5d                   	pop    %ebp
8010a58e:	c3                   	ret    
8010a58f:	90                   	nop
    if (netif->family == NETIF_FAMILY_IPV4) {
8010a590:	80 fa 02             	cmp    $0x2,%dl
8010a593:	74 1b                	je     8010a5b0 <netdev_add_netif+0x60>
    netif->next = dev->ifs;
8010a595:	89 0b                	mov    %ecx,(%ebx)
    return 0;
8010a597:	31 c0                	xor    %eax,%eax
    netif->dev  = dev;
8010a599:	89 73 08             	mov    %esi,0x8(%ebx)
    dev->ifs = netif;
8010a59c:	89 5e 04             	mov    %ebx,0x4(%esi)
}
8010a59f:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010a5a2:	5b                   	pop    %ebx
8010a5a3:	5e                   	pop    %esi
8010a5a4:	5d                   	pop    %ebp
8010a5a5:	c3                   	ret    
8010a5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a5ad:	8d 76 00             	lea    0x0(%esi),%esi
        cprintf("[net] Add <%s> to <%s>\n", ip_addr_ntop(&((struct netif_ip *)netif)->unicast, addr, sizeof(addr)), dev->name);
8010a5b0:	83 ec 04             	sub    $0x4,%esp
8010a5b3:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010a5b6:	6a 10                	push   $0x10
8010a5b8:	50                   	push   %eax
8010a5b9:	8d 43 0c             	lea    0xc(%ebx),%eax
8010a5bc:	50                   	push   %eax
8010a5bd:	e8 be ef ff ff       	call   80109580 <ip_addr_ntop>
8010a5c2:	83 c4 0c             	add    $0xc,%esp
8010a5c5:	8d 56 0c             	lea    0xc(%esi),%edx
8010a5c8:	52                   	push   %edx
8010a5c9:	50                   	push   %eax
8010a5ca:	68 8b e6 10 80       	push   $0x8010e68b
8010a5cf:	e8 bc 5d ff ff       	call   80100390 <cprintf>
8010a5d4:	8b 4e 04             	mov    0x4(%esi),%ecx
8010a5d7:	83 c4 10             	add    $0x10,%esp
8010a5da:	eb b9                	jmp    8010a595 <netdev_add_netif+0x45>
8010a5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010a5e0 <netdev_get_netif>:

struct netif *
netdev_get_netif(struct netdev *dev, int family)
{
8010a5e0:	f3 0f 1e fb          	endbr32 
8010a5e4:	55                   	push   %ebp
8010a5e5:	89 e5                	mov    %esp,%ebp
    struct netif *entry;

    for (entry = dev->ifs; entry; entry = entry->next) {
8010a5e7:	8b 45 08             	mov    0x8(%ebp),%eax
{
8010a5ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    for (entry = dev->ifs; entry; entry = entry->next) {
8010a5ed:	8b 40 04             	mov    0x4(%eax),%eax
8010a5f0:	85 c0                	test   %eax,%eax
8010a5f2:	75 12                	jne    8010a606 <netdev_get_netif+0x26>
8010a5f4:	eb 18                	jmp    8010a60e <netdev_get_netif+0x2e>
8010a5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a5fd:	8d 76 00             	lea    0x0(%esi),%esi
8010a600:	8b 00                	mov    (%eax),%eax
8010a602:	85 c0                	test   %eax,%eax
8010a604:	74 08                	je     8010a60e <netdev_get_netif+0x2e>
        if (entry->family == family) {
8010a606:	0f b6 50 04          	movzbl 0x4(%eax),%edx
8010a60a:	39 ca                	cmp    %ecx,%edx
8010a60c:	75 f2                	jne    8010a600 <netdev_get_netif+0x20>
            return entry;
        }
    }
    return NULL;
}
8010a60e:	5d                   	pop    %ebp
8010a60f:	c3                   	ret    

8010a610 <netproto_register>:

int
netproto_register(unsigned short type, void (*handler)(uint8_t *packet, size_t plen, struct netdev *dev))
{
8010a610:	f3 0f 1e fb          	endbr32 
8010a614:	55                   	push   %ebp
8010a615:	89 e5                	mov    %esp,%ebp
8010a617:	53                   	push   %ebx
8010a618:	83 ec 04             	sub    $0x4,%esp
    struct netproto *entry;

    for (entry = protocols; entry; entry = entry->next) {
8010a61b:	a1 44 21 13 80       	mov    0x80132144,%eax
{
8010a620:	8b 5d 08             	mov    0x8(%ebp),%ebx
    for (entry = protocols; entry; entry = entry->next) {
8010a623:	85 c0                	test   %eax,%eax
8010a625:	74 29                	je     8010a650 <netproto_register+0x40>
8010a627:	89 da                	mov    %ebx,%edx
8010a629:	eb 0b                	jmp    8010a636 <netproto_register+0x26>
8010a62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a62f:	90                   	nop
8010a630:	8b 00                	mov    (%eax),%eax
8010a632:	85 c0                	test   %eax,%eax
8010a634:	74 1a                	je     8010a650 <netproto_register+0x40>
        if (entry->type == type) {
8010a636:	66 39 50 04          	cmp    %dx,0x4(%eax)
8010a63a:	75 f4                	jne    8010a630 <netproto_register+0x20>
    entry->next = protocols;
    entry->type = type;
    entry->handler = handler;
    protocols = entry;
    return 0;
}
8010a63c:	83 c4 04             	add    $0x4,%esp
            return -1;
8010a63f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010a644:	5b                   	pop    %ebx
8010a645:	5d                   	pop    %ebp
8010a646:	c3                   	ret    
8010a647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a64e:	66 90                	xchg   %ax,%ax
    entry = (struct netproto *)kalloc();
8010a650:	e8 bb 7e ff ff       	call   80102510 <kalloc>
    if (!entry) {
8010a655:	85 c0                	test   %eax,%eax
8010a657:	74 e3                	je     8010a63c <netproto_register+0x2c>
    entry->next = protocols;
8010a659:	8b 15 44 21 13 80    	mov    0x80132144,%edx
    entry->type = type;
8010a65f:	66 89 58 04          	mov    %bx,0x4(%eax)
    protocols = entry;
8010a663:	a3 44 21 13 80       	mov    %eax,0x80132144
    entry->next = protocols;
8010a668:	89 10                	mov    %edx,(%eax)
    entry->handler = handler;
8010a66a:	8b 55 0c             	mov    0xc(%ebp),%edx
8010a66d:	89 50 08             	mov    %edx,0x8(%eax)
}
8010a670:	83 c4 04             	add    $0x4,%esp
    return 0;
8010a673:	31 c0                	xor    %eax,%eax
}
8010a675:	5b                   	pop    %ebx
8010a676:	5d                   	pop    %ebp
8010a677:	c3                   	ret    
8010a678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a67f:	90                   	nop

8010a680 <netinit>:

void
netinit(void)
{
8010a680:	f3 0f 1e fb          	endbr32 
8010a684:	55                   	push   %ebp
8010a685:	89 e5                	mov    %esp,%ebp
8010a687:	83 ec 08             	sub    $0x8,%esp
    arp_init();
8010a68a:	e8 41 de ff ff       	call   801084d0 <arp_init>
    ip_init();
8010a68f:	e8 ec f8 ff ff       	call   80109f80 <ip_init>
    icmp_init();
8010a694:	e8 c7 ed ff ff       	call   80109460 <icmp_init>
    udp_init();
8010a699:	e8 c2 26 00 00       	call   8010cd60 <udp_init>
    tcp_init();
}
8010a69e:	c9                   	leave  
    tcp_init();
8010a69f:	e9 8c 1d 00 00       	jmp    8010c430 <tcp_init>
8010a6a4:	66 90                	xchg   %ax,%ax
8010a6a6:	66 90                	xchg   %ax,%ax
8010a6a8:	66 90                	xchg   %ax,%ax
8010a6aa:	66 90                	xchg   %ax,%ax
8010a6ac:	66 90                	xchg   %ax,%ax
8010a6ae:	66 90                	xchg   %ax,%ax

8010a6b0 <socketalloc>:
    int type;
    int desc;
};

struct file*
socketalloc(int domain, int type, int protocol) {
8010a6b0:	f3 0f 1e fb          	endbr32 
8010a6b4:	55                   	push   %ebp
8010a6b5:	89 e5                	mov    %esp,%ebp
8010a6b7:	57                   	push   %edi
8010a6b8:	56                   	push   %esi
8010a6b9:	53                   	push   %ebx
8010a6ba:	83 ec 0c             	sub    $0xc,%esp
    struct file *f;
    struct socket *s;

    if (domain != AF_INET || (type != SOCK_STREAM && type != SOCK_DGRAM) || protocol != 0) {
8010a6bd:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
socketalloc(int domain, int type, int protocol) {
8010a6c1:	8b 75 0c             	mov    0xc(%ebp),%esi
    if (domain != AF_INET || (type != SOCK_STREAM && type != SOCK_DGRAM) || protocol != 0) {
8010a6c4:	75 66                	jne    8010a72c <socketalloc+0x7c>
8010a6c6:	8d 46 ff             	lea    -0x1(%esi),%eax
8010a6c9:	83 f8 01             	cmp    $0x1,%eax
8010a6cc:	77 5e                	ja     8010a72c <socketalloc+0x7c>
8010a6ce:	8b 55 10             	mov    0x10(%ebp),%edx
8010a6d1:	85 d2                	test   %edx,%edx
8010a6d3:	75 57                	jne    8010a72c <socketalloc+0x7c>
        return NULL;
    }
    f = filealloc();
8010a6d5:	e8 96 65 ff ff       	call   80100c70 <filealloc>
8010a6da:	89 c3                	mov    %eax,%ebx
    if (!f) {
8010a6dc:	85 c0                	test   %eax,%eax
8010a6de:	74 4c                	je     8010a72c <socketalloc+0x7c>
        return NULL;
    }
    s = (struct socket *)kalloc();
8010a6e0:	e8 2b 7e ff ff       	call   80102510 <kalloc>
8010a6e5:	89 c7                	mov    %eax,%edi
    if (!s) {
8010a6e7:	85 c0                	test   %eax,%eax
8010a6e9:	74 35                	je     8010a720 <socketalloc+0x70>
        fileclose(f);
        return NULL;
    }
    s->type = type;
8010a6eb:	89 30                	mov    %esi,(%eax)
    s->desc = (type == SOCK_STREAM ? tcp_api_open() : udp_api_open());
8010a6ed:	83 fe 01             	cmp    $0x1,%esi
8010a6f0:	74 4e                	je     8010a740 <socketalloc+0x90>
8010a6f2:	e8 59 20 00 00       	call   8010c750 <udp_api_open>
8010a6f7:	89 47 04             	mov    %eax,0x4(%edi)
    f->type = FD_SOCKET;
    f->readable = 1;
8010a6fa:	b8 01 01 00 00       	mov    $0x101,%eax
8010a6ff:	66 89 43 08          	mov    %ax,0x8(%ebx)
    f->writable = 1;
    f->socket = s;
    return f;
}
8010a703:	89 d8                	mov    %ebx,%eax
    f->type = FD_SOCKET;
8010a705:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
    f->socket = s;
8010a70b:	89 7b 14             	mov    %edi,0x14(%ebx)
}
8010a70e:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a711:	5b                   	pop    %ebx
8010a712:	5e                   	pop    %esi
8010a713:	5f                   	pop    %edi
8010a714:	5d                   	pop    %ebp
8010a715:	c3                   	ret    
8010a716:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a71d:	8d 76 00             	lea    0x0(%esi),%esi
        fileclose(f);
8010a720:	83 ec 0c             	sub    $0xc,%esp
8010a723:	53                   	push   %ebx
8010a724:	e8 07 66 ff ff       	call   80100d30 <fileclose>
        return NULL;
8010a729:	83 c4 10             	add    $0x10,%esp
}
8010a72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
        return NULL;
8010a72f:	31 db                	xor    %ebx,%ebx
}
8010a731:	89 d8                	mov    %ebx,%eax
8010a733:	5b                   	pop    %ebx
8010a734:	5e                   	pop    %esi
8010a735:	5f                   	pop    %edi
8010a736:	5d                   	pop    %ebp
8010a737:	c3                   	ret    
8010a738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a73f:	90                   	nop
    s->desc = (type == SOCK_STREAM ? tcp_api_open() : udp_api_open());
8010a740:	e8 6b 15 00 00       	call   8010bcb0 <tcp_api_open>
8010a745:	eb b0                	jmp    8010a6f7 <socketalloc+0x47>
8010a747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a74e:	66 90                	xchg   %ax,%ax

8010a750 <socketclose>:

void
socketclose(struct socket *s) {
8010a750:	f3 0f 1e fb          	endbr32 
8010a754:	55                   	push   %ebp
8010a755:	89 e5                	mov    %esp,%ebp
8010a757:	8b 45 08             	mov    0x8(%ebp),%eax
8010a75a:	8b 50 04             	mov    0x4(%eax),%edx
    if (s->type == SOCK_STREAM)
8010a75d:	83 38 01             	cmpl   $0x1,(%eax)
        tcp_api_close(s->desc);
8010a760:	89 55 08             	mov    %edx,0x8(%ebp)
    if (s->type == SOCK_STREAM)
8010a763:	74 0b                	je     8010a770 <socketclose+0x20>
    else
        udp_api_close(s->desc);
}
8010a765:	5d                   	pop    %ebp
        udp_api_close(s->desc);
8010a766:	e9 65 20 00 00       	jmp    8010c7d0 <udp_api_close>
8010a76b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a76f:	90                   	nop
}
8010a770:	5d                   	pop    %ebp
        tcp_api_close(s->desc);
8010a771:	e9 ba 15 00 00       	jmp    8010bd30 <tcp_api_close>
8010a776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a77d:	8d 76 00             	lea    0x0(%esi),%esi

8010a780 <socketconnect>:

int
socketconnect(struct socket *s, struct sockaddr *addr, int addrlen) {
8010a780:	f3 0f 1e fb          	endbr32 
8010a784:	55                   	push   %ebp
8010a785:	89 e5                	mov    %esp,%ebp
8010a787:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_STREAM)
8010a78a:	83 38 01             	cmpl   $0x1,(%eax)
8010a78d:	75 11                	jne    8010a7a0 <socketconnect+0x20>
      return -1;
    return tcp_api_connect(s->desc, addr, addrlen);
8010a78f:	8b 40 04             	mov    0x4(%eax),%eax
8010a792:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a795:	5d                   	pop    %ebp
    return tcp_api_connect(s->desc, addr, addrlen);
8010a796:	e9 85 16 00 00       	jmp    8010be20 <tcp_api_connect>
8010a79b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a79f:	90                   	nop
}
8010a7a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a7a5:	5d                   	pop    %ebp
8010a7a6:	c3                   	ret    
8010a7a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a7ae:	66 90                	xchg   %ax,%ax

8010a7b0 <socketbind>:

int
socketbind(struct socket *s, struct sockaddr *addr, int addrlen) {
8010a7b0:	f3 0f 1e fb          	endbr32 
8010a7b4:	55                   	push   %ebp
8010a7b5:	89 e5                	mov    %esp,%ebp
8010a7b7:	8b 45 08             	mov    0x8(%ebp),%eax
8010a7ba:	8b 50 04             	mov    0x4(%eax),%edx
    if (s->type == SOCK_STREAM)
8010a7bd:	83 38 01             	cmpl   $0x1,(%eax)
        return tcp_api_bind(s->desc, addr, addrlen);
8010a7c0:	89 55 08             	mov    %edx,0x8(%ebp)
    if (s->type == SOCK_STREAM)
8010a7c3:	74 0b                	je     8010a7d0 <socketbind+0x20>
    else
        return udp_api_bind(s->desc, addr, addrlen);
}
8010a7c5:	5d                   	pop    %ebp
        return udp_api_bind(s->desc, addr, addrlen);
8010a7c6:	e9 e5 20 00 00       	jmp    8010c8b0 <udp_api_bind>
8010a7cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a7cf:	90                   	nop
}
8010a7d0:	5d                   	pop    %ebp
        return tcp_api_bind(s->desc, addr, addrlen);
8010a7d1:	e9 1a 18 00 00       	jmp    8010bff0 <tcp_api_bind>
8010a7d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a7dd:	8d 76 00             	lea    0x0(%esi),%esi

8010a7e0 <socketlisten>:

int
socketlisten(struct socket *s, int backlog) {
8010a7e0:	f3 0f 1e fb          	endbr32 
8010a7e4:	55                   	push   %ebp
8010a7e5:	89 e5                	mov    %esp,%ebp
8010a7e7:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_STREAM)
8010a7ea:	83 38 01             	cmpl   $0x1,(%eax)
8010a7ed:	75 11                	jne    8010a800 <socketlisten+0x20>
        return -1;
    return tcp_api_listen(s->desc, backlog);
8010a7ef:	8b 40 04             	mov    0x4(%eax),%eax
8010a7f2:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a7f5:	5d                   	pop    %ebp
    return tcp_api_listen(s->desc, backlog);
8010a7f6:	e9 b5 18 00 00       	jmp    8010c0b0 <tcp_api_listen>
8010a7fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a7ff:	90                   	nop
}
8010a800:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a805:	5d                   	pop    %ebp
8010a806:	c3                   	ret    
8010a807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a80e:	66 90                	xchg   %ax,%ax

8010a810 <socketaccept>:

struct file *
socketaccept(struct socket *s, struct sockaddr *addr, int *addrlen) {
8010a810:	f3 0f 1e fb          	endbr32 
8010a814:	55                   	push   %ebp
8010a815:	89 e5                	mov    %esp,%ebp
8010a817:	57                   	push   %edi
8010a818:	56                   	push   %esi
8010a819:	53                   	push   %ebx
8010a81a:	83 ec 0c             	sub    $0xc,%esp
8010a81d:	8b 7d 08             	mov    0x8(%ebp),%edi
    int adesc;
    struct file *f;
    struct socket *as;
    if (s->type != SOCK_STREAM)
8010a820:	83 3f 01             	cmpl   $0x1,(%edi)
8010a823:	75 6b                	jne    8010a890 <socketaccept+0x80>
        return NULL;
    f = filealloc();
8010a825:	e8 46 64 ff ff       	call   80100c70 <filealloc>
8010a82a:	89 c3                	mov    %eax,%ebx
    if (!f) {
8010a82c:	85 c0                	test   %eax,%eax
8010a82e:	74 60                	je     8010a890 <socketaccept+0x80>
        return NULL;
    }
    as = (struct socket *)kalloc();
8010a830:	e8 db 7c ff ff       	call   80102510 <kalloc>
8010a835:	89 c6                	mov    %eax,%esi
    if (!as) {
8010a837:	85 c0                	test   %eax,%eax
8010a839:	74 45                	je     8010a880 <socketaccept+0x70>
        fileclose(f);
        return NULL;
    }
    adesc = tcp_api_accept(s->desc, addr, addrlen);
8010a83b:	83 ec 04             	sub    $0x4,%esp
8010a83e:	ff 75 10             	pushl  0x10(%ebp)
8010a841:	ff 75 0c             	pushl  0xc(%ebp)
8010a844:	ff 77 04             	pushl  0x4(%edi)
8010a847:	e8 f4 18 00 00       	call   8010c140 <tcp_api_accept>
    if (adesc == -1) {
8010a84c:	83 c4 10             	add    $0x10,%esp
8010a84f:	83 f8 ff             	cmp    $0xffffffff,%eax
8010a852:	74 4c                	je     8010a8a0 <socketaccept+0x90>
        fileclose(f);
        kfree((void*)as);
        return NULL;
    }
    as->type = s->type;
8010a854:	8b 17                	mov    (%edi),%edx
    as->desc = adesc;
8010a856:	89 46 04             	mov    %eax,0x4(%esi)
    f->type = FD_SOCKET;
    f->readable = 1;
8010a859:	b8 01 01 00 00       	mov    $0x101,%eax
    as->type = s->type;
8010a85e:	89 16                	mov    %edx,(%esi)
    f->readable = 1;
8010a860:	66 89 43 08          	mov    %ax,0x8(%ebx)
    f->writable = 1;
    f->socket = as;
    return f;
}
8010a864:	89 d8                	mov    %ebx,%eax
    f->type = FD_SOCKET;
8010a866:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
    f->socket = as;
8010a86c:	89 73 14             	mov    %esi,0x14(%ebx)
}
8010a86f:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a872:	5b                   	pop    %ebx
8010a873:	5e                   	pop    %esi
8010a874:	5f                   	pop    %edi
8010a875:	5d                   	pop    %ebp
8010a876:	c3                   	ret    
8010a877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a87e:	66 90                	xchg   %ax,%ax
        fileclose(f);
8010a880:	83 ec 0c             	sub    $0xc,%esp
8010a883:	53                   	push   %ebx
8010a884:	e8 a7 64 ff ff       	call   80100d30 <fileclose>
        return NULL;
8010a889:	83 c4 10             	add    $0x10,%esp
8010a88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a890:	31 db                	xor    %ebx,%ebx
}
8010a892:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a895:	89 d8                	mov    %ebx,%eax
8010a897:	5b                   	pop    %ebx
8010a898:	5e                   	pop    %esi
8010a899:	5f                   	pop    %edi
8010a89a:	5d                   	pop    %ebp
8010a89b:	c3                   	ret    
8010a89c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        fileclose(f);
8010a8a0:	83 ec 0c             	sub    $0xc,%esp
8010a8a3:	53                   	push   %ebx
        return NULL;
8010a8a4:	31 db                	xor    %ebx,%ebx
        fileclose(f);
8010a8a6:	e8 85 64 ff ff       	call   80100d30 <fileclose>
        kfree((void*)as);
8010a8ab:	89 34 24             	mov    %esi,(%esp)
8010a8ae:	e8 9d 7a ff ff       	call   80102350 <kfree>
        return NULL;
8010a8b3:	83 c4 10             	add    $0x10,%esp
8010a8b6:	eb da                	jmp    8010a892 <socketaccept+0x82>
8010a8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a8bf:	90                   	nop

8010a8c0 <socketread>:

int
socketread(struct socket *s, char *addr, int n) {
8010a8c0:	f3 0f 1e fb          	endbr32 
8010a8c4:	55                   	push   %ebp
8010a8c5:	89 e5                	mov    %esp,%ebp
8010a8c7:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_STREAM)
8010a8ca:	83 38 01             	cmpl   $0x1,(%eax)
8010a8cd:	75 11                	jne    8010a8e0 <socketread+0x20>
        return -1;
    return tcp_api_recv(s->desc, (uint8_t *)addr, n);
8010a8cf:	8b 40 04             	mov    0x4(%eax),%eax
8010a8d2:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a8d5:	5d                   	pop    %ebp
    return tcp_api_recv(s->desc, (uint8_t *)addr, n);
8010a8d6:	e9 75 19 00 00       	jmp    8010c250 <tcp_api_recv>
8010a8db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a8df:	90                   	nop
}
8010a8e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a8e5:	5d                   	pop    %ebp
8010a8e6:	c3                   	ret    
8010a8e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a8ee:	66 90                	xchg   %ax,%ax

8010a8f0 <socketwrite>:

int
socketwrite(struct socket *s, char *addr, int n) {
8010a8f0:	f3 0f 1e fb          	endbr32 
8010a8f4:	55                   	push   %ebp
8010a8f5:	89 e5                	mov    %esp,%ebp
8010a8f7:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_STREAM)
8010a8fa:	83 38 01             	cmpl   $0x1,(%eax)
8010a8fd:	75 11                	jne    8010a910 <socketwrite+0x20>
        return -1;
    return tcp_api_send(s->desc, (uint8_t *)addr, n);
8010a8ff:	8b 40 04             	mov    0x4(%eax),%eax
8010a902:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a905:	5d                   	pop    %ebp
    return tcp_api_send(s->desc, (uint8_t *)addr, n);
8010a906:	e9 65 1a 00 00       	jmp    8010c370 <tcp_api_send>
8010a90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a90f:	90                   	nop
}
8010a910:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a915:	5d                   	pop    %ebp
8010a916:	c3                   	ret    
8010a917:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a91e:	66 90                	xchg   %ax,%ax

8010a920 <socketrecvfrom>:

int
socketrecvfrom(struct socket *s, char *buf, int n, struct sockaddr *addr, int *addrlen) {
8010a920:	f3 0f 1e fb          	endbr32 
8010a924:	55                   	push   %ebp
8010a925:	89 e5                	mov    %esp,%ebp
8010a927:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_DGRAM)
8010a92a:	83 38 02             	cmpl   $0x2,(%eax)
8010a92d:	75 11                	jne    8010a940 <socketrecvfrom+0x20>
        return -1;
    return udp_api_recvfrom(s->desc, (uint8_t *)buf, n, addr, addrlen);
8010a92f:	8b 40 04             	mov    0x4(%eax),%eax
8010a932:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a935:	5d                   	pop    %ebp
    return udp_api_recvfrom(s->desc, (uint8_t *)buf, n, addr, addrlen);
8010a936:	e9 65 21 00 00       	jmp    8010caa0 <udp_api_recvfrom>
8010a93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a93f:	90                   	nop
}
8010a940:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a945:	5d                   	pop    %ebp
8010a946:	c3                   	ret    
8010a947:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a94e:	66 90                	xchg   %ax,%ax

8010a950 <socketsendto>:

int
socketsendto(struct socket *s, char *buf, int n, struct sockaddr *addr, int addrlen) {
8010a950:	f3 0f 1e fb          	endbr32 
8010a954:	55                   	push   %ebp
8010a955:	89 e5                	mov    %esp,%ebp
8010a957:	8b 45 08             	mov    0x8(%ebp),%eax
    if (s->type != SOCK_DGRAM)
8010a95a:	83 38 02             	cmpl   $0x2,(%eax)
8010a95d:	75 11                	jne    8010a970 <socketsendto+0x20>
        return -1;
    return udp_api_sendto(s->desc, (uint8_t *)buf, n, addr, addrlen);
8010a95f:	8b 40 04             	mov    0x4(%eax),%eax
8010a962:	89 45 08             	mov    %eax,0x8(%ebp)
}
8010a965:	5d                   	pop    %ebp
    return udp_api_sendto(s->desc, (uint8_t *)buf, n, addr, addrlen);
8010a966:	e9 55 22 00 00       	jmp    8010cbc0 <udp_api_sendto>
8010a96b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a96f:	90                   	nop
}
8010a970:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a975:	5d                   	pop    %ebp
8010a976:	c3                   	ret    
8010a977:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a97e:	66 90                	xchg   %ax,%ax

8010a980 <socketioctl>:

int
socketioctl(struct socket *s, int req, void *arg) {
8010a980:	f3 0f 1e fb          	endbr32 
8010a984:	55                   	push   %ebp
8010a985:	89 e5                	mov    %esp,%ebp
8010a987:	56                   	push   %esi
8010a988:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a98b:	53                   	push   %ebx
8010a98c:	8b 5d 10             	mov    0x10(%ebp),%ebx
    struct ifreq *ifreq;
    struct netdev *dev;
    struct netif *iface;

    switch (req) {
8010a98f:	3d 0f 69 20 80       	cmp    $0x8020690f,%eax
8010a994:	7c 1a                	jl     8010a9b0 <socketioctl+0x30>
8010a996:	05 00 97 df 3f       	add    $0x3fdf9700,%eax
8010a99b:	83 f8 0d             	cmp    $0xd,%eax
8010a99e:	77 17                	ja     8010a9b7 <socketioctl+0x37>
8010a9a0:	3e ff 24 85 e4 e6 10 	notrack jmp *-0x7fef191c(,%eax,4)
8010a9a7:	80 
8010a9a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a9af:	90                   	nop
8010a9b0:	3d 02 69 20 80       	cmp    $0x80206902,%eax
8010a9b5:	7d 11                	jge    8010a9c8 <socketioctl+0x48>
        ifreq->ifr_mtu = dev->mtu;
        break;
    case SIOCSIFMTU:
        break;
    default:
        return -1;
8010a9b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }
    return 0;
}
8010a9bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010a9bf:	5b                   	pop    %ebx
8010a9c0:	5e                   	pop    %esi
8010a9c1:	5d                   	pop    %ebp
8010a9c2:	c3                   	ret    
8010a9c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a9c7:	90                   	nop
8010a9c8:	05 fe 96 df 7f       	add    $0x7fdf96fe,%eax
8010a9cd:	83 f8 0c             	cmp    $0xc,%eax
8010a9d0:	77 e5                	ja     8010a9b7 <socketioctl+0x37>
8010a9d2:	3e ff 24 85 1c e7 10 	notrack jmp *-0x7fef18e4(,%eax,4)
8010a9d9:	80 
        dev = netdev_by_name(ifreq->ifr_name);
8010a9da:	83 ec 0c             	sub    $0xc,%esp
8010a9dd:	53                   	push   %ebx
8010a9de:	e8 7d fa ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010a9e3:	83 c4 10             	add    $0x10,%esp
8010a9e6:	85 c0                	test   %eax,%eax
8010a9e8:	74 cd                	je     8010a9b7 <socketioctl+0x37>
        ifreq->ifr_mtu = dev->mtu;
8010a9ea:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
8010a9ee:	89 43 10             	mov    %eax,0x10(%ebx)
}
8010a9f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
    return 0;
8010a9f4:	31 c0                	xor    %eax,%eax
}
8010a9f6:	5b                   	pop    %ebx
8010a9f7:	5e                   	pop    %esi
8010a9f8:	5d                   	pop    %ebp
8010a9f9:	c3                   	ret    
        dev = netdev_by_name(ifreq->ifr_name);
8010a9fa:	83 ec 0c             	sub    $0xc,%esp
8010a9fd:	53                   	push   %ebx
8010a9fe:	e8 5d fa ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aa03:	83 c4 10             	add    $0x10,%esp
8010aa06:	85 c0                	test   %eax,%eax
8010aa08:	74 ad                	je     8010a9b7 <socketioctl+0x37>
        iface = netdev_get_netif(dev, ifreq->ifr_addr.sa_family);
8010aa0a:	0f b7 53 10          	movzwl 0x10(%ebx),%edx
8010aa0e:	83 ec 08             	sub    $0x8,%esp
8010aa11:	52                   	push   %edx
8010aa12:	50                   	push   %eax
8010aa13:	e8 c8 fb ff ff       	call   8010a5e0 <netdev_get_netif>
        if (!iface)
8010aa18:	83 c4 10             	add    $0x10,%esp
8010aa1b:	85 c0                	test   %eax,%eax
8010aa1d:	74 98                	je     8010a9b7 <socketioctl+0x37>
        if (ip_netif_reconfigure(iface, ((struct netif_ip *)iface)->unicast, ((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr, ((struct netif_ip *)iface)->gateway) == -1)
8010aa1f:	ff 70 1c             	pushl  0x1c(%eax)
8010aa22:	ff 73 14             	pushl  0x14(%ebx)
8010aa25:	ff 70 0c             	pushl  0xc(%eax)
8010aa28:	50                   	push   %eax
8010aa29:	e8 52 f2 ff ff       	call   80109c80 <ip_netif_reconfigure>
8010aa2e:	83 c4 10             	add    $0x10,%esp
8010aa31:	83 f8 ff             	cmp    $0xffffffff,%eax
8010aa34:	0f 94 c0             	sete   %al
}
8010aa37:	8d 65 f8             	lea    -0x8(%ebp),%esp
        if (ip_netif_reconfigure(iface, ((struct netif_ip *)iface)->unicast, ((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr, ((struct netif_ip *)iface)->gateway) == -1)
8010aa3a:	0f b6 c0             	movzbl %al,%eax
}
8010aa3d:	5b                   	pop    %ebx
8010aa3e:	5e                   	pop    %esi
        if (ip_netif_reconfigure(iface, ((struct netif_ip *)iface)->unicast, ((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr, ((struct netif_ip *)iface)->gateway) == -1)
8010aa3f:	f7 d8                	neg    %eax
}
8010aa41:	5d                   	pop    %ebp
8010aa42:	c3                   	ret    
        dev = netdev_by_name(ifreq->ifr_name);
8010aa43:	83 ec 0c             	sub    $0xc,%esp
8010aa46:	53                   	push   %ebx
8010aa47:	e8 14 fa ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aa4c:	83 c4 10             	add    $0x10,%esp
8010aa4f:	85 c0                	test   %eax,%eax
8010aa51:	0f 84 60 ff ff ff    	je     8010a9b7 <socketioctl+0x37>
        ifreq->ifr_ifindex = dev->index;
8010aa57:	8b 40 08             	mov    0x8(%eax),%eax
8010aa5a:	89 43 10             	mov    %eax,0x10(%ebx)
    return 0;
8010aa5d:	31 c0                	xor    %eax,%eax
        break;
8010aa5f:	e9 58 ff ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_index(ifreq->ifr_ifindex);
8010aa64:	83 ec 0c             	sub    $0xc,%esp
8010aa67:	ff 73 10             	pushl  0x10(%ebx)
8010aa6a:	e8 c1 f9 ff ff       	call   8010a430 <netdev_by_index>
        if (!dev)
8010aa6f:	83 c4 10             	add    $0x10,%esp
8010aa72:	85 c0                	test   %eax,%eax
8010aa74:	0f 84 3d ff ff ff    	je     8010a9b7 <socketioctl+0x37>
        strncpy(ifreq->ifr_name, dev->name, sizeof(ifreq->ifr_name));
8010aa7a:	83 ec 04             	sub    $0x4,%esp
8010aa7d:	83 c0 0c             	add    $0xc,%eax
8010aa80:	6a 10                	push   $0x10
8010aa82:	50                   	push   %eax
8010aa83:	53                   	push   %ebx
8010aa84:	e8 97 a8 ff ff       	call   80105320 <strncpy>
        break;
8010aa89:	83 c4 10             	add    $0x10,%esp
    return 0;
8010aa8c:	31 c0                	xor    %eax,%eax
        break;
8010aa8e:	e9 29 ff ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010aa93:	83 ec 0c             	sub    $0xc,%esp
8010aa96:	53                   	push   %ebx
8010aa97:	e8 c4 f9 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aa9c:	83 c4 10             	add    $0x10,%esp
8010aa9f:	85 c0                	test   %eax,%eax
8010aaa1:	0f 84 10 ff ff ff    	je     8010a9b7 <socketioctl+0x37>
        memcpy(ifreq->ifr_hwaddr.sa_data, dev->addr, dev->alen);
8010aaa7:	0f b7 50 24          	movzwl 0x24(%eax),%edx
8010aaab:	83 ec 04             	sub    $0x4,%esp
8010aaae:	83 c0 26             	add    $0x26,%eax
8010aab1:	83 c3 12             	add    $0x12,%ebx
8010aab4:	52                   	push   %edx
8010aab5:	50                   	push   %eax
8010aab6:	53                   	push   %ebx
8010aab7:	e8 04 a8 ff ff       	call   801052c0 <memcpy>
        break;
8010aabc:	83 c4 10             	add    $0x10,%esp
    return 0;
8010aabf:	31 c0                	xor    %eax,%eax
        break;
8010aac1:	e9 f6 fe ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010aac6:	83 ec 0c             	sub    $0xc,%esp
8010aac9:	53                   	push   %ebx
8010aaca:	e8 91 f9 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aacf:	83 c4 10             	add    $0x10,%esp
8010aad2:	85 c0                	test   %eax,%eax
8010aad4:	0f 84 dd fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        ifreq->ifr_flags = dev->flags;
8010aada:	0f b7 40 20          	movzwl 0x20(%eax),%eax
8010aade:	66 89 43 10          	mov    %ax,0x10(%ebx)
    return 0;
8010aae2:	31 c0                	xor    %eax,%eax
        break;
8010aae4:	e9 d3 fe ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010aae9:	83 ec 0c             	sub    $0xc,%esp
8010aaec:	53                   	push   %ebx
8010aaed:	e8 6e f9 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aaf2:	83 c4 10             	add    $0x10,%esp
8010aaf5:	85 c0                	test   %eax,%eax
8010aaf7:	0f 84 ba fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        iface = netdev_get_netif(dev, ifreq->ifr_addr.sa_family);
8010aafd:	0f b7 53 10          	movzwl 0x10(%ebx),%edx
8010ab01:	83 ec 08             	sub    $0x8,%esp
8010ab04:	52                   	push   %edx
8010ab05:	50                   	push   %eax
8010ab06:	e8 d5 fa ff ff       	call   8010a5e0 <netdev_get_netif>
        if (!iface)
8010ab0b:	83 c4 10             	add    $0x10,%esp
8010ab0e:	85 c0                	test   %eax,%eax
8010ab10:	0f 84 a1 fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        ((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr = ((struct netif_ip *)iface)->unicast;
8010ab16:	8b 40 0c             	mov    0xc(%eax),%eax
8010ab19:	89 43 14             	mov    %eax,0x14(%ebx)
    return 0;
8010ab1c:	31 c0                	xor    %eax,%eax
        break;
8010ab1e:	e9 99 fe ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010ab23:	83 ec 0c             	sub    $0xc,%esp
8010ab26:	53                   	push   %ebx
8010ab27:	e8 34 f9 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010ab2c:	83 c4 10             	add    $0x10,%esp
8010ab2f:	85 c0                	test   %eax,%eax
8010ab31:	0f 84 80 fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        iface = netdev_get_netif(dev, ifreq->ifr_addr.sa_family);
8010ab37:	0f b7 53 10          	movzwl 0x10(%ebx),%edx
8010ab3b:	83 ec 08             	sub    $0x8,%esp
8010ab3e:	52                   	push   %edx
8010ab3f:	50                   	push   %eax
8010ab40:	e8 9b fa ff ff       	call   8010a5e0 <netdev_get_netif>
        if (!iface)
8010ab45:	83 c4 10             	add    $0x10,%esp
8010ab48:	85 c0                	test   %eax,%eax
8010ab4a:	0f 84 67 fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        ((struct sockaddr_in *)&ifreq->ifr_netmask)->sin_addr = ((struct netif_ip *)iface)->netmask;
8010ab50:	8b 40 10             	mov    0x10(%eax),%eax
8010ab53:	89 43 14             	mov    %eax,0x14(%ebx)
    return 0;
8010ab56:	31 c0                	xor    %eax,%eax
        break;
8010ab58:	e9 5f fe ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010ab5d:	83 ec 0c             	sub    $0xc,%esp
8010ab60:	53                   	push   %ebx
8010ab61:	e8 fa f8 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010ab66:	83 c4 10             	add    $0x10,%esp
8010ab69:	85 c0                	test   %eax,%eax
8010ab6b:	0f 84 46 fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        iface = netdev_get_netif(dev, ifreq->ifr_addr.sa_family);
8010ab71:	0f b7 53 10          	movzwl 0x10(%ebx),%edx
8010ab75:	83 ec 08             	sub    $0x8,%esp
8010ab78:	52                   	push   %edx
8010ab79:	50                   	push   %eax
8010ab7a:	e8 61 fa ff ff       	call   8010a5e0 <netdev_get_netif>
        if (!iface)
8010ab7f:	83 c4 10             	add    $0x10,%esp
8010ab82:	85 c0                	test   %eax,%eax
8010ab84:	0f 84 2d fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        ((struct sockaddr_in *)&ifreq->ifr_broadaddr)->sin_addr = ((struct netif_ip *)iface)->broadcast;
8010ab8a:	8b 40 18             	mov    0x18(%eax),%eax
8010ab8d:	89 43 14             	mov    %eax,0x14(%ebx)
    return 0;
8010ab90:	31 c0                	xor    %eax,%eax
        break;
8010ab92:	e9 25 fe ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010ab97:	83 ec 0c             	sub    $0xc,%esp
8010ab9a:	53                   	push   %ebx
8010ab9b:	e8 c0 f8 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010aba0:	83 c4 10             	add    $0x10,%esp
        dev = netdev_by_name(ifreq->ifr_name);
8010aba3:	89 c2                	mov    %eax,%edx
        if (!dev)
8010aba5:	85 c0                	test   %eax,%eax
8010aba7:	0f 84 0a fe ff ff    	je     8010a9b7 <socketioctl+0x37>
        if ((dev->flags & IFF_UP) != (ifreq->ifr_flags & IFF_UP)) {
8010abad:	0f b7 4b 10          	movzwl 0x10(%ebx),%ecx
8010abb1:	0f b7 40 20          	movzwl 0x20(%eax),%eax
8010abb5:	31 c8                	xor    %ecx,%eax
8010abb7:	83 e0 01             	and    $0x1,%eax
8010abba:	0f 84 fc fd ff ff    	je     8010a9bc <socketioctl+0x3c>
            if (ifreq->ifr_flags & IFF_UP)
8010abc0:	83 e1 01             	and    $0x1,%ecx
8010abc3:	0f 84 87 00 00 00    	je     8010ac50 <socketioctl+0x2d0>
                dev->ops->open(dev);
8010abc9:	83 ec 0c             	sub    $0xc,%esp
8010abcc:	8b 42 58             	mov    0x58(%edx),%eax
8010abcf:	52                   	push   %edx
8010abd0:	ff 10                	call   *(%eax)
    return 0;
8010abd2:	31 c0                	xor    %eax,%eax
8010abd4:	83 c4 10             	add    $0x10,%esp
8010abd7:	e9 e0 fd ff ff       	jmp    8010a9bc <socketioctl+0x3c>
        dev = netdev_by_name(ifreq->ifr_name);
8010abdc:	83 ec 0c             	sub    $0xc,%esp
8010abdf:	53                   	push   %ebx
8010abe0:	e8 7b f8 ff ff       	call   8010a460 <netdev_by_name>
        if (!dev)
8010abe5:	83 c4 10             	add    $0x10,%esp
        dev = netdev_by_name(ifreq->ifr_name);
8010abe8:	89 c6                	mov    %eax,%esi
        if (!dev)
8010abea:	85 c0                	test   %eax,%eax
8010abec:	0f 84 c5 fd ff ff    	je     8010a9b7 <socketioctl+0x37>
        iface = netdev_get_netif(dev, ifreq->ifr_addr.sa_family);
8010abf2:	0f b7 43 10          	movzwl 0x10(%ebx),%eax
8010abf6:	83 ec 08             	sub    $0x8,%esp
8010abf9:	50                   	push   %eax
8010abfa:	56                   	push   %esi
8010abfb:	e8 e0 f9 ff ff       	call   8010a5e0 <netdev_get_netif>
        if (iface) {
8010ac00:	83 c4 10             	add    $0x10,%esp
8010ac03:	85 c0                	test   %eax,%eax
8010ac05:	74 11                	je     8010ac18 <socketioctl+0x298>
            if (ip_netif_reconfigure(iface, ((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr, ((struct netif_ip *)iface)->netmask, ((struct netif_ip *)iface)->gateway) == -1)
8010ac07:	ff 70 1c             	pushl  0x1c(%eax)
8010ac0a:	ff 70 10             	pushl  0x10(%eax)
8010ac0d:	ff 73 14             	pushl  0x14(%ebx)
8010ac10:	e9 13 fe ff ff       	jmp    8010aa28 <socketioctl+0xa8>
8010ac15:	8d 76 00             	lea    0x0(%esi),%esi
            iface = ip_netif_alloc(((struct sockaddr_in *)&ifreq->ifr_addr)->sin_addr, 0xffffffff, 0);
8010ac18:	83 ec 04             	sub    $0x4,%esp
8010ac1b:	6a 00                	push   $0x0
8010ac1d:	6a ff                	push   $0xffffffff
8010ac1f:	ff 73 14             	pushl  0x14(%ebx)
8010ac22:	e8 a9 ee ff ff       	call   80109ad0 <ip_netif_alloc>
            if (!iface)
8010ac27:	83 c4 10             	add    $0x10,%esp
8010ac2a:	85 c0                	test   %eax,%eax
8010ac2c:	0f 84 85 fd ff ff    	je     8010a9b7 <socketioctl+0x37>
            netdev_add_netif(dev, iface);
8010ac32:	83 ec 08             	sub    $0x8,%esp
8010ac35:	50                   	push   %eax
8010ac36:	56                   	push   %esi
8010ac37:	e8 14 f9 ff ff       	call   8010a550 <netdev_add_netif>
8010ac3c:	83 c4 10             	add    $0x10,%esp
    return 0;
8010ac3f:	31 c0                	xor    %eax,%eax
8010ac41:	e9 76 fd ff ff       	jmp    8010a9bc <socketioctl+0x3c>
8010ac46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ac4d:	8d 76 00             	lea    0x0(%esi),%esi
                dev->ops->stop(dev);
8010ac50:	83 ec 0c             	sub    $0xc,%esp
8010ac53:	8b 42 58             	mov    0x58(%edx),%eax
8010ac56:	52                   	push   %edx
8010ac57:	ff 50 04             	call   *0x4(%eax)
    return 0;
8010ac5a:	31 c0                	xor    %eax,%eax
                dev->ops->stop(dev);
8010ac5c:	83 c4 10             	add    $0x10,%esp
8010ac5f:	e9 58 fd ff ff       	jmp    8010a9bc <socketioctl+0x3c>
8010ac64:	66 90                	xchg   %ax,%ax
8010ac66:	66 90                	xchg   %ax,%ax
8010ac68:	66 90                	xchg   %ax,%ax
8010ac6a:	66 90                	xchg   %ax,%ax
8010ac6c:	66 90                	xchg   %ax,%ax
8010ac6e:	66 90                	xchg   %ax,%ax

8010ac70 <sys_ifget>:
#include "net.h"
#include "ip.h"

int
sys_ifget(void)
{
8010ac70:	f3 0f 1e fb          	endbr32 
8010ac74:	55                   	push   %ebp
8010ac75:	89 e5                	mov    %esp,%ebp
8010ac77:	57                   	push   %edi
8010ac78:	56                   	push   %esi
8010ac79:	53                   	push   %ebx
8010ac7a:	83 ec 3c             	sub    $0x3c,%esp
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010ac7d:	e8 0e f7 ff ff       	call   8010a390 <netdev_root>
8010ac82:	85 c0                	test   %eax,%eax
8010ac84:	0f 84 97 00 00 00    	je     8010ad21 <sys_ifget+0xb1>
8010ac8a:	89 c3                	mov    %eax,%ebx
8010ac8c:	eb 5a                	jmp    8010ace8 <sys_ifget+0x78>
8010ac8e:	66 90                	xchg   %ax,%ax
        if (!iface) {
            cprintf("%s: no address [%s]\n", dev->name, dev->flags & NETDEV_FLAG_UP ? "UP" : "DOWN");
        } else {
            char unicast[IP_ADDR_STR_LEN];
            char netmask[IP_ADDR_STR_LEN];            
            cprintf("%s: %s/%s [%s]\n",
8010ac90:	66 85 c0             	test   %ax,%ax
8010ac93:	ba 53 e7 10 80       	mov    $0x8010e753,%edx
8010ac98:	b8 50 e7 10 80       	mov    $0x8010e750,%eax
8010ac9d:	0f 45 d0             	cmovne %eax,%edx
8010aca0:	83 ec 04             	sub    $0x4,%esp
8010aca3:	8d 45 d8             	lea    -0x28(%ebp),%eax
8010aca6:	6a 10                	push   $0x10
8010aca8:	50                   	push   %eax
                dev->name,
                ip_addr_ntop(&((struct netif_ip *)iface)->unicast, unicast, sizeof(unicast)),
                ip_addr_ntop(&((struct netif_ip *)iface)->netmask, netmask, sizeof(netmask)),
8010aca9:	8d 46 10             	lea    0x10(%esi),%eax
                ip_addr_ntop(&((struct netif_ip *)iface)->unicast, unicast, sizeof(unicast)),
8010acac:	83 c6 0c             	add    $0xc,%esi
            cprintf("%s: %s/%s [%s]\n",
8010acaf:	50                   	push   %eax
8010acb0:	89 55 c4             	mov    %edx,-0x3c(%ebp)
8010acb3:	e8 c8 e8 ff ff       	call   80109580 <ip_addr_ntop>
8010acb8:	83 c4 0c             	add    $0xc,%esp
8010acbb:	89 c7                	mov    %eax,%edi
8010acbd:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010acc0:	6a 10                	push   $0x10
8010acc2:	50                   	push   %eax
8010acc3:	56                   	push   %esi
8010acc4:	e8 b7 e8 ff ff       	call   80109580 <ip_addr_ntop>
8010acc9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
8010accc:	89 14 24             	mov    %edx,(%esp)
8010accf:	57                   	push   %edi
8010acd0:	50                   	push   %eax
                dev->name,
8010acd1:	8d 43 0c             	lea    0xc(%ebx),%eax
            cprintf("%s: %s/%s [%s]\n",
8010acd4:	50                   	push   %eax
8010acd5:	68 6d e7 10 80       	push   $0x8010e76d
8010acda:	e8 b1 56 ff ff       	call   80100390 <cprintf>
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010acdf:	8b 1b                	mov    (%ebx),%ebx
8010ace1:	83 c4 20             	add    $0x20,%esp
8010ace4:	85 db                	test   %ebx,%ebx
8010ace6:	74 39                	je     8010ad21 <sys_ifget+0xb1>
        struct netif *iface = dev->ifs;
8010ace8:	0f b7 43 20          	movzwl 0x20(%ebx),%eax
8010acec:	8b 73 04             	mov    0x4(%ebx),%esi
        if (!iface) {
8010acef:	83 e0 01             	and    $0x1,%eax
8010acf2:	85 f6                	test   %esi,%esi
8010acf4:	75 9a                	jne    8010ac90 <sys_ifget+0x20>
            cprintf("%s: no address [%s]\n", dev->name, dev->flags & NETDEV_FLAG_UP ? "UP" : "DOWN");
8010acf6:	66 85 c0             	test   %ax,%ax
8010acf9:	b9 50 e7 10 80       	mov    $0x8010e750,%ecx
8010acfe:	b8 53 e7 10 80       	mov    $0x8010e753,%eax
8010ad03:	0f 45 c1             	cmovne %ecx,%eax
8010ad06:	83 ec 04             	sub    $0x4,%esp
8010ad09:	50                   	push   %eax
8010ad0a:	8d 43 0c             	lea    0xc(%ebx),%eax
8010ad0d:	50                   	push   %eax
8010ad0e:	68 58 e7 10 80       	push   $0x8010e758
8010ad13:	e8 78 56 ff ff       	call   80100390 <cprintf>
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010ad18:	8b 1b                	mov    (%ebx),%ebx
8010ad1a:	83 c4 10             	add    $0x10,%esp
8010ad1d:	85 db                	test   %ebx,%ebx
8010ad1f:	75 c7                	jne    8010ace8 <sys_ifget+0x78>
                dev->flags & NETDEV_FLAG_UP ? "UP" : "DOWN");
        }
    }
    return 0;
}
8010ad21:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010ad24:	31 c0                	xor    %eax,%eax
8010ad26:	5b                   	pop    %ebx
8010ad27:	5e                   	pop    %esi
8010ad28:	5f                   	pop    %edi
8010ad29:	5d                   	pop    %ebp
8010ad2a:	c3                   	ret    
8010ad2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ad2f:	90                   	nop

8010ad30 <sys_ifset>:

int
sys_ifset(void)
{
8010ad30:	f3 0f 1e fb          	endbr32 
8010ad34:	55                   	push   %ebp
8010ad35:	89 e5                	mov    %esp,%ebp
8010ad37:	56                   	push   %esi
8010ad38:	53                   	push   %ebx
    char *name, *addr, *mask;
    if (argstr(0, &name) < 0 || argstr(1, &addr) < 0 || argstr(2, &mask) < 0)
8010ad39:	8d 45 ec             	lea    -0x14(%ebp),%eax
{
8010ad3c:	83 ec 18             	sub    $0x18,%esp
    if (argstr(0, &name) < 0 || argstr(1, &addr) < 0 || argstr(2, &mask) < 0)
8010ad3f:	50                   	push   %eax
8010ad40:	6a 00                	push   $0x0
8010ad42:	e8 b9 a9 ff ff       	call   80105700 <argstr>
8010ad47:	83 c4 10             	add    $0x10,%esp
8010ad4a:	85 c0                	test   %eax,%eax
8010ad4c:	0f 88 89 00 00 00    	js     8010addb <sys_ifset+0xab>
8010ad52:	83 ec 08             	sub    $0x8,%esp
8010ad55:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010ad58:	50                   	push   %eax
8010ad59:	6a 01                	push   $0x1
8010ad5b:	e8 a0 a9 ff ff       	call   80105700 <argstr>
8010ad60:	83 c4 10             	add    $0x10,%esp
8010ad63:	85 c0                	test   %eax,%eax
8010ad65:	78 74                	js     8010addb <sys_ifset+0xab>
8010ad67:	83 ec 08             	sub    $0x8,%esp
8010ad6a:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010ad6d:	50                   	push   %eax
8010ad6e:	6a 02                	push   $0x2
8010ad70:	e8 8b a9 ff ff       	call   80105700 <argstr>
8010ad75:	83 c4 10             	add    $0x10,%esp
8010ad78:	85 c0                	test   %eax,%eax
8010ad7a:	78 5f                	js     8010addb <sys_ifset+0xab>
        return -1;
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010ad7c:	e8 0f f6 ff ff       	call   8010a390 <netdev_root>
8010ad81:	89 c3                	mov    %eax,%ebx
8010ad83:	85 c0                	test   %eax,%eax
8010ad85:	75 0f                	jne    8010ad96 <sys_ifset+0x66>
8010ad87:	eb 47                	jmp    8010add0 <sys_ifset+0xa0>
8010ad89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ad90:	8b 1b                	mov    (%ebx),%ebx
8010ad92:	85 db                	test   %ebx,%ebx
8010ad94:	74 3a                	je     8010add0 <sys_ifset+0xa0>
        if (strncmp(dev->name, name, sizeof(dev->name)-1) == 0) {
8010ad96:	83 ec 04             	sub    $0x4,%esp
8010ad99:	8d 43 0c             	lea    0xc(%ebx),%eax
8010ad9c:	6a 0f                	push   $0xf
8010ad9e:	ff 75 ec             	pushl  -0x14(%ebp)
8010ada1:	50                   	push   %eax
8010ada2:	e8 29 a5 ff ff       	call   801052d0 <strncmp>
8010ada7:	83 c4 10             	add    $0x10,%esp
8010adaa:	89 c6                	mov    %eax,%esi
8010adac:	85 c0                	test   %eax,%eax
8010adae:	75 e0                	jne    8010ad90 <sys_ifset+0x60>
            ip_netif_register(dev, addr, mask, NULL);
8010adb0:	6a 00                	push   $0x0
8010adb2:	ff 75 f4             	pushl  -0xc(%ebp)
8010adb5:	ff 75 f0             	pushl  -0x10(%ebp)
8010adb8:	53                   	push   %ebx
8010adb9:	e8 02 ee ff ff       	call   80109bc0 <ip_netif_register>
            return 0;
8010adbe:	83 c4 10             	add    $0x10,%esp
        }
    }
    return 0;
}
8010adc1:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010adc4:	89 f0                	mov    %esi,%eax
8010adc6:	5b                   	pop    %ebx
8010adc7:	5e                   	pop    %esi
8010adc8:	5d                   	pop    %ebp
8010adc9:	c3                   	ret    
8010adca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010add0:	8d 65 f8             	lea    -0x8(%ebp),%esp
    return 0;
8010add3:	31 f6                	xor    %esi,%esi
}
8010add5:	89 f0                	mov    %esi,%eax
8010add7:	5b                   	pop    %ebx
8010add8:	5e                   	pop    %esi
8010add9:	5d                   	pop    %ebp
8010adda:	c3                   	ret    
        return -1;
8010addb:	be ff ff ff ff       	mov    $0xffffffff,%esi
8010ade0:	eb df                	jmp    8010adc1 <sys_ifset+0x91>
8010ade2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ade9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010adf0 <sys_ifup>:

int
sys_ifup(void)
{
8010adf0:	f3 0f 1e fb          	endbr32 
8010adf4:	55                   	push   %ebp
8010adf5:	89 e5                	mov    %esp,%ebp
8010adf7:	56                   	push   %esi
8010adf8:	53                   	push   %ebx
    char *name;
    if (argstr(0, &name) < 0)
8010adf9:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
8010adfc:	83 ec 18             	sub    $0x18,%esp
    if (argstr(0, &name) < 0)
8010adff:	50                   	push   %eax
8010ae00:	6a 00                	push   $0x0
8010ae02:	e8 f9 a8 ff ff       	call   80105700 <argstr>
8010ae07:	83 c4 10             	add    $0x10,%esp
8010ae0a:	85 c0                	test   %eax,%eax
8010ae0c:	78 4a                	js     8010ae58 <sys_ifup+0x68>
        return -1;
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010ae0e:	e8 7d f5 ff ff       	call   8010a390 <netdev_root>
8010ae13:	89 c3                	mov    %eax,%ebx
8010ae15:	85 c0                	test   %eax,%eax
8010ae17:	75 0d                	jne    8010ae26 <sys_ifup+0x36>
8010ae19:	eb 3d                	jmp    8010ae58 <sys_ifup+0x68>
8010ae1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ae1f:	90                   	nop
8010ae20:	8b 1b                	mov    (%ebx),%ebx
8010ae22:	85 db                	test   %ebx,%ebx
8010ae24:	74 32                	je     8010ae58 <sys_ifup+0x68>
        if (strncmp(dev->name, name, sizeof(dev->name)-1) == 0) {
8010ae26:	83 ec 04             	sub    $0x4,%esp
8010ae29:	8d 43 0c             	lea    0xc(%ebx),%eax
8010ae2c:	6a 0f                	push   $0xf
8010ae2e:	ff 75 f4             	pushl  -0xc(%ebp)
8010ae31:	50                   	push   %eax
8010ae32:	e8 99 a4 ff ff       	call   801052d0 <strncmp>
8010ae37:	83 c4 10             	add    $0x10,%esp
8010ae3a:	89 c6                	mov    %eax,%esi
8010ae3c:	85 c0                	test   %eax,%eax
8010ae3e:	75 e0                	jne    8010ae20 <sys_ifup+0x30>
            dev->ops->open(dev);
8010ae40:	83 ec 0c             	sub    $0xc,%esp
8010ae43:	8b 43 58             	mov    0x58(%ebx),%eax
8010ae46:	53                   	push   %ebx
8010ae47:	ff 10                	call   *(%eax)
            return 0;
        }
    }
    return -1;
}
8010ae49:	89 f0                	mov    %esi,%eax
            return 0;
8010ae4b:	83 c4 10             	add    $0x10,%esp
}
8010ae4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010ae51:	5b                   	pop    %ebx
8010ae52:	5e                   	pop    %esi
8010ae53:	5d                   	pop    %ebp
8010ae54:	c3                   	ret    
8010ae55:	8d 76 00             	lea    0x0(%esi),%esi
8010ae58:	8d 65 f8             	lea    -0x8(%ebp),%esp
        return -1;
8010ae5b:	be ff ff ff ff       	mov    $0xffffffff,%esi
}
8010ae60:	89 f0                	mov    %esi,%eax
8010ae62:	5b                   	pop    %ebx
8010ae63:	5e                   	pop    %esi
8010ae64:	5d                   	pop    %ebp
8010ae65:	c3                   	ret    
8010ae66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ae6d:	8d 76 00             	lea    0x0(%esi),%esi

8010ae70 <sys_ifdown>:

int
sys_ifdown(void)
{
8010ae70:	f3 0f 1e fb          	endbr32 
8010ae74:	55                   	push   %ebp
8010ae75:	89 e5                	mov    %esp,%ebp
8010ae77:	56                   	push   %esi
8010ae78:	53                   	push   %ebx
    char *name;
    if (argstr(0, &name) < 0)
8010ae79:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
8010ae7c:	83 ec 18             	sub    $0x18,%esp
    if (argstr(0, &name) < 0)
8010ae7f:	50                   	push   %eax
8010ae80:	6a 00                	push   $0x0
8010ae82:	e8 79 a8 ff ff       	call   80105700 <argstr>
8010ae87:	83 c4 10             	add    $0x10,%esp
8010ae8a:	85 c0                	test   %eax,%eax
8010ae8c:	78 52                	js     8010aee0 <sys_ifdown+0x70>
        return -1;
    for (struct netdev *dev = netdev_root(); dev; dev = dev->next) {
8010ae8e:	e8 fd f4 ff ff       	call   8010a390 <netdev_root>
8010ae93:	89 c3                	mov    %eax,%ebx
8010ae95:	85 c0                	test   %eax,%eax
8010ae97:	75 0d                	jne    8010aea6 <sys_ifdown+0x36>
8010ae99:	eb 45                	jmp    8010aee0 <sys_ifdown+0x70>
8010ae9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ae9f:	90                   	nop
8010aea0:	8b 1b                	mov    (%ebx),%ebx
8010aea2:	85 db                	test   %ebx,%ebx
8010aea4:	74 3a                	je     8010aee0 <sys_ifdown+0x70>
        if (strncmp(dev->name, name, sizeof(dev->name)-1) == 0) {
8010aea6:	83 ec 04             	sub    $0x4,%esp
8010aea9:	8d 43 0c             	lea    0xc(%ebx),%eax
8010aeac:	6a 0f                	push   $0xf
8010aeae:	ff 75 f4             	pushl  -0xc(%ebp)
8010aeb1:	50                   	push   %eax
8010aeb2:	e8 19 a4 ff ff       	call   801052d0 <strncmp>
8010aeb7:	83 c4 10             	add    $0x10,%esp
8010aeba:	89 c6                	mov    %eax,%esi
8010aebc:	85 c0                	test   %eax,%eax
8010aebe:	75 e0                	jne    8010aea0 <sys_ifdown+0x30>
            dev->ops->stop(dev);
8010aec0:	83 ec 0c             	sub    $0xc,%esp
8010aec3:	8b 43 58             	mov    0x58(%ebx),%eax
8010aec6:	53                   	push   %ebx
8010aec7:	ff 50 04             	call   *0x4(%eax)
            return 0;
        }
    }
    return -1;
}
8010aeca:	89 f0                	mov    %esi,%eax
            return 0;
8010aecc:	83 c4 10             	add    $0x10,%esp
}
8010aecf:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010aed2:	5b                   	pop    %ebx
8010aed3:	5e                   	pop    %esi
8010aed4:	5d                   	pop    %ebp
8010aed5:	c3                   	ret    
8010aed6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010aedd:	8d 76 00             	lea    0x0(%esi),%esi
8010aee0:	8d 65 f8             	lea    -0x8(%ebp),%esp
        return -1;
8010aee3:	be ff ff ff ff       	mov    $0xffffffff,%esi
}
8010aee8:	89 f0                	mov    %esi,%eax
8010aeea:	5b                   	pop    %ebx
8010aeeb:	5e                   	pop    %esi
8010aeec:	5d                   	pop    %ebp
8010aeed:	c3                   	ret    
8010aeee:	66 90                	xchg   %ax,%ax

8010aef0 <sys_socket>:
#include "sleeplock.h"
#include "file.h"

int
sys_socket(void)
{
8010aef0:	f3 0f 1e fb          	endbr32 
8010aef4:	55                   	push   %ebp
8010aef5:	89 e5                	mov    %esp,%ebp
8010aef7:	53                   	push   %ebx
  int fd, domain, type, protocol;
  struct file *f;

  if (argint(0, &domain) < 0 || argint(1, &type) < 0 || argint(2, &protocol) < 0)
8010aef8:	8d 45 ec             	lea    -0x14(%ebp),%eax
{
8010aefb:	83 ec 1c             	sub    $0x1c,%esp
  if (argint(0, &domain) < 0 || argint(1, &type) < 0 || argint(2, &protocol) < 0)
8010aefe:	50                   	push   %eax
8010aeff:	6a 00                	push   $0x0
8010af01:	e8 4a a7 ff ff       	call   80105650 <argint>
8010af06:	83 c4 10             	add    $0x10,%esp
8010af09:	85 c0                	test   %eax,%eax
8010af0b:	78 6b                	js     8010af78 <sys_socket+0x88>
8010af0d:	83 ec 08             	sub    $0x8,%esp
8010af10:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010af13:	50                   	push   %eax
8010af14:	6a 01                	push   $0x1
8010af16:	e8 35 a7 ff ff       	call   80105650 <argint>
8010af1b:	83 c4 10             	add    $0x10,%esp
8010af1e:	85 c0                	test   %eax,%eax
8010af20:	78 56                	js     8010af78 <sys_socket+0x88>
8010af22:	83 ec 08             	sub    $0x8,%esp
8010af25:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010af28:	50                   	push   %eax
8010af29:	6a 02                	push   $0x2
8010af2b:	e8 20 a7 ff ff       	call   80105650 <argint>
8010af30:	83 c4 10             	add    $0x10,%esp
8010af33:	85 c0                	test   %eax,%eax
8010af35:	78 41                	js     8010af78 <sys_socket+0x88>
    return -1;
  if ((f = socketalloc(domain, type, protocol)) == 0 || (fd = fdalloc(f)) < 0){
8010af37:	83 ec 04             	sub    $0x4,%esp
8010af3a:	ff 75 f4             	pushl  -0xc(%ebp)
8010af3d:	ff 75 f0             	pushl  -0x10(%ebp)
8010af40:	ff 75 ec             	pushl  -0x14(%ebp)
8010af43:	e8 68 f7 ff ff       	call   8010a6b0 <socketalloc>
8010af48:	83 c4 10             	add    $0x10,%esp
8010af4b:	89 c3                	mov    %eax,%ebx
8010af4d:	85 c0                	test   %eax,%eax
8010af4f:	74 27                	je     8010af78 <sys_socket+0x88>
8010af51:	83 ec 0c             	sub    $0xc,%esp
8010af54:	50                   	push   %eax
8010af55:	e8 56 aa ff ff       	call   801059b0 <fdalloc>
8010af5a:	83 c4 10             	add    $0x10,%esp
8010af5d:	85 c0                	test   %eax,%eax
8010af5f:	78 05                	js     8010af66 <sys_socket+0x76>
    if (f)
      fileclose(f);
    return -1;
  }
  return fd;
}
8010af61:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010af64:	c9                   	leave  
8010af65:	c3                   	ret    
      fileclose(f);
8010af66:	83 ec 0c             	sub    $0xc,%esp
8010af69:	53                   	push   %ebx
8010af6a:	e8 c1 5d ff ff       	call   80100d30 <fileclose>
8010af6f:	83 c4 10             	add    $0x10,%esp
8010af72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    return -1;
8010af78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010af7d:	eb e2                	jmp    8010af61 <sys_socket+0x71>
8010af7f:	90                   	nop

8010af80 <sys_connect>:

int
sys_connect(void)
{
8010af80:	f3 0f 1e fb          	endbr32 
8010af84:	55                   	push   %ebp
8010af85:	89 e5                	mov    %esp,%ebp
8010af87:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int addrlen;
  struct sockaddr *addr;

  if (argfd(0, 0, &f) < 0 || argint(2, &addrlen) < 0 || argptr(1, (void*)&addr, addrlen) < 0)
8010af8a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010af8d:	50                   	push   %eax
8010af8e:	6a 00                	push   $0x0
8010af90:	6a 00                	push   $0x0
8010af92:	e8 b9 a9 ff ff       	call   80105950 <argfd>
8010af97:	83 c4 10             	add    $0x10,%esp
8010af9a:	85 c0                	test   %eax,%eax
8010af9c:	78 52                	js     8010aff0 <sys_connect+0x70>
8010af9e:	83 ec 08             	sub    $0x8,%esp
8010afa1:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010afa4:	50                   	push   %eax
8010afa5:	6a 02                	push   $0x2
8010afa7:	e8 a4 a6 ff ff       	call   80105650 <argint>
8010afac:	83 c4 10             	add    $0x10,%esp
8010afaf:	85 c0                	test   %eax,%eax
8010afb1:	78 3d                	js     8010aff0 <sys_connect+0x70>
8010afb3:	83 ec 04             	sub    $0x4,%esp
8010afb6:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010afb9:	ff 75 f0             	pushl  -0x10(%ebp)
8010afbc:	50                   	push   %eax
8010afbd:	6a 01                	push   $0x1
8010afbf:	e8 dc a6 ff ff       	call   801056a0 <argptr>
8010afc4:	83 c4 10             	add    $0x10,%esp
8010afc7:	85 c0                	test   %eax,%eax
8010afc9:	78 25                	js     8010aff0 <sys_connect+0x70>
    return -1;
  if (f->type != FD_SOCKET)
8010afcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010afce:	83 38 03             	cmpl   $0x3,(%eax)
8010afd1:	75 1d                	jne    8010aff0 <sys_connect+0x70>
    return -1;
  return socketconnect(f->socket, addr, addrlen);
8010afd3:	83 ec 04             	sub    $0x4,%esp
8010afd6:	ff 75 f0             	pushl  -0x10(%ebp)
8010afd9:	ff 75 f4             	pushl  -0xc(%ebp)
8010afdc:	ff 70 14             	pushl  0x14(%eax)
8010afdf:	e8 9c f7 ff ff       	call   8010a780 <socketconnect>
8010afe4:	83 c4 10             	add    $0x10,%esp
}
8010afe7:	c9                   	leave  
8010afe8:	c3                   	ret    
8010afe9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010aff0:	c9                   	leave  
    return -1;
8010aff1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010aff6:	c3                   	ret    
8010aff7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010affe:	66 90                	xchg   %ax,%ax

8010b000 <sys_bind>:

int
sys_bind(void)
{
8010b000:	f3 0f 1e fb          	endbr32 
8010b004:	55                   	push   %ebp
8010b005:	89 e5                	mov    %esp,%ebp
8010b007:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int addrlen;
  struct sockaddr *addr;

  if (argfd(0, 0, &f) < 0 || argint(2, &addrlen) < 0 || argptr(1, (void*)&addr, addrlen) < 0)
8010b00a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b00d:	50                   	push   %eax
8010b00e:	6a 00                	push   $0x0
8010b010:	6a 00                	push   $0x0
8010b012:	e8 39 a9 ff ff       	call   80105950 <argfd>
8010b017:	83 c4 10             	add    $0x10,%esp
8010b01a:	85 c0                	test   %eax,%eax
8010b01c:	78 52                	js     8010b070 <sys_bind+0x70>
8010b01e:	83 ec 08             	sub    $0x8,%esp
8010b021:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b024:	50                   	push   %eax
8010b025:	6a 02                	push   $0x2
8010b027:	e8 24 a6 ff ff       	call   80105650 <argint>
8010b02c:	83 c4 10             	add    $0x10,%esp
8010b02f:	85 c0                	test   %eax,%eax
8010b031:	78 3d                	js     8010b070 <sys_bind+0x70>
8010b033:	83 ec 04             	sub    $0x4,%esp
8010b036:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b039:	ff 75 f0             	pushl  -0x10(%ebp)
8010b03c:	50                   	push   %eax
8010b03d:	6a 01                	push   $0x1
8010b03f:	e8 5c a6 ff ff       	call   801056a0 <argptr>
8010b044:	83 c4 10             	add    $0x10,%esp
8010b047:	85 c0                	test   %eax,%eax
8010b049:	78 25                	js     8010b070 <sys_bind+0x70>
    return -1;
  if (f->type != FD_SOCKET)
8010b04b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b04e:	83 38 03             	cmpl   $0x3,(%eax)
8010b051:	75 1d                	jne    8010b070 <sys_bind+0x70>
    return -1;
  return socketbind(f->socket, addr, addrlen);
8010b053:	83 ec 04             	sub    $0x4,%esp
8010b056:	ff 75 f0             	pushl  -0x10(%ebp)
8010b059:	ff 75 f4             	pushl  -0xc(%ebp)
8010b05c:	ff 70 14             	pushl  0x14(%eax)
8010b05f:	e8 4c f7 ff ff       	call   8010a7b0 <socketbind>
8010b064:	83 c4 10             	add    $0x10,%esp
}
8010b067:	c9                   	leave  
8010b068:	c3                   	ret    
8010b069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b070:	c9                   	leave  
    return -1;
8010b071:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b076:	c3                   	ret    
8010b077:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b07e:	66 90                	xchg   %ax,%ax

8010b080 <sys_listen>:

int
sys_listen(void)
{
8010b080:	f3 0f 1e fb          	endbr32 
8010b084:	55                   	push   %ebp
8010b085:	89 e5                	mov    %esp,%ebp
8010b087:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int backlog;

  if (argfd(0, 0, &f) < 0 || argint(1, &backlog) < 0)
8010b08a:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b08d:	50                   	push   %eax
8010b08e:	6a 00                	push   $0x0
8010b090:	6a 00                	push   $0x0
8010b092:	e8 b9 a8 ff ff       	call   80105950 <argfd>
8010b097:	83 c4 10             	add    $0x10,%esp
8010b09a:	85 c0                	test   %eax,%eax
8010b09c:	78 32                	js     8010b0d0 <sys_listen+0x50>
8010b09e:	83 ec 08             	sub    $0x8,%esp
8010b0a1:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b0a4:	50                   	push   %eax
8010b0a5:	6a 01                	push   $0x1
8010b0a7:	e8 a4 a5 ff ff       	call   80105650 <argint>
8010b0ac:	83 c4 10             	add    $0x10,%esp
8010b0af:	85 c0                	test   %eax,%eax
8010b0b1:	78 1d                	js     8010b0d0 <sys_listen+0x50>
    return -1;
  if (f->type != FD_SOCKET)
8010b0b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b0b6:	83 38 03             	cmpl   $0x3,(%eax)
8010b0b9:	75 15                	jne    8010b0d0 <sys_listen+0x50>
    return -1;
  return socketlisten(f->socket, backlog);
8010b0bb:	83 ec 08             	sub    $0x8,%esp
8010b0be:	ff 75 f4             	pushl  -0xc(%ebp)
8010b0c1:	ff 70 14             	pushl  0x14(%eax)
8010b0c4:	e8 17 f7 ff ff       	call   8010a7e0 <socketlisten>
8010b0c9:	83 c4 10             	add    $0x10,%esp
}
8010b0cc:	c9                   	leave  
8010b0cd:	c3                   	ret    
8010b0ce:	66 90                	xchg   %ax,%ax
8010b0d0:	c9                   	leave  
    return -1;
8010b0d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b0d6:	c3                   	ret    
8010b0d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b0de:	66 90                	xchg   %ax,%ax

8010b0e0 <sys_accept>:

int
sys_accept(void)
{
8010b0e0:	f3 0f 1e fb          	endbr32 
8010b0e4:	55                   	push   %ebp
8010b0e5:	89 e5                	mov    %esp,%ebp
8010b0e7:	53                   	push   %ebx
  struct file *f, *af;
  int *addrlen, afd;
  struct sockaddr *addr = NULL;

  if (argfd(0, 0, &f) < 0 || argptr(2, (void*)&addrlen, sizeof(*addrlen)) < 0)
8010b0e8:	8d 45 ec             	lea    -0x14(%ebp),%eax
{
8010b0eb:	83 ec 18             	sub    $0x18,%esp
  struct sockaddr *addr = NULL;
8010b0ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (argfd(0, 0, &f) < 0 || argptr(2, (void*)&addrlen, sizeof(*addrlen)) < 0)
8010b0f5:	50                   	push   %eax
8010b0f6:	6a 00                	push   $0x0
8010b0f8:	6a 00                	push   $0x0
8010b0fa:	e8 51 a8 ff ff       	call   80105950 <argfd>
8010b0ff:	83 c4 10             	add    $0x10,%esp
8010b102:	85 c0                	test   %eax,%eax
8010b104:	78 7a                	js     8010b180 <sys_accept+0xa0>
8010b106:	83 ec 04             	sub    $0x4,%esp
8010b109:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b10c:	6a 04                	push   $0x4
8010b10e:	50                   	push   %eax
8010b10f:	6a 02                	push   $0x2
8010b111:	e8 8a a5 ff ff       	call   801056a0 <argptr>
8010b116:	83 c4 10             	add    $0x10,%esp
8010b119:	85 c0                	test   %eax,%eax
8010b11b:	78 63                	js     8010b180 <sys_accept+0xa0>
    return -1;
  if (addrlen && argptr(1, (void*)&addr, *addrlen) < 0)
8010b11d:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b120:	85 c0                	test   %eax,%eax
8010b122:	74 17                	je     8010b13b <sys_accept+0x5b>
8010b124:	83 ec 04             	sub    $0x4,%esp
8010b127:	ff 30                	pushl  (%eax)
8010b129:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b12c:	50                   	push   %eax
8010b12d:	6a 01                	push   $0x1
8010b12f:	e8 6c a5 ff ff       	call   801056a0 <argptr>
8010b134:	83 c4 10             	add    $0x10,%esp
8010b137:	85 c0                	test   %eax,%eax
8010b139:	78 45                	js     8010b180 <sys_accept+0xa0>
    return -1;
  if (f->type != FD_SOCKET)
8010b13b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b13e:	83 38 03             	cmpl   $0x3,(%eax)
8010b141:	75 3d                	jne    8010b180 <sys_accept+0xa0>
    return -1;
  if ((af = socketaccept(f->socket, addr, addrlen)) == 0 || (afd = fdalloc(af)) < 0){
8010b143:	83 ec 04             	sub    $0x4,%esp
8010b146:	ff 75 f0             	pushl  -0x10(%ebp)
8010b149:	ff 75 f4             	pushl  -0xc(%ebp)
8010b14c:	ff 70 14             	pushl  0x14(%eax)
8010b14f:	e8 bc f6 ff ff       	call   8010a810 <socketaccept>
8010b154:	83 c4 10             	add    $0x10,%esp
8010b157:	89 c3                	mov    %eax,%ebx
8010b159:	85 c0                	test   %eax,%eax
8010b15b:	74 23                	je     8010b180 <sys_accept+0xa0>
8010b15d:	83 ec 0c             	sub    $0xc,%esp
8010b160:	50                   	push   %eax
8010b161:	e8 4a a8 ff ff       	call   801059b0 <fdalloc>
8010b166:	83 c4 10             	add    $0x10,%esp
8010b169:	85 c0                	test   %eax,%eax
8010b16b:	78 05                	js     8010b172 <sys_accept+0x92>
    if (af)
      fileclose(af);
    return -1;
  }
  return afd;
}
8010b16d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010b170:	c9                   	leave  
8010b171:	c3                   	ret    
      fileclose(af);
8010b172:	83 ec 0c             	sub    $0xc,%esp
8010b175:	53                   	push   %ebx
8010b176:	e8 b5 5b ff ff       	call   80100d30 <fileclose>
8010b17b:	83 c4 10             	add    $0x10,%esp
8010b17e:	66 90                	xchg   %ax,%ax
    return -1;
8010b180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010b185:	eb e6                	jmp    8010b16d <sys_accept+0x8d>
8010b187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b18e:	66 90                	xchg   %ax,%ax

8010b190 <sys_recv>:

int
sys_recv(void)
{
8010b190:	f3 0f 1e fb          	endbr32 
8010b194:	55                   	push   %ebp
8010b195:	89 e5                	mov    %esp,%ebp
8010b197:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int n;
  char *p;

  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
8010b19a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b19d:	50                   	push   %eax
8010b19e:	6a 00                	push   $0x0
8010b1a0:	6a 00                	push   $0x0
8010b1a2:	e8 a9 a7 ff ff       	call   80105950 <argfd>
8010b1a7:	83 c4 10             	add    $0x10,%esp
8010b1aa:	85 c0                	test   %eax,%eax
8010b1ac:	78 52                	js     8010b200 <sys_recv+0x70>
8010b1ae:	83 ec 08             	sub    $0x8,%esp
8010b1b1:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b1b4:	50                   	push   %eax
8010b1b5:	6a 02                	push   $0x2
8010b1b7:	e8 94 a4 ff ff       	call   80105650 <argint>
8010b1bc:	83 c4 10             	add    $0x10,%esp
8010b1bf:	85 c0                	test   %eax,%eax
8010b1c1:	78 3d                	js     8010b200 <sys_recv+0x70>
8010b1c3:	83 ec 04             	sub    $0x4,%esp
8010b1c6:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b1c9:	ff 75 f0             	pushl  -0x10(%ebp)
8010b1cc:	50                   	push   %eax
8010b1cd:	6a 01                	push   $0x1
8010b1cf:	e8 cc a4 ff ff       	call   801056a0 <argptr>
8010b1d4:	83 c4 10             	add    $0x10,%esp
8010b1d7:	85 c0                	test   %eax,%eax
8010b1d9:	78 25                	js     8010b200 <sys_recv+0x70>
    return -1;
  if (f->type != FD_SOCKET)
8010b1db:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b1de:	83 38 03             	cmpl   $0x3,(%eax)
8010b1e1:	75 1d                	jne    8010b200 <sys_recv+0x70>
    return -1;
  return socketread(f->socket, p, n);
8010b1e3:	83 ec 04             	sub    $0x4,%esp
8010b1e6:	ff 75 f0             	pushl  -0x10(%ebp)
8010b1e9:	ff 75 f4             	pushl  -0xc(%ebp)
8010b1ec:	ff 70 14             	pushl  0x14(%eax)
8010b1ef:	e8 cc f6 ff ff       	call   8010a8c0 <socketread>
8010b1f4:	83 c4 10             	add    $0x10,%esp
}
8010b1f7:	c9                   	leave  
8010b1f8:	c3                   	ret    
8010b1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b200:	c9                   	leave  
    return -1;
8010b201:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b206:	c3                   	ret    
8010b207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b20e:	66 90                	xchg   %ax,%ax

8010b210 <sys_send>:

int
sys_send(void)
{
8010b210:	f3 0f 1e fb          	endbr32 
8010b214:	55                   	push   %ebp
8010b215:	89 e5                	mov    %esp,%ebp
8010b217:	83 ec 1c             	sub    $0x1c,%esp
  struct file *f;
  int n;
  char *p;

  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
8010b21a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b21d:	50                   	push   %eax
8010b21e:	6a 00                	push   $0x0
8010b220:	6a 00                	push   $0x0
8010b222:	e8 29 a7 ff ff       	call   80105950 <argfd>
8010b227:	83 c4 10             	add    $0x10,%esp
8010b22a:	85 c0                	test   %eax,%eax
8010b22c:	78 52                	js     8010b280 <sys_send+0x70>
8010b22e:	83 ec 08             	sub    $0x8,%esp
8010b231:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b234:	50                   	push   %eax
8010b235:	6a 02                	push   $0x2
8010b237:	e8 14 a4 ff ff       	call   80105650 <argint>
8010b23c:	83 c4 10             	add    $0x10,%esp
8010b23f:	85 c0                	test   %eax,%eax
8010b241:	78 3d                	js     8010b280 <sys_send+0x70>
8010b243:	83 ec 04             	sub    $0x4,%esp
8010b246:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b249:	ff 75 f0             	pushl  -0x10(%ebp)
8010b24c:	50                   	push   %eax
8010b24d:	6a 01                	push   $0x1
8010b24f:	e8 4c a4 ff ff       	call   801056a0 <argptr>
8010b254:	83 c4 10             	add    $0x10,%esp
8010b257:	85 c0                	test   %eax,%eax
8010b259:	78 25                	js     8010b280 <sys_send+0x70>
    return -1;
  if (f->type != FD_SOCKET)
8010b25b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b25e:	83 38 03             	cmpl   $0x3,(%eax)
8010b261:	75 1d                	jne    8010b280 <sys_send+0x70>
    return -1;
  return socketwrite(f->socket, p, n);
8010b263:	83 ec 04             	sub    $0x4,%esp
8010b266:	ff 75 f0             	pushl  -0x10(%ebp)
8010b269:	ff 75 f4             	pushl  -0xc(%ebp)
8010b26c:	ff 70 14             	pushl  0x14(%eax)
8010b26f:	e8 7c f6 ff ff       	call   8010a8f0 <socketwrite>
8010b274:	83 c4 10             	add    $0x10,%esp
}
8010b277:	c9                   	leave  
8010b278:	c3                   	ret    
8010b279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b280:	c9                   	leave  
    return -1;
8010b281:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b286:	c3                   	ret    
8010b287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b28e:	66 90                	xchg   %ax,%ax

8010b290 <sys_recvfrom>:

int
sys_recvfrom(void)
{
8010b290:	f3 0f 1e fb          	endbr32 
8010b294:	55                   	push   %ebp
8010b295:	89 e5                	mov    %esp,%ebp
8010b297:	83 ec 2c             	sub    $0x2c,%esp
  int n;
  char *p;
  int *addrlen;
  struct sockaddr *addr = NULL;

  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0 || argptr(4, (void*)&addrlen, sizeof(*addrlen)) < 0)
8010b29a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  struct sockaddr *addr = NULL;
8010b29d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0 || argptr(4, (void*)&addrlen, sizeof(*addrlen)) < 0)
8010b2a4:	50                   	push   %eax
8010b2a5:	6a 00                	push   $0x0
8010b2a7:	6a 00                	push   $0x0
8010b2a9:	e8 a2 a6 ff ff       	call   80105950 <argfd>
8010b2ae:	83 c4 10             	add    $0x10,%esp
8010b2b1:	85 c0                	test   %eax,%eax
8010b2b3:	0f 88 87 00 00 00    	js     8010b340 <sys_recvfrom+0xb0>
8010b2b9:	83 ec 08             	sub    $0x8,%esp
8010b2bc:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010b2bf:	50                   	push   %eax
8010b2c0:	6a 02                	push   $0x2
8010b2c2:	e8 89 a3 ff ff       	call   80105650 <argint>
8010b2c7:	83 c4 10             	add    $0x10,%esp
8010b2ca:	85 c0                	test   %eax,%eax
8010b2cc:	78 72                	js     8010b340 <sys_recvfrom+0xb0>
8010b2ce:	83 ec 04             	sub    $0x4,%esp
8010b2d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b2d4:	ff 75 e8             	pushl  -0x18(%ebp)
8010b2d7:	50                   	push   %eax
8010b2d8:	6a 01                	push   $0x1
8010b2da:	e8 c1 a3 ff ff       	call   801056a0 <argptr>
8010b2df:	83 c4 10             	add    $0x10,%esp
8010b2e2:	85 c0                	test   %eax,%eax
8010b2e4:	78 5a                	js     8010b340 <sys_recvfrom+0xb0>
8010b2e6:	83 ec 04             	sub    $0x4,%esp
8010b2e9:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b2ec:	6a 04                	push   $0x4
8010b2ee:	50                   	push   %eax
8010b2ef:	6a 04                	push   $0x4
8010b2f1:	e8 aa a3 ff ff       	call   801056a0 <argptr>
8010b2f6:	83 c4 10             	add    $0x10,%esp
8010b2f9:	85 c0                	test   %eax,%eax
8010b2fb:	78 43                	js     8010b340 <sys_recvfrom+0xb0>
    return -1;
  if (addrlen && argptr(3, (void*)&addr, *addrlen) < 0)
8010b2fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b300:	85 c0                	test   %eax,%eax
8010b302:	74 17                	je     8010b31b <sys_recvfrom+0x8b>
8010b304:	83 ec 04             	sub    $0x4,%esp
8010b307:	ff 30                	pushl  (%eax)
8010b309:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b30c:	50                   	push   %eax
8010b30d:	6a 03                	push   $0x3
8010b30f:	e8 8c a3 ff ff       	call   801056a0 <argptr>
8010b314:	83 c4 10             	add    $0x10,%esp
8010b317:	85 c0                	test   %eax,%eax
8010b319:	78 25                	js     8010b340 <sys_recvfrom+0xb0>
    return -1;
  if (f->type != FD_SOCKET)
8010b31b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b31e:	83 38 03             	cmpl   $0x3,(%eax)
8010b321:	75 1d                	jne    8010b340 <sys_recvfrom+0xb0>
    return -1;
  return socketrecvfrom(f->socket, p, n, addr, addrlen);
8010b323:	83 ec 0c             	sub    $0xc,%esp
8010b326:	ff 75 f0             	pushl  -0x10(%ebp)
8010b329:	ff 75 f4             	pushl  -0xc(%ebp)
8010b32c:	ff 75 e8             	pushl  -0x18(%ebp)
8010b32f:	ff 75 ec             	pushl  -0x14(%ebp)
8010b332:	ff 70 14             	pushl  0x14(%eax)
8010b335:	e8 e6 f5 ff ff       	call   8010a920 <socketrecvfrom>
8010b33a:	83 c4 20             	add    $0x20,%esp
}
8010b33d:	c9                   	leave  
8010b33e:	c3                   	ret    
8010b33f:	90                   	nop
8010b340:	c9                   	leave  
    return -1;
8010b341:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b346:	c3                   	ret    
8010b347:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b34e:	66 90                	xchg   %ax,%ax

8010b350 <sys_sendto>:

int
sys_sendto(void)
{
8010b350:	f3 0f 1e fb          	endbr32 
8010b354:	55                   	push   %ebp
8010b355:	89 e5                	mov    %esp,%ebp
8010b357:	83 ec 2c             	sub    $0x2c,%esp
  int n;
  char *p;
  int addrlen;
  struct sockaddr *addr;

  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0 || argint(4, &addrlen) < 0 || argptr(3, (void*)&addr, addrlen) < 0)
8010b35a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010b35d:	50                   	push   %eax
8010b35e:	6a 00                	push   $0x0
8010b360:	6a 00                	push   $0x0
8010b362:	e8 e9 a5 ff ff       	call   80105950 <argfd>
8010b367:	83 c4 10             	add    $0x10,%esp
8010b36a:	85 c0                	test   %eax,%eax
8010b36c:	0f 88 7e 00 00 00    	js     8010b3f0 <sys_sendto+0xa0>
8010b372:	83 ec 08             	sub    $0x8,%esp
8010b375:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010b378:	50                   	push   %eax
8010b379:	6a 02                	push   $0x2
8010b37b:	e8 d0 a2 ff ff       	call   80105650 <argint>
8010b380:	83 c4 10             	add    $0x10,%esp
8010b383:	85 c0                	test   %eax,%eax
8010b385:	78 69                	js     8010b3f0 <sys_sendto+0xa0>
8010b387:	83 ec 04             	sub    $0x4,%esp
8010b38a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b38d:	ff 75 e8             	pushl  -0x18(%ebp)
8010b390:	50                   	push   %eax
8010b391:	6a 01                	push   $0x1
8010b393:	e8 08 a3 ff ff       	call   801056a0 <argptr>
8010b398:	83 c4 10             	add    $0x10,%esp
8010b39b:	85 c0                	test   %eax,%eax
8010b39d:	78 51                	js     8010b3f0 <sys_sendto+0xa0>
8010b39f:	83 ec 08             	sub    $0x8,%esp
8010b3a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b3a5:	50                   	push   %eax
8010b3a6:	6a 04                	push   $0x4
8010b3a8:	e8 a3 a2 ff ff       	call   80105650 <argint>
8010b3ad:	83 c4 10             	add    $0x10,%esp
8010b3b0:	85 c0                	test   %eax,%eax
8010b3b2:	78 3c                	js     8010b3f0 <sys_sendto+0xa0>
8010b3b4:	83 ec 04             	sub    $0x4,%esp
8010b3b7:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b3ba:	ff 75 f0             	pushl  -0x10(%ebp)
8010b3bd:	50                   	push   %eax
8010b3be:	6a 03                	push   $0x3
8010b3c0:	e8 db a2 ff ff       	call   801056a0 <argptr>
8010b3c5:	83 c4 10             	add    $0x10,%esp
8010b3c8:	85 c0                	test   %eax,%eax
8010b3ca:	78 24                	js     8010b3f0 <sys_sendto+0xa0>
    return -1;
  if (f->type != FD_SOCKET)
8010b3cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b3cf:	83 38 03             	cmpl   $0x3,(%eax)
8010b3d2:	75 1c                	jne    8010b3f0 <sys_sendto+0xa0>
    return -1;
  return socketsendto(f->socket, p, n, addr, addrlen);
8010b3d4:	83 ec 0c             	sub    $0xc,%esp
8010b3d7:	ff 75 f0             	pushl  -0x10(%ebp)
8010b3da:	ff 75 f4             	pushl  -0xc(%ebp)
8010b3dd:	ff 75 e8             	pushl  -0x18(%ebp)
8010b3e0:	ff 75 ec             	pushl  -0x14(%ebp)
8010b3e3:	ff 70 14             	pushl  0x14(%eax)
8010b3e6:	e8 65 f5 ff ff       	call   8010a950 <socketsendto>
8010b3eb:	83 c4 20             	add    $0x20,%esp
}
8010b3ee:	c9                   	leave  
8010b3ef:	c3                   	ret    
8010b3f0:	c9                   	leave  
    return -1;
8010b3f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010b3f6:	c3                   	ret    
8010b3f7:	66 90                	xchg   %ax,%ax
8010b3f9:	66 90                	xchg   %ax,%ax
8010b3fb:	66 90                	xchg   %ax,%ax
8010b3fd:	66 90                	xchg   %ax,%ax
8010b3ff:	90                   	nop

8010b400 <tcp_cb_clear>:

    return 0;
}

static int
tcp_cb_clear (struct tcp_cb *cb) {
8010b400:	55                   	push   %ebp
8010b401:	89 e5                	mov    %esp,%ebp
8010b403:	57                   	push   %edi
8010b404:	56                   	push   %esi
8010b405:	89 c6                	mov    %eax,%esi
8010b407:	53                   	push   %ebx
8010b408:	83 ec 0c             	sub    $0xc,%esp
    struct tcp_txq_entry *txq;
    struct queue_entry *entry;
    struct tcp_cb *backlog;

    while (cb->txq.head) {
8010b40b:	8b 58 3c             	mov    0x3c(%eax),%ebx
8010b40e:	85 db                	test   %ebx,%ebx
8010b410:	74 28                	je     8010b43a <tcp_cb_clear+0x3a>
8010b412:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        txq = cb->txq.head;
        cb->txq.head = txq->next;
8010b418:	8b 43 08             	mov    0x8(%ebx),%eax
        kfree((char*)txq->segment);
8010b41b:	83 ec 0c             	sub    $0xc,%esp
        cb->txq.head = txq->next;
8010b41e:	89 46 3c             	mov    %eax,0x3c(%esi)
        kfree((char*)txq->segment);
8010b421:	ff 33                	pushl  (%ebx)
8010b423:	e8 28 6f ff ff       	call   80102350 <kfree>
        kfree((char*)txq);
8010b428:	89 1c 24             	mov    %ebx,(%esp)
8010b42b:	e8 20 6f ff ff       	call   80102350 <kfree>
    while (cb->txq.head) {
8010b430:	8b 5e 3c             	mov    0x3c(%esi),%ebx
8010b433:	83 c4 10             	add    $0x10,%esp
8010b436:	85 db                	test   %ebx,%ebx
8010b438:	75 de                	jne    8010b418 <tcp_cb_clear+0x18>
    }
    while (1) {
        entry = queue_pop(&cb->backlog);
8010b43a:	83 ec 0c             	sub    $0xc,%esp
8010b43d:	8d 9e 48 10 00 00    	lea    0x1048(%esi),%ebx
8010b443:	53                   	push   %ebx
8010b444:	e8 97 d3 ff ff       	call   801087e0 <queue_pop>
        if (!entry) {
8010b449:	83 c4 10             	add    $0x10,%esp
8010b44c:	85 c0                	test   %eax,%eax
8010b44e:	74 25                	je     8010b475 <tcp_cb_clear+0x75>
            break;
        }
        backlog = entry->data;
        kfree((char*)entry);
8010b450:	83 ec 0c             	sub    $0xc,%esp
        backlog = entry->data;
8010b453:	8b 38                	mov    (%eax),%edi
        kfree((char*)entry);
8010b455:	50                   	push   %eax
8010b456:	e8 f5 6e ff ff       	call   80102350 <kfree>
        tcp_cb_clear(backlog);
8010b45b:	89 f8                	mov    %edi,%eax
8010b45d:	e8 9e ff ff ff       	call   8010b400 <tcp_cb_clear>
        entry = queue_pop(&cb->backlog);
8010b462:	83 c4 10             	add    $0x10,%esp
8010b465:	83 ec 0c             	sub    $0xc,%esp
8010b468:	53                   	push   %ebx
8010b469:	e8 72 d3 ff ff       	call   801087e0 <queue_pop>
        if (!entry) {
8010b46e:	83 c4 10             	add    $0x10,%esp
8010b471:	85 c0                	test   %eax,%eax
8010b473:	75 db                	jne    8010b450 <tcp_cb_clear+0x50>
    }
    memset(cb, 0, sizeof(*cb));
8010b475:	83 ec 04             	sub    $0x4,%esp
8010b478:	68 54 10 00 00       	push   $0x1054
8010b47d:	6a 00                	push   $0x0
8010b47f:	56                   	push   %esi
8010b480:	e8 3b 9d ff ff       	call   801051c0 <memset>
    return 0;
}
8010b485:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b488:	31 c0                	xor    %eax,%eax
8010b48a:	5b                   	pop    %ebx
8010b48b:	5e                   	pop    %esi
8010b48c:	5f                   	pop    %edi
8010b48d:	5d                   	pop    %ebp
8010b48e:	c3                   	ret    
8010b48f:	90                   	nop

8010b490 <tcp_tx>:

static ssize_t
tcp_tx (struct tcp_cb *cb, uint32_t seq, uint32_t ack, uint8_t flg, uint8_t *buf, size_t len) {
8010b490:	55                   	push   %ebp
8010b491:	89 e5                	mov    %esp,%ebp
8010b493:	57                   	push   %edi
8010b494:	56                   	push   %esi
    uint8_t segment[1500];
    struct tcp_hdr *hdr;
    ip_addr_t self, peer;
    uint32_t pseudo = 0;

    memset(&segment, 0, sizeof(segment));
8010b495:	8d bd 0c fa ff ff    	lea    -0x5f4(%ebp),%edi
tcp_tx (struct tcp_cb *cb, uint32_t seq, uint32_t ack, uint8_t flg, uint8_t *buf, size_t len) {
8010b49b:	89 d6                	mov    %edx,%esi
8010b49d:	53                   	push   %ebx
8010b49e:	89 c3                	mov    %eax,%ebx
8010b4a0:	81 ec 00 06 00 00    	sub    $0x600,%esp
8010b4a6:	8b 55 08             	mov    0x8(%ebp),%edx
8010b4a9:	89 8d 00 fa ff ff    	mov    %ecx,-0x600(%ebp)
    memset(&segment, 0, sizeof(segment));
8010b4af:	68 dc 05 00 00       	push   $0x5dc
8010b4b4:	6a 00                	push   $0x0
8010b4b6:	57                   	push   %edi
tcp_tx (struct tcp_cb *cb, uint32_t seq, uint32_t ack, uint8_t flg, uint8_t *buf, size_t len) {
8010b4b7:	89 95 04 fa ff ff    	mov    %edx,-0x5fc(%ebp)
    memset(&segment, 0, sizeof(segment));
8010b4bd:	e8 fe 9c ff ff       	call   801051c0 <memset>
    hdr = (struct tcp_hdr *)segment;
    hdr->src = cb->port;
8010b4c2:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
    hdr->dst = cb->peer.port;
    hdr->seq = hton32(seq);
8010b4c6:	89 34 24             	mov    %esi,(%esp)
    hdr->src = cb->port;
8010b4c9:	66 89 85 0c fa ff ff 	mov    %ax,-0x5f4(%ebp)
    hdr->dst = cb->peer.port;
8010b4d0:	0f b7 43 10          	movzwl 0x10(%ebx),%eax
8010b4d4:	66 89 85 0e fa ff ff 	mov    %ax,-0x5f2(%ebp)
    hdr->seq = hton32(seq);
8010b4db:	e8 d0 d1 ff ff       	call   801086b0 <hton32>
    hdr->ack = hton32(ack);
8010b4e0:	8b 8d 00 fa ff ff    	mov    -0x600(%ebp),%ecx
    hdr->seq = hton32(seq);
8010b4e6:	89 85 10 fa ff ff    	mov    %eax,-0x5f0(%ebp)
    hdr->ack = hton32(ack);
8010b4ec:	89 0c 24             	mov    %ecx,(%esp)
8010b4ef:	e8 bc d1 ff ff       	call   801086b0 <hton32>
    hdr->off = (sizeof(struct tcp_hdr) >> 2) << 4;
    hdr->flg = flg;
8010b4f4:	8b 95 04 fa ff ff    	mov    -0x5fc(%ebp),%edx
    hdr->off = (sizeof(struct tcp_hdr) >> 2) << 4;
8010b4fa:	c6 85 18 fa ff ff 50 	movb   $0x50,-0x5e8(%ebp)
    hdr->ack = hton32(ack);
8010b501:	89 85 14 fa ff ff    	mov    %eax,-0x5ec(%ebp)
    hdr->win = hton16(cb->rcv.wnd);
8010b507:	0f b7 43 36          	movzwl 0x36(%ebx),%eax
    hdr->flg = flg;
8010b50b:	88 95 19 fa ff ff    	mov    %dl,-0x5e7(%ebp)
    hdr->win = hton16(cb->rcv.wnd);
8010b511:	89 04 24             	mov    %eax,(%esp)
8010b514:	e8 47 d1 ff ff       	call   80108660 <hton16>
    hdr->sum = 0;
    hdr->urg = 0;
    memcpy(hdr + 1, buf, len);
8010b519:	83 c4 0c             	add    $0xc,%esp
8010b51c:	ff 75 10             	pushl  0x10(%ebp)
    hdr->win = hton16(cb->rcv.wnd);
8010b51f:	66 89 85 1a fa ff ff 	mov    %ax,-0x5e6(%ebp)
    memcpy(hdr + 1, buf, len);
8010b526:	8d 85 20 fa ff ff    	lea    -0x5e0(%ebp),%eax
8010b52c:	ff 75 0c             	pushl  0xc(%ebp)
8010b52f:	50                   	push   %eax
    hdr->sum = 0;
8010b530:	c7 85 1c fa ff ff 00 	movl   $0x0,-0x5e4(%ebp)
8010b537:	00 00 00 
    memcpy(hdr + 1, buf, len);
8010b53a:	e8 81 9d ff ff       	call   801052c0 <memcpy>
    self = ((struct netif_ip *)cb->iface)->unicast;
    peer = cb->peer.addr;
8010b53f:	8b 53 0c             	mov    0xc(%ebx),%edx
    self = ((struct netif_ip *)cb->iface)->unicast;
8010b542:	8b 43 04             	mov    0x4(%ebx),%eax
    pseudo += (self >> 16) & 0xffff;
    pseudo += self & 0xffff;
    pseudo += (peer >> 16) & 0xffff;
8010b545:	89 d6                	mov    %edx,%esi
    self = ((struct netif_ip *)cb->iface)->unicast;
8010b547:	8b 40 0c             	mov    0xc(%eax),%eax
    peer = cb->peer.addr;
8010b54a:	89 95 08 fa ff ff    	mov    %edx,-0x5f8(%ebp)
    pseudo += peer & 0xffff;
8010b550:	0f b7 d2             	movzwl %dx,%edx
    pseudo += (peer >> 16) & 0xffff;
8010b553:	c1 ee 10             	shr    $0x10,%esi
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b556:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
    pseudo += peer & 0xffff;
8010b55d:	01 d6                	add    %edx,%esi
    pseudo += (self >> 16) & 0xffff;
8010b55f:	89 c2                	mov    %eax,%edx
    pseudo += self & 0xffff;
8010b561:	0f b7 c0             	movzwl %ax,%eax
    pseudo += (self >> 16) & 0xffff;
8010b564:	c1 ea 10             	shr    $0x10,%edx
    pseudo += peer & 0xffff;
8010b567:	01 d6                	add    %edx,%esi
8010b569:	01 c6                	add    %eax,%esi
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b56b:	e8 f0 d0 ff ff       	call   80108660 <hton16>
8010b570:	0f b7 c0             	movzwl %ax,%eax
8010b573:	01 c6                	add    %eax,%esi
    pseudo += hton16(sizeof(struct tcp_hdr) + len);
8010b575:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
8010b579:	8d 50 14             	lea    0x14(%eax),%edx
8010b57c:	0f b7 d2             	movzwl %dx,%edx
8010b57f:	89 14 24             	mov    %edx,(%esp)
8010b582:	89 95 04 fa ff ff    	mov    %edx,-0x5fc(%ebp)
8010b588:	e8 d3 d0 ff ff       	call   80108660 <hton16>
    hdr->sum = cksum16((uint16_t *)hdr, sizeof(struct tcp_hdr) + len, pseudo);
8010b58d:	8b 95 04 fa ff ff    	mov    -0x5fc(%ebp),%edx
8010b593:	83 c4 0c             	add    $0xc,%esp
    pseudo += hton16(sizeof(struct tcp_hdr) + len);
8010b596:	0f b7 c0             	movzwl %ax,%eax
8010b599:	01 c6                	add    %eax,%esi
    hdr->sum = cksum16((uint16_t *)hdr, sizeof(struct tcp_hdr) + len, pseudo);
8010b59b:	56                   	push   %esi
8010b59c:	52                   	push   %edx
8010b59d:	57                   	push   %edi
8010b59e:	e8 5d d1 ff ff       	call   80108700 <cksum16>
8010b5a3:	66 89 85 1c fa ff ff 	mov    %ax,-0x5e4(%ebp)
    ip_tx(cb->iface, IP_PROTOCOL_TCP, (uint8_t *)hdr, sizeof(struct tcp_hdr) + len, &peer);
8010b5aa:	8b 45 10             	mov    0x10(%ebp),%eax
8010b5ad:	8d 70 14             	lea    0x14(%eax),%esi
8010b5b0:	8d 85 08 fa ff ff    	lea    -0x5f8(%ebp),%eax
8010b5b6:	89 04 24             	mov    %eax,(%esp)
8010b5b9:	56                   	push   %esi
8010b5ba:	57                   	push   %edi
8010b5bb:	6a 06                	push   $0x6
8010b5bd:	ff 73 04             	pushl  0x4(%ebx)
8010b5c0:	e8 1b e8 ff ff       	call   80109de0 <ip_tx>
    txq = (struct tcp_txq_entry *)kalloc();
8010b5c5:	83 c4 20             	add    $0x20,%esp
8010b5c8:	e8 43 6f ff ff       	call   80102510 <kalloc>
    if (!txq) {
8010b5cd:	85 c0                	test   %eax,%eax
8010b5cf:	89 85 04 fa ff ff    	mov    %eax,-0x5fc(%ebp)
8010b5d5:	74 46                	je     8010b61d <tcp_tx+0x18d>
    txq->segment = (struct tcp_hdr *)kalloc();
8010b5d7:	e8 34 6f ff ff       	call   80102510 <kalloc>
8010b5dc:	8b 95 04 fa ff ff    	mov    -0x5fc(%ebp),%edx
8010b5e2:	89 02                	mov    %eax,(%edx)
    if (!txq->segment) {
8010b5e4:	85 c0                	test   %eax,%eax
8010b5e6:	74 4d                	je     8010b635 <tcp_tx+0x1a5>
    memcpy(txq->segment, hdr, len);
8010b5e8:	83 ec 04             	sub    $0x4,%esp
8010b5eb:	89 95 04 fa ff ff    	mov    %edx,-0x5fc(%ebp)
8010b5f1:	56                   	push   %esi
8010b5f2:	57                   	push   %edi
8010b5f3:	50                   	push   %eax
8010b5f4:	e8 c7 9c ff ff       	call   801052c0 <memcpy>
    txq->len = len;
8010b5f9:	8b 95 04 fa ff ff    	mov    -0x5fc(%ebp),%edx
    if (cb->txq.head == NULL) {
8010b5ff:	83 c4 10             	add    $0x10,%esp
    txq->len = len;
8010b602:	66 89 72 04          	mov    %si,0x4(%edx)
    txq->next = NULL;
8010b606:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
    if (cb->txq.head == NULL) {
8010b60d:	8b 43 3c             	mov    0x3c(%ebx),%eax
8010b610:	85 c0                	test   %eax,%eax
8010b612:	74 1c                	je     8010b630 <tcp_tx+0x1a0>
        cb->txq.tail->next = txq;
8010b614:	8b 43 40             	mov    0x40(%ebx),%eax
8010b617:	89 50 08             	mov    %edx,0x8(%eax)
    cb->txq.tail = txq;
8010b61a:	89 53 40             	mov    %edx,0x40(%ebx)
    tcp_txq_add(cb, hdr, sizeof(struct tcp_hdr) + len);
    return len;
}
8010b61d:	8b 45 10             	mov    0x10(%ebp),%eax
8010b620:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b623:	5b                   	pop    %ebx
8010b624:	5e                   	pop    %esi
8010b625:	5f                   	pop    %edi
8010b626:	5d                   	pop    %ebp
8010b627:	c3                   	ret    
8010b628:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b62f:	90                   	nop
        cb->txq.head = txq;
8010b630:	89 53 3c             	mov    %edx,0x3c(%ebx)
8010b633:	eb e5                	jmp    8010b61a <tcp_tx+0x18a>
        kfree((char*)txq);
8010b635:	83 ec 0c             	sub    $0xc,%esp
8010b638:	52                   	push   %edx
8010b639:	e8 12 6d ff ff       	call   80102350 <kfree>
        return -1;
8010b63e:	83 c4 10             	add    $0x10,%esp
8010b641:	eb da                	jmp    8010b61d <tcp_tx+0x18d>
8010b643:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b64a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010b650 <tcp_rx>:
    }
    return;
}

static void
tcp_rx (uint8_t *segment, size_t len, ip_addr_t *src, ip_addr_t *dst, struct netif *iface) {
8010b650:	f3 0f 1e fb          	endbr32 
8010b654:	55                   	push   %ebp
8010b655:	89 e5                	mov    %esp,%ebp
8010b657:	57                   	push   %edi
8010b658:	56                   	push   %esi
8010b659:	53                   	push   %ebx
8010b65a:	83 ec 1c             	sub    $0x1c,%esp
8010b65d:	8b 45 10             	mov    0x10(%ebp),%eax
8010b660:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010b663:	8b 7d 18             	mov    0x18(%ebp),%edi
8010b666:	8b 75 08             	mov    0x8(%ebp),%esi
8010b669:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct tcp_hdr *hdr;
    uint32_t pseudo = 0;
    struct tcp_cb *cb, *fcb = NULL, *lcb = NULL;

    if (*dst != ((struct netif_ip *)iface)->unicast) {
8010b66c:	8b 45 14             	mov    0x14(%ebp),%eax
tcp_rx (uint8_t *segment, size_t len, ip_addr_t *src, ip_addr_t *dst, struct netif *iface) {
8010b66f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    if (*dst != ((struct netif_ip *)iface)->unicast) {
8010b672:	8b 00                	mov    (%eax),%eax
        return;
    }
    if (len < sizeof(struct tcp_hdr)) {
8010b674:	39 47 0c             	cmp    %eax,0xc(%edi)
8010b677:	75 05                	jne    8010b67e <tcp_rx+0x2e>
8010b679:	83 f9 13             	cmp    $0x13,%ecx
8010b67c:	77 12                	ja     8010b690 <tcp_rx+0x40>
        cb->parent = lcb;
    }
    tcp_incoming_event(cb, hdr, len);
    release(&tcplock);
    return;
}
8010b67e:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b681:	5b                   	pop    %ebx
8010b682:	5e                   	pop    %esi
8010b683:	5f                   	pop    %edi
8010b684:	5d                   	pop    %ebp
8010b685:	c3                   	ret    
8010b686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b68d:	8d 76 00             	lea    0x0(%esi),%esi
    pseudo += *src >> 16;
8010b690:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b693:	83 ec 0c             	sub    $0xc,%esp
    pseudo += *dst >> 16;
8010b696:	89 c3                	mov    %eax,%ebx
8010b698:	c1 eb 10             	shr    $0x10,%ebx
    pseudo += *src >> 16;
8010b69b:	8b 12                	mov    (%edx),%edx
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b69d:	6a 06                	push   $0x6
    pseudo += *src >> 16;
8010b69f:	89 d1                	mov    %edx,%ecx
    pseudo += *src & 0xffff;
8010b6a1:	0f b7 d2             	movzwl %dx,%edx
    pseudo += *src >> 16;
8010b6a4:	c1 e9 10             	shr    $0x10,%ecx
    pseudo += *src & 0xffff;
8010b6a7:	01 ca                	add    %ecx,%edx
    pseudo += *dst >> 16;
8010b6a9:	01 da                	add    %ebx,%edx
    pseudo += *dst & 0xffff;
8010b6ab:	0f b7 d8             	movzwl %ax,%ebx
8010b6ae:	01 d3                	add    %edx,%ebx
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b6b0:	e8 ab cf ff ff       	call   80108660 <hton16>
    pseudo += hton16(len);
8010b6b5:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b6b9:	0f b7 c0             	movzwl %ax,%eax
    pseudo += hton16(len);
8010b6bc:	89 14 24             	mov    %edx,(%esp)
    pseudo += hton16((uint16_t)IP_PROTOCOL_TCP);
8010b6bf:	01 c3                	add    %eax,%ebx
    pseudo += hton16(len);
8010b6c1:	89 55 dc             	mov    %edx,-0x24(%ebp)
8010b6c4:	e8 97 cf ff ff       	call   80108660 <hton16>
    if (cksum16((uint16_t *)hdr, len, pseudo) != 0) {
8010b6c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
8010b6cc:	83 c4 0c             	add    $0xc,%esp
    pseudo += hton16(len);
8010b6cf:	0f b7 c0             	movzwl %ax,%eax
8010b6d2:	01 c3                	add    %eax,%ebx
    if (cksum16((uint16_t *)hdr, len, pseudo) != 0) {
8010b6d4:	53                   	push   %ebx
8010b6d5:	52                   	push   %edx
8010b6d6:	56                   	push   %esi
8010b6d7:	e8 24 d0 ff ff       	call   80108700 <cksum16>
8010b6dc:	83 c4 10             	add    $0x10,%esp
8010b6df:	66 85 c0             	test   %ax,%ax
8010b6e2:	0f 85 a8 00 00 00    	jne    8010b790 <tcp_rx+0x140>
    acquire(&tcplock);
8010b6e8:	83 ec 0c             	sub    $0xc,%esp
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010b6eb:	bb 00 12 14 80       	mov    $0x80141200,%ebx
    acquire(&tcplock);
8010b6f0:	68 60 21 13 80       	push   $0x80132160
8010b6f5:	e8 b6 99 ff ff       	call   801050b0 <acquire>
8010b6fa:	83 c4 10             	add    $0x10,%esp
    struct tcp_cb *cb, *fcb = NULL, *lcb = NULL;
8010b6fd:	31 c9                	xor    %ecx,%ecx
8010b6ff:	31 d2                	xor    %edx,%edx
8010b701:	eb 18                	jmp    8010b71b <tcp_rx+0xcb>
8010b703:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010b707:	90                   	nop
            if (!fcb) {
8010b708:	85 d2                	test   %edx,%edx
8010b70a:	0f 44 d3             	cmove  %ebx,%edx
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010b70d:	81 c3 54 10 00 00    	add    $0x1054,%ebx
8010b713:	81 fb 40 17 15 80    	cmp    $0x80151740,%ebx
8010b719:	74 45                	je     8010b760 <tcp_rx+0x110>
        if (!cb->used) {
8010b71b:	80 3b 00             	cmpb   $0x0,(%ebx)
8010b71e:	74 e8                	je     8010b708 <tcp_rx+0xb8>
        else if ((!cb->iface || cb->iface == iface) && cb->port == hdr->dst) {
8010b720:	8b 43 04             	mov    0x4(%ebx),%eax
8010b723:	85 c0                	test   %eax,%eax
8010b725:	74 04                	je     8010b72b <tcp_rx+0xdb>
8010b727:	39 c7                	cmp    %eax,%edi
8010b729:	75 e2                	jne    8010b70d <tcp_rx+0xbd>
8010b72b:	0f b7 46 02          	movzwl 0x2(%esi),%eax
8010b72f:	66 39 43 08          	cmp    %ax,0x8(%ebx)
8010b733:	75 d8                	jne    8010b70d <tcp_rx+0xbd>
            if (cb->peer.addr == *src && cb->peer.port == hdr->src) {
8010b735:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b738:	8b 00                	mov    (%eax),%eax
8010b73a:	39 43 0c             	cmp    %eax,0xc(%ebx)
8010b73d:	74 69                	je     8010b7a8 <tcp_rx+0x158>
            if (cb->state == TCP_CB_STATE_LISTEN && !lcb) {
8010b73f:	80 7b 01 01          	cmpb   $0x1,0x1(%ebx)
8010b743:	75 c8                	jne    8010b70d <tcp_rx+0xbd>
8010b745:	85 c9                	test   %ecx,%ecx
8010b747:	0f 44 cb             	cmove  %ebx,%ecx
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010b74a:	81 c3 54 10 00 00    	add    $0x1054,%ebx
8010b750:	81 fb 40 17 15 80    	cmp    $0x80151740,%ebx
8010b756:	75 c3                	jne    8010b71b <tcp_rx+0xcb>
8010b758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010b75f:	90                   	nop
        if (!lcb || !fcb || !TCP_FLG_IS(hdr->flg, TCP_FLG_SYN)) {
8010b760:	85 c9                	test   %ecx,%ecx
8010b762:	74 13                	je     8010b777 <tcp_rx+0x127>
8010b764:	85 d2                	test   %edx,%edx
8010b766:	74 0f                	je     8010b777 <tcp_rx+0x127>
8010b768:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010b76c:	83 e0 3f             	and    $0x3f,%eax
8010b76f:	3c 02                	cmp    $0x2,%al
8010b771:	0f 84 81 01 00 00    	je     8010b8f8 <tcp_rx+0x2a8>
    release(&tcplock);
8010b777:	c7 45 08 60 21 13 80 	movl   $0x80132160,0x8(%ebp)
}
8010b77e:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b781:	5b                   	pop    %ebx
8010b782:	5e                   	pop    %esi
8010b783:	5f                   	pop    %edi
8010b784:	5d                   	pop    %ebp
    release(&tcplock);
8010b785:	e9 e6 99 ff ff       	jmp    80105170 <release>
8010b78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        cprintf("tcp checksum error!\n");
8010b790:	c7 45 08 7d e7 10 80 	movl   $0x8010e77d,0x8(%ebp)
}
8010b797:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b79a:	5b                   	pop    %ebx
8010b79b:	5e                   	pop    %esi
8010b79c:	5f                   	pop    %edi
8010b79d:	5d                   	pop    %ebp
        cprintf("tcp checksum error!\n");
8010b79e:	e9 ed 4b ff ff       	jmp    80100390 <cprintf>
8010b7a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010b7a7:	90                   	nop
            if (cb->peer.addr == *src && cb->peer.port == hdr->src) {
8010b7a8:	0f b7 06             	movzwl (%esi),%eax
8010b7ab:	66 39 43 10          	cmp    %ax,0x10(%ebx)
8010b7af:	75 8e                	jne    8010b73f <tcp_rx+0xef>
    if (cb == array_tailof(cb_table)) {
8010b7b1:	81 fb 40 17 15 80    	cmp    $0x80151740,%ebx
8010b7b7:	74 a7                	je     8010b760 <tcp_rx+0x110>
8010b7b9:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
    hlen = ((hdr->off >> 4) << 2);
8010b7bd:	0f b6 56 0c          	movzbl 0xc(%esi),%edx
    plen = len - hlen;
8010b7c1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    hlen = ((hdr->off >> 4) << 2);
8010b7c4:	c0 ea 04             	shr    $0x4,%dl
8010b7c7:	0f b6 fa             	movzbl %dl,%edi
8010b7ca:	c1 e7 02             	shl    $0x2,%edi
    plen = len - hlen;
8010b7cd:	29 f9                	sub    %edi,%ecx
8010b7cf:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    switch (cb->state) {
8010b7d2:	3c 01                	cmp    $0x1,%al
8010b7d4:	0f 84 c6 01 00 00    	je     8010b9a0 <tcp_rx+0x350>
8010b7da:	3c 02                	cmp    $0x2,%al
8010b7dc:	0f 84 56 01 00 00    	je     8010b938 <tcp_rx+0x2e8>
8010b7e2:	84 c0                	test   %al,%al
8010b7e4:	0f 84 26 02 00 00    	je     8010ba10 <tcp_rx+0x3c0>
    if (ntoh32(hdr->seq) != cb->rcv.nxt) {
8010b7ea:	83 ec 0c             	sub    $0xc,%esp
8010b7ed:	ff 76 04             	pushl  0x4(%esi)
8010b7f0:	e8 fb ce ff ff       	call   801086f0 <ntoh32>
8010b7f5:	83 c4 10             	add    $0x10,%esp
8010b7f8:	3b 43 30             	cmp    0x30(%ebx),%eax
8010b7fb:	0f 85 76 ff ff ff    	jne    8010b777 <tcp_rx+0x127>
    if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_RST | TCP_FLG_SYN)) {
8010b801:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010b805:	a8 06                	test   $0x6,%al
8010b807:	0f 85 6a ff ff ff    	jne    8010b777 <tcp_rx+0x127>
    if (!TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010b80d:	a8 10                	test   $0x10,%al
8010b80f:	0f 84 62 ff ff ff    	je     8010b777 <tcp_rx+0x127>
    switch (cb->state) {
8010b815:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
8010b819:	3c 09                	cmp    $0x9,%al
8010b81b:	0f 84 e4 02 00 00    	je     8010bb05 <tcp_rx+0x4b5>
8010b821:	0f 87 b3 02 00 00    	ja     8010bada <tcp_rx+0x48a>
8010b827:	3c 03                	cmp    $0x3,%al
8010b829:	0f 85 cb 02 00 00    	jne    8010bafa <tcp_rx+0x4aa>
            if (cb->snd.una <= ntoh32(hdr->ack) && ntoh32(hdr->ack) <= cb->snd.nxt) {
8010b82f:	8b 43 18             	mov    0x18(%ebx),%eax
8010b832:	83 ec 0c             	sub    $0xc,%esp
8010b835:	ff 76 08             	pushl  0x8(%esi)
8010b838:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010b83b:	e8 b0 ce ff ff       	call   801086f0 <ntoh32>
8010b840:	83 c4 10             	add    $0x10,%esp
8010b843:	39 45 e0             	cmp    %eax,-0x20(%ebp)
8010b846:	77 17                	ja     8010b85f <tcp_rx+0x20f>
8010b848:	83 ec 0c             	sub    $0xc,%esp
8010b84b:	ff 76 08             	pushl  0x8(%esi)
8010b84e:	e8 9d ce ff ff       	call   801086f0 <ntoh32>
8010b853:	83 c4 10             	add    $0x10,%esp
8010b856:	3b 43 14             	cmp    0x14(%ebx),%eax
8010b859:	0f 86 fd 03 00 00    	jbe    8010bc5c <tcp_rx+0x60c>
                tcp_tx(cb, ntoh32(hdr->ack), 0, TCP_FLG_RST, NULL, 0);
8010b85f:	83 ec 0c             	sub    $0xc,%esp
8010b862:	ff 76 08             	pushl  0x8(%esi)
8010b865:	e8 86 ce ff ff       	call   801086f0 <ntoh32>
8010b86a:	83 c4 0c             	add    $0xc,%esp
8010b86d:	31 c9                	xor    %ecx,%ecx
8010b86f:	6a 00                	push   $0x0
8010b871:	89 c2                	mov    %eax,%edx
8010b873:	89 d8                	mov    %ebx,%eax
8010b875:	6a 00                	push   $0x0
8010b877:	6a 04                	push   $0x4
8010b879:	e8 12 fc ff ff       	call   8010b490 <tcp_tx>
                break;
8010b87e:	83 c4 10             	add    $0x10,%esp
    if (plen) {
8010b881:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010b884:	85 d2                	test   %edx,%edx
8010b886:	74 10                	je     8010b898 <tcp_rx+0x248>
        switch (cb->state) {
8010b888:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
8010b88c:	83 e8 04             	sub    $0x4,%eax
8010b88f:	83 f8 02             	cmp    $0x2,%eax
8010b892:	0f 86 59 03 00 00    	jbe    8010bbf1 <tcp_rx+0x5a1>
    if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_FIN)) {
8010b898:	f6 46 0d 01          	testb  $0x1,0xd(%esi)
8010b89c:	0f 84 d5 fe ff ff    	je     8010b777 <tcp_rx+0x127>
        cb->rcv.nxt++;
8010b8a2:	8b 43 30             	mov    0x30(%ebx),%eax
        tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_ACK, NULL, 0);
8010b8a5:	8b 53 14             	mov    0x14(%ebx),%edx
        cb->rcv.nxt++;
8010b8a8:	8d 48 01             	lea    0x1(%eax),%ecx
8010b8ab:	89 4b 30             	mov    %ecx,0x30(%ebx)
        tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_ACK, NULL, 0);
8010b8ae:	50                   	push   %eax
8010b8af:	89 d8                	mov    %ebx,%eax
8010b8b1:	6a 00                	push   $0x0
8010b8b3:	6a 00                	push   $0x0
8010b8b5:	6a 10                	push   $0x10
8010b8b7:	e8 d4 fb ff ff       	call   8010b490 <tcp_tx>
        switch (cb->state) {
8010b8bc:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
8010b8c0:	83 c4 10             	add    $0x10,%esp
8010b8c3:	3c 05                	cmp    $0x5,%al
8010b8c5:	0f 84 88 03 00 00    	je     8010bc53 <tcp_rx+0x603>
8010b8cb:	0f 87 75 03 00 00    	ja     8010bc46 <tcp_rx+0x5f6>
8010b8d1:	83 e8 03             	sub    $0x3,%eax
8010b8d4:	3c 01                	cmp    $0x1,%al
8010b8d6:	0f 87 9b fe ff ff    	ja     8010b777 <tcp_rx+0x127>
                wakeup(cb);
8010b8dc:	83 ec 0c             	sub    $0xc,%esp
                cb->state = TCP_CB_STATE_CLOSE_WAIT;
8010b8df:	c6 43 01 09          	movb   $0x9,0x1(%ebx)
                wakeup(cb);
8010b8e3:	53                   	push   %ebx
8010b8e4:	e8 47 93 ff ff       	call   80104c30 <wakeup>
                break;
8010b8e9:	83 c4 10             	add    $0x10,%esp
8010b8ec:	e9 86 fe ff ff       	jmp    8010b777 <tcp_rx+0x127>
8010b8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        cb->used = 1;
8010b8f8:	c6 02 01             	movb   $0x1,(%edx)
        cb->state = lcb->state;
8010b8fb:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
        cb->iface = iface;
8010b8ff:	89 7a 04             	mov    %edi,0x4(%edx)
        cb->peer.addr = *src;
8010b902:	8b 7d e4             	mov    -0x1c(%ebp),%edi
        cb->state = lcb->state;
8010b905:	88 42 01             	mov    %al,0x1(%edx)
        cb->port = lcb->port;
8010b908:	0f b7 59 08          	movzwl 0x8(%ecx),%ebx
8010b90c:	66 89 5a 08          	mov    %bx,0x8(%edx)
        cb->peer.addr = *src;
8010b910:	8b 1f                	mov    (%edi),%ebx
8010b912:	89 5a 0c             	mov    %ebx,0xc(%edx)
        cb->peer.port = hdr->src;
8010b915:	0f b7 1e             	movzwl (%esi),%ebx
        cb->parent = lcb;
8010b918:	89 8a 44 10 00 00    	mov    %ecx,0x1044(%edx)
        cb->peer.port = hdr->src;
8010b91e:	66 89 5a 10          	mov    %bx,0x10(%edx)
        cb->rcv.wnd = sizeof(cb->window);
8010b922:	bb 00 10 00 00       	mov    $0x1000,%ebx
8010b927:	66 89 5a 36          	mov    %bx,0x36(%edx)
        cb->parent = lcb;
8010b92b:	89 d3                	mov    %edx,%ebx
8010b92d:	e9 8b fe ff ff       	jmp    8010b7bd <tcp_rx+0x16d>
8010b932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010b938:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010b93c:	a8 10                	test   $0x10,%al
8010b93e:	0f 85 06 01 00 00    	jne    8010ba4a <tcp_rx+0x3fa>
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_RST)) {
8010b944:	a8 04                	test   $0x4,%al
8010b946:	0f 85 2b fe ff ff    	jne    8010b777 <tcp_rx+0x127>
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_SYN)) {
8010b94c:	a8 02                	test   $0x2,%al
8010b94e:	0f 84 23 fe ff ff    	je     8010b777 <tcp_rx+0x127>
                cb->rcv.nxt = ntoh32(hdr->seq) + 1;
8010b954:	83 ec 0c             	sub    $0xc,%esp
8010b957:	ff 76 04             	pushl  0x4(%esi)
8010b95a:	e8 91 cd ff ff       	call   801086f0 <ntoh32>
8010b95f:	83 c0 01             	add    $0x1,%eax
8010b962:	89 43 30             	mov    %eax,0x30(%ebx)
                cb->irs = ntoh32(hdr->seq);
8010b965:	58                   	pop    %eax
8010b966:	ff 76 04             	pushl  0x4(%esi)
8010b969:	e8 82 cd ff ff       	call   801086f0 <ntoh32>
                if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010b96e:	83 c4 10             	add    $0x10,%esp
                cb->irs = ntoh32(hdr->seq);
8010b971:	89 43 38             	mov    %eax,0x38(%ebx)
                if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010b974:	f6 46 0d 10          	testb  $0x10,0xd(%esi)
8010b978:	0f 85 0c 02 00 00    	jne    8010bb8a <tcp_rx+0x53a>
                tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010b97e:	8b 4b 30             	mov    0x30(%ebx),%ecx
8010b981:	8b 53 2c             	mov    0x2c(%ebx),%edx
                tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_ACK, NULL, 0);
8010b984:	83 ec 04             	sub    $0x4,%esp
8010b987:	89 d8                	mov    %ebx,%eax
8010b989:	6a 00                	push   $0x0
8010b98b:	6a 00                	push   $0x0
8010b98d:	6a 10                	push   $0x10
8010b98f:	e8 fc fa ff ff       	call   8010b490 <tcp_tx>
                return;
8010b994:	83 c4 10             	add    $0x10,%esp
8010b997:	e9 db fd ff ff       	jmp    8010b777 <tcp_rx+0x127>
8010b99c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_RST)) {
8010b9a0:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010b9a4:	a8 04                	test   $0x4,%al
8010b9a6:	0f 85 cb fd ff ff    	jne    8010b777 <tcp_rx+0x127>
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010b9ac:	a8 10                	test   $0x10,%al
8010b9ae:	0f 85 ff 00 00 00    	jne    8010bab3 <tcp_rx+0x463>
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_SYN)) {
8010b9b4:	a8 02                	test   $0x2,%al
8010b9b6:	0f 84 bb fd ff ff    	je     8010b777 <tcp_rx+0x127>
                cb->rcv.nxt = ntoh32(hdr->seq) + 1;
8010b9bc:	83 ec 0c             	sub    $0xc,%esp
8010b9bf:	ff 76 04             	pushl  0x4(%esi)
8010b9c2:	e8 29 cd ff ff       	call   801086f0 <ntoh32>
8010b9c7:	83 c0 01             	add    $0x1,%eax
8010b9ca:	89 43 30             	mov    %eax,0x30(%ebx)
                cb->irs = ntoh32(hdr->seq);
8010b9cd:	58                   	pop    %eax
8010b9ce:	ff 76 04             	pushl  0x4(%esi)
8010b9d1:	e8 1a cd ff ff       	call   801086f0 <ntoh32>
8010b9d6:	89 43 38             	mov    %eax,0x38(%ebx)
                cb->iss = (uint32_t)random();
8010b9d9:	e8 92 ce ff ff       	call   80108870 <random>
                tcp_tx(cb, seq, ack, TCP_FLG_SYN | TCP_FLG_ACK, NULL, 0);
8010b9de:	83 c4 0c             	add    $0xc,%esp
8010b9e1:	8b 4b 30             	mov    0x30(%ebx),%ecx
                cb->iss = (uint32_t)random();
8010b9e4:	89 43 2c             	mov    %eax,0x2c(%ebx)
8010b9e7:	89 c2                	mov    %eax,%edx
                tcp_tx(cb, seq, ack, TCP_FLG_SYN | TCP_FLG_ACK, NULL, 0);
8010b9e9:	89 d8                	mov    %ebx,%eax
8010b9eb:	6a 00                	push   $0x0
8010b9ed:	6a 00                	push   $0x0
8010b9ef:	6a 12                	push   $0x12
8010b9f1:	e8 9a fa ff ff       	call   8010b490 <tcp_tx>
                cb->snd.nxt = cb->iss + 1;
8010b9f6:	8b 43 2c             	mov    0x2c(%ebx),%eax
                cb->state = TCP_CB_STATE_SYN_RCVD;
8010b9f9:	c6 43 01 03          	movb   $0x3,0x1(%ebx)
8010b9fd:	83 c4 10             	add    $0x10,%esp
                cb->snd.nxt = cb->iss + 1;
8010ba00:	8d 50 01             	lea    0x1(%eax),%edx
                cb->snd.una = cb->iss;
8010ba03:	89 43 18             	mov    %eax,0x18(%ebx)
                cb->snd.nxt = cb->iss + 1;
8010ba06:	89 53 14             	mov    %edx,0x14(%ebx)
                cb->state = TCP_CB_STATE_SYN_RCVD;
8010ba09:	e9 69 fd ff ff       	jmp    8010b777 <tcp_rx+0x127>
8010ba0e:	66 90                	xchg   %ax,%ax
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_RST)) {
8010ba10:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010ba14:	a8 04                	test   $0x4,%al
8010ba16:	0f 85 5b fd ff ff    	jne    8010b777 <tcp_rx+0x127>
            if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_ACK)) {
8010ba1c:	a8 10                	test   $0x10,%al
8010ba1e:	74 59                	je     8010ba79 <tcp_rx+0x429>
                seq = ntoh32(hdr->ack);
8010ba20:	83 ec 0c             	sub    $0xc,%esp
8010ba23:	ff 76 08             	pushl  0x8(%esi)
8010ba26:	e8 c5 cc ff ff       	call   801086f0 <ntoh32>
8010ba2b:	83 c4 10             	add    $0x10,%esp
                ack = 0;
8010ba2e:	31 c9                	xor    %ecx,%ecx
                seq = ntoh32(hdr->ack);
8010ba30:	89 c2                	mov    %eax,%edx
            tcp_tx(cb, seq, ack, TCP_FLG_RST, NULL, 0);
8010ba32:	83 ec 04             	sub    $0x4,%esp
8010ba35:	89 d8                	mov    %ebx,%eax
8010ba37:	6a 00                	push   $0x0
8010ba39:	6a 00                	push   $0x0
8010ba3b:	6a 04                	push   $0x4
8010ba3d:	e8 4e fa ff ff       	call   8010b490 <tcp_tx>
            return;
8010ba42:	83 c4 10             	add    $0x10,%esp
8010ba45:	e9 2d fd ff ff       	jmp    8010b777 <tcp_rx+0x127>
                if (ntoh32(hdr->ack) <= cb->iss || ntoh32(hdr->ack) > cb->snd.nxt) {
8010ba4a:	83 ec 0c             	sub    $0xc,%esp
8010ba4d:	ff 76 08             	pushl  0x8(%esi)
8010ba50:	e8 9b cc ff ff       	call   801086f0 <ntoh32>
8010ba55:	83 c4 10             	add    $0x10,%esp
8010ba58:	3b 43 2c             	cmp    0x2c(%ebx),%eax
8010ba5b:	76 4c                	jbe    8010baa9 <tcp_rx+0x459>
8010ba5d:	83 ec 0c             	sub    $0xc,%esp
8010ba60:	ff 76 08             	pushl  0x8(%esi)
8010ba63:	e8 88 cc ff ff       	call   801086f0 <ntoh32>
8010ba68:	83 c4 10             	add    $0x10,%esp
8010ba6b:	3b 43 14             	cmp    0x14(%ebx),%eax
8010ba6e:	77 39                	ja     8010baa9 <tcp_rx+0x459>
8010ba70:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010ba74:	e9 cb fe ff ff       	jmp    8010b944 <tcp_rx+0x2f4>
                ack = ntoh32(hdr->seq);
8010ba79:	83 ec 0c             	sub    $0xc,%esp
8010ba7c:	ff 76 04             	pushl  0x4(%esi)
8010ba7f:	e8 6c cc ff ff       	call   801086f0 <ntoh32>
                if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_SYN)) {
8010ba84:	83 c4 10             	add    $0x10,%esp
                ack = ntoh32(hdr->seq);
8010ba87:	89 c1                	mov    %eax,%ecx
                if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_SYN)) {
8010ba89:	0f b6 46 0d          	movzbl 0xd(%esi),%eax
8010ba8d:	89 c2                	mov    %eax,%edx
8010ba8f:	83 e2 02             	and    $0x2,%edx
                    ack++;
8010ba92:	80 fa 01             	cmp    $0x1,%dl
8010ba95:	83 d9 ff             	sbb    $0xffffffff,%ecx
                seq = 0;
8010ba98:	31 d2                	xor    %edx,%edx
                    ack += plen;
8010ba9a:	03 4d e4             	add    -0x1c(%ebp),%ecx
                if (TCP_FLG_ISSET(hdr->flg, TCP_FLG_FIN)) {
8010ba9d:	a8 01                	test   $0x1,%al
                    ack++;
8010ba9f:	0f 95 c0             	setne  %al
8010baa2:	0f b6 c0             	movzbl %al,%eax
8010baa5:	01 c1                	add    %eax,%ecx
8010baa7:	eb 89                	jmp    8010ba32 <tcp_rx+0x3e2>
                    if (!TCP_FLG_ISSET(hdr->flg, TCP_FLG_RST)) {
8010baa9:	f6 46 0d 04          	testb  $0x4,0xd(%esi)
8010baad:	0f 85 c4 fc ff ff    	jne    8010b777 <tcp_rx+0x127>
                        seq = ntoh32(hdr->ack);
8010bab3:	83 ec 0c             	sub    $0xc,%esp
8010bab6:	ff 76 08             	pushl  0x8(%esi)
8010bab9:	e8 32 cc ff ff       	call   801086f0 <ntoh32>
                        tcp_tx(cb, seq, ack, TCP_FLG_RST, NULL, 0);
8010babe:	83 c4 0c             	add    $0xc,%esp
8010bac1:	31 c9                	xor    %ecx,%ecx
8010bac3:	6a 00                	push   $0x0
                        seq = ntoh32(hdr->ack);
8010bac5:	89 c2                	mov    %eax,%edx
                        tcp_tx(cb, seq, ack, TCP_FLG_RST, NULL, 0);
8010bac7:	89 d8                	mov    %ebx,%eax
8010bac9:	6a 00                	push   $0x0
8010bacb:	6a 04                	push   $0x4
8010bacd:	e8 be f9 ff ff       	call   8010b490 <tcp_tx>
8010bad2:	83 c4 10             	add    $0x10,%esp
8010bad5:	e9 9d fc ff ff       	jmp    8010b777 <tcp_rx+0x127>
    switch (cb->state) {
8010bada:	3c 0a                	cmp    $0xa,%al
8010badc:	0f 85 9f fd ff ff    	jne    8010b881 <tcp_rx+0x231>
            wakeup(cb);
8010bae2:	83 ec 0c             	sub    $0xc,%esp
8010bae5:	53                   	push   %ebx
8010bae6:	e8 45 91 ff ff       	call   80104c30 <wakeup>
            tcp_cb_clear(cb); /* TCP_CB_STATE_CLOSED */
8010baeb:	89 d8                	mov    %ebx,%eax
8010baed:	e8 0e f9 ff ff       	call   8010b400 <tcp_cb_clear>
            return;
8010baf2:	83 c4 10             	add    $0x10,%esp
8010baf5:	e9 7d fc ff ff       	jmp    8010b777 <tcp_rx+0x127>
    switch (cb->state) {
8010bafa:	83 e8 04             	sub    $0x4,%eax
8010bafd:	3c 03                	cmp    $0x3,%al
8010baff:	0f 87 7c fd ff ff    	ja     8010b881 <tcp_rx+0x231>
            if (cb->snd.una < ntoh32(hdr->ack) && ntoh32(hdr->ack) <= cb->snd.nxt) {
8010bb05:	8b 43 18             	mov    0x18(%ebx),%eax
8010bb08:	83 ec 0c             	sub    $0xc,%esp
8010bb0b:	ff 76 08             	pushl  0x8(%esi)
8010bb0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010bb11:	e8 da cb ff ff       	call   801086f0 <ntoh32>
8010bb16:	83 c4 10             	add    $0x10,%esp
8010bb19:	39 45 e0             	cmp    %eax,-0x20(%ebp)
8010bb1c:	73 17                	jae    8010bb35 <tcp_rx+0x4e5>
8010bb1e:	83 ec 0c             	sub    $0xc,%esp
8010bb21:	ff 76 08             	pushl  0x8(%esi)
8010bb24:	e8 c7 cb ff ff       	call   801086f0 <ntoh32>
8010bb29:	83 c4 10             	add    $0x10,%esp
8010bb2c:	3b 43 14             	cmp    0x14(%ebx),%eax
8010bb2f:	0f 86 57 01 00 00    	jbe    8010bc8c <tcp_rx+0x63c>
            } else if (ntoh32(hdr->ack) > cb->snd.nxt) {
8010bb35:	83 ec 0c             	sub    $0xc,%esp
8010bb38:	ff 76 08             	pushl  0x8(%esi)
8010bb3b:	e8 b0 cb ff ff       	call   801086f0 <ntoh32>
8010bb40:	8b 53 14             	mov    0x14(%ebx),%edx
8010bb43:	83 c4 10             	add    $0x10,%esp
8010bb46:	39 d0                	cmp    %edx,%eax
8010bb48:	0f 87 54 01 00 00    	ja     8010bca2 <tcp_rx+0x652>
            if (cb->state == TCP_CB_STATE_FIN_WAIT1) {
8010bb4e:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
8010bb52:	3c 05                	cmp    $0x5,%al
8010bb54:	74 76                	je     8010bbcc <tcp_rx+0x57c>
            } else if (cb->state == TCP_CB_STATE_CLOSING) {
8010bb56:	3c 07                	cmp    $0x7,%al
8010bb58:	0f 85 23 fd ff ff    	jne    8010b881 <tcp_rx+0x231>
                if (ntoh32(hdr->ack) == cb->snd.nxt) {
8010bb5e:	83 ec 0c             	sub    $0xc,%esp
8010bb61:	ff 76 08             	pushl  0x8(%esi)
8010bb64:	e8 87 cb ff ff       	call   801086f0 <ntoh32>
8010bb69:	83 c4 10             	add    $0x10,%esp
8010bb6c:	3b 43 14             	cmp    0x14(%ebx),%eax
8010bb6f:	0f 85 02 fc ff ff    	jne    8010b777 <tcp_rx+0x127>
                wakeup(cb);
8010bb75:	83 ec 0c             	sub    $0xc,%esp
                cb->state = TCP_CB_STATE_TIME_WAIT;
8010bb78:	c6 43 01 08          	movb   $0x8,0x1(%ebx)
                wakeup(cb);
8010bb7c:	53                   	push   %ebx
8010bb7d:	e8 ae 90 ff ff       	call   80104c30 <wakeup>
                break;
8010bb82:	83 c4 10             	add    $0x10,%esp
8010bb85:	e9 ed fb ff ff       	jmp    8010b777 <tcp_rx+0x127>
                    cb->snd.una = ntoh32(hdr->ack);
8010bb8a:	83 ec 0c             	sub    $0xc,%esp
8010bb8d:	ff 76 08             	pushl  0x8(%esi)
8010bb90:	e8 5b cb ff ff       	call   801086f0 <ntoh32>
                    if (cb->snd.una > cb->iss) {
8010bb95:	83 c4 10             	add    $0x10,%esp
                    cb->snd.una = ntoh32(hdr->ack);
8010bb98:	89 43 18             	mov    %eax,0x18(%ebx)
                    if (cb->snd.una > cb->iss) {
8010bb9b:	3b 43 2c             	cmp    0x2c(%ebx),%eax
8010bb9e:	0f 86 d3 fb ff ff    	jbe    8010b777 <tcp_rx+0x127>
                        tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bba4:	8b 4b 30             	mov    0x30(%ebx),%ecx
8010bba7:	8b 53 14             	mov    0x14(%ebx),%edx
                        cb->state = TCP_CB_STATE_ESTABLISHED;
8010bbaa:	c6 43 01 04          	movb   $0x4,0x1(%ebx)
                        tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bbae:	50                   	push   %eax
8010bbaf:	89 d8                	mov    %ebx,%eax
8010bbb1:	6a 00                	push   $0x0
8010bbb3:	6a 00                	push   $0x0
8010bbb5:	6a 10                	push   $0x10
8010bbb7:	e8 d4 f8 ff ff       	call   8010b490 <tcp_tx>
                        wakeup(cb);
8010bbbc:	89 1c 24             	mov    %ebx,(%esp)
8010bbbf:	e8 6c 90 ff ff       	call   80104c30 <wakeup>
8010bbc4:	83 c4 10             	add    $0x10,%esp
8010bbc7:	e9 ab fb ff ff       	jmp    8010b777 <tcp_rx+0x127>
                if (ntoh32(hdr->ack) == cb->snd.nxt) {
8010bbcc:	83 ec 0c             	sub    $0xc,%esp
8010bbcf:	ff 76 08             	pushl  0x8(%esi)
8010bbd2:	e8 19 cb ff ff       	call   801086f0 <ntoh32>
8010bbd7:	83 c4 10             	add    $0x10,%esp
8010bbda:	3b 43 14             	cmp    0x14(%ebx),%eax
8010bbdd:	0f 85 9e fc ff ff    	jne    8010b881 <tcp_rx+0x231>
    if (plen) {
8010bbe3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
                    cb->state = TCP_CB_STATE_FIN_WAIT2;
8010bbe7:	c6 43 01 06          	movb   $0x6,0x1(%ebx)
    if (plen) {
8010bbeb:	0f 84 a7 fc ff ff    	je     8010b898 <tcp_rx+0x248>
                memcpy(cb->window + (sizeof(cb->window) - cb->rcv.wnd), (uint8_t *)hdr + hlen, plen);
8010bbf1:	01 f7                	add    %esi,%edi
8010bbf3:	51                   	push   %ecx
8010bbf4:	89 da                	mov    %ebx,%edx
8010bbf6:	ff 75 e4             	pushl  -0x1c(%ebp)
8010bbf9:	57                   	push   %edi
8010bbfa:	0f b7 43 36          	movzwl 0x36(%ebx),%eax
8010bbfe:	29 c2                	sub    %eax,%edx
8010bc00:	89 d0                	mov    %edx,%eax
8010bc02:	05 44 10 00 00       	add    $0x1044,%eax
8010bc07:	50                   	push   %eax
8010bc08:	e8 b3 96 ff ff       	call   801052c0 <memcpy>
                cb->rcv.nxt = ntoh32(hdr->seq) + plen;
8010bc0d:	5f                   	pop    %edi
8010bc0e:	ff 76 04             	pushl  0x4(%esi)
8010bc11:	e8 da ca ff ff       	call   801086f0 <ntoh32>
8010bc16:	8b 7d e4             	mov    -0x1c(%ebp),%edi
                tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bc19:	83 c4 0c             	add    $0xc,%esp
                cb->rcv.wnd -= plen;
8010bc1c:	66 29 7b 36          	sub    %di,0x36(%ebx)
                tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bc20:	8b 53 14             	mov    0x14(%ebx),%edx
                cb->rcv.nxt = ntoh32(hdr->seq) + plen;
8010bc23:	8d 0c 07             	lea    (%edi,%eax,1),%ecx
                tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bc26:	89 d8                	mov    %ebx,%eax
                cb->rcv.nxt = ntoh32(hdr->seq) + plen;
8010bc28:	89 4b 30             	mov    %ecx,0x30(%ebx)
                tcp_tx(cb, seq, ack, TCP_FLG_ACK, NULL, 0);
8010bc2b:	6a 00                	push   $0x0
8010bc2d:	6a 00                	push   $0x0
8010bc2f:	6a 10                	push   $0x10
8010bc31:	e8 5a f8 ff ff       	call   8010b490 <tcp_tx>
                wakeup(cb);
8010bc36:	89 1c 24             	mov    %ebx,(%esp)
8010bc39:	e8 f2 8f ff ff       	call   80104c30 <wakeup>
                break;
8010bc3e:	83 c4 10             	add    $0x10,%esp
8010bc41:	e9 52 fc ff ff       	jmp    8010b898 <tcp_rx+0x248>
        switch (cb->state) {
8010bc46:	3c 06                	cmp    $0x6,%al
8010bc48:	0f 84 27 ff ff ff    	je     8010bb75 <tcp_rx+0x525>
8010bc4e:	e9 24 fb ff ff       	jmp    8010b777 <tcp_rx+0x127>
                cb->state = TCP_CB_STATE_FIN_WAIT2;
8010bc53:	c6 43 01 06          	movb   $0x6,0x1(%ebx)
                break;
8010bc57:	e9 1b fb ff ff       	jmp    8010b777 <tcp_rx+0x127>
                cb->state = TCP_CB_STATE_ESTABLISHED;
8010bc5c:	c6 43 01 04          	movb   $0x4,0x1(%ebx)
                queue_push(&cb->parent->backlog, cb, sizeof(*cb));
8010bc60:	50                   	push   %eax
8010bc61:	68 54 10 00 00       	push   $0x1054
8010bc66:	53                   	push   %ebx
8010bc67:	8b 83 44 10 00 00    	mov    0x1044(%ebx),%eax
8010bc6d:	05 48 10 00 00       	add    $0x1048,%eax
8010bc72:	50                   	push   %eax
8010bc73:	e8 f8 ca ff ff       	call   80108770 <queue_push>
                wakeup(cb->parent);
8010bc78:	58                   	pop    %eax
8010bc79:	ff b3 44 10 00 00    	pushl  0x1044(%ebx)
8010bc7f:	e8 ac 8f ff ff       	call   80104c30 <wakeup>
8010bc84:	83 c4 10             	add    $0x10,%esp
8010bc87:	e9 79 fe ff ff       	jmp    8010bb05 <tcp_rx+0x4b5>
                cb->snd.una = ntoh32(hdr->ack);
8010bc8c:	83 ec 0c             	sub    $0xc,%esp
8010bc8f:	ff 76 08             	pushl  0x8(%esi)
8010bc92:	e8 59 ca ff ff       	call   801086f0 <ntoh32>
8010bc97:	83 c4 10             	add    $0x10,%esp
8010bc9a:	89 43 18             	mov    %eax,0x18(%ebx)
8010bc9d:	e9 ac fe ff ff       	jmp    8010bb4e <tcp_rx+0x4fe>
                tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_ACK, NULL, 0);
8010bca2:	8b 4b 30             	mov    0x30(%ebx),%ecx
8010bca5:	e9 da fc ff ff       	jmp    8010b984 <tcp_rx+0x334>
8010bcaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010bcb0 <tcp_api_open>:

int
tcp_api_open (void) {
8010bcb0:	f3 0f 1e fb          	endbr32 
8010bcb4:	55                   	push   %ebp
8010bcb5:	89 e5                	mov    %esp,%ebp
8010bcb7:	53                   	push   %ebx
    struct tcp_cb *cb;

    acquire(&tcplock);
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010bcb8:	bb 00 12 14 80       	mov    $0x80141200,%ebx
tcp_api_open (void) {
8010bcbd:	83 ec 10             	sub    $0x10,%esp
    acquire(&tcplock);
8010bcc0:	68 60 21 13 80       	push   $0x80132160
8010bcc5:	e8 e6 93 ff ff       	call   801050b0 <acquire>
8010bcca:	83 c4 10             	add    $0x10,%esp
8010bccd:	8d 76 00             	lea    0x0(%esi),%esi
        if (!cb->used) {
8010bcd0:	80 3b 00             	cmpb   $0x0,(%ebx)
8010bcd3:	74 2b                	je     8010bd00 <tcp_api_open+0x50>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010bcd5:	81 c3 54 10 00 00    	add    $0x1054,%ebx
8010bcdb:	81 fb 40 17 15 80    	cmp    $0x80151740,%ebx
8010bce1:	75 ed                	jne    8010bcd0 <tcp_api_open+0x20>
            cb->used = 1;
            release(&tcplock);
            return array_offset(cb_table, cb);
        }
    }
    release(&tcplock);
8010bce3:	83 ec 0c             	sub    $0xc,%esp
8010bce6:	68 60 21 13 80       	push   $0x80132160
8010bceb:	e8 80 94 ff ff       	call   80105170 <release>
    return -1;
}
8010bcf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    return -1;
8010bcf3:	83 c4 10             	add    $0x10,%esp
8010bcf6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010bcfb:	c9                   	leave  
8010bcfc:	c3                   	ret    
8010bcfd:	8d 76 00             	lea    0x0(%esi),%esi
            release(&tcplock);
8010bd00:	83 ec 0c             	sub    $0xc,%esp
            cb->used = 1;
8010bd03:	c6 03 01             	movb   $0x1,(%ebx)
            return array_offset(cb_table, cb);
8010bd06:	81 eb 00 12 14 80    	sub    $0x80141200,%ebx
            release(&tcplock);
8010bd0c:	68 60 21 13 80       	push   $0x80132160
8010bd11:	e8 5a 94 ff ff       	call   80105170 <release>
            return array_offset(cb_table, cb);
8010bd16:	89 d8                	mov    %ebx,%eax
8010bd18:	ba 35 02 db fa       	mov    $0xfadb0235,%edx
}
8010bd1d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
            return array_offset(cb_table, cb);
8010bd20:	f7 e2                	mul    %edx
8010bd22:	83 c4 10             	add    $0x10,%esp
}
8010bd25:	c9                   	leave  
            return array_offset(cb_table, cb);
8010bd26:	89 d0                	mov    %edx,%eax
8010bd28:	c1 e8 0c             	shr    $0xc,%eax
}
8010bd2b:	c3                   	ret    
8010bd2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010bd30 <tcp_api_close>:

int
tcp_api_close (int soc) {
8010bd30:	f3 0f 1e fb          	endbr32 
8010bd34:	55                   	push   %ebp
8010bd35:	89 e5                	mov    %esp,%ebp
8010bd37:	53                   	push   %ebx
8010bd38:	83 ec 04             	sub    $0x4,%esp
8010bd3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct tcp_cb *cb;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010bd3e:	83 fb 0f             	cmp    $0xf,%ebx
8010bd41:	0f 87 b1 00 00 00    	ja     8010bdf8 <tcp_api_close+0xc8>
        return -1;
    }
    acquire(&tcplock);
8010bd47:	83 ec 0c             	sub    $0xc,%esp
8010bd4a:	68 60 21 13 80       	push   $0x80132160
8010bd4f:	e8 5c 93 ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010bd54:	69 c3 54 10 00 00    	imul   $0x1054,%ebx,%eax
    if (!cb->used) {
8010bd5a:	83 c4 10             	add    $0x10,%esp
8010bd5d:	80 b8 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%eax)
    cb = &cb_table[soc];
8010bd64:	8d 98 00 12 14 80    	lea    -0x7febee00(%eax),%ebx
    if (!cb->used) {
8010bd6a:	0f 84 8f 00 00 00    	je     8010bdff <tcp_api_close+0xcf>
        release(&tcplock);
        return -1;
    }
    switch (cb->state) {
8010bd70:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
8010bd74:	3c 04                	cmp    $0x4,%al
8010bd76:	76 38                	jbe    8010bdb0 <tcp_api_close+0x80>
8010bd78:	3c 09                	cmp    $0x9,%al
8010bd7a:	75 38                	jne    8010bdb4 <tcp_api_close+0x84>
            cb->state = TCP_CB_STATE_FIN_WAIT1;
            cb->snd.nxt++;
            sleep(cb, &tcplock);
            break;
        case TCP_CB_STATE_CLOSE_WAIT:
            tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_FIN | TCP_FLG_ACK, NULL, 0);
8010bd7c:	83 ec 04             	sub    $0x4,%esp
8010bd7f:	89 d8                	mov    %ebx,%eax
8010bd81:	6a 00                	push   $0x0
8010bd83:	6a 00                	push   $0x0
8010bd85:	6a 11                	push   $0x11
8010bd87:	8b 4b 30             	mov    0x30(%ebx),%ecx
8010bd8a:	8b 53 14             	mov    0x14(%ebx),%edx
8010bd8d:	e8 fe f6 ff ff       	call   8010b490 <tcp_tx>
            cb->state = TCP_CB_STATE_LAST_ACK;
8010bd92:	c6 43 01 0a          	movb   $0xa,0x1(%ebx)
            cb->snd.nxt++;
8010bd96:	83 43 14 01          	addl   $0x1,0x14(%ebx)
            sleep(cb, &tcplock);
8010bd9a:	58                   	pop    %eax
8010bd9b:	5a                   	pop    %edx
8010bd9c:	68 60 21 13 80       	push   $0x80132160
8010bda1:	53                   	push   %ebx
8010bda2:	e8 c9 8c ff ff       	call   80104a70 <sleep>
            break;
8010bda7:	83 c4 10             	add    $0x10,%esp
8010bdaa:	eb 08                	jmp    8010bdb4 <tcp_api_close+0x84>
8010bdac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    switch (cb->state) {
8010bdb0:	3c 02                	cmp    $0x2,%al
8010bdb2:	77 24                	ja     8010bdd8 <tcp_api_close+0xa8>
        default:
            break;
    }
    tcp_cb_clear(cb); /* TCP_CB_STATE_CLOSED */
8010bdb4:	89 d8                	mov    %ebx,%eax
8010bdb6:	e8 45 f6 ff ff       	call   8010b400 <tcp_cb_clear>
    release(&tcplock);
8010bdbb:	83 ec 0c             	sub    $0xc,%esp
8010bdbe:	68 60 21 13 80       	push   $0x80132160
8010bdc3:	e8 a8 93 ff ff       	call   80105170 <release>
    return 0;
8010bdc8:	83 c4 10             	add    $0x10,%esp
8010bdcb:	31 c0                	xor    %eax,%eax
}
8010bdcd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010bdd0:	c9                   	leave  
8010bdd1:	c3                   	ret    
8010bdd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_FIN | TCP_FLG_ACK, NULL, 0);
8010bdd8:	83 ec 04             	sub    $0x4,%esp
8010bddb:	89 d8                	mov    %ebx,%eax
8010bddd:	6a 00                	push   $0x0
8010bddf:	6a 00                	push   $0x0
8010bde1:	6a 11                	push   $0x11
8010bde3:	8b 4b 30             	mov    0x30(%ebx),%ecx
8010bde6:	8b 53 14             	mov    0x14(%ebx),%edx
8010bde9:	e8 a2 f6 ff ff       	call   8010b490 <tcp_tx>
            cb->state = TCP_CB_STATE_FIN_WAIT1;
8010bdee:	c6 43 01 05          	movb   $0x5,0x1(%ebx)
            cb->snd.nxt++;
8010bdf2:	eb a2                	jmp    8010bd96 <tcp_api_close+0x66>
8010bdf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        return -1;
8010bdf8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010bdfd:	eb ce                	jmp    8010bdcd <tcp_api_close+0x9d>
        release(&tcplock);
8010bdff:	83 ec 0c             	sub    $0xc,%esp
8010be02:	68 60 21 13 80       	push   $0x80132160
8010be07:	e8 64 93 ff ff       	call   80105170 <release>
        return -1;
8010be0c:	83 c4 10             	add    $0x10,%esp
8010be0f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010be14:	eb b7                	jmp    8010bdcd <tcp_api_close+0x9d>
8010be16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010be1d:	8d 76 00             	lea    0x0(%esi),%esi

8010be20 <tcp_api_connect>:

int
tcp_api_connect (int soc, struct sockaddr *addr, int addrlen) {
8010be20:	f3 0f 1e fb          	endbr32 
8010be24:	55                   	push   %ebp
8010be25:	89 e5                	mov    %esp,%ebp
8010be27:	57                   	push   %edi
8010be28:	56                   	push   %esi
8010be29:	53                   	push   %ebx
8010be2a:	83 ec 1c             	sub    $0x1c,%esp
    struct sockaddr_in *sin;
    struct tcp_cb *cb, *tmp;
    uint32_t p;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010be2d:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
8010be31:	0f 87 98 01 00 00    	ja     8010bfcf <tcp_api_connect+0x1af>
        return -1;
    }
    if (addr->sa_family != AF_INET) {
8010be37:	8b 45 0c             	mov    0xc(%ebp),%eax
8010be3a:	66 83 38 02          	cmpw   $0x2,(%eax)
8010be3e:	0f 85 8b 01 00 00    	jne    8010bfcf <tcp_api_connect+0x1af>
        return -1;
    }
    sin = (struct sockaddr_in *)addr;
    acquire(&tcplock);
8010be44:	83 ec 0c             	sub    $0xc,%esp
8010be47:	68 60 21 13 80       	push   $0x80132160
8010be4c:	e8 5f 92 ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010be51:	69 45 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%eax
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED) {
8010be58:	83 c4 10             	add    $0x10,%esp
    cb = &cb_table[soc];
8010be5b:	8d 88 00 12 14 80    	lea    -0x7febee00(%eax),%ecx
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED) {
8010be61:	80 b8 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%eax)
    cb = &cb_table[soc];
8010be68:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED) {
8010be6b:	0f 84 65 01 00 00    	je     8010bfd6 <tcp_api_connect+0x1b6>
8010be71:	80 b8 01 12 14 80 00 	cmpb   $0x0,-0x7febedff(%eax)
8010be78:	0f 85 58 01 00 00    	jne    8010bfd6 <tcp_api_connect+0x1b6>
        release(&tcplock);
        return -1;
    }
    if (!cb->port) {
8010be7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010be81:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
8010be86:	0f 85 8e 00 00 00    	jne    8010bf1a <tcp_api_connect+0xfa>
        int offset = time(NULL) % 1024;
8010be8c:	83 ec 0c             	sub    $0xc,%esp
8010be8f:	6a 00                	push   $0x0
8010be91:	e8 8a c9 ff ff       	call   80108820 <time>
        for (p = TCP_SOURCE_PORT_MIN + offset; p <= TCP_SOURCE_PORT_MAX; p++) {
8010be96:	83 c4 10             	add    $0x10,%esp
        int offset = time(NULL) % 1024;
8010be99:	99                   	cltd   
8010be9a:	c1 ea 16             	shr    $0x16,%edx
8010be9d:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
8010bea0:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
8010bea6:	29 d3                	sub    %edx,%ebx
        for (p = TCP_SOURCE_PORT_MIN + offset; p <= TCP_SOURCE_PORT_MAX; p++) {
8010bea8:	81 c3 00 c0 00 00    	add    $0xc000,%ebx
8010beae:	66 90                	xchg   %ax,%ax
            for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010beb0:	be 00 12 14 80       	mov    $0x80141200,%esi
8010beb5:	eb 1b                	jmp    8010bed2 <tcp_api_connect+0xb2>
8010beb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010bebe:	66 90                	xchg   %ax,%ax
8010bec0:	81 c6 54 10 00 00    	add    $0x1054,%esi
8010bec6:	81 fe 40 17 15 80    	cmp    $0x80151740,%esi
8010becc:	0f 84 de 00 00 00    	je     8010bfb0 <tcp_api_connect+0x190>
                if (tmp->used && tmp->port == hton16((uint16_t)p)) {
8010bed2:	80 3e 00             	cmpb   $0x0,(%esi)
8010bed5:	74 e9                	je     8010bec0 <tcp_api_connect+0xa0>
8010bed7:	83 ec 0c             	sub    $0xc,%esp
8010beda:	0f b7 7e 08          	movzwl 0x8(%esi),%edi
8010bede:	53                   	push   %ebx
8010bedf:	e8 7c c7 ff ff       	call   80108660 <hton16>
8010bee4:	83 c4 10             	add    $0x10,%esp
8010bee7:	66 39 c7             	cmp    %ax,%di
8010beea:	75 d4                	jne    8010bec0 <tcp_api_connect+0xa0>
                    break;
                }
            }
            if (tmp == array_tailof(cb_table)) {
8010beec:	81 fe 40 17 15 80    	cmp    $0x80151740,%esi
8010bef2:	0f 84 b8 00 00 00    	je     8010bfb0 <tcp_api_connect+0x190>
        for (p = TCP_SOURCE_PORT_MIN + offset; p <= TCP_SOURCE_PORT_MAX; p++) {
8010bef8:	83 c3 01             	add    $0x1,%ebx
8010befb:	81 fb 00 00 01 00    	cmp    $0x10000,%ebx
8010bf01:	75 ad                	jne    8010beb0 <tcp_api_connect+0x90>
8010bf03:	69 45 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%eax
8010bf0a:	0f b7 80 08 12 14 80 	movzwl -0x7febedf8(%eax),%eax
                cb->port = hton16((uint16_t)p);
                break;
            }
        }
        if (!cb->port) {
8010bf11:	66 85 c0             	test   %ax,%ax
8010bf14:	0f 84 bc 00 00 00    	je     8010bfd6 <tcp_api_connect+0x1b6>
            release(&tcplock);
            return -1;
        }
    }
    cb->peer.addr = sin->sin_addr;
8010bf1a:	69 5d 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%ebx
8010bf21:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bf24:	8b 40 04             	mov    0x4(%eax),%eax
8010bf27:	81 c3 00 12 14 80    	add    $0x80141200,%ebx
8010bf2d:	89 43 0c             	mov    %eax,0xc(%ebx)
    cb->peer.port = sin->sin_port;
8010bf30:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bf33:	0f b7 40 02          	movzwl 0x2(%eax),%eax
8010bf37:	66 89 43 10          	mov    %ax,0x10(%ebx)
    cb->rcv.wnd = sizeof(cb->window);
8010bf3b:	b8 00 10 00 00       	mov    $0x1000,%eax
8010bf40:	66 89 43 36          	mov    %ax,0x36(%ebx)
    cb->iss = (uint32_t)random();
8010bf44:	e8 27 c9 ff ff       	call   80108870 <random>
    tcp_tx(cb, cb->iss, 0, TCP_FLG_SYN, NULL, 0);
8010bf49:	83 ec 04             	sub    $0x4,%esp
8010bf4c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
8010bf4f:	31 c9                	xor    %ecx,%ecx
    cb->iss = (uint32_t)random();
8010bf51:	89 43 2c             	mov    %eax,0x2c(%ebx)
8010bf54:	89 c2                	mov    %eax,%edx
    tcp_tx(cb, cb->iss, 0, TCP_FLG_SYN, NULL, 0);
8010bf56:	6a 00                	push   $0x0
8010bf58:	89 f0                	mov    %esi,%eax
8010bf5a:	6a 00                	push   $0x0
8010bf5c:	6a 02                	push   $0x2
8010bf5e:	e8 2d f5 ff ff       	call   8010b490 <tcp_tx>
    cb->snd.nxt = cb->iss + 1;
8010bf63:	8b 43 2c             	mov    0x2c(%ebx),%eax
    cb->state = TCP_CB_STATE_SYN_SENT;
8010bf66:	c6 43 01 02          	movb   $0x2,0x1(%ebx)
8010bf6a:	83 c4 10             	add    $0x10,%esp
    cb->snd.nxt = cb->iss + 1;
8010bf6d:	83 c0 01             	add    $0x1,%eax
8010bf70:	89 43 14             	mov    %eax,0x14(%ebx)
    while (cb->state == TCP_CB_STATE_SYN_SENT) {
8010bf73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010bf77:	90                   	nop
        sleep(&cb_table[soc], &tcplock);
8010bf78:	83 ec 08             	sub    $0x8,%esp
8010bf7b:	68 60 21 13 80       	push   $0x80132160
8010bf80:	56                   	push   %esi
8010bf81:	e8 ea 8a ff ff       	call   80104a70 <sleep>
    while (cb->state == TCP_CB_STATE_SYN_SENT) {
8010bf86:	83 c4 10             	add    $0x10,%esp
8010bf89:	80 7b 01 02          	cmpb   $0x2,0x1(%ebx)
8010bf8d:	74 e9                	je     8010bf78 <tcp_api_connect+0x158>
    }
    release(&tcplock);
8010bf8f:	83 ec 0c             	sub    $0xc,%esp
8010bf92:	68 60 21 13 80       	push   $0x80132160
8010bf97:	e8 d4 91 ff ff       	call   80105170 <release>
    return 0;
8010bf9c:	83 c4 10             	add    $0x10,%esp
8010bf9f:	31 c0                	xor    %eax,%eax
}
8010bfa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010bfa4:	5b                   	pop    %ebx
8010bfa5:	5e                   	pop    %esi
8010bfa6:	5f                   	pop    %edi
8010bfa7:	5d                   	pop    %ebp
8010bfa8:	c3                   	ret    
8010bfa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
                cb->port = hton16((uint16_t)p);
8010bfb0:	83 ec 0c             	sub    $0xc,%esp
8010bfb3:	53                   	push   %ebx
8010bfb4:	e8 a7 c6 ff ff       	call   80108660 <hton16>
8010bfb9:	69 55 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%edx
                break;
8010bfc0:	83 c4 10             	add    $0x10,%esp
                cb->port = hton16((uint16_t)p);
8010bfc3:	66 89 82 08 12 14 80 	mov    %ax,-0x7febedf8(%edx)
                break;
8010bfca:	e9 42 ff ff ff       	jmp    8010bf11 <tcp_api_connect+0xf1>
        return -1;
8010bfcf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010bfd4:	eb cb                	jmp    8010bfa1 <tcp_api_connect+0x181>
        release(&tcplock);
8010bfd6:	83 ec 0c             	sub    $0xc,%esp
8010bfd9:	68 60 21 13 80       	push   $0x80132160
8010bfde:	e8 8d 91 ff ff       	call   80105170 <release>
        return -1;
8010bfe3:	83 c4 10             	add    $0x10,%esp
8010bfe6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010bfeb:	eb b4                	jmp    8010bfa1 <tcp_api_connect+0x181>
8010bfed:	8d 76 00             	lea    0x0(%esi),%esi

8010bff0 <tcp_api_bind>:

int
tcp_api_bind (int soc, struct sockaddr *addr, int addrlen) {
8010bff0:	f3 0f 1e fb          	endbr32 
8010bff4:	55                   	push   %ebp
8010bff5:	89 e5                	mov    %esp,%ebp
8010bff7:	56                   	push   %esi
8010bff8:	53                   	push   %ebx
8010bff9:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010bffc:	8b 75 0c             	mov    0xc(%ebp),%esi
    struct sockaddr_in *sin;
    struct tcp_cb *cb;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010bfff:	83 fb 0f             	cmp    $0xf,%ebx
8010c002:	0f 87 94 00 00 00    	ja     8010c09c <tcp_api_bind+0xac>
        return -1;
    }
    if (addr->sa_family != AF_INET) {
8010c008:	66 83 3e 02          	cmpw   $0x2,(%esi)
8010c00c:	0f 85 8a 00 00 00    	jne    8010c09c <tcp_api_bind+0xac>
        return -1;
    }
    sin = (struct sockaddr_in *)addr;
    acquire(&tcplock);
8010c012:	83 ec 0c             	sub    $0xc,%esp
8010c015:	68 60 21 13 80       	push   $0x80132160
8010c01a:	e8 91 90 ff ff       	call   801050b0 <acquire>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
        if (cb->port == sin->sin_port) {
8010c01f:	0f b7 56 02          	movzwl 0x2(%esi),%edx
8010c023:	83 c4 10             	add    $0x10,%esp
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c026:	b8 00 12 14 80       	mov    $0x80141200,%eax
8010c02b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c02f:	90                   	nop
        if (cb->port == sin->sin_port) {
8010c030:	66 39 50 08          	cmp    %dx,0x8(%eax)
8010c034:	74 4a                	je     8010c080 <tcp_api_bind+0x90>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c036:	05 54 10 00 00       	add    $0x1054,%eax
8010c03b:	3d 40 17 15 80       	cmp    $0x80151740,%eax
8010c040:	75 ee                	jne    8010c030 <tcp_api_bind+0x40>
            release(&tcplock);
            return -1;
        }
    }
    cb = &cb_table[soc];
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED) {
8010c042:	69 db 54 10 00 00    	imul   $0x1054,%ebx,%ebx
8010c048:	80 bb 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%ebx)
8010c04f:	74 2f                	je     8010c080 <tcp_api_bind+0x90>
8010c051:	80 bb 01 12 14 80 00 	cmpb   $0x0,-0x7febedff(%ebx)
8010c058:	75 26                	jne    8010c080 <tcp_api_bind+0x90>
        release(&tcplock);
        return -1;
    }
    cb->port = sin->sin_port;
    release(&tcplock);
8010c05a:	83 ec 0c             	sub    $0xc,%esp
    cb->port = sin->sin_port;
8010c05d:	66 89 93 08 12 14 80 	mov    %dx,-0x7febedf8(%ebx)
    release(&tcplock);
8010c064:	68 60 21 13 80       	push   $0x80132160
8010c069:	e8 02 91 ff ff       	call   80105170 <release>
    return 0;
8010c06e:	83 c4 10             	add    $0x10,%esp
8010c071:	31 c0                	xor    %eax,%eax
}
8010c073:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010c076:	5b                   	pop    %ebx
8010c077:	5e                   	pop    %esi
8010c078:	5d                   	pop    %ebp
8010c079:	c3                   	ret    
8010c07a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            release(&tcplock);
8010c080:	83 ec 0c             	sub    $0xc,%esp
8010c083:	68 60 21 13 80       	push   $0x80132160
8010c088:	e8 e3 90 ff ff       	call   80105170 <release>
            return -1;
8010c08d:	83 c4 10             	add    $0x10,%esp
}
8010c090:	8d 65 f8             	lea    -0x8(%ebp),%esp
            return -1;
8010c093:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010c098:	5b                   	pop    %ebx
8010c099:	5e                   	pop    %esi
8010c09a:	5d                   	pop    %ebp
8010c09b:	c3                   	ret    
        return -1;
8010c09c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c0a1:	eb d0                	jmp    8010c073 <tcp_api_bind+0x83>
8010c0a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c0aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010c0b0 <tcp_api_listen>:

int
tcp_api_listen (int soc, int backlog) {
8010c0b0:	f3 0f 1e fb          	endbr32 
8010c0b4:	55                   	push   %ebp
8010c0b5:	89 e5                	mov    %esp,%ebp
8010c0b7:	53                   	push   %ebx
8010c0b8:	83 ec 04             	sub    $0x4,%esp
8010c0bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct tcp_cb *cb;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010c0be:	83 fb 0f             	cmp    $0xf,%ebx
8010c0c1:	77 6d                	ja     8010c130 <tcp_api_listen+0x80>
        return -1;
    }
    acquire(&tcplock);
8010c0c3:	83 ec 0c             	sub    $0xc,%esp
    cb = &cb_table[soc];
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED || !cb->port) {
8010c0c6:	69 db 54 10 00 00    	imul   $0x1054,%ebx,%ebx
    acquire(&tcplock);
8010c0cc:	68 60 21 13 80       	push   $0x80132160
8010c0d1:	e8 da 8f ff ff       	call   801050b0 <acquire>
    if (!cb->used || cb->state != TCP_CB_STATE_CLOSED || !cb->port) {
8010c0d6:	83 c4 10             	add    $0x10,%esp
8010c0d9:	80 bb 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%ebx)
8010c0e0:	8d 83 00 12 14 80    	lea    -0x7febee00(%ebx),%eax
8010c0e6:	74 28                	je     8010c110 <tcp_api_listen+0x60>
8010c0e8:	80 78 01 00          	cmpb   $0x0,0x1(%eax)
8010c0ec:	75 22                	jne    8010c110 <tcp_api_listen+0x60>
8010c0ee:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
8010c0f3:	74 1b                	je     8010c110 <tcp_api_listen+0x60>
        release(&tcplock);
        return -1;
    }
    cb->state = TCP_CB_STATE_LISTEN;
    release(&tcplock);
8010c0f5:	83 ec 0c             	sub    $0xc,%esp
    cb->state = TCP_CB_STATE_LISTEN;
8010c0f8:	c6 40 01 01          	movb   $0x1,0x1(%eax)
    release(&tcplock);
8010c0fc:	68 60 21 13 80       	push   $0x80132160
8010c101:	e8 6a 90 ff ff       	call   80105170 <release>
    return 0;
8010c106:	83 c4 10             	add    $0x10,%esp
8010c109:	31 c0                	xor    %eax,%eax
}
8010c10b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010c10e:	c9                   	leave  
8010c10f:	c3                   	ret    
        release(&tcplock);
8010c110:	83 ec 0c             	sub    $0xc,%esp
8010c113:	68 60 21 13 80       	push   $0x80132160
8010c118:	e8 53 90 ff ff       	call   80105170 <release>
        return -1;
8010c11d:	83 c4 10             	add    $0x10,%esp
8010c120:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c125:	eb e4                	jmp    8010c10b <tcp_api_listen+0x5b>
8010c127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c12e:	66 90                	xchg   %ax,%ax
        return -1;
8010c130:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c135:	eb d4                	jmp    8010c10b <tcp_api_listen+0x5b>
8010c137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c13e:	66 90                	xchg   %ax,%ax

8010c140 <tcp_api_accept>:

int
tcp_api_accept (int soc, struct sockaddr *addr, int *addrlen) {
8010c140:	f3 0f 1e fb          	endbr32 
8010c144:	55                   	push   %ebp
8010c145:	89 e5                	mov    %esp,%ebp
8010c147:	57                   	push   %edi
8010c148:	56                   	push   %esi
8010c149:	53                   	push   %ebx
8010c14a:	83 ec 0c             	sub    $0xc,%esp
8010c14d:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010c150:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010c153:	8b 45 10             	mov    0x10(%ebp),%eax
    struct tcp_cb *cb, *backlog;
    struct queue_entry *entry;
    struct sockaddr_in *sin = NULL;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010c156:	83 fb 0f             	cmp    $0xf,%ebx
8010c159:	0f 87 ce 00 00 00    	ja     8010c22d <tcp_api_accept+0xed>
        return -1;
    }
    if (addr) {
8010c15f:	85 ff                	test   %edi,%edi
8010c161:	74 17                	je     8010c17a <tcp_api_accept+0x3a>
        if (!addrlen) {
8010c163:	85 c0                	test   %eax,%eax
8010c165:	0f 84 c2 00 00 00    	je     8010c22d <tcp_api_accept+0xed>
            return -1;
        }
        if (*addrlen < sizeof(struct sockaddr_in)) {
8010c16b:	83 38 07             	cmpl   $0x7,(%eax)
8010c16e:	0f 86 b9 00 00 00    	jbe    8010c22d <tcp_api_accept+0xed>
            return -1;
        }
        *addrlen = sizeof(struct sockaddr_in);
8010c174:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
        sin = (struct sockaddr_in *)addr;
    }
    acquire(&tcplock);
8010c17a:	83 ec 0c             	sub    $0xc,%esp
8010c17d:	69 db 54 10 00 00    	imul   $0x1054,%ebx,%ebx
8010c183:	68 60 21 13 80       	push   $0x80132160
    cb = &cb_table[soc];
8010c188:	8d b3 00 12 14 80    	lea    -0x7febee00(%ebx),%esi
    acquire(&tcplock);
8010c18e:	e8 1d 8f ff ff       	call   801050b0 <acquire>
    if (!cb->used) {
8010c193:	83 c4 10             	add    $0x10,%esp
8010c196:	80 bb 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%ebx)
8010c19d:	0f 84 91 00 00 00    	je     8010c234 <tcp_api_accept+0xf4>
        release(&tcplock);
        return -1;
    }
    if (cb->state != TCP_CB_STATE_LISTEN) {
8010c1a3:	80 7e 01 01          	cmpb   $0x1,0x1(%esi)
8010c1a7:	0f 85 87 00 00 00    	jne    8010c234 <tcp_api_accept+0xf4>
        release(&tcplock);
        return -1;
    }
    while ((entry = queue_pop(&cb->backlog)) == NULL) {
8010c1ad:	81 c3 48 22 14 80    	add    $0x80142248,%ebx
8010c1b3:	eb 14                	jmp    8010c1c9 <tcp_api_accept+0x89>
8010c1b5:	8d 76 00             	lea    0x0(%esi),%esi
        sleep(cb, &tcplock);
8010c1b8:	83 ec 08             	sub    $0x8,%esp
8010c1bb:	68 60 21 13 80       	push   $0x80132160
8010c1c0:	56                   	push   %esi
8010c1c1:	e8 aa 88 ff ff       	call   80104a70 <sleep>
8010c1c6:	83 c4 10             	add    $0x10,%esp
    while ((entry = queue_pop(&cb->backlog)) == NULL) {
8010c1c9:	83 ec 0c             	sub    $0xc,%esp
8010c1cc:	53                   	push   %ebx
8010c1cd:	e8 0e c6 ff ff       	call   801087e0 <queue_pop>
8010c1d2:	83 c4 10             	add    $0x10,%esp
8010c1d5:	85 c0                	test   %eax,%eax
8010c1d7:	74 df                	je     8010c1b8 <tcp_api_accept+0x78>
    }
    backlog = entry->data;
    kfree((char*)entry);
8010c1d9:	83 ec 0c             	sub    $0xc,%esp
    backlog = entry->data;
8010c1dc:	8b 18                	mov    (%eax),%ebx
    kfree((char*)entry);
8010c1de:	50                   	push   %eax
8010c1df:	e8 6c 61 ff ff       	call   80102350 <kfree>
    if (sin) {
8010c1e4:	83 c4 10             	add    $0x10,%esp
8010c1e7:	85 ff                	test   %edi,%edi
8010c1e9:	74 16                	je     8010c201 <tcp_api_accept+0xc1>
      sin->sin_family = AF_INET;
8010c1eb:	b8 02 00 00 00       	mov    $0x2,%eax
8010c1f0:	66 89 07             	mov    %ax,(%edi)
      sin->sin_addr = backlog->peer.addr;
8010c1f3:	8b 43 0c             	mov    0xc(%ebx),%eax
8010c1f6:	89 47 04             	mov    %eax,0x4(%edi)
      sin->sin_port = backlog->peer.port;
8010c1f9:	0f b7 43 10          	movzwl 0x10(%ebx),%eax
8010c1fd:	66 89 47 02          	mov    %ax,0x2(%edi)
    }
    release(&tcplock);
8010c201:	83 ec 0c             	sub    $0xc,%esp
    return array_offset(cb_table, backlog);
8010c204:	81 eb 00 12 14 80    	sub    $0x80141200,%ebx
    release(&tcplock);
8010c20a:	68 60 21 13 80       	push   $0x80132160
8010c20f:	e8 5c 8f ff ff       	call   80105170 <release>
    return array_offset(cb_table, backlog);
8010c214:	89 d8                	mov    %ebx,%eax
8010c216:	ba 35 02 db fa       	mov    $0xfadb0235,%edx
8010c21b:	83 c4 10             	add    $0x10,%esp
8010c21e:	f7 e2                	mul    %edx
8010c220:	89 d0                	mov    %edx,%eax
8010c222:	c1 e8 0c             	shr    $0xc,%eax
}
8010c225:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c228:	5b                   	pop    %ebx
8010c229:	5e                   	pop    %esi
8010c22a:	5f                   	pop    %edi
8010c22b:	5d                   	pop    %ebp
8010c22c:	c3                   	ret    
        return -1;
8010c22d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c232:	eb f1                	jmp    8010c225 <tcp_api_accept+0xe5>
        release(&tcplock);
8010c234:	83 ec 0c             	sub    $0xc,%esp
8010c237:	68 60 21 13 80       	push   $0x80132160
8010c23c:	e8 2f 8f ff ff       	call   80105170 <release>
        return -1;
8010c241:	83 c4 10             	add    $0x10,%esp
8010c244:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c249:	eb da                	jmp    8010c225 <tcp_api_accept+0xe5>
8010c24b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c24f:	90                   	nop

8010c250 <tcp_api_recv>:

ssize_t
tcp_api_recv (int soc, uint8_t *buf, size_t size) {
8010c250:	f3 0f 1e fb          	endbr32 
8010c254:	55                   	push   %ebp
8010c255:	89 e5                	mov    %esp,%ebp
8010c257:	57                   	push   %edi
8010c258:	56                   	push   %esi
8010c259:	53                   	push   %ebx
8010c25a:	83 ec 1c             	sub    $0x1c,%esp
    struct tcp_cb *cb;
    size_t total, len;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010c25d:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
8010c261:	0f 87 e5 00 00 00    	ja     8010c34c <tcp_api_recv+0xfc>
        return -1;
    }
    acquire(&tcplock);
8010c267:	83 ec 0c             	sub    $0xc,%esp
8010c26a:	68 60 21 13 80       	push   $0x80132160
8010c26f:	e8 3c 8e ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010c274:	69 45 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%eax
    if (!cb->used) {
8010c27b:	83 c4 10             	add    $0x10,%esp
8010c27e:	80 b8 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%eax)
8010c285:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    cb = &cb_table[soc];
8010c288:	8d b0 00 12 14 80    	lea    -0x7febee00(%eax),%esi
    if (!cb->used) {
8010c28e:	0f 84 bf 00 00 00    	je     8010c353 <tcp_api_recv+0x103>
        release(&tcplock);
        return -1;
    }
    while (!(total = sizeof(cb->window) - cb->rcv.wnd)) {
8010c294:	0f b7 46 36          	movzwl 0x36(%esi),%eax
8010c298:	b9 00 10 00 00       	mov    $0x1000,%ecx
        if (!TCP_CB_STATE_RX_ISREADY(cb)) {
8010c29d:	89 f7                	mov    %esi,%edi
    while (!(total = sizeof(cb->window) - cb->rcv.wnd)) {
8010c29f:	bb 00 10 00 00       	mov    $0x1000,%ebx
8010c2a4:	29 c1                	sub    %eax,%ecx
8010c2a6:	74 23                	je     8010c2cb <tcp_api_recv+0x7b>
8010c2a8:	eb 46                	jmp    8010c2f0 <tcp_api_recv+0xa0>
8010c2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            release(&tcplock);
            return 0;
        }
        sleep(cb, &tcplock);
8010c2b0:	83 ec 08             	sub    $0x8,%esp
8010c2b3:	68 60 21 13 80       	push   $0x80132160
8010c2b8:	56                   	push   %esi
8010c2b9:	e8 b2 87 ff ff       	call   80104a70 <sleep>
    while (!(total = sizeof(cb->window) - cb->rcv.wnd)) {
8010c2be:	0f b7 47 36          	movzwl 0x36(%edi),%eax
8010c2c2:	89 d9                	mov    %ebx,%ecx
8010c2c4:	83 c4 10             	add    $0x10,%esp
8010c2c7:	29 c1                	sub    %eax,%ecx
8010c2c9:	75 25                	jne    8010c2f0 <tcp_api_recv+0xa0>
        if (!TCP_CB_STATE_RX_ISREADY(cb)) {
8010c2cb:	0f b6 47 01          	movzbl 0x1(%edi),%eax
8010c2cf:	83 e8 04             	sub    $0x4,%eax
8010c2d2:	3c 02                	cmp    $0x2,%al
8010c2d4:	76 da                	jbe    8010c2b0 <tcp_api_recv+0x60>
            release(&tcplock);
8010c2d6:	83 ec 0c             	sub    $0xc,%esp
8010c2d9:	68 60 21 13 80       	push   $0x80132160
8010c2de:	e8 8d 8e ff ff       	call   80105170 <release>
            return 0;
8010c2e3:	83 c4 10             	add    $0x10,%esp
    memcpy(buf, cb->window, len);
    memmove(cb->window, cb->window + len, total - len);
    cb->rcv.wnd += len;
    release(&tcplock);
    return len;
}
8010c2e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
            return 0;
8010c2e9:	31 c0                	xor    %eax,%eax
}
8010c2eb:	5b                   	pop    %ebx
8010c2ec:	5e                   	pop    %esi
8010c2ed:	5f                   	pop    %edi
8010c2ee:	5d                   	pop    %ebp
8010c2ef:	c3                   	ret    
    memcpy(buf, cb->window, len);
8010c2f0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
    len = size < total ? size : total;
8010c2f3:	39 4d 10             	cmp    %ecx,0x10(%ebp)
8010c2f6:	89 cb                	mov    %ecx,%ebx
8010c2f8:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010c2fb:	0f 46 5d 10          	cmovbe 0x10(%ebp),%ebx
    memcpy(buf, cb->window, len);
8010c2ff:	83 ec 04             	sub    $0x4,%esp
8010c302:	81 c7 44 12 14 80    	add    $0x80141244,%edi
8010c308:	53                   	push   %ebx
8010c309:	57                   	push   %edi
8010c30a:	ff 75 0c             	pushl  0xc(%ebp)
8010c30d:	e8 ae 8f ff ff       	call   801052c0 <memcpy>
    memmove(cb->window, cb->window + len, total - len);
8010c312:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010c315:	83 c4 0c             	add    $0xc,%esp
8010c318:	8d 04 1f             	lea    (%edi,%ebx,1),%eax
8010c31b:	29 d9                	sub    %ebx,%ecx
8010c31d:	51                   	push   %ecx
8010c31e:	50                   	push   %eax
8010c31f:	57                   	push   %edi
8010c320:	e8 3b 8f ff ff       	call   80105260 <memmove>
    cb->rcv.wnd += len;
8010c325:	69 45 08 54 10 00 00 	imul   $0x1054,0x8(%ebp),%eax
    release(&tcplock);
8010c32c:	c7 04 24 60 21 13 80 	movl   $0x80132160,(%esp)
    cb->rcv.wnd += len;
8010c333:	66 01 98 36 12 14 80 	add    %bx,-0x7febedca(%eax)
    release(&tcplock);
8010c33a:	e8 31 8e ff ff       	call   80105170 <release>
    return len;
8010c33f:	89 d8                	mov    %ebx,%eax
8010c341:	83 c4 10             	add    $0x10,%esp
}
8010c344:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c347:	5b                   	pop    %ebx
8010c348:	5e                   	pop    %esi
8010c349:	5f                   	pop    %edi
8010c34a:	5d                   	pop    %ebp
8010c34b:	c3                   	ret    
        return -1;
8010c34c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c351:	eb f1                	jmp    8010c344 <tcp_api_recv+0xf4>
        release(&tcplock);
8010c353:	83 ec 0c             	sub    $0xc,%esp
8010c356:	68 60 21 13 80       	push   $0x80132160
8010c35b:	e8 10 8e ff ff       	call   80105170 <release>
        return -1;
8010c360:	83 c4 10             	add    $0x10,%esp
8010c363:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c368:	eb da                	jmp    8010c344 <tcp_api_recv+0xf4>
8010c36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010c370 <tcp_api_send>:

ssize_t
tcp_api_send (int soc, uint8_t *buf, size_t len) {
8010c370:	f3 0f 1e fb          	endbr32 
8010c374:	55                   	push   %ebp
8010c375:	89 e5                	mov    %esp,%ebp
8010c377:	56                   	push   %esi
8010c378:	53                   	push   %ebx
8010c379:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010c37c:	8b 75 10             	mov    0x10(%ebp),%esi
    struct tcp_cb *cb;

    if (TCP_SOCKET_ISINVALID(soc)) {
8010c37f:	83 fb 0f             	cmp    $0xf,%ebx
8010c382:	0f 87 98 00 00 00    	ja     8010c420 <tcp_api_send+0xb0>
        return -1;
    }
    acquire(&tcplock);
8010c388:	83 ec 0c             	sub    $0xc,%esp
8010c38b:	68 60 21 13 80       	push   $0x80132160
8010c390:	e8 1b 8d ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010c395:	69 d3 54 10 00 00    	imul   $0x1054,%ebx,%edx
    if (!cb->used) {
8010c39b:	83 c4 10             	add    $0x10,%esp
8010c39e:	80 ba 00 12 14 80 00 	cmpb   $0x0,-0x7febee00(%edx)
    cb = &cb_table[soc];
8010c3a5:	8d 82 00 12 14 80    	lea    -0x7febee00(%edx),%eax
    if (!cb->used) {
8010c3ab:	74 53                	je     8010c400 <tcp_api_send+0x90>
        release(&tcplock);
        return -1;
    }
    if (!TCP_CB_STATE_TX_ISREADY(cb)) {
8010c3ad:	0f b6 50 01          	movzbl 0x1(%eax),%edx
8010c3b1:	80 fa 04             	cmp    $0x4,%dl
8010c3b4:	74 05                	je     8010c3bb <tcp_api_send+0x4b>
8010c3b6:	80 fa 09             	cmp    $0x9,%dl
8010c3b9:	75 45                	jne    8010c400 <tcp_api_send+0x90>
        release(&tcplock);
        return -1;
    }
    tcp_tx(cb, cb->snd.nxt, cb->rcv.nxt, TCP_FLG_ACK | TCP_FLG_PSH, buf, len);
8010c3bb:	69 db 54 10 00 00    	imul   $0x1054,%ebx,%ebx
8010c3c1:	83 ec 04             	sub    $0x4,%esp
8010c3c4:	56                   	push   %esi
8010c3c5:	ff 75 0c             	pushl  0xc(%ebp)
8010c3c8:	8b 8b 30 12 14 80    	mov    -0x7febedd0(%ebx),%ecx
8010c3ce:	6a 18                	push   $0x18
8010c3d0:	8b 93 14 12 14 80    	mov    -0x7febedec(%ebx),%edx
8010c3d6:	81 c3 00 12 14 80    	add    $0x80141200,%ebx
8010c3dc:	e8 af f0 ff ff       	call   8010b490 <tcp_tx>
    cb->snd.nxt += len;
8010c3e1:	01 73 14             	add    %esi,0x14(%ebx)
    release(&tcplock);
8010c3e4:	c7 04 24 60 21 13 80 	movl   $0x80132160,(%esp)
8010c3eb:	e8 80 8d ff ff       	call   80105170 <release>
    return 0;
8010c3f0:	83 c4 10             	add    $0x10,%esp
8010c3f3:	31 c0                	xor    %eax,%eax
}
8010c3f5:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010c3f8:	5b                   	pop    %ebx
8010c3f9:	5e                   	pop    %esi
8010c3fa:	5d                   	pop    %ebp
8010c3fb:	c3                   	ret    
8010c3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        release(&tcplock);
8010c400:	83 ec 0c             	sub    $0xc,%esp
8010c403:	68 60 21 13 80       	push   $0x80132160
8010c408:	e8 63 8d ff ff       	call   80105170 <release>
        return -1;
8010c40d:	83 c4 10             	add    $0x10,%esp
8010c410:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c415:	eb de                	jmp    8010c3f5 <tcp_api_send+0x85>
8010c417:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c41e:	66 90                	xchg   %ax,%ax
        return -1;
8010c420:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c425:	eb ce                	jmp    8010c3f5 <tcp_api_send+0x85>
8010c427:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c42e:	66 90                	xchg   %ax,%ax

8010c430 <tcp_init>:

int
tcp_init (void) {
8010c430:	f3 0f 1e fb          	endbr32 
8010c434:	55                   	push   %ebp
8010c435:	89 e5                	mov    %esp,%ebp
8010c437:	83 ec 10             	sub    $0x10,%esp
    struct tcp_cb *cb;

    initlock(&tcplock, "tcplock");
8010c43a:	68 92 e7 10 80       	push   $0x8010e792
8010c43f:	68 60 21 13 80       	push   $0x80132160
8010c444:	e8 e7 8a ff ff       	call   80104f30 <initlock>
    ip_add_protocol(IP_PROTOCOL_TCP, tcp_rx);
8010c449:	58                   	pop    %eax
8010c44a:	5a                   	pop    %edx
8010c44b:	68 50 b6 10 80       	push   $0x8010b650
8010c450:	6a 06                	push   $0x6
8010c452:	e8 e9 da ff ff       	call   80109f40 <ip_add_protocol>
    return 0;
}
8010c457:	31 c0                	xor    %eax,%eax
8010c459:	c9                   	leave  
8010c45a:	c3                   	ret    
8010c45b:	66 90                	xchg   %ax,%ax
8010c45d:	66 90                	xchg   %ax,%ax
8010c45f:	90                   	nop

8010c460 <udp_tx>:
    cprintf("   sum: 0x%04x\n", ntoh16(hdr->len));
    hexdump(packet, plen);
}

static ssize_t
udp_tx (struct netif *iface, uint16_t sport, uint8_t *buf, size_t len, ip_addr_t *peer, uint16_t port) {
8010c460:	55                   	push   %ebp
8010c461:	89 e5                	mov    %esp,%ebp
8010c463:	57                   	push   %edi
8010c464:	56                   	push   %esi
8010c465:	53                   	push   %ebx
8010c466:	8d 9c 24 00 00 ff ff 	lea    -0x10000(%esp),%ebx
8010c46d:	81 ec 00 10 00 00    	sub    $0x1000,%esp
8010c473:	83 0c 24 00          	orl    $0x0,(%esp)
8010c477:	39 dc                	cmp    %ebx,%esp
8010c479:	75 f2                	jne    8010c46d <udp_tx+0xd>
8010c47b:	83 ec 18             	sub    $0x18,%esp
8010c47e:	89 c6                	mov    %eax,%esi
    ip_addr_t self;
    uint32_t pseudo = 0;

    hdr = (struct udp_hdr *)packet;
    hdr->sport = sport;
    hdr->dport = port;
8010c480:	8b 45 10             	mov    0x10(%ebp),%eax
    hdr->sport = sport;
8010c483:	66 89 95 e8 ff fe ff 	mov    %dx,-0x10018(%ebp)
udp_tx (struct netif *iface, uint16_t sport, uint8_t *buf, size_t len, ip_addr_t *peer, uint16_t port) {
8010c48a:	89 cb                	mov    %ecx,%ebx
    hdr->dport = port;
8010c48c:	66 89 85 ea ff fe ff 	mov    %ax,-0x10016(%ebp)
    hdr->len = hton16(sizeof(struct udp_hdr) + len);
8010c493:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
8010c497:	8d 50 08             	lea    0x8(%eax),%edx
8010c49a:	0f b7 fa             	movzwl %dx,%edi
8010c49d:	57                   	push   %edi
8010c49e:	e8 bd c1 ff ff       	call   80108660 <hton16>
    hdr->sum = 0;
    memcpy(hdr + 1, buf, len);
8010c4a3:	83 c4 0c             	add    $0xc,%esp
8010c4a6:	ff 75 08             	pushl  0x8(%ebp)
    hdr->len = hton16(sizeof(struct udp_hdr) + len);
8010c4a9:	66 89 85 ec ff fe ff 	mov    %ax,-0x10014(%ebp)
    hdr->sum = 0;
8010c4b0:	31 c0                	xor    %eax,%eax
8010c4b2:	66 89 85 ee ff fe ff 	mov    %ax,-0x10012(%ebp)
    memcpy(hdr + 1, buf, len);
8010c4b9:	8d 85 f0 ff fe ff    	lea    -0x10010(%ebp),%eax
8010c4bf:	53                   	push   %ebx
8010c4c0:	50                   	push   %eax
8010c4c1:	e8 fa 8d ff ff       	call   801052c0 <memcpy>
    self = ((struct netif_ip *)iface)->unicast;
    pseudo += (self >> 16) & 0xffff;
    pseudo += self & 0xffff;
    pseudo += (*peer >> 16) & 0xffff;
8010c4c6:	8b 45 0c             	mov    0xc(%ebp),%eax
    self = ((struct netif_ip *)iface)->unicast;
8010c4c9:	8b 56 0c             	mov    0xc(%esi),%edx
    pseudo += (*peer >> 16) & 0xffff;
8010c4cc:	8b 00                	mov    (%eax),%eax
    pseudo += (self >> 16) & 0xffff;
8010c4ce:	89 d3                	mov    %edx,%ebx
    pseudo += *peer & 0xffff;
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c4d0:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
    pseudo += (self >> 16) & 0xffff;
8010c4d7:	c1 eb 10             	shr    $0x10,%ebx
    pseudo += (*peer >> 16) & 0xffff;
8010c4da:	89 c1                	mov    %eax,%ecx
    pseudo += *peer & 0xffff;
8010c4dc:	0f b7 c0             	movzwl %ax,%eax
    pseudo += (*peer >> 16) & 0xffff;
8010c4df:	c1 e9 10             	shr    $0x10,%ecx
    pseudo += *peer & 0xffff;
8010c4e2:	01 c8                	add    %ecx,%eax
8010c4e4:	01 c3                	add    %eax,%ebx
    pseudo += self & 0xffff;
8010c4e6:	0f b7 c2             	movzwl %dx,%eax
    pseudo += *peer & 0xffff;
8010c4e9:	01 c3                	add    %eax,%ebx
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c4eb:	e8 70 c1 ff ff       	call   80108660 <hton16>
    pseudo += hton16(sizeof(struct udp_hdr) + len);
8010c4f0:	89 3c 24             	mov    %edi,(%esp)
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c4f3:	0f b7 c0             	movzwl %ax,%eax
8010c4f6:	01 c3                	add    %eax,%ebx
    pseudo += hton16(sizeof(struct udp_hdr) + len);
8010c4f8:	e8 63 c1 ff ff       	call   80108660 <hton16>
    hdr->sum = cksum16((uint16_t *)hdr, sizeof(struct udp_hdr) + len, pseudo);
8010c4fd:	83 c4 0c             	add    $0xc,%esp
    pseudo += hton16(sizeof(struct udp_hdr) + len);
8010c500:	0f b7 c0             	movzwl %ax,%eax
8010c503:	01 c3                	add    %eax,%ebx
    hdr->sum = cksum16((uint16_t *)hdr, sizeof(struct udp_hdr) + len, pseudo);
8010c505:	8d 85 e8 ff fe ff    	lea    -0x10018(%ebp),%eax
8010c50b:	53                   	push   %ebx
8010c50c:	57                   	push   %edi
8010c50d:	50                   	push   %eax
8010c50e:	e8 ed c1 ff ff       	call   80108700 <cksum16>
#ifdef DEBUG
    cprintf(">>> udp_tx <<<\n");
    udp_dump((struct netif *)iface, (uint8_t *)packet, sizeof(struct udp_hdr) + len);
#endif
    return ip_tx(iface, IP_PROTOCOL_UDP, (uint8_t *)packet, sizeof(struct udp_hdr) + len, peer);
8010c513:	5a                   	pop    %edx
8010c514:	ff 75 0c             	pushl  0xc(%ebp)
    hdr->sum = cksum16((uint16_t *)hdr, sizeof(struct udp_hdr) + len, pseudo);
8010c517:	66 89 85 ee ff fe ff 	mov    %ax,-0x10012(%ebp)
    return ip_tx(iface, IP_PROTOCOL_UDP, (uint8_t *)packet, sizeof(struct udp_hdr) + len, peer);
8010c51e:	8b 45 08             	mov    0x8(%ebp),%eax
8010c521:	83 c0 08             	add    $0x8,%eax
8010c524:	50                   	push   %eax
8010c525:	8d 85 e8 ff fe ff    	lea    -0x10018(%ebp),%eax
8010c52b:	50                   	push   %eax
8010c52c:	6a 11                	push   $0x11
8010c52e:	56                   	push   %esi
8010c52f:	e8 ac d8 ff ff       	call   80109de0 <ip_tx>
}
8010c534:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c537:	5b                   	pop    %ebx
8010c538:	5e                   	pop    %esi
8010c539:	5f                   	pop    %edi
8010c53a:	5d                   	pop    %ebp
8010c53b:	c3                   	ret    
8010c53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010c540 <udp_rx>:

static void
udp_rx (uint8_t *buf, size_t len, ip_addr_t *src, ip_addr_t *dst, struct netif *iface) {
8010c540:	f3 0f 1e fb          	endbr32 
8010c544:	55                   	push   %ebp
8010c545:	89 e5                	mov    %esp,%ebp
8010c547:	57                   	push   %edi
8010c548:	56                   	push   %esi
8010c549:	53                   	push   %ebx
8010c54a:	83 ec 1c             	sub    $0x1c,%esp
8010c54d:	8b 4d 10             	mov    0x10(%ebp),%ecx
8010c550:	8b 55 18             	mov    0x18(%ebp),%edx
8010c553:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010c556:	8b 75 08             	mov    0x8(%ebp),%esi
8010c559:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010c55c:	8b 45 14             	mov    0x14(%ebp),%eax
8010c55f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    uint32_t pseudo = 0;
    struct udp_cb *cb;
    void *data;
    struct udp_queue_hdr *queue_hdr;

    if (len < sizeof(struct udp_hdr)) {
8010c562:	83 ff 07             	cmp    $0x7,%edi
8010c565:	77 09                	ja     8010c570 <udp_rx+0x30>
            return;
        }
    }
    release(&udplock);
    // icmp_send_destination_unreachable();
}
8010c567:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c56a:	5b                   	pop    %ebx
8010c56b:	5e                   	pop    %esi
8010c56c:	5f                   	pop    %edi
8010c56d:	5d                   	pop    %ebp
8010c56e:	c3                   	ret    
8010c56f:	90                   	nop
    pseudo += *dst >> 16;
8010c570:	8b 00                	mov    (%eax),%eax
    pseudo += *src >> 16;
8010c572:	8b 09                	mov    (%ecx),%ecx
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c574:	83 ec 0c             	sub    $0xc,%esp
8010c577:	6a 11                	push   $0x11
    pseudo += *dst >> 16;
8010c579:	89 c3                	mov    %eax,%ebx
    pseudo += *dst & 0xffff;
8010c57b:	0f b7 c0             	movzwl %ax,%eax
    pseudo += *dst >> 16;
8010c57e:	c1 eb 10             	shr    $0x10,%ebx
    pseudo += *dst & 0xffff;
8010c581:	01 d8                	add    %ebx,%eax
    pseudo += *src >> 16;
8010c583:	89 cb                	mov    %ecx,%ebx
8010c585:	c1 eb 10             	shr    $0x10,%ebx
    pseudo += *dst & 0xffff;
8010c588:	01 c3                	add    %eax,%ebx
    pseudo += *src & 0xffff;
8010c58a:	0f b7 c1             	movzwl %cx,%eax
    pseudo += *dst & 0xffff;
8010c58d:	01 c3                	add    %eax,%ebx
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c58f:	e8 cc c0 ff ff       	call   80108660 <hton16>
8010c594:	0f b7 c0             	movzwl %ax,%eax
8010c597:	01 d8                	add    %ebx,%eax
    pseudo += hton16(len);
8010c599:	0f b7 df             	movzwl %di,%ebx
8010c59c:	89 1c 24             	mov    %ebx,(%esp)
    pseudo += hton16((uint16_t)IP_PROTOCOL_UDP);
8010c59f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pseudo += hton16(len);
8010c5a2:	e8 b9 c0 ff ff       	call   80108660 <hton16>
    if (cksum16((uint16_t *)hdr, len, pseudo) != 0) {
8010c5a7:	83 c4 0c             	add    $0xc,%esp
    pseudo += hton16(len);
8010c5aa:	0f b7 c0             	movzwl %ax,%eax
8010c5ad:	03 45 dc             	add    -0x24(%ebp),%eax
    if (cksum16((uint16_t *)hdr, len, pseudo) != 0) {
8010c5b0:	50                   	push   %eax
8010c5b1:	53                   	push   %ebx
8010c5b2:	56                   	push   %esi
8010c5b3:	e8 48 c1 ff ff       	call   80108700 <cksum16>
8010c5b8:	83 c4 10             	add    $0x10,%esp
8010c5bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010c5be:	66 85 c0             	test   %ax,%ax
8010c5c1:	0f 85 b1 00 00 00    	jne    8010c678 <udp_rx+0x138>
    acquire(&udplock);
8010c5c7:	83 ec 0c             	sub    $0xc,%esp
8010c5ca:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c5cd:	bb a0 21 13 80       	mov    $0x801321a0,%ebx
    acquire(&udplock);
8010c5d2:	68 20 23 13 80       	push   $0x80132320
8010c5d7:	e8 d4 8a ff ff       	call   801050b0 <acquire>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c5dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    acquire(&udplock);
8010c5df:	83 c4 10             	add    $0x10,%esp
8010c5e2:	eb 13                	jmp    8010c5f7 <udp_rx+0xb7>
8010c5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        if (cb->used && (!cb->iface || cb->iface == iface) && cb->port == hdr->dport) {
8010c5e8:	39 c2                	cmp    %eax,%edx
8010c5ea:	74 18                	je     8010c604 <udp_rx+0xc4>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c5ec:	83 c3 18             	add    $0x18,%ebx
8010c5ef:	81 fb 20 23 13 80    	cmp    $0x80132320,%ebx
8010c5f5:	74 6b                	je     8010c662 <udp_rx+0x122>
        if (cb->used && (!cb->iface || cb->iface == iface) && cb->port == hdr->dport) {
8010c5f7:	8b 03                	mov    (%ebx),%eax
8010c5f9:	85 c0                	test   %eax,%eax
8010c5fb:	74 ef                	je     8010c5ec <udp_rx+0xac>
8010c5fd:	8b 43 04             	mov    0x4(%ebx),%eax
8010c600:	85 c0                	test   %eax,%eax
8010c602:	75 e4                	jne    8010c5e8 <udp_rx+0xa8>
8010c604:	0f b7 46 02          	movzwl 0x2(%esi),%eax
8010c608:	66 39 43 08          	cmp    %ax,0x8(%ebx)
8010c60c:	75 de                	jne    8010c5ec <udp_rx+0xac>
            data = (void*)kalloc();
8010c60e:	e8 fd 5e ff ff       	call   80102510 <kalloc>
8010c613:	89 c2                	mov    %eax,%edx
            if (!data) {
8010c615:	85 c0                	test   %eax,%eax
8010c617:	74 49                	je     8010c662 <udp_rx+0x122>
            queue_hdr->addr = *src;
8010c619:	8b 45 e0             	mov    -0x20(%ebp),%eax
            memcpy(queue_hdr + 1, hdr + 1, len - sizeof(struct udp_hdr));
8010c61c:	83 ec 04             	sub    $0x4,%esp
8010c61f:	83 c6 08             	add    $0x8,%esi
8010c622:	89 55 e4             	mov    %edx,-0x1c(%ebp)
            queue_hdr->addr = *src;
8010c625:	8b 00                	mov    (%eax),%eax
8010c627:	89 02                	mov    %eax,(%edx)
            queue_hdr->port = hdr->sport;
8010c629:	0f b7 46 f8          	movzwl -0x8(%esi),%eax
8010c62d:	66 89 42 04          	mov    %ax,0x4(%edx)
            queue_hdr->len = len - sizeof(struct udp_hdr);
8010c631:	8d 47 f8             	lea    -0x8(%edi),%eax
8010c634:	66 89 42 06          	mov    %ax,0x6(%edx)
            memcpy(queue_hdr + 1, hdr + 1, len - sizeof(struct udp_hdr));
8010c638:	8d 47 f8             	lea    -0x8(%edi),%eax
8010c63b:	50                   	push   %eax
8010c63c:	8d 42 08             	lea    0x8(%edx),%eax
8010c63f:	56                   	push   %esi
8010c640:	50                   	push   %eax
8010c641:	e8 7a 8c ff ff       	call   801052c0 <memcpy>
            queue_push(&cb->queue, data, sizeof(struct udp_queue_hdr) + (len - sizeof(struct udp_hdr)));
8010c646:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010c649:	83 c4 0c             	add    $0xc,%esp
8010c64c:	8d 43 0c             	lea    0xc(%ebx),%eax
8010c64f:	57                   	push   %edi
8010c650:	52                   	push   %edx
8010c651:	50                   	push   %eax
8010c652:	e8 19 c1 ff ff       	call   80108770 <queue_push>
            wakeup(cb);
8010c657:	89 1c 24             	mov    %ebx,(%esp)
8010c65a:	e8 d1 85 ff ff       	call   80104c30 <wakeup>
            release(&udplock);
8010c65f:	83 c4 10             	add    $0x10,%esp
8010c662:	c7 45 08 20 23 13 80 	movl   $0x80132320,0x8(%ebp)
}
8010c669:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c66c:	5b                   	pop    %ebx
8010c66d:	5e                   	pop    %esi
8010c66e:	5f                   	pop    %edi
8010c66f:	5d                   	pop    %ebp
            release(&udplock);
8010c670:	e9 fb 8a ff ff       	jmp    80105170 <release>
8010c675:	8d 76 00             	lea    0x0(%esi),%esi
        cprintf("udp checksum error\n");
8010c678:	c7 45 08 9a e7 10 80 	movl   $0x8010e79a,0x8(%ebp)
}
8010c67f:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c682:	5b                   	pop    %ebx
8010c683:	5e                   	pop    %esi
8010c684:	5f                   	pop    %edi
8010c685:	5d                   	pop    %ebp
        cprintf("udp checksum error\n");
8010c686:	e9 05 3d ff ff       	jmp    80100390 <cprintf>
8010c68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c68f:	90                   	nop

8010c690 <udp_dump>:
udp_dump (struct netif *netif, uint8_t *packet, size_t plen) {
8010c690:	f3 0f 1e fb          	endbr32 
8010c694:	55                   	push   %ebp
8010c695:	89 e5                	mov    %esp,%ebp
8010c697:	56                   	push   %esi
8010c698:	53                   	push   %ebx
    cprintf("   dev: %s (%s)\n", netif->dev->name, ip_addr_ntop(&iface->unicast, addr, sizeof(addr)));
8010c699:	8d 45 e8             	lea    -0x18(%ebp),%eax
udp_dump (struct netif *netif, uint8_t *packet, size_t plen) {
8010c69c:	83 ec 14             	sub    $0x14,%esp
8010c69f:	8b 75 08             	mov    0x8(%ebp),%esi
8010c6a2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    cprintf("   dev: %s (%s)\n", netif->dev->name, ip_addr_ntop(&iface->unicast, addr, sizeof(addr)));
8010c6a5:	6a 10                	push   $0x10
8010c6a7:	50                   	push   %eax
8010c6a8:	8d 46 0c             	lea    0xc(%esi),%eax
8010c6ab:	50                   	push   %eax
8010c6ac:	e8 cf ce ff ff       	call   80109580 <ip_addr_ntop>
8010c6b1:	83 c4 0c             	add    $0xc,%esp
8010c6b4:	50                   	push   %eax
8010c6b5:	8b 46 08             	mov    0x8(%esi),%eax
8010c6b8:	83 c0 0c             	add    $0xc,%eax
8010c6bb:	50                   	push   %eax
8010c6bc:	68 bd e2 10 80       	push   $0x8010e2bd
8010c6c1:	e8 ca 3c ff ff       	call   80100390 <cprintf>
    cprintf(" sport: %u\n", ntoh16(hdr->sport));
8010c6c6:	0f b7 03             	movzwl (%ebx),%eax
8010c6c9:	89 04 24             	mov    %eax,(%esp)
8010c6cc:	e8 cf bf ff ff       	call   801086a0 <ntoh16>
8010c6d1:	5a                   	pop    %edx
8010c6d2:	59                   	pop    %ecx
8010c6d3:	0f b7 c0             	movzwl %ax,%eax
8010c6d6:	50                   	push   %eax
8010c6d7:	68 ae e7 10 80       	push   $0x8010e7ae
8010c6dc:	e8 af 3c ff ff       	call   80100390 <cprintf>
    cprintf(" dport: %u\n", ntoh16(hdr->dport));
8010c6e1:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
8010c6e5:	89 04 24             	mov    %eax,(%esp)
8010c6e8:	e8 b3 bf ff ff       	call   801086a0 <ntoh16>
8010c6ed:	5e                   	pop    %esi
8010c6ee:	5a                   	pop    %edx
8010c6ef:	0f b7 c0             	movzwl %ax,%eax
8010c6f2:	50                   	push   %eax
8010c6f3:	68 ba e7 10 80       	push   $0x8010e7ba
8010c6f8:	e8 93 3c ff ff       	call   80100390 <cprintf>
    cprintf("   len: %u\n", ntoh16(hdr->len));
8010c6fd:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
8010c701:	89 04 24             	mov    %eax,(%esp)
8010c704:	e8 97 bf ff ff       	call   801086a0 <ntoh16>
8010c709:	59                   	pop    %ecx
8010c70a:	5e                   	pop    %esi
8010c70b:	0f b7 c0             	movzwl %ax,%eax
8010c70e:	50                   	push   %eax
8010c70f:	68 64 e4 10 80       	push   $0x8010e464
8010c714:	e8 77 3c ff ff       	call   80100390 <cprintf>
    cprintf("   sum: 0x%04x\n", ntoh16(hdr->len));
8010c719:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
8010c71d:	89 04 24             	mov    %eax,(%esp)
8010c720:	e8 7b bf ff ff       	call   801086a0 <ntoh16>
8010c725:	5a                   	pop    %edx
8010c726:	59                   	pop    %ecx
8010c727:	0f b7 c0             	movzwl %ax,%eax
8010c72a:	50                   	push   %eax
8010c72b:	68 a0 e4 10 80       	push   $0x8010e4a0
8010c730:	e8 5b 3c ff ff       	call   80100390 <cprintf>
    hexdump(packet, plen);
8010c735:	5e                   	pop    %esi
8010c736:	58                   	pop    %eax
8010c737:	ff 75 10             	pushl  0x10(%ebp)
8010c73a:	53                   	push   %ebx
8010c73b:	e8 d0 bd ff ff       	call   80108510 <hexdump>
}
8010c740:	83 c4 10             	add    $0x10,%esp
8010c743:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010c746:	5b                   	pop    %ebx
8010c747:	5e                   	pop    %esi
8010c748:	5d                   	pop    %ebp
8010c749:	c3                   	ret    
8010c74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010c750 <udp_api_open>:

int
udp_api_open (void) {
8010c750:	f3 0f 1e fb          	endbr32 
8010c754:	55                   	push   %ebp
8010c755:	89 e5                	mov    %esp,%ebp
8010c757:	53                   	push   %ebx
    struct udp_cb *cb;

    acquire(&udplock);
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c758:	bb a0 21 13 80       	mov    $0x801321a0,%ebx
udp_api_open (void) {
8010c75d:	83 ec 10             	sub    $0x10,%esp
    acquire(&udplock);
8010c760:	68 20 23 13 80       	push   $0x80132320
8010c765:	e8 46 89 ff ff       	call   801050b0 <acquire>
8010c76a:	83 c4 10             	add    $0x10,%esp
8010c76d:	8d 76 00             	lea    0x0(%esi),%esi
        if (!cb->used) {
8010c770:	8b 03                	mov    (%ebx),%eax
8010c772:	85 c0                	test   %eax,%eax
8010c774:	74 2a                	je     8010c7a0 <udp_api_open+0x50>
    for (cb = cb_table; cb < array_tailof(cb_table); cb++) {
8010c776:	83 c3 18             	add    $0x18,%ebx
8010c779:	81 fb 20 23 13 80    	cmp    $0x80132320,%ebx
8010c77f:	75 ef                	jne    8010c770 <udp_api_open+0x20>
            cb->used = 1;
            release(&udplock);
            return array_offset(cb_table, cb);
        }
    }
    release(&udplock);
8010c781:	83 ec 0c             	sub    $0xc,%esp
8010c784:	68 20 23 13 80       	push   $0x80132320
8010c789:	e8 e2 89 ff ff       	call   80105170 <release>
    return -1;
}
8010c78e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    return -1;
8010c791:	83 c4 10             	add    $0x10,%esp
8010c794:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010c799:	c9                   	leave  
8010c79a:	c3                   	ret    
8010c79b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c79f:	90                   	nop
            release(&udplock);
8010c7a0:	83 ec 0c             	sub    $0xc,%esp
            cb->used = 1;
8010c7a3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
            return array_offset(cb_table, cb);
8010c7a9:	81 eb a0 21 13 80    	sub    $0x801321a0,%ebx
            release(&udplock);
8010c7af:	68 20 23 13 80       	push   $0x80132320
8010c7b4:	e8 b7 89 ff ff       	call   80105170 <release>
            return array_offset(cb_table, cb);
8010c7b9:	89 d8                	mov    %ebx,%eax
8010c7bb:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
}
8010c7c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
            return array_offset(cb_table, cb);
8010c7c3:	f7 e2                	mul    %edx
8010c7c5:	83 c4 10             	add    $0x10,%esp
}
8010c7c8:	c9                   	leave  
            return array_offset(cb_table, cb);
8010c7c9:	89 d0                	mov    %edx,%eax
8010c7cb:	c1 e8 04             	shr    $0x4,%eax
}
8010c7ce:	c3                   	ret    
8010c7cf:	90                   	nop

8010c7d0 <udp_api_close>:

int
udp_api_close (int soc) {
8010c7d0:	f3 0f 1e fb          	endbr32 
8010c7d4:	55                   	push   %ebp
8010c7d5:	89 e5                	mov    %esp,%ebp
8010c7d7:	57                   	push   %edi
8010c7d8:	56                   	push   %esi
8010c7d9:	53                   	push   %ebx
8010c7da:	83 ec 0c             	sub    $0xc,%esp
8010c7dd:	8b 7d 08             	mov    0x8(%ebp),%edi
    struct udp_cb *cb;
    struct queue_entry *entry;

    if (soc < 0 || soc >= UDP_CB_TABLE_SIZE) {
8010c7e0:	83 ff 0f             	cmp    $0xf,%edi
8010c7e3:	0f 87 a8 00 00 00    	ja     8010c891 <udp_api_close+0xc1>
        return -1;
    }
    acquire(&udplock);
8010c7e9:	83 ec 0c             	sub    $0xc,%esp
    cb = &cb_table[soc];
    if (!cb->used) {
8010c7ec:	8d 34 7f             	lea    (%edi,%edi,2),%esi
    acquire(&udplock);
8010c7ef:	68 20 23 13 80       	push   $0x80132320
    if (!cb->used) {
8010c7f4:	c1 e6 03             	shl    $0x3,%esi
    acquire(&udplock);
8010c7f7:	e8 b4 88 ff ff       	call   801050b0 <acquire>
    if (!cb->used) {
8010c7fc:	8b 8e a0 21 13 80    	mov    -0x7fecde60(%esi),%ecx
8010c802:	8d 86 a0 21 13 80    	lea    -0x7fecde60(%esi),%eax
8010c808:	83 c4 10             	add    $0x10,%esp
8010c80b:	85 c9                	test   %ecx,%ecx
8010c80d:	0f 84 85 00 00 00    	je     8010c898 <udp_api_close+0xc8>
        release(&udplock);
        return -1;
    }
    cb->used = 0;
    cb->iface = NULL;
    cb->port = 0;
8010c813:	31 d2                	xor    %edx,%edx
    cb->iface = NULL;
8010c815:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    cb->used = 0;
8010c81c:	c7 86 a0 21 13 80 00 	movl   $0x0,-0x7fecde60(%esi)
8010c823:	00 00 00 
    while ((entry = queue_pop(&cb->queue)) != NULL) {
8010c826:	81 c6 ac 21 13 80    	add    $0x801321ac,%esi
    cb->port = 0;
8010c82c:	66 89 50 08          	mov    %dx,0x8(%eax)
    while ((entry = queue_pop(&cb->queue)) != NULL) {
8010c830:	eb 1b                	jmp    8010c84d <udp_api_close+0x7d>
8010c832:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        kfree((char*)entry->data);
8010c838:	83 ec 0c             	sub    $0xc,%esp
8010c83b:	ff 33                	pushl  (%ebx)
8010c83d:	e8 0e 5b ff ff       	call   80102350 <kfree>
        kfree((char*)entry);
8010c842:	89 1c 24             	mov    %ebx,(%esp)
8010c845:	e8 06 5b ff ff       	call   80102350 <kfree>
8010c84a:	83 c4 10             	add    $0x10,%esp
    while ((entry = queue_pop(&cb->queue)) != NULL) {
8010c84d:	83 ec 0c             	sub    $0xc,%esp
8010c850:	56                   	push   %esi
8010c851:	e8 8a bf ff ff       	call   801087e0 <queue_pop>
8010c856:	83 c4 10             	add    $0x10,%esp
8010c859:	89 c3                	mov    %eax,%ebx
8010c85b:	85 c0                	test   %eax,%eax
8010c85d:	75 d9                	jne    8010c838 <udp_api_close+0x68>
    }
    cb->queue.next = cb->queue.tail = NULL;
8010c85f:	8d 04 7f             	lea    (%edi,%edi,2),%eax
    release(&udplock);
8010c862:	83 ec 0c             	sub    $0xc,%esp
    cb->queue.next = cb->queue.tail = NULL;
8010c865:	8d 04 c5 a0 21 13 80 	lea    -0x7fecde60(,%eax,8),%eax
8010c86c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
8010c873:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    release(&udplock);
8010c87a:	68 20 23 13 80       	push   $0x80132320
8010c87f:	e8 ec 88 ff ff       	call   80105170 <release>
    return 0;
8010c884:	83 c4 10             	add    $0x10,%esp
8010c887:	31 c0                	xor    %eax,%eax
}
8010c889:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c88c:	5b                   	pop    %ebx
8010c88d:	5e                   	pop    %esi
8010c88e:	5f                   	pop    %edi
8010c88f:	5d                   	pop    %ebp
8010c890:	c3                   	ret    
        return -1;
8010c891:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c896:	eb f1                	jmp    8010c889 <udp_api_close+0xb9>
        release(&udplock);
8010c898:	83 ec 0c             	sub    $0xc,%esp
8010c89b:	68 20 23 13 80       	push   $0x80132320
8010c8a0:	e8 cb 88 ff ff       	call   80105170 <release>
        return -1;
8010c8a5:	83 c4 10             	add    $0x10,%esp
8010c8a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c8ad:	eb da                	jmp    8010c889 <udp_api_close+0xb9>
8010c8af:	90                   	nop

8010c8b0 <udp_api_bind>:

int
udp_api_bind (int soc, struct sockaddr *addr, int addrlen) {
8010c8b0:	f3 0f 1e fb          	endbr32 
8010c8b4:	55                   	push   %ebp
8010c8b5:	89 e5                	mov    %esp,%ebp
8010c8b7:	57                   	push   %edi
8010c8b8:	56                   	push   %esi
8010c8b9:	53                   	push   %ebx
8010c8ba:	83 ec 0c             	sub    $0xc,%esp
8010c8bd:	8b 7d 08             	mov    0x8(%ebp),%edi
8010c8c0:	8b 75 0c             	mov    0xc(%ebp),%esi
    struct sockaddr_in *sin;
    struct udp_cb *cb, *tmp;
    struct netif *iface = NULL;

    if (soc < 0 || soc >= UDP_CB_TABLE_SIZE) {
8010c8c3:	83 ff 0f             	cmp    $0xf,%edi
8010c8c6:	0f 87 e4 00 00 00    	ja     8010c9b0 <udp_api_bind+0x100>
        return -1;
    }
    if (addr->sa_family != AF_INET) {
8010c8cc:	66 83 3e 02          	cmpw   $0x2,(%esi)
8010c8d0:	0f 85 da 00 00 00    	jne    8010c9b0 <udp_api_bind+0x100>
        return -1;
    }
    sin = (struct sockaddr_in *)addr;
    acquire(&udplock);
8010c8d6:	83 ec 0c             	sub    $0xc,%esp
8010c8d9:	68 20 23 13 80       	push   $0x80132320
8010c8de:	e8 cd 87 ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010c8e3:	8d 04 7f             	lea    (%edi,%edi,2),%eax
    if (!cb->used) {
8010c8e6:	83 c4 10             	add    $0x10,%esp
    cb = &cb_table[soc];
8010c8e9:	c1 e0 03             	shl    $0x3,%eax
    if (!cb->used) {
8010c8ec:	8b 88 a0 21 13 80    	mov    -0x7fecde60(%eax),%ecx
    cb = &cb_table[soc];
8010c8f2:	8d 98 a0 21 13 80    	lea    -0x7fecde60(%eax),%ebx
    if (!cb->used) {
8010c8f8:	85 c9                	test   %ecx,%ecx
8010c8fa:	74 47                	je     8010c943 <udp_api_bind+0x93>
        release(&udplock);
        return -1;
    }
    if (sin->sin_addr) {
8010c8fc:	8b 56 04             	mov    0x4(%esi),%edx
    struct netif *iface = NULL;
8010c8ff:	31 c0                	xor    %eax,%eax
    if (sin->sin_addr) {
8010c901:	85 d2                	test   %edx,%edx
8010c903:	0f 85 87 00 00 00    	jne    8010c990 <udp_api_bind+0xe0>
        if (!iface) {
            release(&udplock);
            return -1;
        }
    }
    for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010c909:	ba a0 21 13 80       	mov    $0x801321a0,%edx
8010c90e:	eb 1b                	jmp    8010c92b <udp_api_bind+0x7b>
        if (tmp->used && tmp != cb && (!iface || !tmp->iface || tmp->iface == iface) && tmp->port == sin->sin_port) {
8010c910:	8b 4a 04             	mov    0x4(%edx),%ecx
8010c913:	39 c1                	cmp    %eax,%ecx
8010c915:	74 22                	je     8010c939 <udp_api_bind+0x89>
8010c917:	85 c9                	test   %ecx,%ecx
8010c919:	74 1e                	je     8010c939 <udp_api_bind+0x89>
8010c91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c91f:	90                   	nop
    for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010c920:	83 c2 18             	add    $0x18,%edx
8010c923:	81 fa 20 23 13 80    	cmp    $0x80132320,%edx
8010c929:	74 35                	je     8010c960 <udp_api_bind+0xb0>
        if (tmp->used && tmp != cb && (!iface || !tmp->iface || tmp->iface == iface) && tmp->port == sin->sin_port) {
8010c92b:	8b 0a                	mov    (%edx),%ecx
8010c92d:	85 c9                	test   %ecx,%ecx
8010c92f:	74 ef                	je     8010c920 <udp_api_bind+0x70>
8010c931:	39 d3                	cmp    %edx,%ebx
8010c933:	74 eb                	je     8010c920 <udp_api_bind+0x70>
8010c935:	85 c0                	test   %eax,%eax
8010c937:	75 d7                	jne    8010c910 <udp_api_bind+0x60>
8010c939:	0f b7 4e 02          	movzwl 0x2(%esi),%ecx
8010c93d:	66 39 4a 08          	cmp    %cx,0x8(%edx)
8010c941:	75 dd                	jne    8010c920 <udp_api_bind+0x70>
        release(&udplock);
8010c943:	83 ec 0c             	sub    $0xc,%esp
8010c946:	68 20 23 13 80       	push   $0x80132320
8010c94b:	e8 20 88 ff ff       	call   80105170 <release>
        return -1;
8010c950:	83 c4 10             	add    $0x10,%esp
    }
    cb->iface = iface;
    cb->port = sin->sin_port;
    release(&udplock);
    return 0;
}
8010c953:	8d 65 f4             	lea    -0xc(%ebp),%esp
        return -1;
8010c956:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010c95b:	5b                   	pop    %ebx
8010c95c:	5e                   	pop    %esi
8010c95d:	5f                   	pop    %edi
8010c95e:	5d                   	pop    %ebp
8010c95f:	c3                   	ret    
    cb->iface = iface;
8010c960:	8d 14 7f             	lea    (%edi,%edi,2),%edx
    release(&udplock);
8010c963:	83 ec 0c             	sub    $0xc,%esp
    cb->iface = iface;
8010c966:	8d 14 d5 a0 21 13 80 	lea    -0x7fecde60(,%edx,8),%edx
8010c96d:	89 42 04             	mov    %eax,0x4(%edx)
    cb->port = sin->sin_port;
8010c970:	0f b7 46 02          	movzwl 0x2(%esi),%eax
8010c974:	66 89 42 08          	mov    %ax,0x8(%edx)
    release(&udplock);
8010c978:	68 20 23 13 80       	push   $0x80132320
8010c97d:	e8 ee 87 ff ff       	call   80105170 <release>
    return 0;
8010c982:	83 c4 10             	add    $0x10,%esp
8010c985:	31 c0                	xor    %eax,%eax
}
8010c987:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c98a:	5b                   	pop    %ebx
8010c98b:	5e                   	pop    %esi
8010c98c:	5f                   	pop    %edi
8010c98d:	5d                   	pop    %ebp
8010c98e:	c3                   	ret    
8010c98f:	90                   	nop
        iface = ip_netif_by_addr(&sin->sin_addr);
8010c990:	83 ec 0c             	sub    $0xc,%esp
8010c993:	8d 46 04             	lea    0x4(%esi),%eax
8010c996:	50                   	push   %eax
8010c997:	e8 c4 d3 ff ff       	call   80109d60 <ip_netif_by_addr>
        if (!iface) {
8010c99c:	83 c4 10             	add    $0x10,%esp
8010c99f:	85 c0                	test   %eax,%eax
8010c9a1:	0f 85 62 ff ff ff    	jne    8010c909 <udp_api_bind+0x59>
8010c9a7:	eb 9a                	jmp    8010c943 <udp_api_bind+0x93>
8010c9a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        return -1;
8010c9b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c9b5:	eb d0                	jmp    8010c987 <udp_api_bind+0xd7>
8010c9b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c9be:	66 90                	xchg   %ax,%ax

8010c9c0 <udp_api_bind_iface>:

int
udp_api_bind_iface (int soc, struct netif *iface, uint16_t port) {
8010c9c0:	f3 0f 1e fb          	endbr32 
8010c9c4:	55                   	push   %ebp
8010c9c5:	89 e5                	mov    %esp,%ebp
8010c9c7:	57                   	push   %edi
8010c9c8:	56                   	push   %esi
8010c9c9:	53                   	push   %ebx
8010c9ca:	83 ec 1c             	sub    $0x1c,%esp
8010c9cd:	8b 45 10             	mov    0x10(%ebp),%eax
8010c9d0:	8b 75 08             	mov    0x8(%ebp),%esi
8010c9d3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010c9d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct udp_cb *cb, *tmp;

    if (soc < 0 || soc >= UDP_CB_TABLE_SIZE) {
8010c9d9:	83 fe 0f             	cmp    $0xf,%esi
8010c9dc:	0f 87 b5 00 00 00    	ja     8010ca97 <udp_api_bind_iface+0xd7>
        return -1;
    }
    acquire(&udplock);
8010c9e2:	83 ec 0c             	sub    $0xc,%esp
8010c9e5:	89 c7                	mov    %eax,%edi
8010c9e7:	68 20 23 13 80       	push   $0x80132320
8010c9ec:	e8 bf 86 ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
8010c9f1:	8d 04 76             	lea    (%esi,%esi,2),%eax
    if (!cb->used) {
8010c9f4:	83 c4 10             	add    $0x10,%esp
    cb = &cb_table[soc];
8010c9f7:	c1 e0 03             	shl    $0x3,%eax
8010c9fa:	8d 90 a0 21 13 80    	lea    -0x7fecde60(%eax),%edx
    if (!cb->used) {
8010ca00:	8b 80 a0 21 13 80    	mov    -0x7fecde60(%eax),%eax
8010ca06:	85 c0                	test   %eax,%eax
8010ca08:	74 3c                	je     8010ca46 <udp_api_bind_iface+0x86>
        release(&udplock);
        return -1;
    }
    for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010ca0a:	b8 a0 21 13 80       	mov    $0x801321a0,%eax
8010ca0f:	eb 21                	jmp    8010ca32 <udp_api_bind_iface+0x72>
8010ca11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        if (tmp->used && tmp != cb && (!iface || !tmp->iface || tmp->iface == iface) && tmp->port == port) {
8010ca18:	8b 48 04             	mov    0x4(%eax),%ecx
8010ca1b:	39 d9                	cmp    %ebx,%ecx
8010ca1d:	74 21                	je     8010ca40 <udp_api_bind_iface+0x80>
8010ca1f:	85 c9                	test   %ecx,%ecx
8010ca21:	74 1d                	je     8010ca40 <udp_api_bind_iface+0x80>
8010ca23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ca27:	90                   	nop
    for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010ca28:	83 c0 18             	add    $0x18,%eax
8010ca2b:	3d 20 23 13 80       	cmp    $0x80132320,%eax
8010ca30:	74 36                	je     8010ca68 <udp_api_bind_iface+0xa8>
        if (tmp->used && tmp != cb && (!iface || !tmp->iface || tmp->iface == iface) && tmp->port == port) {
8010ca32:	8b 08                	mov    (%eax),%ecx
8010ca34:	85 c9                	test   %ecx,%ecx
8010ca36:	74 f0                	je     8010ca28 <udp_api_bind_iface+0x68>
8010ca38:	39 c2                	cmp    %eax,%edx
8010ca3a:	74 ec                	je     8010ca28 <udp_api_bind_iface+0x68>
8010ca3c:	85 db                	test   %ebx,%ebx
8010ca3e:	75 d8                	jne    8010ca18 <udp_api_bind_iface+0x58>
8010ca40:	66 39 78 08          	cmp    %di,0x8(%eax)
8010ca44:	75 e2                	jne    8010ca28 <udp_api_bind_iface+0x68>
        release(&udplock);
8010ca46:	83 ec 0c             	sub    $0xc,%esp
8010ca49:	68 20 23 13 80       	push   $0x80132320
8010ca4e:	e8 1d 87 ff ff       	call   80105170 <release>
        return -1;
8010ca53:	83 c4 10             	add    $0x10,%esp
    }
    cb->iface = iface;
    cb->port = port;
    release(&udplock);
    return 0;
}
8010ca56:	8d 65 f4             	lea    -0xc(%ebp),%esp
        return -1;
8010ca59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010ca5e:	5b                   	pop    %ebx
8010ca5f:	5e                   	pop    %esi
8010ca60:	5f                   	pop    %edi
8010ca61:	5d                   	pop    %ebp
8010ca62:	c3                   	ret    
8010ca63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ca67:	90                   	nop
    cb->port = port;
8010ca68:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edi
    cb->iface = iface;
8010ca6c:	8d 04 76             	lea    (%esi,%esi,2),%eax
    release(&udplock);
8010ca6f:	83 ec 0c             	sub    $0xc,%esp
    cb->iface = iface;
8010ca72:	8d 04 c5 a0 21 13 80 	lea    -0x7fecde60(,%eax,8),%eax
8010ca79:	89 58 04             	mov    %ebx,0x4(%eax)
    cb->port = port;
8010ca7c:	66 89 78 08          	mov    %di,0x8(%eax)
    release(&udplock);
8010ca80:	68 20 23 13 80       	push   $0x80132320
8010ca85:	e8 e6 86 ff ff       	call   80105170 <release>
    return 0;
8010ca8a:	83 c4 10             	add    $0x10,%esp
8010ca8d:	31 c0                	xor    %eax,%eax
}
8010ca8f:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010ca92:	5b                   	pop    %ebx
8010ca93:	5e                   	pop    %esi
8010ca94:	5f                   	pop    %edi
8010ca95:	5d                   	pop    %ebp
8010ca96:	c3                   	ret    
        return -1;
8010ca97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010ca9c:	eb f1                	jmp    8010ca8f <udp_api_bind_iface+0xcf>
8010ca9e:	66 90                	xchg   %ax,%ax

8010caa0 <udp_api_recvfrom>:

ssize_t
udp_api_recvfrom (int soc, uint8_t *buf, size_t size, struct sockaddr *addr, int *addrlen) {
8010caa0:	f3 0f 1e fb          	endbr32 
8010caa4:	55                   	push   %ebp
8010caa5:	89 e5                	mov    %esp,%ebp
8010caa7:	57                   	push   %edi
8010caa8:	56                   	push   %esi
8010caa9:	53                   	push   %ebx
8010caaa:	83 ec 0c             	sub    $0xc,%esp
8010caad:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010cab0:	8b 45 18             	mov    0x18(%ebp),%eax
    struct queue_entry *entry;
    int ret = 0;
    ssize_t len;
    struct udp_queue_hdr *queue_hdr;

    if (soc < 0 || soc >= UDP_CB_TABLE_SIZE) {
8010cab3:	83 fb 0f             	cmp    $0xf,%ebx
8010cab6:	0f 87 d8 00 00 00    	ja     8010cb94 <udp_api_recvfrom+0xf4>
        return -1;
    }
    if (addr) {
8010cabc:	8b 55 14             	mov    0x14(%ebp),%edx
8010cabf:	85 d2                	test   %edx,%edx
8010cac1:	74 0f                	je     8010cad2 <udp_api_recvfrom+0x32>
        if (*addrlen < sizeof(struct sockaddr_in)) {
8010cac3:	83 38 07             	cmpl   $0x7,(%eax)
8010cac6:	0f 86 c8 00 00 00    	jbe    8010cb94 <udp_api_recvfrom+0xf4>
            return -1;
        }
        *addrlen = sizeof(struct sockaddr_in);
8010cacc:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
        peer = (struct sockaddr_in *)addr;
    }
    acquire(&udplock);
8010cad2:	83 ec 0c             	sub    $0xc,%esp
8010cad5:	8d 1c 5b             	lea    (%ebx,%ebx,2),%ebx
8010cad8:	68 20 23 13 80       	push   $0x80132320
8010cadd:	c1 e3 03             	shl    $0x3,%ebx
    cb = &cb_table[soc];
8010cae0:	8d b3 a0 21 13 80    	lea    -0x7fecde60(%ebx),%esi
    acquire(&udplock);
8010cae6:	e8 c5 85 ff ff       	call   801050b0 <acquire>
    if (!cb->used) {
8010caeb:	8b bb a0 21 13 80    	mov    -0x7fecde60(%ebx),%edi
8010caf1:	83 c4 10             	add    $0x10,%esp
8010caf4:	85 ff                	test   %edi,%edi
8010caf6:	0f 84 9f 00 00 00    	je     8010cb9b <udp_api_recvfrom+0xfb>
        release(&udplock);
        return -1;
    }
    while (!(entry = queue_pop(&cb->queue))) {
8010cafc:	81 c3 ac 21 13 80    	add    $0x801321ac,%ebx
8010cb02:	eb 15                	jmp    8010cb19 <udp_api_recvfrom+0x79>
8010cb04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        sleep(cb, &udplock);
8010cb08:	83 ec 08             	sub    $0x8,%esp
8010cb0b:	68 20 23 13 80       	push   $0x80132320
8010cb10:	56                   	push   %esi
8010cb11:	e8 5a 7f ff ff       	call   80104a70 <sleep>
8010cb16:	83 c4 10             	add    $0x10,%esp
    while (!(entry = queue_pop(&cb->queue))) {
8010cb19:	83 ec 0c             	sub    $0xc,%esp
8010cb1c:	53                   	push   %ebx
8010cb1d:	e8 be bc ff ff       	call   801087e0 <queue_pop>
8010cb22:	83 c4 10             	add    $0x10,%esp
8010cb25:	89 c7                	mov    %eax,%edi
8010cb27:	85 c0                	test   %eax,%eax
8010cb29:	74 dd                	je     8010cb08 <udp_api_recvfrom+0x68>
    }
    release(&udplock);
8010cb2b:	83 ec 0c             	sub    $0xc,%esp
8010cb2e:	68 20 23 13 80       	push   $0x80132320
8010cb33:	e8 38 86 ff ff       	call   80105170 <release>
    queue_hdr = (struct udp_queue_hdr *)entry->data;
    if (peer) {
8010cb38:	8b 5d 14             	mov    0x14(%ebp),%ebx
    queue_hdr = (struct udp_queue_hdr *)entry->data;
8010cb3b:	8b 07                	mov    (%edi),%eax
    if (peer) {
8010cb3d:	83 c4 10             	add    $0x10,%esp
8010cb40:	85 db                	test   %ebx,%ebx
8010cb42:	74 18                	je     8010cb5c <udp_api_recvfrom+0xbc>
        peer->sin_family = AF_INET;
8010cb44:	8b 55 14             	mov    0x14(%ebp),%edx
8010cb47:	b9 02 00 00 00       	mov    $0x2,%ecx
8010cb4c:	66 89 0a             	mov    %cx,(%edx)
        peer->sin_addr = queue_hdr->addr;
8010cb4f:	8b 08                	mov    (%eax),%ecx
8010cb51:	89 4a 04             	mov    %ecx,0x4(%edx)
        peer->sin_port = queue_hdr->port;
8010cb54:	0f b7 48 04          	movzwl 0x4(%eax),%ecx
8010cb58:	66 89 4a 02          	mov    %cx,0x2(%edx)
    }
    len = MIN(size, queue_hdr->len);
8010cb5c:	0f b7 58 06          	movzwl 0x6(%eax),%ebx
8010cb60:	3b 5d 10             	cmp    0x10(%ebp),%ebx
8010cb63:	0f 47 5d 10          	cmova  0x10(%ebp),%ebx
    memcpy(buf, queue_hdr + 1, len);
8010cb67:	83 ec 04             	sub    $0x4,%esp
8010cb6a:	83 c0 08             	add    $0x8,%eax
8010cb6d:	53                   	push   %ebx
8010cb6e:	50                   	push   %eax
8010cb6f:	ff 75 0c             	pushl  0xc(%ebp)
8010cb72:	e8 49 87 ff ff       	call   801052c0 <memcpy>
    kfree((char*)entry->data);
8010cb77:	58                   	pop    %eax
8010cb78:	ff 37                	pushl  (%edi)
8010cb7a:	e8 d1 57 ff ff       	call   80102350 <kfree>
    kfree((char*)entry);
8010cb7f:	89 3c 24             	mov    %edi,(%esp)
8010cb82:	e8 c9 57 ff ff       	call   80102350 <kfree>
    return len;
8010cb87:	83 c4 10             	add    $0x10,%esp
}
8010cb8a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cb8d:	89 d8                	mov    %ebx,%eax
8010cb8f:	5b                   	pop    %ebx
8010cb90:	5e                   	pop    %esi
8010cb91:	5f                   	pop    %edi
8010cb92:	5d                   	pop    %ebp
8010cb93:	c3                   	ret    
        return -1;
8010cb94:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
8010cb99:	eb ef                	jmp    8010cb8a <udp_api_recvfrom+0xea>
        release(&udplock);
8010cb9b:	83 ec 0c             	sub    $0xc,%esp
        return -1;
8010cb9e:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
        release(&udplock);
8010cba3:	68 20 23 13 80       	push   $0x80132320
8010cba8:	e8 c3 85 ff ff       	call   80105170 <release>
        return -1;
8010cbad:	83 c4 10             	add    $0x10,%esp
8010cbb0:	eb d8                	jmp    8010cb8a <udp_api_recvfrom+0xea>
8010cbb2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cbb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010cbc0 <udp_api_sendto>:

ssize_t
udp_api_sendto (int soc, uint8_t *buf, size_t len, struct sockaddr *addr, int addrlen) {
8010cbc0:	f3 0f 1e fb          	endbr32 
8010cbc4:	55                   	push   %ebp
8010cbc5:	89 e5                	mov    %esp,%ebp
8010cbc7:	57                   	push   %edi
8010cbc8:	56                   	push   %esi
8010cbc9:	53                   	push   %ebx
8010cbca:	83 ec 2c             	sub    $0x2c,%esp
8010cbcd:	8b 45 0c             	mov    0xc(%ebp),%eax
8010cbd0:	8b 55 08             	mov    0x8(%ebp),%edx
8010cbd3:	8b 4d 14             	mov    0x14(%ebp),%ecx
8010cbd6:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010cbd9:	8b 45 10             	mov    0x10(%ebp),%eax
8010cbdc:	89 55 e0             	mov    %edx,-0x20(%ebp)
8010cbdf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8010cbe2:	8b 45 18             	mov    0x18(%ebp),%eax
8010cbe5:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    uint16_t sport;

    if (soc < 0 || soc >= UDP_CB_TABLE_SIZE) {
        return -1;
    }
    if (!addr || addr->sa_family != AF_INET || addrlen < sizeof(struct sockaddr_in)) {
8010cbe8:	83 fa 0f             	cmp    $0xf,%edx
8010cbeb:	0f 87 58 01 00 00    	ja     8010cd49 <udp_api_sendto+0x189>
8010cbf1:	85 c9                	test   %ecx,%ecx
8010cbf3:	0f 84 50 01 00 00    	je     8010cd49 <udp_api_sendto+0x189>
8010cbf9:	66 83 39 02          	cmpw   $0x2,(%ecx)
8010cbfd:	0f 85 46 01 00 00    	jne    8010cd49 <udp_api_sendto+0x189>
8010cc03:	83 f8 07             	cmp    $0x7,%eax
8010cc06:	0f 86 3d 01 00 00    	jbe    8010cd49 <udp_api_sendto+0x189>
        return -1;
    }
    peer = (struct sockaddr_in *)addr;
    acquire(&udplock);
8010cc0c:	83 ec 0c             	sub    $0xc,%esp
8010cc0f:	89 d6                	mov    %edx,%esi
8010cc11:	68 20 23 13 80       	push   $0x80132320
8010cc16:	e8 95 84 ff ff       	call   801050b0 <acquire>
    cb = &cb_table[soc];
    if (!cb->used) {
8010cc1b:	8d 04 76             	lea    (%esi,%esi,2),%eax
8010cc1e:	83 c4 10             	add    $0x10,%esp
8010cc21:	c1 e0 03             	shl    $0x3,%eax
8010cc24:	8d 90 a0 21 13 80    	lea    -0x7fecde60(%eax),%edx
8010cc2a:	8b 80 a0 21 13 80    	mov    -0x7fecde60(%eax),%eax
8010cc30:	85 c0                	test   %eax,%eax
8010cc32:	0f 84 01 01 00 00    	je     8010cd39 <udp_api_sendto+0x179>
        release(&udplock);
        return -1;
    }
    iface = cb->iface;
8010cc38:	8b 42 04             	mov    0x4(%edx),%eax
8010cc3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (!iface) {
8010cc3e:	85 c0                	test   %eax,%eax
8010cc40:	0f 84 d6 00 00 00    	je     8010cd1c <udp_api_sendto+0x15c>
        if (!iface) {
            release(&udplock);
            return -1;
        }
    }
    if (!cb->port) {
8010cc46:	8b 45 e0             	mov    -0x20(%ebp),%eax
        for (p = UDP_SOURCE_PORT_MIN; p <= UDP_SOURCE_PORT_MAX; p++) {
8010cc49:	be 00 c0 00 00       	mov    $0xc000,%esi
    if (!cb->port) {
8010cc4e:	8d 04 40             	lea    (%eax,%eax,2),%eax
8010cc51:	0f b7 1c c5 a8 21 13 	movzwl -0x7fecde58(,%eax,8),%ebx
8010cc58:	80 
8010cc59:	66 85 db             	test   %bx,%bx
8010cc5c:	0f 85 7f 00 00 00    	jne    8010cce1 <udp_api_sendto+0x121>
8010cc62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            for (tmp = cb_table; tmp < array_tailof(cb_table); tmp++) {
8010cc68:	bf a0 21 13 80       	mov    $0x801321a0,%edi
8010cc6d:	eb 0c                	jmp    8010cc7b <udp_api_sendto+0xbb>
8010cc6f:	90                   	nop
8010cc70:	83 c7 18             	add    $0x18,%edi
8010cc73:	81 ff 20 23 13 80    	cmp    $0x80132320,%edi
8010cc79:	74 45                	je     8010ccc0 <udp_api_sendto+0x100>
                if (tmp->port == hton16((uint16_t)p) && (!tmp->iface || tmp->iface == iface)) {
8010cc7b:	83 ec 0c             	sub    $0xc,%esp
8010cc7e:	0f b7 5f 08          	movzwl 0x8(%edi),%ebx
8010cc82:	56                   	push   %esi
8010cc83:	e8 d8 b9 ff ff       	call   80108660 <hton16>
8010cc88:	83 c4 10             	add    $0x10,%esp
8010cc8b:	66 39 c3             	cmp    %ax,%bx
8010cc8e:	75 e0                	jne    8010cc70 <udp_api_sendto+0xb0>
8010cc90:	8b 47 04             	mov    0x4(%edi),%eax
8010cc93:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
8010cc96:	74 04                	je     8010cc9c <udp_api_sendto+0xdc>
8010cc98:	85 c0                	test   %eax,%eax
8010cc9a:	75 d4                	jne    8010cc70 <udp_api_sendto+0xb0>
                    break;
                }
            }
            if (tmp == array_tailof(cb_table)) {
8010cc9c:	81 ff 20 23 13 80    	cmp    $0x80132320,%edi
8010cca2:	74 1c                	je     8010ccc0 <udp_api_sendto+0x100>
        for (p = UDP_SOURCE_PORT_MIN; p <= UDP_SOURCE_PORT_MAX; p++) {
8010cca4:	83 c6 01             	add    $0x1,%esi
8010cca7:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
8010ccad:	75 b9                	jne    8010cc68 <udp_api_sendto+0xa8>
8010ccaf:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010ccb2:	8d 04 40             	lea    (%eax,%eax,2),%eax
8010ccb5:	0f b7 1c c5 a8 21 13 	movzwl -0x7fecde58(,%eax,8),%ebx
8010ccbc:	80 
8010ccbd:	eb 1d                	jmp    8010ccdc <udp_api_sendto+0x11c>
8010ccbf:	90                   	nop
                cb->port = hton16((uint16_t)p);
8010ccc0:	83 ec 0c             	sub    $0xc,%esp
8010ccc3:	56                   	push   %esi
8010ccc4:	e8 97 b9 ff ff       	call   80108660 <hton16>
                break;
8010ccc9:	83 c4 10             	add    $0x10,%esp
                cb->port = hton16((uint16_t)p);
8010cccc:	89 c3                	mov    %eax,%ebx
8010ccce:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010ccd1:	8d 04 40             	lea    (%eax,%eax,2),%eax
8010ccd4:	66 89 1c c5 a8 21 13 	mov    %bx,-0x7fecde58(,%eax,8)
8010ccdb:	80 
            }
        }
        if (!cb->port) {
8010ccdc:	66 85 db             	test   %bx,%bx
8010ccdf:	74 58                	je     8010cd39 <udp_api_sendto+0x179>
            release(&udplock);
            return -1;
        }
    }
    sport = cb->port;
    release(&udplock);
8010cce1:	83 ec 0c             	sub    $0xc,%esp
8010cce4:	68 20 23 13 80       	push   $0x80132320
8010cce9:	e8 82 84 ff ff       	call   80105170 <release>
    return udp_tx(iface, sport, buf, len, &peer->sin_addr, peer->sin_port);
8010ccee:	8b 4d dc             	mov    -0x24(%ebp),%ecx
8010ccf1:	83 c4 10             	add    $0x10,%esp
8010ccf4:	0f b7 d3             	movzwl %bx,%edx
8010ccf7:	0f b7 41 02          	movzwl 0x2(%ecx),%eax
8010ccfb:	89 45 10             	mov    %eax,0x10(%ebp)
8010ccfe:	8d 41 04             	lea    0x4(%ecx),%eax
8010cd01:	8b 4d d8             	mov    -0x28(%ebp),%ecx
8010cd04:	89 45 0c             	mov    %eax,0xc(%ebp)
8010cd07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8010cd0a:	89 45 08             	mov    %eax,0x8(%ebp)
8010cd0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
8010cd10:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cd13:	5b                   	pop    %ebx
8010cd14:	5e                   	pop    %esi
8010cd15:	5f                   	pop    %edi
8010cd16:	5d                   	pop    %ebp
    return udp_tx(iface, sport, buf, len, &peer->sin_addr, peer->sin_port);
8010cd17:	e9 44 f7 ff ff       	jmp    8010c460 <udp_tx>
        iface = ip_netif_by_peer(&peer->sin_addr);
8010cd1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010cd1f:	83 ec 0c             	sub    $0xc,%esp
8010cd22:	83 c0 04             	add    $0x4,%eax
8010cd25:	50                   	push   %eax
8010cd26:	e8 95 d0 ff ff       	call   80109dc0 <ip_netif_by_peer>
        if (!iface) {
8010cd2b:	83 c4 10             	add    $0x10,%esp
        iface = ip_netif_by_peer(&peer->sin_addr);
8010cd2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (!iface) {
8010cd31:	85 c0                	test   %eax,%eax
8010cd33:	0f 85 0d ff ff ff    	jne    8010cc46 <udp_api_sendto+0x86>
        release(&udplock);
8010cd39:	83 ec 0c             	sub    $0xc,%esp
8010cd3c:	68 20 23 13 80       	push   $0x80132320
8010cd41:	e8 2a 84 ff ff       	call   80105170 <release>
        return -1;
8010cd46:	83 c4 10             	add    $0x10,%esp
}
8010cd49:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cd4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010cd51:	5b                   	pop    %ebx
8010cd52:	5e                   	pop    %esi
8010cd53:	5f                   	pop    %edi
8010cd54:	5d                   	pop    %ebp
8010cd55:	c3                   	ret    
8010cd56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cd5d:	8d 76 00             	lea    0x0(%esi),%esi

8010cd60 <udp_init>:

int
udp_init (void) {
8010cd60:	f3 0f 1e fb          	endbr32 
8010cd64:	55                   	push   %ebp
8010cd65:	89 e5                	mov    %esp,%ebp
8010cd67:	83 ec 10             	sub    $0x10,%esp
    initlock(&udplock, "udp");
8010cd6a:	68 c6 e7 10 80       	push   $0x8010e7c6
8010cd6f:	68 20 23 13 80       	push   $0x80132320
8010cd74:	e8 b7 81 ff ff       	call   80104f30 <initlock>
    ip_add_protocol(IP_PROTOCOL_UDP, udp_rx);
8010cd79:	58                   	pop    %eax
8010cd7a:	5a                   	pop    %edx
8010cd7b:	68 40 c5 10 80       	push   $0x8010c540
8010cd80:	6a 11                	push   $0x11
8010cd82:	e8 b9 d1 ff ff       	call   80109f40 <ip_add_protocol>
    return 0;
}
8010cd87:	31 c0                	xor    %eax,%eax
8010cd89:	c9                   	leave  
8010cd8a:	c3                   	ret    
8010cd8b:	66 90                	xchg   %ax,%ax
8010cd8d:	66 90                	xchg   %ax,%ax
8010cd8f:	90                   	nop

8010cd90 <__udivdi3>:
8010cd90:	f3 0f 1e fb          	endbr32 
8010cd94:	55                   	push   %ebp
8010cd95:	57                   	push   %edi
8010cd96:	56                   	push   %esi
8010cd97:	53                   	push   %ebx
8010cd98:	83 ec 1c             	sub    $0x1c,%esp
8010cd9b:	8b 54 24 3c          	mov    0x3c(%esp),%edx
8010cd9f:	8b 6c 24 30          	mov    0x30(%esp),%ebp
8010cda3:	8b 74 24 34          	mov    0x34(%esp),%esi
8010cda7:	8b 5c 24 38          	mov    0x38(%esp),%ebx
8010cdab:	85 d2                	test   %edx,%edx
8010cdad:	75 19                	jne    8010cdc8 <__udivdi3+0x38>
8010cdaf:	39 f3                	cmp    %esi,%ebx
8010cdb1:	76 4d                	jbe    8010ce00 <__udivdi3+0x70>
8010cdb3:	31 ff                	xor    %edi,%edi
8010cdb5:	89 e8                	mov    %ebp,%eax
8010cdb7:	89 f2                	mov    %esi,%edx
8010cdb9:	f7 f3                	div    %ebx
8010cdbb:	89 fa                	mov    %edi,%edx
8010cdbd:	83 c4 1c             	add    $0x1c,%esp
8010cdc0:	5b                   	pop    %ebx
8010cdc1:	5e                   	pop    %esi
8010cdc2:	5f                   	pop    %edi
8010cdc3:	5d                   	pop    %ebp
8010cdc4:	c3                   	ret    
8010cdc5:	8d 76 00             	lea    0x0(%esi),%esi
8010cdc8:	39 f2                	cmp    %esi,%edx
8010cdca:	76 14                	jbe    8010cde0 <__udivdi3+0x50>
8010cdcc:	31 ff                	xor    %edi,%edi
8010cdce:	31 c0                	xor    %eax,%eax
8010cdd0:	89 fa                	mov    %edi,%edx
8010cdd2:	83 c4 1c             	add    $0x1c,%esp
8010cdd5:	5b                   	pop    %ebx
8010cdd6:	5e                   	pop    %esi
8010cdd7:	5f                   	pop    %edi
8010cdd8:	5d                   	pop    %ebp
8010cdd9:	c3                   	ret    
8010cdda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010cde0:	0f bd fa             	bsr    %edx,%edi
8010cde3:	83 f7 1f             	xor    $0x1f,%edi
8010cde6:	75 48                	jne    8010ce30 <__udivdi3+0xa0>
8010cde8:	39 f2                	cmp    %esi,%edx
8010cdea:	72 06                	jb     8010cdf2 <__udivdi3+0x62>
8010cdec:	31 c0                	xor    %eax,%eax
8010cdee:	39 eb                	cmp    %ebp,%ebx
8010cdf0:	77 de                	ja     8010cdd0 <__udivdi3+0x40>
8010cdf2:	b8 01 00 00 00       	mov    $0x1,%eax
8010cdf7:	eb d7                	jmp    8010cdd0 <__udivdi3+0x40>
8010cdf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ce00:	89 d9                	mov    %ebx,%ecx
8010ce02:	85 db                	test   %ebx,%ebx
8010ce04:	75 0b                	jne    8010ce11 <__udivdi3+0x81>
8010ce06:	b8 01 00 00 00       	mov    $0x1,%eax
8010ce0b:	31 d2                	xor    %edx,%edx
8010ce0d:	f7 f3                	div    %ebx
8010ce0f:	89 c1                	mov    %eax,%ecx
8010ce11:	31 d2                	xor    %edx,%edx
8010ce13:	89 f0                	mov    %esi,%eax
8010ce15:	f7 f1                	div    %ecx
8010ce17:	89 c6                	mov    %eax,%esi
8010ce19:	89 e8                	mov    %ebp,%eax
8010ce1b:	89 f7                	mov    %esi,%edi
8010ce1d:	f7 f1                	div    %ecx
8010ce1f:	89 fa                	mov    %edi,%edx
8010ce21:	83 c4 1c             	add    $0x1c,%esp
8010ce24:	5b                   	pop    %ebx
8010ce25:	5e                   	pop    %esi
8010ce26:	5f                   	pop    %edi
8010ce27:	5d                   	pop    %ebp
8010ce28:	c3                   	ret    
8010ce29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ce30:	89 f9                	mov    %edi,%ecx
8010ce32:	b8 20 00 00 00       	mov    $0x20,%eax
8010ce37:	29 f8                	sub    %edi,%eax
8010ce39:	d3 e2                	shl    %cl,%edx
8010ce3b:	89 54 24 08          	mov    %edx,0x8(%esp)
8010ce3f:	89 c1                	mov    %eax,%ecx
8010ce41:	89 da                	mov    %ebx,%edx
8010ce43:	d3 ea                	shr    %cl,%edx
8010ce45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
8010ce49:	09 d1                	or     %edx,%ecx
8010ce4b:	89 f2                	mov    %esi,%edx
8010ce4d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
8010ce51:	89 f9                	mov    %edi,%ecx
8010ce53:	d3 e3                	shl    %cl,%ebx
8010ce55:	89 c1                	mov    %eax,%ecx
8010ce57:	d3 ea                	shr    %cl,%edx
8010ce59:	89 f9                	mov    %edi,%ecx
8010ce5b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
8010ce5f:	89 eb                	mov    %ebp,%ebx
8010ce61:	d3 e6                	shl    %cl,%esi
8010ce63:	89 c1                	mov    %eax,%ecx
8010ce65:	d3 eb                	shr    %cl,%ebx
8010ce67:	09 de                	or     %ebx,%esi
8010ce69:	89 f0                	mov    %esi,%eax
8010ce6b:	f7 74 24 08          	divl   0x8(%esp)
8010ce6f:	89 d6                	mov    %edx,%esi
8010ce71:	89 c3                	mov    %eax,%ebx
8010ce73:	f7 64 24 0c          	mull   0xc(%esp)
8010ce77:	39 d6                	cmp    %edx,%esi
8010ce79:	72 15                	jb     8010ce90 <__udivdi3+0x100>
8010ce7b:	89 f9                	mov    %edi,%ecx
8010ce7d:	d3 e5                	shl    %cl,%ebp
8010ce7f:	39 c5                	cmp    %eax,%ebp
8010ce81:	73 04                	jae    8010ce87 <__udivdi3+0xf7>
8010ce83:	39 d6                	cmp    %edx,%esi
8010ce85:	74 09                	je     8010ce90 <__udivdi3+0x100>
8010ce87:	89 d8                	mov    %ebx,%eax
8010ce89:	31 ff                	xor    %edi,%edi
8010ce8b:	e9 40 ff ff ff       	jmp    8010cdd0 <__udivdi3+0x40>
8010ce90:	8d 43 ff             	lea    -0x1(%ebx),%eax
8010ce93:	31 ff                	xor    %edi,%edi
8010ce95:	e9 36 ff ff ff       	jmp    8010cdd0 <__udivdi3+0x40>
8010ce9a:	66 90                	xchg   %ax,%ax
8010ce9c:	66 90                	xchg   %ax,%ax
8010ce9e:	66 90                	xchg   %ax,%ax

8010cea0 <__umoddi3>:
8010cea0:	f3 0f 1e fb          	endbr32 
8010cea4:	55                   	push   %ebp
8010cea5:	57                   	push   %edi
8010cea6:	56                   	push   %esi
8010cea7:	53                   	push   %ebx
8010cea8:	83 ec 1c             	sub    $0x1c,%esp
8010ceab:	8b 44 24 3c          	mov    0x3c(%esp),%eax
8010ceaf:	8b 74 24 30          	mov    0x30(%esp),%esi
8010ceb3:	8b 5c 24 34          	mov    0x34(%esp),%ebx
8010ceb7:	8b 7c 24 38          	mov    0x38(%esp),%edi
8010cebb:	85 c0                	test   %eax,%eax
8010cebd:	75 19                	jne    8010ced8 <__umoddi3+0x38>
8010cebf:	39 df                	cmp    %ebx,%edi
8010cec1:	76 5d                	jbe    8010cf20 <__umoddi3+0x80>
8010cec3:	89 f0                	mov    %esi,%eax
8010cec5:	89 da                	mov    %ebx,%edx
8010cec7:	f7 f7                	div    %edi
8010cec9:	89 d0                	mov    %edx,%eax
8010cecb:	31 d2                	xor    %edx,%edx
8010cecd:	83 c4 1c             	add    $0x1c,%esp
8010ced0:	5b                   	pop    %ebx
8010ced1:	5e                   	pop    %esi
8010ced2:	5f                   	pop    %edi
8010ced3:	5d                   	pop    %ebp
8010ced4:	c3                   	ret    
8010ced5:	8d 76 00             	lea    0x0(%esi),%esi
8010ced8:	89 f2                	mov    %esi,%edx
8010ceda:	39 d8                	cmp    %ebx,%eax
8010cedc:	76 12                	jbe    8010cef0 <__umoddi3+0x50>
8010cede:	89 f0                	mov    %esi,%eax
8010cee0:	89 da                	mov    %ebx,%edx
8010cee2:	83 c4 1c             	add    $0x1c,%esp
8010cee5:	5b                   	pop    %ebx
8010cee6:	5e                   	pop    %esi
8010cee7:	5f                   	pop    %edi
8010cee8:	5d                   	pop    %ebp
8010cee9:	c3                   	ret    
8010ceea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010cef0:	0f bd e8             	bsr    %eax,%ebp
8010cef3:	83 f5 1f             	xor    $0x1f,%ebp
8010cef6:	75 50                	jne    8010cf48 <__umoddi3+0xa8>
8010cef8:	39 d8                	cmp    %ebx,%eax
8010cefa:	0f 82 e0 00 00 00    	jb     8010cfe0 <__umoddi3+0x140>
8010cf00:	89 d9                	mov    %ebx,%ecx
8010cf02:	39 f7                	cmp    %esi,%edi
8010cf04:	0f 86 d6 00 00 00    	jbe    8010cfe0 <__umoddi3+0x140>
8010cf0a:	89 d0                	mov    %edx,%eax
8010cf0c:	89 ca                	mov    %ecx,%edx
8010cf0e:	83 c4 1c             	add    $0x1c,%esp
8010cf11:	5b                   	pop    %ebx
8010cf12:	5e                   	pop    %esi
8010cf13:	5f                   	pop    %edi
8010cf14:	5d                   	pop    %ebp
8010cf15:	c3                   	ret    
8010cf16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cf1d:	8d 76 00             	lea    0x0(%esi),%esi
8010cf20:	89 fd                	mov    %edi,%ebp
8010cf22:	85 ff                	test   %edi,%edi
8010cf24:	75 0b                	jne    8010cf31 <__umoddi3+0x91>
8010cf26:	b8 01 00 00 00       	mov    $0x1,%eax
8010cf2b:	31 d2                	xor    %edx,%edx
8010cf2d:	f7 f7                	div    %edi
8010cf2f:	89 c5                	mov    %eax,%ebp
8010cf31:	89 d8                	mov    %ebx,%eax
8010cf33:	31 d2                	xor    %edx,%edx
8010cf35:	f7 f5                	div    %ebp
8010cf37:	89 f0                	mov    %esi,%eax
8010cf39:	f7 f5                	div    %ebp
8010cf3b:	89 d0                	mov    %edx,%eax
8010cf3d:	31 d2                	xor    %edx,%edx
8010cf3f:	eb 8c                	jmp    8010cecd <__umoddi3+0x2d>
8010cf41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cf48:	89 e9                	mov    %ebp,%ecx
8010cf4a:	ba 20 00 00 00       	mov    $0x20,%edx
8010cf4f:	29 ea                	sub    %ebp,%edx
8010cf51:	d3 e0                	shl    %cl,%eax
8010cf53:	89 44 24 08          	mov    %eax,0x8(%esp)
8010cf57:	89 d1                	mov    %edx,%ecx
8010cf59:	89 f8                	mov    %edi,%eax
8010cf5b:	d3 e8                	shr    %cl,%eax
8010cf5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
8010cf61:	89 54 24 04          	mov    %edx,0x4(%esp)
8010cf65:	8b 54 24 04          	mov    0x4(%esp),%edx
8010cf69:	09 c1                	or     %eax,%ecx
8010cf6b:	89 d8                	mov    %ebx,%eax
8010cf6d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
8010cf71:	89 e9                	mov    %ebp,%ecx
8010cf73:	d3 e7                	shl    %cl,%edi
8010cf75:	89 d1                	mov    %edx,%ecx
8010cf77:	d3 e8                	shr    %cl,%eax
8010cf79:	89 e9                	mov    %ebp,%ecx
8010cf7b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
8010cf7f:	d3 e3                	shl    %cl,%ebx
8010cf81:	89 c7                	mov    %eax,%edi
8010cf83:	89 d1                	mov    %edx,%ecx
8010cf85:	89 f0                	mov    %esi,%eax
8010cf87:	d3 e8                	shr    %cl,%eax
8010cf89:	89 e9                	mov    %ebp,%ecx
8010cf8b:	89 fa                	mov    %edi,%edx
8010cf8d:	d3 e6                	shl    %cl,%esi
8010cf8f:	09 d8                	or     %ebx,%eax
8010cf91:	f7 74 24 08          	divl   0x8(%esp)
8010cf95:	89 d1                	mov    %edx,%ecx
8010cf97:	89 f3                	mov    %esi,%ebx
8010cf99:	f7 64 24 0c          	mull   0xc(%esp)
8010cf9d:	89 c6                	mov    %eax,%esi
8010cf9f:	89 d7                	mov    %edx,%edi
8010cfa1:	39 d1                	cmp    %edx,%ecx
8010cfa3:	72 06                	jb     8010cfab <__umoddi3+0x10b>
8010cfa5:	75 10                	jne    8010cfb7 <__umoddi3+0x117>
8010cfa7:	39 c3                	cmp    %eax,%ebx
8010cfa9:	73 0c                	jae    8010cfb7 <__umoddi3+0x117>
8010cfab:	2b 44 24 0c          	sub    0xc(%esp),%eax
8010cfaf:	1b 54 24 08          	sbb    0x8(%esp),%edx
8010cfb3:	89 d7                	mov    %edx,%edi
8010cfb5:	89 c6                	mov    %eax,%esi
8010cfb7:	89 ca                	mov    %ecx,%edx
8010cfb9:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecx
8010cfbe:	29 f3                	sub    %esi,%ebx
8010cfc0:	19 fa                	sbb    %edi,%edx
8010cfc2:	89 d0                	mov    %edx,%eax
8010cfc4:	d3 e0                	shl    %cl,%eax
8010cfc6:	89 e9                	mov    %ebp,%ecx
8010cfc8:	d3 eb                	shr    %cl,%ebx
8010cfca:	d3 ea                	shr    %cl,%edx
8010cfcc:	09 d8                	or     %ebx,%eax
8010cfce:	83 c4 1c             	add    $0x1c,%esp
8010cfd1:	5b                   	pop    %ebx
8010cfd2:	5e                   	pop    %esi
8010cfd3:	5f                   	pop    %edi
8010cfd4:	5d                   	pop    %ebp
8010cfd5:	c3                   	ret    
8010cfd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cfdd:	8d 76 00             	lea    0x0(%esi),%esi
8010cfe0:	29 fe                	sub    %edi,%esi
8010cfe2:	19 c3                	sbb    %eax,%ebx
8010cfe4:	89 f2                	mov    %esi,%edx
8010cfe6:	89 d9                	mov    %ebx,%ecx
8010cfe8:	e9 1d ff ff ff       	jmp    8010cf0a <__umoddi3+0x6a>
